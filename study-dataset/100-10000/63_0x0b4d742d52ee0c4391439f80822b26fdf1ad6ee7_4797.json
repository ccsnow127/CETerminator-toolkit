[
    {
        "transactions": 4797,
        "function_num": 63
    },
    {
        "name": "getInitializationBlock",
        "visibility": "public",
        "args": [],
        "func": "function getInitializationBlock() public view returns (uint256) {\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\n    }",
        "comments": [
            "/**",
            "    * @return Block number in which the contract was initialized",
            "    */",
            ""
        ],
        "comt": "/**\n    * @return Block number in which the contract was initialized\n    */\n",
        "@return1": "Block number in which the contract was initialized",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasInitialized",
        "visibility": "public",
        "args": [],
        "func": "function hasInitialized() public view returns (bool) {\n        uint256 initializationBlock = getInitializationBlock();\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\n    }",
        "comments": [
            "/**",
            "    * @return Whether the contract has been initialized by the time of the current block",
            "    */",
            ""
        ],
        "comt": "/**\n    * @return Whether the contract has been initialized by the time of the current block\n    */\n",
        "@return1": "Whether the contract has been initialized by the time of the current block",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isPetrified",
        "visibility": "public",
        "args": [],
        "func": "function isPetrified() public view returns (bool) {\n        return getInitializationBlock() == PETRIFIED_BLOCK;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferToVault",
        "visibility": "external",
        "args": [
            {
                "name": "_token",
                "type": "address"
            }
        ],
        "func": "function transferToVault(address _token) external {\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\n        address vault = getRecoveryVault();\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\n\n        uint256 balance;\n        if (_token == ETH) {\n            balance = address(this).balance;\n            vault.transfer(balance);\n        } else {\n            ERC20 token = ERC20(_token);\n            balance = token.staticBalanceOf(this);\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\n        }\n\n        emit RecoverToVault(vault, _token, balance);\n    }",
        "comments": [
            "/**",
            "     * @notice Send funds to recovery Vault. This contract should never receive funds,",
            "     *         but in case it does, this function allows one to recover them.",
            "     * @param _token Token balance to be sent to recovery vault.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\n     *         but in case it does, this function allows one to recover them.\n     * @param _token Token balance to be sent to recovery vault.\n     */\n",
        "@notice": "Send funds to recovery Vault. This contract should never receive funds, * but in case it does, this function allows one to recover them.",
        "@param1": "_token Token balance to be sent to recovery vault.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowRecoverability",
        "visibility": "public",
        "args": [
            {
                "name": "token",
                "type": "address"
            }
        ],
        "func": "function allowRecoverability(address token) public view returns (bool) {\n        return true;\n    }",
        "comments": [
            "/**",
            "    * @dev By default deriving from AragonApp makes it recoverable",
            "    * @param token Token address that would be recovered",
            "    * @return bool whether the app allows the recovery",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev By default deriving from AragonApp makes it recoverable\n    * @param token Token address that would be recovered\n    * @return bool whether the app allows the recovery\n    */\n",
        "@dev": "By default deriving from AragonApp makes it recoverable",
        "@param1": "token Token address that would be recovered",
        "@return1": "bool whether the app allows the recovery",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "kernel",
        "visibility": "public",
        "args": [],
        "func": "function kernel() public view returns (IKernel) {\n        return IKernel(KERNEL_POSITION.getStorageAddress());\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "appId",
        "visibility": "public",
        "args": [],
        "func": "function appId() public view returns (bytes32) {\n        return APP_ID_POSITION.getStorageBytes32();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isDepositable",
        "visibility": "public",
        "args": [],
        "func": "function isDepositable() public view returns (bool) {\n        return DEPOSITABLE_POSITION.getStorageBool();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "implementation",
        "visibility": "public",
        "args": [],
        "func": "function implementation() public view returns (address) {\n        return getAppBase(appId());\n    }",
        "comments": [
            "/**",
            "     * @dev ERC897, the address the proxy would delegate calls to",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev ERC897, the address the proxy would delegate calls to\n     */\n",
        "@dev": "ERC897, the address the proxy would delegate calls to",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "proxyType",
        "visibility": "public",
        "args": [],
        "func": "function proxyType() public pure returns (uint256 proxyTypeId) {\n        return UPGRADEABLE;\n    }",
        "comments": [
            "/**",
            "     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\n     */\n",
        "@dev": "ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "implementation",
        "visibility": "public",
        "args": [],
        "func": "function implementation() public view returns (address) {\n        return pinnedCode();\n    }",
        "comments": [
            "/**",
            "     * @dev ERC897, the address the proxy would delegate calls to",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev ERC897, the address the proxy would delegate calls to\n     */\n",
        "@dev": "ERC897, the address the proxy would delegate calls to",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "proxyType",
        "visibility": "public",
        "args": [],
        "func": "function proxyType() public pure returns (uint256 proxyTypeId) {\n        return FORWARDING;\n    }",
        "comments": [
            "/**",
            "     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\n     */\n",
        "@dev": "ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "newAppProxy",
        "visibility": "public",
        "args": [
            {
                "name": "_kernel",
                "type": "IKernel"
            },
            {
                "name": "_appId",
                "type": "bytes32"
            }
        ],
        "func": "function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\n        return newAppProxy(_kernel, _appId, new bytes(0));\n    }",
        "comments": [
            "/**",
            "    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId`",
            "    * @param _kernel App's Kernel reference",
            "    * @param _appId Identifier for app",
            "    * @return AppProxyUpgradeable",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @return AppProxyUpgradeable\n    */\n",
        "@notice": "Create a new upgradeable app instance on `_kernel` with identifier `_appId`",
        "@param1": "_kernel App's Kernel reference",
        "@param2": "_appId Identifier for app",
        "@return1": "AppProxyUpgradeable",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "newAppProxy",
        "visibility": "public",
        "args": [
            {
                "name": "_kernel",
                "type": "IKernel"
            },
            {
                "name": "_appId",
                "type": "bytes32"
            },
            {
                "name": "_initializePayload",
                "type": "bytes"
            }
        ],
        "func": "function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\n        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\n        emit NewAppProxy(address(proxy), true, _appId);\n        return proxy;\n    }",
        "comments": [
            "/**",
            "    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`",
            "    * @param _kernel App's Kernel reference",
            "    * @param _appId Identifier for app",
            "    * @return AppProxyUpgradeable",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @return AppProxyUpgradeable\n    */\n",
        "@notice": "Create a new upgradeable app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`",
        "@param1": "_kernel App's Kernel reference",
        "@param2": "_appId Identifier for app",
        "@return1": "AppProxyUpgradeable",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "newAppProxyPinned",
        "visibility": "public",
        "args": [
            {
                "name": "_kernel",
                "type": "IKernel"
            },
            {
                "name": "_appId",
                "type": "bytes32"
            }
        ],
        "func": "function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\n        return newAppProxyPinned(_kernel, _appId, new bytes(0));\n    }",
        "comments": [
            "/**",
            "    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId`",
            "    * @param _kernel App's Kernel reference",
            "    * @param _appId Identifier for app",
            "    * @return AppProxyPinned",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @return AppProxyPinned\n    */\n",
        "@notice": "Create a new pinned app instance on `_kernel` with identifier `_appId`",
        "@param1": "_kernel App's Kernel reference",
        "@param2": "_appId Identifier for app",
        "@return1": "AppProxyPinned",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "newAppProxyPinned",
        "visibility": "public",
        "args": [
            {
                "name": "_kernel",
                "type": "IKernel"
            },
            {
                "name": "_appId",
                "type": "bytes32"
            },
            {
                "name": "_initializePayload",
                "type": "bytes"
            }
        ],
        "func": "function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\n        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\n        emit NewAppProxy(address(proxy), false, _appId);\n        return proxy;\n    }",
        "comments": [
            "/**",
            "    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`",
            "    * @param _kernel App's Kernel reference",
            "    * @param _appId Identifier for app",
            "    * @param _initializePayload Proxy initialization payload",
            "    * @return AppProxyPinned",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\n    * @param _kernel App's Kernel reference\n    * @param _appId Identifier for app\n    * @param _initializePayload Proxy initialization payload\n    * @return AppProxyPinned\n    */\n",
        "@notice": "Create a new pinned app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`",
        "@param1": "_kernel App's Kernel reference",
        "@param2": "_appId Identifier for app",
        "@param3": "_initializePayload Proxy initialization payload",
        "@return1": "AppProxyPinned",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "_baseAcl",
                "type": "IACL"
            },
            {
                "name": "_permissionsCreator",
                "type": "address"
            }
        ],
        "func": "function initialize(IACL _baseAcl, address _permissionsCreator) public onlyInit {\n        initialized();\n\n        // Set ACL base\n        _setApp(KERNEL_APP_BASES_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, _baseAcl);\n\n        // Create ACL instance and attach it as the default ACL app\n        IACL acl = IACL(newAppProxy(this, KERNEL_DEFAULT_ACL_APP_ID));\n        acl.initialize(_permissionsCreator);\n        _setApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, acl);\n\n        recoveryVaultAppId = KERNEL_DEFAULT_VAULT_APP_ID;\n    }",
        "comments": [
            "/**",
            "    * @dev Initialize can only be called once. It saves the block number in which it was initialized.",
            "    * @notice Initialize this kernel instance along with its ACL and set `_permissionsCreator` as the entity that can create other permissions",
            "    * @param _baseAcl Address of base ACL app",
            "    * @param _permissionsCreator Entity that will be given permission over createPermission",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\n    * @notice Initialize this kernel instance along with its ACL and set `_permissionsCreator` as the entity that can create other permissions\n    * @param _baseAcl Address of base ACL app\n    * @param _permissionsCreator Entity that will be given permission over createPermission\n    */\n",
        "@dev": "Initialize can only be called once. It saves the block number in which it was initialized.",
        "@notice": "Initialize this kernel instance along with its ACL and set `_permissionsCreator` as the entity that can create other permissions",
        "@param1": "_baseAcl Address of base ACL app",
        "@param2": "_permissionsCreator Entity that will be given permission over createPermission",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "newAppInstance",
        "visibility": "public",
        "args": [
            {
                "name": "_appId",
                "type": "bytes32"
            },
            {
                "name": "_appBase",
                "type": "address"
            }
        ],
        "func": "function newAppInstance(bytes32 _appId, address _appBase)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        return newAppInstance(_appId, _appBase, new bytes(0), false);\n    }",
        "comments": [
            "/**",
            "    * @dev Create a new instance of an app linked to this kernel",
            "    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`",
            "    * @param _appId Identifier for app",
            "    * @param _appBase Address of the app's base implementation",
            "    * @return AppProxy instance",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Create a new instance of an app linked to this kernel\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @return AppProxy instance\n    */\n",
        "@dev": "Create a new instance of an app linked to this kernel",
        "@notice": "Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`",
        "@param1": "_appId Identifier for app",
        "@param2": "_appBase Address of the app's base implementation",
        "@return1": "AppProxy instance",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "newAppInstance",
        "visibility": "public",
        "args": [
            {
                "name": "_appId",
                "type": "bytes32"
            },
            {
                "name": "_appBase",
                "type": "address"
            },
            {
                "name": "_initializePayload",
                "type": "bytes"
            },
            {
                "name": "_setDefault",
                "type": "bool"
            }
        ],
        "func": "function newAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\n        appProxy = newAppProxy(this, _appId, _initializePayload);\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\n        // and it will only succeed if sender has permissions to set something to the namespace.\n        if (_setDefault) {\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\n        }\n    }",
        "comments": [
            "/**",
            "    * @dev Create a new instance of an app linked to this kernel and set its base",
            "    *      implementation if it was not already set",
            "    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`",
            "    * @param _appId Identifier for app",
            "    * @param _appBase Address of the app's base implementation",
            "    * @param _initializePayload Payload for call made by the proxy during its construction to initialize",
            "    * @param _setDefault Whether the app proxy app is the default one.",
            "    *        Useful when the Kernel needs to know of an instance of a particular app,",
            "    *        like Vault for escape hatch mechanism.",
            "    * @return AppProxy instance",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Create a new instance of an app linked to this kernel and set its base\n    *      implementation if it was not already set\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\n    * @param _setDefault Whether the app proxy app is the default one.\n    *        Useful when the Kernel needs to know of an instance of a particular app,\n    *        like Vault for escape hatch mechanism.\n    * @return AppProxy instance\n    */\n",
        "@dev": "Create a new instance of an app linked to this kernel and set its base * implementation if it was not already set",
        "@notice": "Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`",
        "@param1": "_appId Identifier for app",
        "@param2": "_appBase Address of the app's base implementation",
        "@param3": "_initializePayload Payload for call made by the proxy during its construction to initialize",
        "@param4": "_setDefault Whether the app proxy app is the default one. * Useful when the Kernel needs to know of an instance of a particular app, * like Vault for escape hatch mechanism.",
        "@return1": "AppProxy instance",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "newPinnedAppInstance",
        "visibility": "public",
        "args": [
            {
                "name": "_appId",
                "type": "bytes32"
            },
            {
                "name": "_appBase",
                "type": "address"
            }
        ],
        "func": "function newPinnedAppInstance(bytes32 _appId, address _appBase)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        return newPinnedAppInstance(_appId, _appBase, new bytes(0), false);\n    }",
        "comments": [
            "/**",
            "    * @dev Create a new pinned instance of an app linked to this kernel",
            "    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`.",
            "    * @param _appId Identifier for app",
            "    * @param _appBase Address of the app's base implementation",
            "    * @return AppProxy instance",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Create a new pinned instance of an app linked to this kernel\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`.\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @return AppProxy instance\n    */\n",
        "@dev": "Create a new pinned instance of an app linked to this kernel",
        "@notice": "Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`.",
        "@param1": "_appId Identifier for app",
        "@param2": "_appBase Address of the app's base implementation",
        "@return1": "AppProxy instance",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "newPinnedAppInstance",
        "visibility": "public",
        "args": [
            {
                "name": "_appId",
                "type": "bytes32"
            },
            {
                "name": "_appBase",
                "type": "address"
            },
            {
                "name": "_initializePayload",
                "type": "bytes"
            },
            {
                "name": "_setDefault",
                "type": "bool"
            }
        ],
        "func": "function newPinnedAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\n        returns (ERCProxy appProxy)\n    {\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\n        appProxy = newAppProxyPinned(this, _appId, _initializePayload);\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\n        // and it will only succeed if sender has permissions to set something to the namespace.\n        if (_setDefault) {\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\n        }\n    }",
        "comments": [
            "/**",
            "    * @dev Create a new pinned instance of an app linked to this kernel and set",
            "    *      its base implementation if it was not already set",
            "    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`",
            "    * @param _appId Identifier for app",
            "    * @param _appBase Address of the app's base implementation",
            "    * @param _initializePayload Payload for call made by the proxy during its construction to initialize",
            "    * @param _setDefault Whether the app proxy app is the default one.",
            "    *        Useful when the Kernel needs to know of an instance of a particular app,",
            "    *        like Vault for escape hatch mechanism.",
            "    * @return AppProxy instance",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Create a new pinned instance of an app linked to this kernel and set\n    *      its base implementation if it was not already set\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\n    * @param _appId Identifier for app\n    * @param _appBase Address of the app's base implementation\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\n    * @param _setDefault Whether the app proxy app is the default one.\n    *        Useful when the Kernel needs to know of an instance of a particular app,\n    *        like Vault for escape hatch mechanism.\n    * @return AppProxy instance\n    */\n",
        "@dev": "Create a new pinned instance of an app linked to this kernel and set * its base implementation if it was not already set",
        "@notice": "Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`",
        "@param1": "_appId Identifier for app",
        "@param2": "_appBase Address of the app's base implementation",
        "@param3": "_initializePayload Payload for call made by the proxy during its construction to initialize",
        "@param4": "_setDefault Whether the app proxy app is the default one. * Useful when the Kernel needs to know of an instance of a particular app, * like Vault for escape hatch mechanism.",
        "@return1": "AppProxy instance",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setApp",
        "visibility": "public",
        "args": [
            {
                "name": "_namespace",
                "type": "bytes32"
            },
            {
                "name": "_appId",
                "type": "bytes32"
            },
            {
                "name": "_app",
                "type": "address"
            }
        ],
        "func": "function setApp(bytes32 _namespace, bytes32 _appId, address _app)\n        public\n        auth(APP_MANAGER_ROLE, arr(_namespace, _appId))\n    {\n        _setApp(_namespace, _appId, _app);\n    }",
        "comments": [
            "/**",
            "    * @dev Set the resolving address of an app instance or base implementation",
            "    * @notice Set the resolving address of `_appId` in namespace `_namespace` to `_app`",
            "    * @param _namespace App namespace to use",
            "    * @param _appId Identifier for app",
            "    * @param _app Address of the app instance or base implementation",
            "    * @return ID of app",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Set the resolving address of an app instance or base implementation\n    * @notice Set the resolving address of `_appId` in namespace `_namespace` to `_app`\n    * @param _namespace App namespace to use\n    * @param _appId Identifier for app\n    * @param _app Address of the app instance or base implementation\n    * @return ID of app\n    */\n",
        "@dev": "Set the resolving address of an app instance or base implementation",
        "@notice": "Set the resolving address of `_appId` in namespace `_namespace` to `_app`",
        "@param1": "_namespace App namespace to use",
        "@param2": "_appId Identifier for app",
        "@param3": "_app Address of the app instance or base implementation",
        "@return1": "ID of app",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setRecoveryVaultAppId",
        "visibility": "public",
        "args": [
            {
                "name": "_recoveryVaultAppId",
                "type": "bytes32"
            }
        ],
        "func": "function setRecoveryVaultAppId(bytes32 _recoveryVaultAppId)\n        public\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_ADDR_NAMESPACE, _recoveryVaultAppId))\n    {\n        recoveryVaultAppId = _recoveryVaultAppId;\n    }",
        "comments": [
            "/**",
            "    * @dev Set the default vault id for the escape hatch mechanism",
            "    * @param _recoveryVaultAppId Identifier of the recovery vault app",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Set the default vault id for the escape hatch mechanism\n    * @param _recoveryVaultAppId Identifier of the recovery vault app\n    */\n",
        "@dev": "Set the default vault id for the escape hatch mechanism",
        "@param1": "_recoveryVaultAppId Identifier of the recovery vault app",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "CORE_NAMESPACE",
        "visibility": "external",
        "args": [],
        "func": "function CORE_NAMESPACE() external pure returns (bytes32) { return KERNEL_CORE_NAMESPACE; }",
        "comments": [
            "",
            "    // External access to default app id and namespace constants to mimic default getters for constants",
            "    /* solium-disable function-order, mixedcase */",
            "    "
        ],
        "comt": "\n    // External access to default app id and namespace constants to mimic default getters for constants\n    /* solium-disable function-order, mixedcase */\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "APP_BASES_NAMESPACE",
        "visibility": "external",
        "args": [],
        "func": "function APP_BASES_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_BASES_NAMESPACE; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "APP_ADDR_NAMESPACE",
        "visibility": "external",
        "args": [],
        "func": "function APP_ADDR_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_ADDR_NAMESPACE; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "KERNEL_APP_ID",
        "visibility": "external",
        "args": [],
        "func": "function KERNEL_APP_ID() external pure returns (bytes32) { return KERNEL_CORE_APP_ID; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "DEFAULT_ACL_APP_ID",
        "visibility": "external",
        "args": [],
        "func": "function DEFAULT_ACL_APP_ID() external pure returns (bytes32) { return KERNEL_DEFAULT_ACL_APP_ID; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getApp",
        "visibility": "public",
        "args": [
            {
                "name": "_namespace",
                "type": "bytes32"
            },
            {
                "name": "_appId",
                "type": "bytes32"
            }
        ],
        "func": "function getApp(bytes32 _namespace, bytes32 _appId) public view returns (address) {\n        return apps[_namespace][_appId];\n    }",
        "comments": [
            "/**",
            "    * @dev Get the address of an app instance or base implementation",
            "    * @param _namespace App namespace to use",
            "    * @param _appId Identifier for app",
            "    * @return Address of the app",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Get the address of an app instance or base implementation\n    * @param _namespace App namespace to use\n    * @param _appId Identifier for app\n    * @return Address of the app\n    */\n",
        "@dev": "Get the address of an app instance or base implementation",
        "@param1": "_namespace App namespace to use",
        "@param2": "_appId Identifier for app",
        "@return1": "Address of the app",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRecoveryVault",
        "visibility": "public",
        "args": [],
        "func": "function getRecoveryVault() public view returns (address) {\n        return apps[KERNEL_APP_ADDR_NAMESPACE][recoveryVaultAppId];\n    }",
        "comments": [
            "/**",
            "    * @dev Get the address of the recovery Vault instance (to recover funds)",
            "    * @return Address of the Vault",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Get the address of the recovery Vault instance (to recover funds)\n    * @return Address of the Vault\n    */\n",
        "@dev": "Get the address of the recovery Vault instance (to recover funds)",
        "@return1": "Address of the Vault",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "acl",
        "visibility": "public",
        "args": [],
        "func": "function acl() public view returns (IACL) {\n        return IACL(getApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID));\n    }",
        "comments": [
            "/**",
            "    * @dev Get the installed ACL app",
            "    * @return ACL app",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Get the installed ACL app\n    * @return ACL app\n    */\n",
        "@dev": "Get the installed ACL app",
        "@return1": "ACL app",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasPermission",
        "visibility": "public",
        "args": [
            {
                "name": "_who",
                "type": "address"
            },
            {
                "name": "_where",
                "type": "address"
            },
            {
                "name": "_what",
                "type": "bytes32"
            },
            {
                "name": "_how",
                "type": "bytes"
            }
        ],
        "func": "function hasPermission(address _who, address _where, bytes32 _what, bytes _how) public view returns (bool) {\n        IACL defaultAcl = acl();\n        return address(defaultAcl) != address(0) && // Poor man's initialization check (saves gas)\n            defaultAcl.hasPermission(_who, _where, _what, _how);\n    }",
        "comments": [
            "/**",
            "    * @dev Function called by apps to check ACL on kernel or to check permission status",
            "    * @param _who Sender of the original call",
            "    * @param _where Address of the app",
            "    * @param _what Identifier for a group of actions in app",
            "    * @param _how Extra data for ACL auth",
            "    * @return Boolean indicating whether the ACL allows the role or not.",
            "    *         Always returns false if the kernel hasn't been initialized yet.",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Function called by apps to check ACL on kernel or to check permission status\n    * @param _who Sender of the original call\n    * @param _where Address of the app\n    * @param _what Identifier for a group of actions in app\n    * @param _how Extra data for ACL auth\n    * @return Boolean indicating whether the ACL allows the role or not.\n    *         Always returns false if the kernel hasn't been initialized yet.\n    */\n",
        "@dev": "Function called by apps to check ACL on kernel or to check permission status",
        "@param1": "_who Sender of the original call",
        "@param2": "_where Address of the app",
        "@param3": "_what Identifier for a group of actions in app",
        "@param4": "_how Extra data for ACL auth",
        "@return1": "Boolean indicating whether the ACL allows the role or not. * Always returns false if the kernel hasn't been initialized yet.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "proxyType",
        "visibility": "public",
        "args": [],
        "func": "function proxyType() public pure returns (uint256 proxyTypeId) {\n        return UPGRADEABLE;\n    }",
        "comments": [
            "/**",
            "     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\n     */\n",
        "@dev": "ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "implementation",
        "visibility": "public",
        "args": [],
        "func": "function implementation() public view returns (address) {\n        return apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID];\n    }",
        "comments": [
            "/**",
            "    * @dev ERC897, the address the proxy would delegate calls to",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev ERC897, the address the proxy would delegate calls to\n    */\n",
        "@dev": "ERC897, the address the proxy would delegate calls to",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getEVMScriptExecutor",
        "visibility": "public",
        "args": [
            {
                "name": "_script",
                "type": "bytes"
            }
        ],
        "func": "function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getEVMScriptRegistry",
        "visibility": "public",
        "args": [],
        "func": "function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\n        return IEVMScriptRegistry(registryAddr);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "canPerform",
        "visibility": "public",
        "args": [
            {
                "name": "_sender",
                "type": "address"
            },
            {
                "name": "_role",
                "type": "bytes32"
            },
            {
                "name": "_params",
                "type": "uint256[]"
            }
        ],
        "func": "function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\n        if (!hasInitialized()) {\n            return false;\n        }\n\n        IKernel linkedKernel = kernel();\n        if (address(linkedKernel) == address(0)) {\n            return false;\n        }\n\n        return linkedKernel.hasPermission(\n            _sender,\n            address(this),\n            _role,\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\n        );\n    }",
        "comments": [
            "/**",
            "    * @dev Check whether an action can be performed by a sender for a particular role on this app",
            "    * @param _sender Sender of the call",
            "    * @param _role Role on this app",
            "    * @param _params Permission params for the role",
            "    * @return Boolean indicating whether the sender has the permissions to perform the action.",
            "    *         Always returns false if the app hasn't been initialized yet.",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\n    * @param _sender Sender of the call\n    * @param _role Role on this app\n    * @param _params Permission params for the role\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\n    *         Always returns false if the app hasn't been initialized yet.\n    */\n",
        "@dev": "Check whether an action can be performed by a sender for a particular role on this app",
        "@param1": "_sender Sender of the call",
        "@param2": "_role Role on this app",
        "@param3": "_params Permission params for the role",
        "@return1": "Boolean indicating whether the sender has the permissions to perform the action. * Always returns false if the app hasn't been initialized yet.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRecoveryVault",
        "visibility": "public",
        "args": [],
        "func": "function getRecoveryVault() public view returns (address) {\n        // Funds recovery via a vault is only available when used with a kernel\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\n    }",
        "comments": [
            "/**",
            "    * @dev Get the recovery vault for the app",
            "    * @return Recovery vault address for the app",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Get the recovery vault for the app\n    * @return Recovery vault address for the app\n    */\n",
        "@dev": "Get the recovery vault for the app",
        "@return1": "Recovery vault address for the app",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "_permissionsCreator",
                "type": "address"
            }
        ],
        "func": "function initialize(address _permissionsCreator) public onlyInit {\n        initialized();\n        require(msg.sender == address(kernel()), ERROR_AUTH_INIT_KERNEL);\n\n        _createPermission(_permissionsCreator, this, CREATE_PERMISSIONS_ROLE, _permissionsCreator);\n    }",
        "comments": [
            "/**",
            "    * @dev Initialize can only be called once. It saves the block number in which it was initialized.",
            "    * @notice Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions",
            "    * @param _permissionsCreator Entity that will be given permission over createPermission",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\n    * @notice Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions\n    * @param _permissionsCreator Entity that will be given permission over createPermission\n    */\n",
        "@dev": "Initialize can only be called once. It saves the block number in which it was initialized.",
        "@notice": "Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions",
        "@param1": "_permissionsCreator Entity that will be given permission over createPermission",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createPermission",
        "visibility": "external",
        "args": [
            {
                "name": "_entity",
                "type": "address"
            },
            {
                "name": "_app",
                "type": "address"
            },
            {
                "name": "_role",
                "type": "bytes32"
            },
            {
                "name": "_manager",
                "type": "address"
            }
        ],
        "func": "function createPermission(address _entity, address _app, bytes32 _role, address _manager)\n        external\n        auth(CREATE_PERMISSIONS_ROLE)\n        noPermissionManager(_app, _role)\n    {\n        _createPermission(_entity, _app, _role, _manager);\n    }",
        "comments": [
            "/**",
            "    * @dev Creates a permission that wasn't previously set and managed.",
            "    *      If a created permission is removed it is possible to reset it with createPermission.",
            "    *      This is the **ONLY** way to create permissions and set managers to permissions that don't",
            "    *      have a manager.",
            "    *      In terms of the ACL being initialized, this function implicitly protects all the other",
            "    *      state-changing external functions, as they all require the sender to be a manager.",
            "    * @notice Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager",
            "    * @param _entity Address of the whitelisted entity that will be able to perform the role",
            "    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)",
            "    * @param _role Identifier for the group of actions in app given access to perform",
            "    * @param _manager Address of the entity that will be able to grant and revoke the permission further.",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Creates a permission that wasn't previously set and managed.\n    *      If a created permission is removed it is possible to reset it with createPermission.\n    *      This is the **ONLY** way to create permissions and set managers to permissions that don't\n    *      have a manager.\n    *      In terms of the ACL being initialized, this function implicitly protects all the other\n    *      state-changing external functions, as they all require the sender to be a manager.\n    * @notice Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\n    * @param _role Identifier for the group of actions in app given access to perform\n    * @param _manager Address of the entity that will be able to grant and revoke the permission further.\n    */\n",
        "@dev": "Creates a permission that wasn't previously set and managed. * If a created permission is removed it is possible to reset it with createPermission. * This is the **ONLY** way to create permissions and set managers to permissions that don't * have a manager. * In terms of the ACL being initialized, this function implicitly protects all the other * state-changing external functions, as they all require the sender to be a manager.",
        "@notice": "Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager",
        "@param1": "_entity Address of the whitelisted entity that will be able to perform the role",
        "@param2": "_app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)",
        "@param3": "_role Identifier for the group of actions in app given access to perform",
        "@param4": "_manager Address of the entity that will be able to grant and revoke the permission further.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "grantPermission",
        "visibility": "external",
        "args": [
            {
                "name": "_entity",
                "type": "address"
            },
            {
                "name": "_app",
                "type": "address"
            },
            {
                "name": "_role",
                "type": "bytes32"
            }
        ],
        "func": "function grantPermission(address _entity, address _app, bytes32 _role)\n        external\n    {\n        grantPermissionP(_entity, _app, _role, new uint256[](0));\n    }",
        "comments": [
            "/**",
            "    * @dev Grants permission if allowed. This requires `msg.sender` to be the permission manager",
            "    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`",
            "    * @param _entity Address of the whitelisted entity that will be able to perform the role",
            "    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)",
            "    * @param _role Identifier for the group of actions in app given access to perform",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Grants permission if allowed. This requires `msg.sender` to be the permission manager\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\n    * @param _role Identifier for the group of actions in app given access to perform\n    */\n",
        "@dev": "Grants permission if allowed. This requires `msg.sender` to be the permission manager",
        "@notice": "Grant `_entity` the ability to perform actions requiring `_role` on `_app`",
        "@param1": "_entity Address of the whitelisted entity that will be able to perform the role",
        "@param2": "_app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)",
        "@param3": "_role Identifier for the group of actions in app given access to perform",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "grantPermissionP",
        "visibility": "public",
        "args": [
            {
                "name": "_entity",
                "type": "address"
            },
            {
                "name": "_app",
                "type": "address"
            },
            {
                "name": "_role",
                "type": "bytes32"
            },
            {
                "name": "_params",
                "type": "uint256[]"
            }
        ],
        "func": "function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)\n        public\n        onlyPermissionManager(_app, _role)\n    {\n        bytes32 paramsHash = _params.length > 0 ? _saveParams(_params) : EMPTY_PARAM_HASH;\n        _setPermission(_entity, _app, _role, paramsHash);\n    }",
        "comments": [
            "/**",
            "    * @dev Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager",
            "    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`",
            "    * @param _entity Address of the whitelisted entity that will be able to perform the role",
            "    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)",
            "    * @param _role Identifier for the group of actions in app given access to perform",
            "    * @param _params Permission parameters",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\n    * @param _role Identifier for the group of actions in app given access to perform\n    * @param _params Permission parameters\n    */\n",
        "@dev": "Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager",
        "@notice": "Grant `_entity` the ability to perform actions requiring `_role` on `_app`",
        "@param1": "_entity Address of the whitelisted entity that will be able to perform the role",
        "@param2": "_app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)",
        "@param3": "_role Identifier for the group of actions in app given access to perform",
        "@param4": "_params Permission parameters",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "revokePermission",
        "visibility": "external",
        "args": [
            {
                "name": "_entity",
                "type": "address"
            },
            {
                "name": "_app",
                "type": "address"
            },
            {
                "name": "_role",
                "type": "bytes32"
            }
        ],
        "func": "function revokePermission(address _entity, address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermission(_entity, _app, _role, NO_PERMISSION);\n    }",
        "comments": [
            "/**",
            "    * @dev Revokes permission if allowed. This requires `msg.sender` to be the the permission manager",
            "    * @notice Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`",
            "    * @param _entity Address of the whitelisted entity to revoke access from",
            "    * @param _app Address of the app in which the role will be revoked",
            "    * @param _role Identifier for the group of actions in app being revoked",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Revokes permission if allowed. This requires `msg.sender` to be the the permission manager\n    * @notice Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`\n    * @param _entity Address of the whitelisted entity to revoke access from\n    * @param _app Address of the app in which the role will be revoked\n    * @param _role Identifier for the group of actions in app being revoked\n    */\n",
        "@dev": "Revokes permission if allowed. This requires `msg.sender` to be the the permission manager",
        "@notice": "Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`",
        "@param1": "_entity Address of the whitelisted entity to revoke access from",
        "@param2": "_app Address of the app in which the role will be revoked",
        "@param3": "_role Identifier for the group of actions in app being revoked",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPermissionManager",
        "visibility": "external",
        "args": [
            {
                "name": "_newManager",
                "type": "address"
            },
            {
                "name": "_app",
                "type": "address"
            },
            {
                "name": "_role",
                "type": "bytes32"
            }
        ],
        "func": "function setPermissionManager(address _newManager, address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermissionManager(_newManager, _app, _role);\n    }",
        "comments": [
            "/**",
            "    * @notice Set `_newManager` as the manager of `_role` in `_app`",
            "    * @param _newManager Address for the new manager",
            "    * @param _app Address of the app in which the permission management is being transferred",
            "    * @param _role Identifier for the group of actions being transferred",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Set `_newManager` as the manager of `_role` in `_app`\n    * @param _newManager Address for the new manager\n    * @param _app Address of the app in which the permission management is being transferred\n    * @param _role Identifier for the group of actions being transferred\n    */\n",
        "@notice": "Set `_newManager` as the manager of `_role` in `_app`",
        "@param1": "_newManager Address for the new manager",
        "@param2": "_app Address of the app in which the permission management is being transferred",
        "@param3": "_role Identifier for the group of actions being transferred",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "removePermissionManager",
        "visibility": "external",
        "args": [
            {
                "name": "_app",
                "type": "address"
            },
            {
                "name": "_role",
                "type": "bytes32"
            }
        ],
        "func": "function removePermissionManager(address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermissionManager(address(0), _app, _role);\n    }",
        "comments": [
            "/**",
            "    * @notice Remove the manager of `_role` in `_app`",
            "    * @param _app Address of the app in which the permission is being unmanaged",
            "    * @param _role Identifier for the group of actions being unmanaged",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Remove the manager of `_role` in `_app`\n    * @param _app Address of the app in which the permission is being unmanaged\n    * @param _role Identifier for the group of actions being unmanaged\n    */\n",
        "@notice": "Remove the manager of `_role` in `_app`",
        "@param1": "_app Address of the app in which the permission is being unmanaged",
        "@param2": "_role Identifier for the group of actions being unmanaged",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createBurnedPermission",
        "visibility": "external",
        "args": [
            {
                "name": "_app",
                "type": "address"
            },
            {
                "name": "_role",
                "type": "bytes32"
            }
        ],
        "func": "function createBurnedPermission(address _app, bytes32 _role)\n        external\n        auth(CREATE_PERMISSIONS_ROLE)\n        noPermissionManager(_app, _role)\n    {\n        _setPermissionManager(BURN_ENTITY, _app, _role);\n    }",
        "comments": [
            "/**",
            "    * @notice Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)",
            "    * @param _app Address of the app in which the permission is being burned",
            "    * @param _role Identifier for the group of actions being burned",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\n    * @param _app Address of the app in which the permission is being burned\n    * @param _role Identifier for the group of actions being burned\n    */\n",
        "@notice": "Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)",
        "@param1": "_app Address of the app in which the permission is being burned",
        "@param2": "_role Identifier for the group of actions being burned",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burnPermissionManager",
        "visibility": "external",
        "args": [
            {
                "name": "_app",
                "type": "address"
            },
            {
                "name": "_role",
                "type": "bytes32"
            }
        ],
        "func": "function burnPermissionManager(address _app, bytes32 _role)\n        external\n        onlyPermissionManager(_app, _role)\n    {\n        _setPermissionManager(BURN_ENTITY, _app, _role);\n    }",
        "comments": [
            "/**",
            "    * @notice Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)",
            "    * @param _app Address of the app in which the permission is being burned",
            "    * @param _role Identifier for the group of actions being burned",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\n    * @param _app Address of the app in which the permission is being burned\n    * @param _role Identifier for the group of actions being burned\n    */\n",
        "@notice": "Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)",
        "@param1": "_app Address of the app in which the permission is being burned",
        "@param2": "_role Identifier for the group of actions being burned",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPermissionParamsLength",
        "visibility": "external",
        "args": [
            {
                "name": "_entity",
                "type": "address"
            },
            {
                "name": "_app",
                "type": "address"
            },
            {
                "name": "_role",
                "type": "bytes32"
            }
        ],
        "func": "function getPermissionParamsLength(address _entity, address _app, bytes32 _role) external view returns (uint) {\n        return permissionParams[permissions[permissionHash(_entity, _app, _role)]].length;\n    }",
        "comments": [
            "/**",
            "     * @notice Get parameters for permission array length",
            "     * @param _entity Address of the whitelisted entity that will be able to perform the role",
            "     * @param _app Address of the app",
            "     * @param _role Identifier for a group of actions in app",
            "     * @return Length of the array",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Get parameters for permission array length\n     * @param _entity Address of the whitelisted entity that will be able to perform the role\n     * @param _app Address of the app\n     * @param _role Identifier for a group of actions in app\n     * @return Length of the array\n     */\n",
        "@notice": "Get parameters for permission array length",
        "@param1": "_entity Address of the whitelisted entity that will be able to perform the role",
        "@param2": "_app Address of the app",
        "@param3": "_role Identifier for a group of actions in app",
        "@return1": "Length of the array",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPermissionParam",
        "visibility": "external",
        "args": [
            {
                "name": "_entity",
                "type": "address"
            },
            {
                "name": "_app",
                "type": "address"
            },
            {
                "name": "_role",
                "type": "bytes32"
            },
            {
                "name": "_index",
                "type": "uint"
            }
        ],
        "func": "function getPermissionParam(address _entity, address _app, bytes32 _role, uint _index)\n        external\n        view\n        returns (uint8, uint8, uint240)\n    {\n        Param storage param = permissionParams[permissions[permissionHash(_entity, _app, _role)]][_index];\n        return (param.id, param.op, param.value);\n    }",
        "comments": [
            "/**",
            "    * @notice Get parameter for permission",
            "    * @param _entity Address of the whitelisted entity that will be able to perform the role",
            "    * @param _app Address of the app",
            "    * @param _role Identifier for a group of actions in app",
            "    * @param _index Index of parameter in the array",
            "    * @return Parameter (id, op, value)",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Get parameter for permission\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\n    * @param _app Address of the app\n    * @param _role Identifier for a group of actions in app\n    * @param _index Index of parameter in the array\n    * @return Parameter (id, op, value)\n    */\n",
        "@notice": "Get parameter for permission",
        "@param1": "_entity Address of the whitelisted entity that will be able to perform the role",
        "@param2": "_app Address of the app",
        "@param3": "_role Identifier for a group of actions in app",
        "@param4": "_index Index of parameter in the array",
        "@return1": "Parameter (id, op, value)",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPermissionManager",
        "visibility": "public",
        "args": [
            {
                "name": "_app",
                "type": "address"
            },
            {
                "name": "_role",
                "type": "bytes32"
            }
        ],
        "func": "function getPermissionManager(address _app, bytes32 _role) public view returns (address) {\n        return permissionManager[roleHash(_app, _role)];\n    }",
        "comments": [
            "/**",
            "    * @dev Get manager for permission",
            "    * @param _app Address of the app",
            "    * @param _role Identifier for a group of actions in app",
            "    * @return address of the manager for the permission",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Get manager for permission\n    * @param _app Address of the app\n    * @param _role Identifier for a group of actions in app\n    * @return address of the manager for the permission\n    */\n",
        "@dev": "Get manager for permission",
        "@param1": "_app Address of the app",
        "@param2": "_role Identifier for a group of actions in app",
        "@return1": "address of the manager for the permission",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasPermission",
        "visibility": "public",
        "args": [
            {
                "name": "_who",
                "type": "address"
            },
            {
                "name": "_where",
                "type": "address"
            },
            {
                "name": "_what",
                "type": "bytes32"
            },
            {
                "name": "_how",
                "type": "bytes memory"
            }
        ],
        "func": "function hasPermission(address _who, address _where, bytes32 _what, bytes memory _how) public view returns (bool) {\n        return hasPermission(_who, _where, _what, ConversionHelpers.dangerouslyCastBytesToUintArray(_how));\n    }",
        "comments": [
            "/**",
            "    * @dev Function called by apps to check ACL on kernel or to check permission statu",
            "    * @param _who Sender of the original call",
            "    * @param _where Address of the app",
            "    * @param _where Identifier for a group of actions in app",
            "    * @param _how Permission parameters",
            "    * @return boolean indicating whether the ACL allows the role or not",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Function called by apps to check ACL on kernel or to check permission statu\n    * @param _who Sender of the original call\n    * @param _where Address of the app\n    * @param _where Identifier for a group of actions in app\n    * @param _how Permission parameters\n    * @return boolean indicating whether the ACL allows the role or not\n    */\n",
        "@dev": "Function called by apps to check ACL on kernel or to check permission statu",
        "@param1": "_who Sender of the original call",
        "@param2": "_where Address of the app",
        "@param3": "_where Identifier for a group of actions in app",
        "@param4": "_how Permission parameters",
        "@return1": "boolean indicating whether the ACL allows the role or not",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasPermission",
        "visibility": "public",
        "args": [
            {
                "name": "_who",
                "type": "address"
            },
            {
                "name": "_where",
                "type": "address"
            },
            {
                "name": "_what",
                "type": "bytes32"
            },
            {
                "name": "_how",
                "type": "uint256[] memory"
            }
        ],
        "func": "function hasPermission(address _who, address _where, bytes32 _what, uint256[] memory _how) public view returns (bool) {\n        bytes32 whoParams = permissions[permissionHash(_who, _where, _what)];\n        if (whoParams != NO_PERMISSION && evalParams(whoParams, _who, _where, _what, _how)) {\n            return true;\n        }\n\n        bytes32 anyParams = permissions[permissionHash(ANY_ENTITY, _where, _what)];\n        if (anyParams != NO_PERMISSION && evalParams(anyParams, ANY_ENTITY, _where, _what, _how)) {\n            return true;\n        }\n\n        return false;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasPermission",
        "visibility": "public",
        "args": [
            {
                "name": "_who",
                "type": "address"
            },
            {
                "name": "_where",
                "type": "address"
            },
            {
                "name": "_what",
                "type": "bytes32"
            }
        ],
        "func": "function hasPermission(address _who, address _where, bytes32 _what) public view returns (bool) {\n        uint256[] memory empty = new uint256[](0);\n        return hasPermission(_who, _where, _what, empty);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "evalParams",
        "visibility": "public",
        "args": [
            {
                "name": "_paramsHash",
                "type": "bytes32"
            },
            {
                "name": "_who",
                "type": "address"
            },
            {
                "name": "_where",
                "type": "address"
            },
            {
                "name": "_what",
                "type": "bytes32"
            },
            {
                "name": "_how",
                "type": "uint256[]"
            }
        ],
        "func": "function evalParams(\n        bytes32 _paramsHash,\n        address _who,\n        address _where,\n        bytes32 _what,\n        uint256[] _how\n    ) public view returns (bool)\n    {\n        if (_paramsHash == EMPTY_PARAM_HASH) {\n            return true;\n        }\n\n        return _evalParam(_paramsHash, 0, _who, _where, _what, _how);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [],
        "func": "function initialize() public onlyInit {\n        initialized();\n        // Create empty record to begin executor IDs at 1\n        executorsNextIndex = 1;\n    }",
        "comments": [
            "/**",
            "    * @notice Initialize the registry",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Initialize the registry\n    */\n",
        "@notice": "Initialize the registry",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addScriptExecutor",
        "visibility": "external",
        "args": [
            {
                "name": "_executor",
                "type": "IEVMScriptExecutor"
            }
        ],
        "func": "function addScriptExecutor(IEVMScriptExecutor _executor) external auth(REGISTRY_ADD_EXECUTOR_ROLE) returns (uint256 id) {\n        uint256 executorId = executorsNextIndex++;\n        executors[executorId] = ExecutorEntry(_executor, true);\n        emit EnableExecutor(executorId, _executor);\n        return executorId;\n    }",
        "comments": [
            "/**",
            "    * @notice Add a new script executor with address `_executor` to the registry",
            "    * @param _executor Address of the IEVMScriptExecutor that will be added to the registry",
            "    * @return id Identifier of the executor in the registry",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Add a new script executor with address `_executor` to the registry\n    * @param _executor Address of the IEVMScriptExecutor that will be added to the registry\n    * @return id Identifier of the executor in the registry\n    */\n",
        "@notice": "Add a new script executor with address `_executor` to the registry",
        "@param1": "_executor Address of the IEVMScriptExecutor that will be added to the registry",
        "@return1": "id Identifier of the executor in the registry",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "disableScriptExecutor",
        "visibility": "external",
        "args": [
            {
                "name": "_executorId",
                "type": "uint256"
            }
        ],
        "func": "function disableScriptExecutor(uint256 _executorId)\n        external\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\n    {\n        // Note that we don't need to check for an executor's existence in this case, as only\n        // existing executors can be enabled\n        ExecutorEntry storage executorEntry = executors[_executorId];\n        require(executorEntry.enabled, ERROR_EXECUTOR_DISABLED);\n        executorEntry.enabled = false;\n        emit DisableExecutor(_executorId, executorEntry.executor);\n    }",
        "comments": [
            "/**",
            "    * @notice Disable script executor with ID `_executorId`",
            "    * @param _executorId Identifier of the executor in the registry",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Disable script executor with ID `_executorId`\n    * @param _executorId Identifier of the executor in the registry\n    */\n",
        "@notice": "Disable script executor with ID `_executorId`",
        "@param1": "_executorId Identifier of the executor in the registry",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "enableScriptExecutor",
        "visibility": "external",
        "args": [
            {
                "name": "_executorId",
                "type": "uint256"
            }
        ],
        "func": "function enableScriptExecutor(uint256 _executorId)\n        external\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\n        executorExists(_executorId)\n    {\n        ExecutorEntry storage executorEntry = executors[_executorId];\n        require(!executorEntry.enabled, ERROR_EXECUTOR_ENABLED);\n        executorEntry.enabled = true;\n        emit EnableExecutor(_executorId, executorEntry.executor);\n    }",
        "comments": [
            "/**",
            "    * @notice Enable script executor with ID `_executorId`",
            "    * @param _executorId Identifier of the executor in the registry",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Enable script executor with ID `_executorId`\n    * @param _executorId Identifier of the executor in the registry\n    */\n",
        "@notice": "Enable script executor with ID `_executorId`",
        "@param1": "_executorId Identifier of the executor in the registry",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getScriptExecutor",
        "visibility": "public",
        "args": [
            {
                "name": "_script",
                "type": "bytes"
            }
        ],
        "func": "function getScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\n        require(_script.length >= SCRIPT_START_LOCATION, ERROR_SCRIPT_LENGTH_TOO_SHORT);\n        uint256 id = _script.getSpecId();\n\n        // Note that we don't need to check for an executor's existence in this case, as only\n        // existing executors can be enabled\n        ExecutorEntry storage entry = executors[id];\n        return entry.enabled ? entry.executor : IEVMScriptExecutor(0);\n    }",
        "comments": [
            "/**",
            "    * @dev Get the script executor that can execute a particular script based on its first 4 bytes",
            "    * @param _script EVMScript being inspected",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Get the script executor that can execute a particular script based on its first 4 bytes\n    * @param _script EVMScript being inspected\n    */\n",
        "@dev": "Get the script executor that can execute a particular script based on its first 4 bytes",
        "@param1": "_script EVMScript being inspected",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "execScript",
        "visibility": "external",
        "args": [
            {
                "name": "_script",
                "type": "bytes"
            },
            {
                "name": "bytes",
                "type": "bytes"
            },
            {
                "name": "_blacklist",
                "type": "address[]"
            }
        ],
        "func": "function execScript(bytes _script, bytes, address[] _blacklist) external isInitialized returns (bytes) {\n        uint256 location = SCRIPT_START_LOCATION; // first 32 bits are spec id\n        while (location < _script.length) {\n            // Check there's at least address + calldataLength available\n            require(_script.length - location >= 0x18, ERROR_INVALID_LENGTH);\n\n            address contractAddress = _script.addressAt(location);\n            // Check address being called is not blacklist\n            for (uint256 i = 0; i < _blacklist.length; i++) {\n                require(contractAddress != _blacklist[i], ERROR_BLACKLISTED_CALL);\n            }\n\n            // logged before execution to ensure event ordering in receipt\n            // if failed entire execution is reverted regardless\n            emit LogScriptCall(msg.sender, address(this), contractAddress);\n\n            uint256 calldataLength = uint256(_script.uint32At(location + 0x14));\n            uint256 startOffset = location + 0x14 + 0x04;\n            uint256 calldataStart = _script.locationOf(startOffset);\n\n            // compute end of script / next location\n            location = startOffset + calldataLength;\n            require(location <= _script.length, ERROR_INVALID_LENGTH);\n\n            bool success;\n            assembly {\n                success := call(\n                    sub(gas, 5000),       // forward gas left - 5000\n                    contractAddress,      // address\n                    0,                    // no value\n                    calldataStart,        // calldata start\n                    calldataLength,       // calldata length\n                    0,                    // don't write output\n                    0                     // don't write output\n                )\n\n                switch success\n                case 0 {\n                    let ptr := mload(0x40)\n\n                    switch returndatasize\n                    case 0 {\n                        // No error data was returned, revert with \"EVMCALLS_CALL_REVERTED\"\n                        // See remix: doing a `revert(\"EVMCALLS_CALL_REVERTED\")` always results in\n                        // this memory layout\n                        mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\n                        mstore(add(ptr, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\n                        mstore(add(ptr, 0x24), 0x0000000000000000000000000000000000000000000000000000000000000016) // reason length\n                        mstore(add(ptr, 0x44), 0x45564d43414c4c535f43414c4c5f524556455254454400000000000000000000) // reason\n\n                        revert(ptr, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\n                    }\n                    default {\n                        // Forward the full error data\n                        returndatacopy(ptr, 0, returndatasize)\n                        revert(ptr, returndatasize)\n                    }\n                }\n                default { }\n            }\n        }\n        // No need to allocate empty bytes for the return as this can only be called via an delegatecall\n        // (due to the isInitialized modifier)\n    }",
        "comments": [
            "/**",
            "    * @notice Executes a number of call scripts",
            "    * @param _script [ specId (uint32) ] many calls with this structure ->",
            "    *    [ to (address: 20 bytes) ] [ calldataLength (uint32: 4 bytes) ] [ calldata (calldataLength bytes) ]",
            "    * @param _blacklist Addresses the script cannot call to, or will revert.",
            "    * @return Always returns empty byte array",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Executes a number of call scripts\n    * @param _script [ specId (uint32) ] many calls with this structure ->\n    *    [ to (address: 20 bytes) ] [ calldataLength (uint32: 4 bytes) ] [ calldata (calldataLength bytes) ]\n    * @param _blacklist Addresses the script cannot call to, or will revert.\n    * @return Always returns empty byte array\n    */\n",
        "@notice": "Executes a number of call scripts",
        "@param1": "_script [ specId (uint32) ] many calls with this structure -> * [ to (address: 20 bytes) ] [ calldataLength (uint32: 4 bytes) ] [ calldata (calldataLength bytes) ]",
        "@param2": "_blacklist Addresses the script cannot call to, or will revert.",
        "@return1": "Always returns empty byte array",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executorType",
        "visibility": "external",
        "args": [],
        "func": "function executorType() external pure returns (bytes32) {\n        return EXECUTOR_TYPE;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "newEVMScriptRegistry",
        "visibility": "public",
        "args": [
            {
                "name": "_dao",
                "type": "Kernel"
            }
        ],
        "func": "function newEVMScriptRegistry(Kernel _dao) public returns (EVMScriptRegistry reg) {\n        bytes memory initPayload = abi.encodeWithSelector(reg.initialize.selector);\n        reg = EVMScriptRegistry(_dao.newPinnedAppInstance(EVMSCRIPT_REGISTRY_APP_ID, baseReg, initPayload, true));\n\n        ACL acl = ACL(_dao.acl());\n\n        acl.createPermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE(), this);\n\n        reg.addScriptExecutor(baseCallScript);     // spec 1 = CallsScript\n\n        // Clean up the permissions\n        acl.revokePermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\n        acl.removePermissionManager(reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\n\n        return reg;\n    }",
        "comments": [
            "/**",
            "    * @notice Install a new pinned instance of EVMScriptRegistry on `_dao`.",
            "    * @param _dao Kernel",
            "    * @return Installed EVMScriptRegistry",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Install a new pinned instance of EVMScriptRegistry on `_dao`.\n    * @param _dao Kernel\n    * @return Installed EVMScriptRegistry\n    */\n",
        "@notice": "Install a new pinned instance of EVMScriptRegistry on `_dao`.",
        "@param1": "_dao Kernel",
        "@return1": "Installed EVMScriptRegistry",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "newDAO",
        "visibility": "public",
        "args": [
            {
                "name": "_root",
                "type": "address"
            }
        ],
        "func": "function newDAO(address _root) public returns (Kernel) {\n        Kernel dao = Kernel(new KernelProxy(baseKernel));\n\n        if (address(regFactory) == address(0)) {\n            dao.initialize(baseACL, _root);\n        } else {\n            dao.initialize(baseACL, this);\n\n            ACL acl = ACL(dao.acl());\n            bytes32 permRole = acl.CREATE_PERMISSIONS_ROLE();\n            bytes32 appManagerRole = dao.APP_MANAGER_ROLE();\n\n            acl.grantPermission(regFactory, acl, permRole);\n\n            acl.createPermission(regFactory, dao, appManagerRole, this);\n\n            EVMScriptRegistry reg = regFactory.newEVMScriptRegistry(dao);\n            emit DeployEVMScriptRegistry(address(reg));\n\n            // Clean up permissions\n            // First, completely reset the APP_MANAGER_ROLE\n            acl.revokePermission(regFactory, dao, appManagerRole);\n            acl.removePermissionManager(dao, appManagerRole);\n\n            // Then, make root the only holder and manager of CREATE_PERMISSIONS_ROLE\n            acl.revokePermission(regFactory, acl, permRole);\n            acl.revokePermission(this, acl, permRole);\n            acl.grantPermission(_root, acl, permRole);\n            acl.setPermissionManager(_root, acl, permRole);\n        }\n\n        emit DeployDAO(address(dao));\n\n        return dao;\n    }",
        "comments": [
            "/**",
            "    * @notice Create a new DAO with `_root` set as the initial admin",
            "    * @param _root Address that will be granted control to setup DAO permissions",
            "    * @return Newly created DAO",
            "    */",
            ""
        ],
        "comt": "/**\n    * @notice Create a new DAO with `_root` set as the initial admin\n    * @param _root Address that will be granted control to setup DAO permissions\n    * @return Newly created DAO\n    */\n",
        "@notice": "Create a new DAO with `_root` set as the initial admin",
        "@param1": "_root Address that will be granted control to setup DAO permissions",
        "@return1": "Newly created DAO",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]