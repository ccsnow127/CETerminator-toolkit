[
    {
        "transactions": 927,
        "function_num": 62
    },
    {
        "name": "owner",
        "visibility": "public",
        "args": [],
        "func": "function owner() public view virtual returns (address) {\n        return _owner;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the address of the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the address of the current owner.\n     */\n",
        "@dev": "Returns the address of the current owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceOwnership",
        "visibility": "public",
        "args": [],
        "func": "function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }",
        "comments": [
            "/**",
            "     * @dev Leaves the contract without owner. It will not be possible to call",
            "     * `onlyOwner` functions anymore. Can only be called by the current owner.",
            "     *",
            "     * NOTE: Renouncing ownership will leave the contract without an owner,",
            "     * thereby removing any functionality that is only available to the owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n",
        "@dev": "Leaves the contract without owner. It will not be possible to call * `onlyOwner` functions anymore. Can only be called by the current owner. * * NOTE: Renouncing ownership will leave the contract without an owner, * thereby removing any functionality that is only available to the owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferOwnership",
        "visibility": "public",
        "args": [
            {
                "name": "newOwner",
                "type": "address"
            }
        ],
        "func": "function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }",
        "comments": [
            "/**",
            "     * @dev Transfers ownership of the contract to a new account (`newOwner`).",
            "     * Can only be called by the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n",
        "@dev": "Transfers ownership of the contract to a new account (`newOwner`). * Can only be called by the current owner.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supportsInterface",
        "visibility": "public",
        "args": [
            {
                "name": "interfaceId",
                "type": "bytes4"
            }
        ],
        "func": "function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC165-supportsInterface}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
        "@dev": "See {IERC165-supportsInterface}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "royaltyInfo",
        "visibility": "public",
        "args": [
            {
                "name": "_tokenId",
                "type": "uint256"
            },
            {
                "name": "_salePrice",
                "type": "uint256"
            }
        ],
        "func": "function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }",
        "comments": [
            "/**",
            "     * @inheritdoc IERC2981",
            "     */",
            ""
        ],
        "comt": "/**\n     * @inheritdoc IERC2981\n     */\n",
        "@inheritdoc": "IERC2981",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supportsInterface",
        "visibility": "public",
        "args": [
            {
                "name": "interfaceId",
                "type": "bytes4"
            }
        ],
        "func": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supportsInterface",
        "visibility": "public",
        "args": [
            {
                "name": "interfaceId",
                "type": "bytes4"
            }
        ],
        "func": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC165-supportsInterface}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
        "@dev": "See {IERC165-supportsInterface}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "freeMint",
        "visibility": "external",
        "args": [
            {
                "name": "merkleProof",
                "type": "bytes32[] calldata"
            }
        ],
        "func": "function freeMint(bytes32[] calldata merkleProof)\n        external\n        nonReentrant\n        callerIsUser\n        freeMintActive\n        isValidMerkleProof(merkleProof, merkleRootFreeMint)\n        hasNotReceivedFree\n        freeMintLeft(1)\n    {\n        numFreeMint++;\n        increaseFreeMints(msg.sender, 1);\n        _safeMint(msg.sender, 1);\n    }",
        "comments": [
            "",
            "    // Public minting functions",
            "    // ---------------------------------------------------------------",
            "",
            "    /**",
            "     * @notice Free mint one token from free mint allowlist.",
            "     * @param merkleProof The merkle proof bytes32 array.",
            "     */",
            "    "
        ],
        "comt": "\n    // Public minting functions\n    // ---------------------------------------------------------------\n\n    /**\n     * @notice Free mint one token from free mint allowlist.\n     * @param merkleProof The merkle proof bytes32 array.\n     */\n    ",
        "@notice": "Free mint one token from free mint allowlist.",
        "@param1": "merkleProof The merkle proof bytes32 array.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowlistMint",
        "visibility": "external",
        "args": [
            {
                "name": "quantity",
                "type": "uint256"
            },
            {
                "name": "merkleProof",
                "type": "bytes32[] calldata"
            }
        ],
        "func": "function allowlistMint(uint256 quantity, bytes32[] calldata merkleProof)\n        external\n        payable\n        nonReentrant\n        callerIsUser\n        allowlistMintActive\n        isValidMerkleProof(merkleProof, merkleRootAllowlist)\n        allowlistMintLeft(quantity)\n        mintLeft(quantity)\n        lessThanMaxPerWalletAllowlist(quantity)\n        isCorrectPayment(allowlistMintPrice, quantity)\n    {\n        numAllowlistMint += quantity;\n        increaseAllowlistMints(msg.sender, quantity);\n        _safeMint(msg.sender, quantity);\n    }",
        "comments": [
            "/**",
            "     * @notice Mint multiple tokens from allowlist paid mint.",
            "     * @param quantity The number of tokens to be minted.",
            "     * @param merkleProof The merkle proof bytes32 array.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Mint multiple tokens from allowlist paid mint.\n     * @param quantity The number of tokens to be minted.\n     * @param merkleProof The merkle proof bytes32 array.\n     */\n",
        "@notice": "Mint multiple tokens from allowlist paid mint.",
        "@param1": "quantity The number of tokens to be minted.",
        "@param2": "merkleProof The merkle proof bytes32 array.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "external",
        "args": [
            {
                "name": "quantity",
                "type": "uint256"
            }
        ],
        "func": "function mint(uint256 quantity)\n        external\n        payable\n        nonReentrant\n        callerIsUser\n        publicMintActive\n        mintLeft(quantity)\n        lessThanMaxPerWallet(quantity)\n        isCorrectPayment(publicMintPrice, quantity)\n    {\n        uint256 batchSize = 8;\n        uint256 numBatches = quantity / batchSize;\n        uint256 remainder = quantity % batchSize;\n        for (uint256 i = 0; i < numBatches; i++) {\n            _safeMint(msg.sender, batchSize);\n        }\n        if (remainder > 0) {\n            _safeMint(msg.sender, remainder);\n        }\n    }",
        "comments": [
            "/**",
            "     * @notice Mint multiple tokens from public paid mint.",
            "     * @param quantity The number of tokens to be minted.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Mint multiple tokens from public paid mint.\n     * @param quantity The number of tokens to be minted.\n     */\n",
        "@notice": "Mint multiple tokens from public paid mint.",
        "@param1": "quantity The number of tokens to be minted.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "gift",
        "visibility": "external",
        "args": [
            {
                "name": "addresses",
                "type": "address[] calldata"
            }
        ],
        "func": "function gift(address[] calldata addresses)\n        external\n        nonReentrant\n        onlyOwner\n        mintLeft(addresses.length)\n    {\n        uint256 numToGift = addresses.length;\n        for (uint256 i = 0; i < numToGift; i++) {\n            increaseGifts(addresses[i], 1);\n            _safeMint(addresses[i], 1);\n        }\n    }",
        "comments": [
            "/**",
            "     * @notice Mint a token to each address in an array.",
            "     * @param addresses An array of addresses to mint to.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Mint a token to each address in an array.\n     * @param addresses An array of addresses to mint to.\n     */\n",
        "@notice": "Mint a token to each address in an array.",
        "@param1": "addresses An array of addresses to mint to.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "giftMultiple",
        "visibility": "external",
        "args": [
            {
                "name": "addresses",
                "type": "address[] calldata"
            },
            {
                "name": "quantities",
                "type": "uint256[] calldata"
            }
        ],
        "func": "function giftMultiple(address[] calldata addresses, uint256[] calldata quantities)\n        external\n        nonReentrant\n        onlyOwner\n    {\n        require(addresses.length == quantities.length, \"The number of recipients and quantities must be the same.\");\n        uint256 totalGifts = 0;\n        for (uint256 i = 0; i < quantities.length; i++) {\n            totalGifts += quantities[i];\n        }\n        require(\n            totalSupply() + totalGifts <=\n                collectionSize\n                    - (reservedFreeMint - numFreeMint),\n            \"There are no tokens left to mint.\"\n        );\n        for (uint256 i = 0; i < addresses.length; i++) {\n            increaseGifts(addresses[i], quantities[i]);\n            _safeMint(addresses[i], quantities[i]);\n        }\n    }",
        "comments": [
            "/**",
            "     * @notice Mint multiple tokens to each address in an array.",
            "     * @param addresses An n-sized array of addresses to mint to.",
            "     * @param quantities An n-sized array  quantities to mint to each corresponding address.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Mint multiple tokens to each address in an array.\n     * @param addresses An n-sized array of addresses to mint to.\n     * @param quantities An n-sized array  quantities to mint to each corresponding address.\n     */\n",
        "@notice": "Mint multiple tokens to each address in an array.",
        "@param1": "addresses An n-sized array of addresses to mint to.",
        "@param2": "quantities An n-sized array quantities to mint to each corresponding address.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "numberMinted",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function numberMinted(address owner) public view returns (uint256) {\n        return _numberMinted(owner);\n    }",
        "comments": [
            "",
            "    // Public read-only functions",
            "    // ---------------------------------------------------------------",
            "",
            "    /**",
            "     * @notice Get the number of tokens minted by an address.",
            "     * @param owner The address to check.",
            "     * @return The number of tokens minted by the address.",
            "     */",
            "    "
        ],
        "comt": "\n    // Public read-only functions\n    // ---------------------------------------------------------------\n\n    /**\n     * @notice Get the number of tokens minted by an address.\n     * @param owner The address to check.\n     * @return The number of tokens minted by the address.\n     */\n    ",
        "@notice": "Get the number of tokens minted by an address.",
        "@param1": "owner The address to check.",
        "@return1": "The number of tokens minted by the address.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAllowlistMintPrice",
        "visibility": "public",
        "args": [],
        "func": "function getAllowlistMintPrice() public view returns (uint256) {\n        return allowlistMintPrice;\n    }",
        "comments": [
            "/**",
            "     * @notice Get the mint price for allowlist sale.",
            "     * @return The allowlist mint price.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Get the mint price for allowlist sale.\n     * @return The allowlist mint price.\n     */\n",
        "@notice": "Get the mint price for allowlist sale.",
        "@return1": "The allowlist mint price.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPublicMintPrice",
        "visibility": "public",
        "args": [],
        "func": "function getPublicMintPrice() public view returns (uint256) {\n        return publicMintPrice;\n    }",
        "comments": [
            "/**",
            "     * @notice Get the mint price for public sale.",
            "     * @return The public mint price.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Get the mint price for public sale.\n     * @return The public mint price.\n     */\n",
        "@notice": "Get the mint price for public sale.",
        "@return1": "The public mint price.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReservedFreeMint",
        "visibility": "public",
        "args": [],
        "func": "function getReservedFreeMint() public view returns (uint256) {\n        return reservedFreeMint;\n    }",
        "comments": [
            "/**",
            "     * @notice Get the total number of tokens reserved for free mint and gifts combined.",
            "     * @return The total number of reserved for free mint and gifts combined.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Get the total number of tokens reserved for free mint and gifts combined.\n     * @return The total number of reserved for free mint and gifts combined.\n     */\n",
        "@notice": "Get the total number of tokens reserved for free mint and gifts combined.",
        "@return1": "The total number of reserved for free mint and gifts combined.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAllowlistMintMax",
        "visibility": "public",
        "args": [],
        "func": "function getAllowlistMintMax() public view returns (uint256) {\n        return maxAllowlistMint;\n    }",
        "comments": [
            "/**",
            "     * @notice Get the total maximum amount of tokens in the allowlist sale.",
            "     * @return The total maximum amount of tokens in the allowlist sale.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Get the total maximum amount of tokens in the allowlist sale.\n     * @return The total maximum amount of tokens in the allowlist sale.\n     */\n",
        "@notice": "Get the total maximum amount of tokens in the allowlist sale.",
        "@return1": "The total maximum amount of tokens in the allowlist sale.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getCollectionSize",
        "visibility": "public",
        "args": [],
        "func": "function getCollectionSize() public view returns (uint256) {\n        return collectionSize;\n    }",
        "comments": [
            "/**",
            "     * @notice Get the total number of tokens that can ever be minted in the collection.",
            "     * @return The total number of tokens.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Get the total number of tokens that can ever be minted in the collection.\n     * @return The total number of tokens.\n     */\n",
        "@notice": "Get the total number of tokens that can ever be minted in the collection.",
        "@return1": "The total number of tokens.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOwnerFreeMintCount",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function getOwnerFreeMintCount(address owner) public view returns (uint16) {\n        (uint16 ownerFreeMints, , ) = unpack(_getAux(owner));\n        return ownerFreeMints;\n    }",
        "comments": [
            "/**",
            "     * @notice Get the number of tokens that address has free minted.",
            "     * @return The number of free mint tokens that address has free minted.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Get the number of tokens that address has free minted.\n     * @return The number of free mint tokens that address has free minted.\n     */\n",
        "@notice": "Get the number of tokens that address has free minted.",
        "@return1": "The number of free mint tokens that address has free minted.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOwnerGiftsCount",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function getOwnerGiftsCount(address owner) public view returns (uint16) {\n        (, uint16 ownerGifts, ) = unpack(_getAux(owner));\n        return ownerGifts;\n    }",
        "comments": [
            "/**",
            "     * @notice Get the number of tokens that address has been gifted.",
            "     * @return The number of free mint tokens that address has been gifted.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Get the number of tokens that address has been gifted.\n     * @return The number of free mint tokens that address has been gifted.\n     */\n",
        "@notice": "Get the number of tokens that address has been gifted.",
        "@return1": "The number of free mint tokens that address has been gifted.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOwnerAllowlistMintCount",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function getOwnerAllowlistMintCount(address owner) public view returns (uint16) {\n        (, , uint16 ownerAllowlistMints) = unpack(_getAux(owner));\n        return ownerAllowlistMints;\n    }",
        "comments": [
            "/**",
            "     * @notice Get the number of tokens that address has allowlist minted.",
            "     * @return The number of free mint tokens that address has allowlist minted.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Get the number of tokens that address has allowlist minted.\n     * @return The number of free mint tokens that address has allowlist minted.\n     */\n",
        "@notice": "Get the number of tokens that address has allowlist minted.",
        "@return1": "The number of free mint tokens that address has allowlist minted.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "tokenURI",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override (IERC721A, ERC721A)\n        returns (string memory)\n    {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length != 0\n                ? string(abi.encodePacked(baseURI, _toString(tokenId), \".json\"))\n                : \"\";\n    }",
        "comments": [
            "/**",
            "     * @notice Returns the Uniform Resource Identifier (URI) for `tokenId` token.",
            "     * @param tokenId The token ID to query.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     * @param tokenId The token ID to query.\n     */\n",
        "@notice": "Returns the Uniform Resource Identifier (URI) for `tokenId` token.",
        "@param1": "tokenId The token ID to query.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFreeMintActive",
        "visibility": "external",
        "args": [
            {
                "name": "_isFreeMintActive",
                "type": "bool"
            }
        ],
        "func": "function setFreeMintActive(bool _isFreeMintActive) external onlyOwner {\n        isFreeMintActive = _isFreeMintActive;\n    }",
        "comments": [
            "",
            "    // Owner only administration functions",
            "    // ---------------------------------------------------------------",
            "",
            "    /**",
            "     * @notice Set free mint to active or inactive.",
            "     * @param _isFreeMintActive True to set free mint to active, false to set to inactive.",
            "     */ ",
            "    "
        ],
        "comt": "\n    // Owner only administration functions\n    // ---------------------------------------------------------------\n\n    /**\n     * @notice Set free mint to active or inactive.\n     * @param _isFreeMintActive True to set free mint to active, false to set to inactive.\n     */ \n    ",
        "@notice": "Set free mint to active or inactive.",
        "@param1": "_isFreeMintActive True to set free mint to active, false to set to inactive.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAllowlistMintActive",
        "visibility": "external",
        "args": [
            {
                "name": "_isAllowlistMintActive",
                "type": "bool"
            }
        ],
        "func": "function setAllowlistMintActive(bool _isAllowlistMintActive) external onlyOwner {\n        isAllowlistMintActive = _isAllowlistMintActive;\n    }",
        "comments": [
            "/**",
            "     * @notice Set allowlist paid mint to active or inactive.",
            "     * @param _isAllowlistMintActive True to set free mint to active, false to set to inactive.",
            "     */ "
        ],
        "comt": "/**\n     * @notice Set allowlist paid mint to active or inactive.\n     * @param _isAllowlistMintActive True to set free mint to active, false to set to inactive.\n     */ ",
        "@notice": "Set allowlist paid mint to active or inactive.",
        "@param1": "_isAllowlistMintActive True to set free mint to active, false to set to inactive.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMintActive",
        "visibility": "external",
        "args": [
            {
                "name": "_isMintActive",
                "type": "bool"
            }
        ],
        "func": "function setMintActive(bool _isMintActive) external onlyOwner {\n        isMintActive = _isMintActive;\n    }",
        "comments": [
            "/**",
            "     * @notice Set public mint to active or inactive.",
            "     * @param _isMintActive True to set mint to active, false to set to inactive.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Set public mint to active or inactive.\n     * @param _isMintActive True to set mint to active, false to set to inactive.\n     */\n",
        "@notice": "Set public mint to active or inactive.",
        "@param1": "_isMintActive True to set mint to active, false to set to inactive.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAllowlistMintPrice",
        "visibility": "external",
        "args": [
            {
                "name": "_allowlistMintPrice",
                "type": "uint256"
            }
        ],
        "func": "function setAllowlistMintPrice(uint256 _allowlistMintPrice) external onlyOwner {\n        allowlistMintPrice = _allowlistMintPrice;\n    }",
        "comments": [
            "/**",
            "     * @notice Set the allowlist mint price.",
            "     * @param _allowlistMintPrice The new mint price.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Set the allowlist mint price.\n     * @param _allowlistMintPrice The new mint price.\n     */\n",
        "@notice": "Set the allowlist mint price.",
        "@param1": "_allowlistMintPrice The new mint price.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPublicMintPrice",
        "visibility": "external",
        "args": [
            {
                "name": "_publicMintPrice",
                "type": "uint256"
            }
        ],
        "func": "function setPublicMintPrice(uint256 _publicMintPrice) external onlyOwner {\n        publicMintPrice = _publicMintPrice;\n    }",
        "comments": [
            "/**",
            "     * @notice Set the public mint price.",
            "     * @param _publicMintPrice The new mint price.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Set the public mint price.\n     * @param _publicMintPrice The new mint price.\n     */\n",
        "@notice": "Set the public mint price.",
        "@param1": "_publicMintPrice The new mint price.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setReservedFreeMint",
        "visibility": "external",
        "args": [
            {
                "name": "_reservedFreeMint",
                "type": "uint256"
            }
        ],
        "func": "function setReservedFreeMint(uint256 _reservedFreeMint) external onlyOwner {\n        require(\n            numFreeMint <= _reservedFreeMint,\n            \"Cannot set reserved free mint to less than the amount already free minted.\"\n        );\n        reservedFreeMint = _reservedFreeMint;\n    }",
        "comments": [
            "/**",
            "     * @notice Set the number of tokens reserved for free mint and gifts combined.",
            "     * @param _reservedFreeMint The new number of tokens reserved for free mint and gifts combined. Cannot be less than the number of tokens already free minted.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Set the number of tokens reserved for free mint and gifts combined.\n     * @param _reservedFreeMint The new number of tokens reserved for free mint and gifts combined. Cannot be less than the number of tokens already free minted.\n     */\n",
        "@notice": "Set the number of tokens reserved for free mint and gifts combined.",
        "@param1": "_reservedFreeMint The new number of tokens reserved for free mint and gifts combined. Cannot be less than the number of tokens already free minted.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMaxAllowlistMint",
        "visibility": "external",
        "args": [
            {
                "name": "_maxAllowlistMint",
                "type": "uint256"
            }
        ],
        "func": "function setMaxAllowlistMint(uint256 _maxAllowlistMint) external onlyOwner {\n        require(\n            numAllowlistMint <= _maxAllowlistMint,\n            \"Cannot set reserved allowlist mint to less than the amount already allowlist minted.\"\n        );\n        maxAllowlistMint = _maxAllowlistMint;\n    }",
        "comments": [
            "/**",
            "     * @notice Set the number of tokens reserved for allowlist.",
            "     * @param _maxAllowlistMint The new number of tokens reserved for allowlist. Cannot be less than the number of tokens already allowlist minted.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Set the number of tokens reserved for allowlist.\n     * @param _maxAllowlistMint The new number of tokens reserved for allowlist. Cannot be less than the number of tokens already allowlist minted.\n     */\n",
        "@notice": "Set the number of tokens reserved for allowlist.",
        "@param1": "_maxAllowlistMint The new number of tokens reserved for allowlist. Cannot be less than the number of tokens already allowlist minted.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setCollectionSize",
        "visibility": "external",
        "args": [
            {
                "name": "_collectionSize",
                "type": "uint256"
            }
        ],
        "func": "function setCollectionSize(uint256 _collectionSize) external onlyOwner {\n        require(\n            _collectionSize <= collectionSize,\n            \"Cannot increase collection size.\"\n        );\n        require(\n            _collectionSize >= totalSupply() + reservedFreeMint - numFreeMint,\n            \"Cannot set collection size to less than the number of tokens already minted plus the remaining reserved free mint tokens.\"\n        );\n        collectionSize = _collectionSize;\n    }",
        "comments": [
            "/**",
            "     * @notice Reduce the number of tokens that can be minted.",
            "     * @param _collectionSize The new number of total tokens that can ever be minted in the collection. Cannot be greater than the current collection size or smaller than the remaining tokens.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Reduce the number of tokens that can be minted.\n     * @param _collectionSize The new number of total tokens that can ever be minted in the collection. Cannot be greater than the current collection size or smaller than the remaining tokens.\n     */\n",
        "@notice": "Reduce the number of tokens that can be minted.",
        "@param1": "_collectionSize The new number of total tokens that can ever be minted in the collection. Cannot be greater than the current collection size or smaller than the remaining tokens.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setBaseURI",
        "visibility": "external",
        "args": [
            {
                "name": "baseURI",
                "type": "string calldata"
            }
        ],
        "func": "function setBaseURI(string calldata baseURI) external onlyOwner {\n        _baseTokenURI = baseURI;\n    }",
        "comments": [
            "/**",
            "     * @notice Set the base metadata URI.",
            "     * @param baseURI The new base metadata URI.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Set the base metadata URI.\n     * @param baseURI The new base metadata URI.\n     */\n",
        "@notice": "Set the base metadata URI.",
        "@param1": "baseURI The new base metadata URI.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFreeMintMerkleRoot",
        "visibility": "external",
        "args": [
            {
                "name": "_merkleRootFreeMint",
                "type": "bytes32"
            }
        ],
        "func": "function setFreeMintMerkleRoot(bytes32 _merkleRootFreeMint) external onlyOwner {\n        merkleRootFreeMint = _merkleRootFreeMint;\n    }",
        "comments": [
            "/**",
            "     * @notice Set the merkle root for the free mint allowlist.",
            "     * @param _merkleRootFreeMint The new merkle root.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Set the merkle root for the free mint allowlist.\n     * @param _merkleRootFreeMint The new merkle root.\n     */\n",
        "@notice": "Set the merkle root for the free mint allowlist.",
        "@param1": "_merkleRootFreeMint The new merkle root.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAllowlistMerkleRoot",
        "visibility": "external",
        "args": [
            {
                "name": "_merkleRootAllowlist",
                "type": "bytes32"
            }
        ],
        "func": "function setAllowlistMerkleRoot(bytes32 _merkleRootAllowlist) external onlyOwner {\n        merkleRootAllowlist = _merkleRootAllowlist;\n    }",
        "comments": [
            "/**",
            "     * @notice Set the merkle root for the paid mint allowlist.",
            "     * @param _merkleRootAllowlist The new merkle root.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Set the merkle root for the paid mint allowlist.\n     * @param _merkleRootAllowlist The new merkle root.\n     */\n",
        "@notice": "Set the merkle root for the paid mint allowlist.",
        "@param1": "_merkleRootAllowlist The new merkle root.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [],
        "func": "function withdraw() external onlyOwner nonReentrant {\n        (bool ownerWithdrawSuccess, ) = msg.sender.call{\n            value: address(this).balance\n        }(\"\");\n        require(ownerWithdrawSuccess, \"Owner transfer failed\");\n    }",
        "comments": [
            "/**",
            "     * @notice Withdraw ETH from the contract.",
            "     * @dev 100% of the contract balance is sent to the owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Withdraw ETH from the contract.\n     * @dev 100% of the contract balance is sent to the owner.\n     */\n",
        "@notice": "Withdraw ETH from the contract.",
        "@dev": "100% of the contract balance is sent to the owner.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdrawTokens",
        "visibility": "external",
        "args": [
            {
                "name": "token",
                "type": "IERC20"
            }
        ],
        "func": "function withdrawTokens(IERC20 token) external onlyOwner nonReentrant {\n        token.transfer(msg.sender, token.balanceOf(address(this)));\n    }",
        "comments": [
            "/**",
            "     * @notice Withdraw ERC-20 tokens from the contract.",
            "     * @dev In case someone accidentally sends ERC-20 tokens to the contract.",
            "     * @param token The token to withdraw.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Withdraw ERC-20 tokens from the contract.\n     * @dev In case someone accidentally sends ERC-20 tokens to the contract.\n     * @param token The token to withdraw.\n     */\n",
        "@notice": "Withdraw ERC-20 tokens from the contract.",
        "@dev": "In case someone accidentally sends ERC-20 tokens to the contract.",
        "@param1": "token The token to withdraw.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setApprovalForAll",
        "visibility": "public",
        "args": [
            {
                "name": "operator",
                "type": "address"
            },
            {
                "name": "approved",
                "type": "bool"
            }
        ],
        "func": "function setApprovalForAll(address operator, bool approved)\n        public\n        override (IERC721A, ERC721A)\n        onlyAllowedOperatorApproval(operator)\n    {\n        super.setApprovalForAll(operator, approved);\n    }",
        "comments": [
            "",
            "    // ClosedSea functions",
            "",
            "    "
        ],
        "comt": "\n    // ClosedSea functions\n\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "operator",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function approve(address operator, uint256 tokenId)\n        public\n        payable\n        override (IERC721A, ERC721A)\n        onlyAllowedOperatorApproval(operator)\n    {\n        super.approve(operator, tokenId);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address from, address to, uint256 tokenId)\n        public\n        payable\n        override (IERC721A, ERC721A)\n        onlyAllowedOperator(from)\n    {\n        super.transferFrom(from, to, tokenId);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "safeTransferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function safeTransferFrom(address from, address to, uint256 tokenId)\n        public\n        payable\n        override (IERC721A, ERC721A)\n        onlyAllowedOperator(from)\n    {\n        super.safeTransferFrom(from, to, tokenId);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "safeTransferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            },
            {
                "name": "data",
                "type": "bytes memory"
            }
        ],
        "func": "function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)\n        public\n        payable\n        override (IERC721A, ERC721A)\n        onlyAllowedOperator(from)\n    {\n        super.safeTransferFrom(from, to, tokenId, data);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supportsInterface",
        "visibility": "public",
        "args": [
            {
                "name": "interfaceId",
                "type": "bytes4"
            }
        ],
        "func": "function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override (IERC721A, ERC721A, ERC2981)\n        returns (bool)\n    {\n        // Supports the following `interfaceId`s:\n        // - IERC165: 0x01ffc9a7\n        // - IERC721: 0x80ac58cd\n        // - IERC721Metadata: 0x5b5e139f\n        // - IERC2981: 0x2a55205a\n        return ERC721A.supportsInterface(interfaceId) || ERC2981.supportsInterface(interfaceId);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setDefaultRoyalty",
        "visibility": "public",
        "args": [
            {
                "name": "receiver",
                "type": "address"
            },
            {
                "name": "feeNumerator",
                "type": "uint96"
            }
        ],
        "func": "function setDefaultRoyalty(address receiver, uint96 feeNumerator) public onlyOwner {\n        _setDefaultRoyalty(receiver, feeNumerator);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setOperatorFilteringEnabled",
        "visibility": "public",
        "args": [
            {
                "name": "value",
                "type": "bool"
            }
        ],
        "func": "function setOperatorFilteringEnabled(bool value) public onlyOwner {\n        operatorFilteringEnabled = value;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the total number of tokens in existence.",
            "     * Burned tokens will reduce the count.",
            "     * To get the total number of tokens minted, please see {_totalMinted}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n",
        "@dev": "Returns the total number of tokens in existence. * Burned tokens will reduce the count. * To get the total number of tokens minted, please see {_totalMinted}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }",
        "comments": [
            "",
            "    // =============================================================",
            "    //                    ADDRESS DATA OPERATIONS",
            "    // =============================================================",
            "",
            "    /**",
            "     * @dev Returns the number of tokens in `owner`'s account.",
            "     */",
            "    "
        ],
        "comt": "\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    ",
        "@dev": "Returns the number of tokens in `owner`'s account.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supportsInterface",
        "visibility": "public",
        "args": [
            {
                "name": "interfaceId",
                "type": "bytes4"
            }
        ],
        "func": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }",
        "comments": [
            "",
            "    // =============================================================",
            "    //                            IERC165",
            "    // =============================================================",
            "",
            "    /**",
            "     * @dev Returns true if this contract implements the interface defined by",
            "     * `interfaceId`. See the corresponding",
            "     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)",
            "     * to learn more about how these ids are created.",
            "     *",
            "     * This function call must use less than 30000 gas.",
            "     */",
            "    "
        ],
        "comt": "\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    ",
        "@dev": "Returns true if this contract implements the interface defined by * `interfaceId`. See the corresponding * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) * to learn more about how these ids are created. * * This function call must use less than 30000 gas.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "name",
        "visibility": "public",
        "args": [],
        "func": "function name() public view virtual override returns (string memory) {\n        return _name;\n    }",
        "comments": [
            "",
            "    // =============================================================",
            "    //                        IERC721Metadata",
            "    // =============================================================",
            "",
            "    /**",
            "     * @dev Returns the token collection name.",
            "     */",
            "    "
        ],
        "comt": "\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    ",
        "@dev": "Returns the token collection name.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "public",
        "args": [],
        "func": "function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the token collection symbol.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the token collection symbol.\n     */\n",
        "@dev": "Returns the token collection symbol.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "tokenURI",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n",
        "@dev": "Returns the Uniform Resource Identifier (URI) for `tokenId` token.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "ownerOf",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }",
        "comments": [
            "",
            "    // =============================================================",
            "    //                     OWNERSHIPS OPERATIONS",
            "    // =============================================================",
            "",
            "    /**",
            "     * @dev Returns the owner of the `tokenId` token.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `tokenId` must exist.",
            "     */",
            "    "
        ],
        "comt": "\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    ",
        "@dev": "Returns the owner of the `tokenId` token. * * Requirements: * * - `tokenId` must exist.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function approve(address to, uint256 tokenId) public payable virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }",
        "comments": [
            "/**",
            "     * @dev Gives permission to `to` to transfer `tokenId` token to another account.",
            "     * The approval is cleared when the token is transferred.",
            "     *",
            "     * Only a single account can be approved at a time, so approving the",
            "     * zero address clears previous approvals.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - The caller must own the token or be an approved operator.",
            "     * - `tokenId` must exist.",
            "     *",
            "     * Emits an {Approval} event.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n",
        "@dev": "Gives permission to `to` to transfer `tokenId` token to another account. * The approval is cleared when the token is transferred. * * Only a single account can be approved at a time, so approving the * zero address clears previous approvals. * * Requirements: * * - The caller must own the token or be an approved operator. * - `tokenId` must exist. * * Emits an {Approval} event.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getApproved",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the account approved for `tokenId` token.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `tokenId` must exist.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n",
        "@dev": "Returns the account approved for `tokenId` token. * * Requirements: * * - `tokenId` must exist.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setApprovalForAll",
        "visibility": "public",
        "args": [
            {
                "name": "operator",
                "type": "address"
            },
            {
                "name": "approved",
                "type": "bool"
            }
        ],
        "func": "function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }",
        "comments": [
            "/**",
            "     * @dev Approve or remove `operator` as an operator for the caller.",
            "     * Operators can call {transferFrom} or {safeTransferFrom}",
            "     * for any token owned by the caller.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - The `operator` cannot be the caller.",
            "     *",
            "     * Emits an {ApprovalForAll} event.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n",
        "@dev": "Approve or remove `operator` as an operator for the caller. * Operators can call {transferFrom} or {safeTransferFrom} * for any token owned by the caller. * * Requirements: * * - The `operator` cannot be the caller. * * Emits an {ApprovalForAll} event.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isApprovedForAll",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "operator",
                "type": "address"
            }
        ],
        "func": "function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }",
        "comments": [
            "/**",
            "     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.",
            "     *",
            "     * See {setApprovalForAll}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n",
        "@dev": "Returns if the `operator` is allowed to manage all of the assets of `owner`. * * See {setApprovalForAll}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }",
        "comments": [
            "/**",
            "     * @dev Transfers `tokenId` from `from` to `to`.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `from` cannot be the zero address.",
            "     * - `to` cannot be the zero address.",
            "     * - `tokenId` token must be owned by `from`.",
            "     * - If the caller is not `from`, it must be approved to move this token",
            "     * by either {approve} or {setApprovalForAll}.",
            "     *",
            "     * Emits a {Transfer} event.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n",
        "@dev": "Transfers `tokenId` from `from` to `to`. * * Requirements: * * - `from` cannot be the zero address. * - `to` cannot be the zero address. * - `tokenId` token must be owned by `from`. * - If the caller is not `from`, it must be approved to move this token * by either {approve} or {setApprovalForAll}. * * Emits a {Transfer} event.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "safeTransferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }",
        "comments": [
            "/**",
            "     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n",
        "@dev": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "safeTransferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            },
            {
                "name": "_data",
                "type": "bytes memory"
            }
        ],
        "func": "function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public payable virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }",
        "comments": [
            "/**",
            "     * @dev Safely transfers `tokenId` token from `from` to `to`.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `from` cannot be the zero address.",
            "     * - `to` cannot be the zero address.",
            "     * - `tokenId` token must exist and be owned by `from`.",
            "     * - If the caller is not `from`, it must be approved to move this token",
            "     * by either {approve} or {setApprovalForAll}.",
            "     * - If `to` refers to a smart contract, it must implement",
            "     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.",
            "     *",
            "     * Emits a {Transfer} event.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n",
        "@dev": "Safely transfers `tokenId` token from `from` to `to`. * * Requirements: * * - `from` cannot be the zero address. * - `to` cannot be the zero address. * - `tokenId` token must exist and be owned by `from`. * - If the caller is not `from`, it must be approved to move this token * by either {approve} or {setApprovalForAll}. * - If `to` refers to a smart contract, it must implement * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. * * Emits a {Transfer} event.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function burn(uint256 tokenId) public virtual override {\n        _burn(tokenId, true);\n    }",
        "comments": [
            "/**",
            "     * @dev Burns `tokenId`. See {ERC721A-_burn}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - The caller must own `tokenId` or be an approved operator.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n",
        "@dev": "Burns `tokenId`. See {ERC721A-_burn}. * * Requirements: * * - The caller must own `tokenId` or be an approved operator.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "explicitOwnershipOf",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function explicitOwnershipOf(uint256 tokenId) public view virtual override returns (TokenOwnership memory) {\n        TokenOwnership memory ownership;\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\n            return ownership;\n        }\n        ownership = _ownershipAt(tokenId);\n        if (ownership.burned) {\n            return ownership;\n        }\n        return _ownershipOf(tokenId);\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.",
            "     *",
            "     * If the `tokenId` is out of bounds:",
            "     *",
            "     * - `addr = address(0)`",
            "     * - `startTimestamp = 0`",
            "     * - `burned = false`",
            "     * - `extraData = 0`",
            "     *",
            "     * If the `tokenId` is burned:",
            "     *",
            "     * - `addr = <Address of owner before token was burned>`",
            "     * - `startTimestamp = <Timestamp when token was burned>`",
            "     * - `burned = true`",
            "     * - `extraData = <Extra data when token was burned>`",
            "     *",
            "     * Otherwise:",
            "     *",
            "     * - `addr = <Address of owner>`",
            "     * - `startTimestamp = <Timestamp of start of ownership>`",
            "     * - `burned = false`",
            "     * - `extraData = <Extra data at start of ownership>`",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n     *\n     * If the `tokenId` is out of bounds:\n     *\n     * - `addr = address(0)`\n     * - `startTimestamp = 0`\n     * - `burned = false`\n     * - `extraData = 0`\n     *\n     * If the `tokenId` is burned:\n     *\n     * - `addr = <Address of owner before token was burned>`\n     * - `startTimestamp = <Timestamp when token was burned>`\n     * - `burned = true`\n     * - `extraData = <Extra data when token was burned>`\n     *\n     * Otherwise:\n     *\n     * - `addr = <Address of owner>`\n     * - `startTimestamp = <Timestamp of start of ownership>`\n     * - `burned = false`\n     * - `extraData = <Extra data at start of ownership>`\n     */\n",
        "@dev": "Returns the `TokenOwnership` struct at `tokenId` without reverting. * * If the `tokenId` is out of bounds: * * - `addr = address(0)` * - `startTimestamp = 0` * - `burned = false` * - `extraData = 0` * * If the `tokenId` is burned: * * - `addr = <Address of owner before token was burned>` * - `startTimestamp = <Timestamp when token was burned>` * - `burned = true` * - `extraData = <Extra data when token was burned>` * * Otherwise: * * - `addr = <Address of owner>` * - `startTimestamp = <Timestamp of start of ownership>` * - `burned = false` * - `extraData = <Extra data at start of ownership>`",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "explicitOwnershipsOf",
        "visibility": "external",
        "args": [
            {
                "name": "tokenIds",
                "type": "uint256[] calldata"
            }
        ],
        "func": "function explicitOwnershipsOf(uint256[] calldata tokenIds)\n        external\n        view\n        virtual\n        override\n        returns (TokenOwnership[] memory)\n    {\n        unchecked {\n            uint256 tokenIdsLength = tokenIds.length;\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\n            for (uint256 i; i != tokenIdsLength; ++i) {\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\n            }\n            return ownerships;\n        }\n    }",
        "comments": [
            "/**",
            "     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.",
            "     * See {ERC721AQueryable-explicitOwnershipOf}",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n     * See {ERC721AQueryable-explicitOwnershipOf}\n     */\n",
        "@dev": "Returns an array of `TokenOwnership` structs at `tokenIds` in order. * See {ERC721AQueryable-explicitOwnershipOf}",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "tokensOfOwnerIn",
        "visibility": "external",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "start",
                "type": "uint256"
            },
            {
                "name": "stop",
                "type": "uint256"
            }
        ],
        "func": "function tokensOfOwnerIn(\n        address owner,\n        uint256 start,\n        uint256 stop\n    ) external view virtual override returns (uint256[] memory) {\n        unchecked {\n            if (start >= stop) revert InvalidQueryRange();\n            uint256 tokenIdsIdx;\n            uint256 stopLimit = _nextTokenId();\n            // Set `start = max(start, _startTokenId())`.\n            if (start < _startTokenId()) {\n                start = _startTokenId();\n            }\n            // Set `stop = min(stop, stopLimit)`.\n            if (stop > stopLimit) {\n                stop = stopLimit;\n            }\n            uint256 tokenIdsMaxLength = balanceOf(owner);\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\n            // to cater for cases where `balanceOf(owner)` is too big.\n            if (start < stop) {\n                uint256 rangeLength = stop - start;\n                if (rangeLength < tokenIdsMaxLength) {\n                    tokenIdsMaxLength = rangeLength;\n                }\n            } else {\n                tokenIdsMaxLength = 0;\n            }\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\n            if (tokenIdsMaxLength == 0) {\n                return tokenIds;\n            }\n            // We need to call `explicitOwnershipOf(start)`,\n            // because the slot at `start` may not be initialized.\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\n            address currOwnershipAddr;\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\n            if (!ownership.burned) {\n                currOwnershipAddr = ownership.addr;\n            }\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\n                ownership = _ownershipAt(i);\n                if (ownership.burned) {\n                    continue;\n                }\n                if (ownership.addr != address(0)) {\n                    currOwnershipAddr = ownership.addr;\n                }\n                if (currOwnershipAddr == owner) {\n                    tokenIds[tokenIdsIdx++] = i;\n                }\n            }\n            // Downsize the array to fit.\n            assembly {\n                mstore(tokenIds, tokenIdsIdx)\n            }\n            return tokenIds;\n        }\n    }",
        "comments": [
            "/**",
            "     * @dev Returns an array of token IDs owned by `owner`,",
            "     * in the range [`start`, `stop`)",
            "     * (i.e. `start <= tokenId < stop`).",
            "     *",
            "     * This function allows for tokens to be queried if the collection",
            "     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `start < stop`",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns an array of token IDs owned by `owner`,\n     * in the range [`start`, `stop`)\n     * (i.e. `start <= tokenId < stop`).\n     *\n     * This function allows for tokens to be queried if the collection\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n     *\n     * Requirements:\n     *\n     * - `start < stop`\n     */\n",
        "@dev": "Returns an array of token IDs owned by `owner`, * in the range [`start`, `stop`) * (i.e. `start <= tokenId < stop`). * * This function allows for tokens to be queried if the collection * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. * * Requirements: * * - `start < stop`",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "tokensOfOwner",
        "visibility": "external",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\n        unchecked {\n            uint256 tokenIdsIdx;\n            address currOwnershipAddr;\n            uint256 tokenIdsLength = balanceOf(owner);\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\n            TokenOwnership memory ownership;\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\n                ownership = _ownershipAt(i);\n                if (ownership.burned) {\n                    continue;\n                }\n                if (ownership.addr != address(0)) {\n                    currOwnershipAddr = ownership.addr;\n                }\n                if (currOwnershipAddr == owner) {\n                    tokenIds[tokenIdsIdx++] = i;\n                }\n            }\n            return tokenIds;\n        }\n    }",
        "comments": [
            "/**",
            "     * @dev Returns an array of token IDs owned by `owner`.",
            "     *",
            "     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.",
            "     * It is meant to be called off-chain.",
            "     *",
            "     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into",
            "     * multiple smaller scans if the collection is large enough to cause",
            "     * an out-of-gas error (10K collections should be fine).",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns an array of token IDs owned by `owner`.\n     *\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\n     * It is meant to be called off-chain.\n     *\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n     * multiple smaller scans if the collection is large enough to cause\n     * an out-of-gas error (10K collections should be fine).\n     */\n",
        "@dev": "Returns an array of token IDs owned by `owner`. * * This function scans the ownership mapping and is O(`totalSupply`) in complexity. * It is meant to be called off-chain. * * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into * multiple smaller scans if the collection is large enough to cause * an out-of-gas error (10K collections should be fine).",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]