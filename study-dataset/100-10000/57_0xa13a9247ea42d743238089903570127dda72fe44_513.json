[
    {
        "transactions": 513,
        "function_num": 57
    },
    {
        "name": "getMinimumBpt",
        "visibility": "external",
        "args": [],
        "func": "function getMinimumBpt() external pure returns (uint256) {\n        return _getMinimumBpt();\n    }",
        "comments": [
            "/**",
            "     * @notice Return the minimum BPT balance, required to avoid minimum token balances.",
            "     * @dev This amount is minted and immediately burned on pool initialization, so that the total supply",
            "     * (and therefore post-exit token balances), can never be zero. This keeps the math well-behaved when",
            "     * liquidity is low. (It also provides an easy way to check whether a pool has been initialized, to",
            "     * ensure this is only done once.)",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Return the minimum BPT balance, required to avoid minimum token balances.\n     * @dev This amount is minted and immediately burned on pool initialization, so that the total supply\n     * (and therefore post-exit token balances), can never be zero. This keeps the math well-behaved when\n     * liquidity is low. (It also provides an easy way to check whether a pool has been initialized, to\n     * ensure this is only done once.)\n     */\n",
        "@notice": "Return the minimum BPT balance, required to avoid minimum token balances.",
        "@dev": "This amount is minted and immediately burned on pool initialization, so that the total supply * (and therefore post-exit token balances), can never be zero. This keeps the math well-behaved when * liquidity is low. (It also provides an easy way to check whether a pool has been initialized, to * ensure this is only done once.)",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRate",
        "visibility": "external",
        "args": [],
        "func": "function getRate() external view virtual override returns (uint256) {\n        // We need to compute the current invariant and actual total supply. The latter includes protocol fees that have\n        // accrued but are not yet minted: in calculating these we'll actually end up fetching most of the data we need\n        // for the invariant.\n\n        (\n            uint256[] memory balances,\n            uint256 virtualSupply,\n            uint256 protocolFeeAmount,\n            uint256 lastJoinExitAmp,\n            uint256 currentInvariantWithLastJoinExitAmp\n        ) = _getSupplyAndFeesData();\n\n        // Due protocol fees will be minted at the next join or exit, so we can simply add them to the current virtual\n        // supply to get the actual supply.\n        uint256 actualTotalSupply = virtualSupply.add(protocolFeeAmount);\n\n        // All that's missing now is the invariant. We have the balances required to calculate it already, but still\n        // need the current amplification factor.\n        (uint256 currentAmp, ) = _getAmplificationParameter();\n\n        // It turns out that the process for due protocol fee calculation involves computing the current invariant,\n        // except using the amplification factor at the last join or exit. This would typically not be terribly useful,\n        // but since the amplification factor only changes rarely there is high probability of its current value being\n        // the same as it was in the last join or exit. If that is the case, then we can skip the costly invariant\n        // computation altogether.\n        uint256 currentInvariant = (currentAmp == lastJoinExitAmp)\n            ? currentInvariantWithLastJoinExitAmp\n            : StableMath._calculateInvariant(currentAmp, balances);\n\n        // With the current invariant and actual total supply, we can compute the rate as a fixed-point number.\n        return currentInvariant.divDown(actualTotalSupply);\n    }",
        "comments": [
            "/**",
            "     * @dev This function returns the appreciation of BPT relative to the underlying tokens, as an 18 decimal fixed",
            "     * point number. It is simply the ratio of the invariant to the BPT supply.",
            "     *",
            "     * The total supply is initialized to equal the invariant, so this value starts at one. During Pool operation the",
            "     * invariant always grows and shrinks either proportionally to the total supply (in scenarios with no price impact,",
            "     * e.g. proportional joins), or grows faster and shrinks more slowly than it (whenever swap fees are collected or",
            "     * the token rates increase). Therefore, the rate is a monotonically increasing function.",
            "     *",
            "     * WARNING: since this function reads balances directly from the Vault, it is potentially subject to manipulation",
            "     * via reentrancy. However, this can only happen if one of the tokens in the Pool contains some form of callback",
            "     * behavior in the `transferFrom` function (like ERC777 tokens do). These tokens are strictly incompatible with the",
            "     * Vault and Pool design, and are not safe to be used.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev This function returns the appreciation of BPT relative to the underlying tokens, as an 18 decimal fixed\n     * point number. It is simply the ratio of the invariant to the BPT supply.\n     *\n     * The total supply is initialized to equal the invariant, so this value starts at one. During Pool operation the\n     * invariant always grows and shrinks either proportionally to the total supply (in scenarios with no price impact,\n     * e.g. proportional joins), or grows faster and shrinks more slowly than it (whenever swap fees are collected or\n     * the token rates increase). Therefore, the rate is a monotonically increasing function.\n     *\n     * WARNING: since this function reads balances directly from the Vault, it is potentially subject to manipulation\n     * via reentrancy. However, this can only happen if one of the tokens in the Pool contains some form of callback\n     * behavior in the `transferFrom` function (like ERC777 tokens do). These tokens are strictly incompatible with the\n     * Vault and Pool design, and are not safe to be used.\n     */\n",
        "@dev": "This function returns the appreciation of BPT relative to the underlying tokens, as an 18 decimal fixed * point number. It is simply the ratio of the invariant to the BPT supply. * * The total supply is initialized to equal the invariant, so this value starts at one. During Pool operation the * invariant always grows and shrinks either proportionally to the total supply (in scenarios with no price impact, * e.g. proportional joins), or grows faster and shrinks more slowly than it (whenever swap fees are collected or * the token rates increase). Therefore, the rate is a monotonically increasing function. * * WARNING: since this function reads balances directly from the Vault, it is potentially subject to manipulation * via reentrancy. However, this can only happen if one of the tokens in the Pool contains some form of callback * behavior in the `transferFrom` function (like ERC777 tokens do). These tokens are strictly incompatible with the * Vault and Pool design, and are not safe to be used.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getActualSupply",
        "visibility": "external",
        "args": [],
        "func": "function getActualSupply() external view returns (uint256) {\n        (, uint256 virtualSupply, uint256 protocolFeeAmount, , ) = _getSupplyAndFeesData();\n        return virtualSupply.add(protocolFeeAmount);\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the effective BPT supply.",
            "     *",
            "     * In other pools, this would be the same as `totalSupply`, but there are two key differences here:",
            "     *  - this pool pre-mints BPT and holds it in the Vault as a token, and as such we need to subtract the Vault's",
            "     *    balance to get the total \"circulating supply\". This is called the 'virtualSupply'.",
            "     *  - the Pool owes debt to the Protocol in the form of unminted BPT, which will be minted immediately before the",
            "     *    next join or exit. We need to take these into account since, even if they don't yet exist, they will",
            "     *    effectively be included in any Pool operation that involves BPT.",
            "     *",
            "     * In the vast majority of cases, this function should be used instead of `totalSupply()`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the effective BPT supply.\n     *\n     * In other pools, this would be the same as `totalSupply`, but there are two key differences here:\n     *  - this pool pre-mints BPT and holds it in the Vault as a token, and as such we need to subtract the Vault's\n     *    balance to get the total \"circulating supply\". This is called the 'virtualSupply'.\n     *  - the Pool owes debt to the Protocol in the form of unminted BPT, which will be minted immediately before the\n     *    next join or exit. We need to take these into account since, even if they don't yet exist, they will\n     *    effectively be included in any Pool operation that involves BPT.\n     *\n     * In the vast majority of cases, this function should be used instead of `totalSupply()`.\n     */\n",
        "@dev": "Returns the effective BPT supply. * * In other pools, this would be the same as `totalSupply`, but there are two key differences here: * - this pool pre-mints BPT and holds it in the Vault as a token, and as such we need to subtract the Vault's * balance to get the total \"circulating supply\". This is called the 'virtualSupply'. * - the Pool owes debt to the Protocol in the form of unminted BPT, which will be minted immediately before the * next join or exit. We need to take these into account since, even if they don't yet exist, they will * effectively be included in any Pool operation that involves BPT. * * In the vast majority of cases, this function should be used instead of `totalSupply()`.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "onSwap",
        "visibility": "external",
        "args": [
            {
                "name": "swapRequest",
                "type": "SwapRequest memory"
            },
            {
                "name": "balances",
                "type": "uint256[] memory"
            },
            {
                "name": "indexIn",
                "type": "uint256"
            },
            {
                "name": "indexOut",
                "type": "uint256"
            }
        ],
        "func": "function onSwap(\n        SwapRequest memory swapRequest,\n        uint256[] memory balances,\n        uint256 indexIn,\n        uint256 indexOut\n    ) external override onlyVault(swapRequest.poolId) returns (uint256) {\n        _beforeSwapJoinExit();\n\n        _validateIndexes(indexIn, indexOut, _getTotalTokens());\n        uint256[] memory scalingFactors = _scalingFactors();\n\n        return\n            swapRequest.kind == IVault.SwapKind.GIVEN_IN\n                ? _swapGivenIn(swapRequest, balances, indexIn, indexOut, scalingFactors)\n                : _swapGivenOut(swapRequest, balances, indexIn, indexOut, scalingFactors);\n    }",
        "comments": [
            "    // Swap Hooks",
            "",
            "    "
        ],
        "comt": "    // Swap Hooks\n\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getBptIndex",
        "visibility": "public",
        "args": [],
        "func": "function getBptIndex() public view returns (uint256) {\n        return _bptIndex;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRateProviders",
        "visibility": "external",
        "args": [],
        "func": "function getRateProviders() external view returns (IRateProvider[] memory) {\n        uint256 totalTokens = _getTotalTokens();\n        IRateProvider[] memory providers = new IRateProvider[](totalTokens);\n\n        for (uint256 i = 0; i < totalTokens; ++i) {\n            providers[i] = _getRateProvider(i);\n        }\n\n        return providers;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the rate providers configured for each token (in the same order as registered).",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the rate providers configured for each token (in the same order as registered).\n     */\n",
        "@dev": "Returns the rate providers configured for each token (in the same order as registered).",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isTokenExemptFromYieldProtocolFee",
        "visibility": "external",
        "args": [
            {
                "name": "token",
                "type": "IERC20"
            }
        ],
        "func": "function isTokenExemptFromYieldProtocolFee(IERC20 token) external view returns (bool) {\n        return _isTokenExemptFromYieldProtocolFee(_getTokenIndex(token));\n    }",
        "comments": [
            "",
            "    // Exempt flags",
            "",
            "    /**",
            "     * @dev Returns whether the token is exempt from protocol fees on the yield.",
            "     * If the BPT token is passed in (which doesn't make much sense, but shouldn't fail,",
            "     * since it is a valid pool token), the corresponding flag will be false.",
            "     */",
            "    "
        ],
        "comt": "\n    // Exempt flags\n\n    /**\n     * @dev Returns whether the token is exempt from protocol fees on the yield.\n     * If the BPT token is passed in (which doesn't make much sense, but shouldn't fail,\n     * since it is a valid pool token), the corresponding flag will be false.\n     */\n    ",
        "@dev": "Returns whether the token is exempt from protocol fees on the yield. * If the BPT token is passed in (which doesn't make much sense, but shouldn't fail, * since it is a valid pool token), the corresponding flag will be false.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getTokenRate",
        "visibility": "external",
        "args": [
            {
                "name": "token",
                "type": "IERC20"
            }
        ],
        "func": "function getTokenRate(IERC20 token) external view returns (uint256) {\n        return _getTokenRate(_getTokenIndex(token));\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the rate for a given token. All token rates are fixed-point values with 18 decimals.",
            "     * If there is no rate provider for the provided token, it returns FixedPoint.ONE.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the rate for a given token. All token rates are fixed-point values with 18 decimals.\n     * If there is no rate provider for the provided token, it returns FixedPoint.ONE.\n     */\n",
        "@dev": "Returns the rate for a given token. All token rates are fixed-point values with 18 decimals. * If there is no rate provider for the provided token, it returns FixedPoint.ONE.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getTokenRateCache",
        "visibility": "external",
        "args": [
            {
                "name": "token",
                "type": "IERC20"
            }
        ],
        "func": "function getTokenRateCache(IERC20 token)\n        external\n        view\n        returns (\n            uint256 rate,\n            uint256 oldRate,\n            uint256 duration,\n            uint256 expires\n        )\n    {\n        bytes32 cache = _tokenRateCaches[_getTokenIndex(token)];\n\n        // A zero cache indicates that the token doesn't have a rate provider associated with it.\n        _require(cache != bytes32(0), Errors.TOKEN_DOES_NOT_HAVE_RATE_PROVIDER);\n\n        rate = cache.getCurrentRate();\n        oldRate = cache.getOldRate();\n        (duration, expires) = cache.getTimestamps();\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the cached value for token's rate. Reverts if the token doesn't belong to the pool or has no rate",
            "     * provider.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the cached value for token's rate. Reverts if the token doesn't belong to the pool or has no rate\n     * provider.\n     */\n",
        "@dev": "Returns the cached value for token's rate. Reverts if the token doesn't belong to the pool or has no rate * provider.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setTokenRateCacheDuration",
        "visibility": "external",
        "args": [
            {
                "name": "token",
                "type": "IERC20"
            },
            {
                "name": "duration",
                "type": "uint256"
            }
        ],
        "func": "function setTokenRateCacheDuration(IERC20 token, uint256 duration) external authenticate {\n        uint256 index = _getTokenIndex(token);\n        IRateProvider provider = _getRateProvider(index);\n        _require(address(provider) != address(0), Errors.TOKEN_DOES_NOT_HAVE_RATE_PROVIDER);\n        _updateTokenRateCache(index, provider, duration);\n        emit TokenRateProviderSet(index, provider, duration);\n    }",
        "comments": [
            "/**",
            "     * @dev Sets a new duration for a token rate cache. It reverts if there was no rate provider set initially.",
            "     * Note this function also updates the current cached value.",
            "     * @param duration Number of seconds until the current token rate is fetched again.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Sets a new duration for a token rate cache. It reverts if there was no rate provider set initially.\n     * Note this function also updates the current cached value.\n     * @param duration Number of seconds until the current token rate is fetched again.\n     */\n",
        "@dev": "Sets a new duration for a token rate cache. It reverts if there was no rate provider set initially. * Note this function also updates the current cached value.",
        "@param1": "duration Number of seconds until the current token rate is fetched again.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateTokenRateCache",
        "visibility": "external",
        "args": [
            {
                "name": "token",
                "type": "IERC20"
            }
        ],
        "func": "function updateTokenRateCache(IERC20 token) external {\n        uint256 index = _getTokenIndex(token);\n\n        IRateProvider provider = _getRateProvider(index);\n        _require(address(provider) != address(0), Errors.TOKEN_DOES_NOT_HAVE_RATE_PROVIDER);\n        uint256 duration = _tokenRateCaches[index].getDuration();\n        _updateTokenRateCache(index, provider, duration);\n    }",
        "comments": [
            "/**",
            "     * @dev Forces a rate cache hit for a token.",
            "     * It will revert if the requested token does not have an associated rate provider.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Forces a rate cache hit for a token.\n     * It will revert if the requested token does not have an associated rate provider.\n     */\n",
        "@dev": "Forces a rate cache hit for a token. * It will revert if the requested token does not have an associated rate provider.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getLastJoinExitData",
        "visibility": "public",
        "args": [],
        "func": "function getLastJoinExitData()\n        public\n        view\n        returns (uint256 lastJoinExitAmplification, uint256 lastPostJoinExitInvariant)\n    {\n        bytes32 rawData = _lastJoinExitData;\n\n        lastJoinExitAmplification = rawData.decodeUint(\n            _LAST_JOIN_EXIT_AMPLIFICATION_OFFSET,\n            _LAST_JOIN_EXIT_AMPLIFICATION_SIZE\n        );\n\n        lastPostJoinExitInvariant = rawData.decodeUint(\n            _LAST_POST_JOIN_EXIT_INVARIANT_OFFSET,\n            _LAST_POST_JOIN_EXIT_INVARIANT_SIZE\n        );\n    }",
        "comments": [
            "/**",
            "     * @notice Return the amplification factor and invariant as of the most recent join or exit (including BPT swaps)",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Return the amplification factor and invariant as of the most recent join or exit (including BPT swaps)\n     */\n",
        "@notice": "Return the amplification factor and invariant as of the most recent join or exit (including BPT swaps)",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAmplificationParameter",
        "visibility": "external",
        "args": [],
        "func": "function getAmplificationParameter()\n        external\n        view\n        returns (\n            uint256 value,\n            bool isUpdating,\n            uint256 precision\n        )\n    {\n        (value, isUpdating) = _getAmplificationParameter();\n        precision = StableMath._AMP_PRECISION;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "startAmplificationParameterUpdate",
        "visibility": "external",
        "args": [
            {
                "name": "rawEndValue",
                "type": "uint256"
            },
            {
                "name": "endTime",
                "type": "uint256"
            }
        ],
        "func": "function startAmplificationParameterUpdate(uint256 rawEndValue, uint256 endTime) external authenticate {\n        _require(rawEndValue >= StableMath._MIN_AMP, Errors.MIN_AMP);\n        _require(rawEndValue <= StableMath._MAX_AMP, Errors.MAX_AMP);\n\n        uint256 duration = Math.sub(endTime, block.timestamp);\n        _require(duration >= _MIN_UPDATE_TIME, Errors.AMP_END_TIME_TOO_CLOSE);\n\n        (uint256 currentValue, bool isUpdating) = _getAmplificationParameter();\n        _require(!isUpdating, Errors.AMP_ONGOING_UPDATE);\n\n        uint256 endValue = Math.mul(rawEndValue, StableMath._AMP_PRECISION);\n\n        // daily rate = (endValue / currentValue) / duration * 1 day\n        // We perform all multiplications first to not reduce precision, and round the division up as we want to avoid\n        // large rates. Note that these are regular integer multiplications and divisions, not fixed point.\n        uint256 dailyRate = endValue > currentValue\n            ? Math.divUp(Math.mul(1 days, endValue), Math.mul(currentValue, duration))\n            : Math.divUp(Math.mul(1 days, currentValue), Math.mul(endValue, duration));\n        _require(dailyRate <= _MAX_AMP_UPDATE_DAILY_RATE, Errors.AMP_RATE_TOO_HIGH);\n\n        _setAmplificationData(currentValue, endValue, block.timestamp, endTime);\n    }",
        "comments": [
            "/**",
            "     * @dev Begin changing the amplification parameter to `rawEndValue` over time. The value will change linearly until",
            "     * `endTime` is reached, when it will be `rawEndValue`.",
            "     *",
            "     * NOTE: Internally, the amplification parameter is represented using higher precision. The values returned by",
            "     * `getAmplificationParameter` have to be corrected to account for this when comparing to `rawEndValue`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Begin changing the amplification parameter to `rawEndValue` over time. The value will change linearly until\n     * `endTime` is reached, when it will be `rawEndValue`.\n     *\n     * NOTE: Internally, the amplification parameter is represented using higher precision. The values returned by\n     * `getAmplificationParameter` have to be corrected to account for this when comparing to `rawEndValue`.\n     */\n",
        "@dev": "Begin changing the amplification parameter to `rawEndValue` over time. The value will change linearly until * `endTime` is reached, when it will be `rawEndValue`. * * NOTE: Internally, the amplification parameter is represented using higher precision. The values returned by * `getAmplificationParameter` have to be corrected to account for this when comparing to `rawEndValue`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "stopAmplificationParameterUpdate",
        "visibility": "external",
        "args": [],
        "func": "function stopAmplificationParameterUpdate() external authenticate {\n        (uint256 currentValue, bool isUpdating) = _getAmplificationParameter();\n        _require(isUpdating, Errors.AMP_NO_ONGOING_UPDATE);\n\n        _setAmplificationData(currentValue);\n    }",
        "comments": [
            "/**",
            "     * @dev Stops the amplification parameter change process, keeping the current value.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Stops the amplification parameter change process, keeping the current value.\n     */\n",
        "@dev": "Stops the amplification parameter change process, keeping the current value.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPoolId",
        "visibility": "public",
        "args": [],
        "func": "function getPoolId() public view override returns (bytes32) {\n        return _poolId;\n    }",
        "comments": [
            "",
            "    // Getters / Setters",
            "",
            "    /**",
            "     * @notice Return the pool id.",
            "     */",
            "    "
        ],
        "comt": "\n    // Getters / Setters\n\n    /**\n     * @notice Return the pool id.\n     */\n    ",
        "@notice": "Return the pool id.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSwapFeePercentage",
        "visibility": "public",
        "args": [],
        "func": "function getSwapFeePercentage() public view virtual override returns (uint256) {\n        return _miscData.decodeUint(_SWAP_FEE_PERCENTAGE_OFFSET, _SWAP_FEE_PERCENTAGE_BIT_LENGTH);\n    }",
        "comments": [
            "/**",
            "     * @notice Return the current value of the swap fee percentage.",
            "     * @dev This is stored in `_miscData`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Return the current value of the swap fee percentage.\n     * @dev This is stored in `_miscData`.\n     */\n",
        "@notice": "Return the current value of the swap fee percentage.",
        "@dev": "This is stored in `_miscData`.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getProtocolFeesCollector",
        "visibility": "public",
        "args": [],
        "func": "function getProtocolFeesCollector() public view returns (IProtocolFeesCollector) {\n        return _protocolFeesCollector;\n    }",
        "comments": [
            "/**",
            "     * @notice Return the ProtocolFeesCollector contract.",
            "     * @dev This is immutable, and retrieved from the Vault on construction. (It is also immutable in the Vault.)",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Return the ProtocolFeesCollector contract.\n     * @dev This is immutable, and retrieved from the Vault on construction. (It is also immutable in the Vault.)\n     */\n",
        "@notice": "Return the ProtocolFeesCollector contract.",
        "@dev": "This is immutable, and retrieved from the Vault on construction. (It is also immutable in the Vault.)",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setSwapFeePercentage",
        "visibility": "public",
        "args": [
            {
                "name": "swapFeePercentage",
                "type": "uint256"
            }
        ],
        "func": "function setSwapFeePercentage(uint256 swapFeePercentage) public virtual authenticate whenNotPaused {\n        _setSwapFeePercentage(swapFeePercentage);\n    }",
        "comments": [
            "/**",
            "     * @notice Set the swap fee percentage.",
            "     * @dev This is a permissioned function, and disabled if the pool is paused. The swap fee must be within the",
            "     * bounds set by MIN_SWAP_FEE_PERCENTAGE/MAX_SWAP_FEE_PERCENTAGE. Emits the SwapFeePercentageChanged event.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Set the swap fee percentage.\n     * @dev This is a permissioned function, and disabled if the pool is paused. The swap fee must be within the\n     * bounds set by MIN_SWAP_FEE_PERCENTAGE/MAX_SWAP_FEE_PERCENTAGE. Emits the SwapFeePercentageChanged event.\n     */\n",
        "@notice": "Set the swap fee percentage.",
        "@dev": "This is a permissioned function, and disabled if the pool is paused. The swap fee must be within the * bounds set by MIN_SWAP_FEE_PERCENTAGE/MAX_SWAP_FEE_PERCENTAGE. Emits the SwapFeePercentageChanged event.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inRecoveryMode",
        "visibility": "public",
        "args": [],
        "func": "function inRecoveryMode() public view override returns (bool) {\n        return _miscData.decodeBool(_RECOVERY_MODE_BIT_OFFSET);\n    }",
        "comments": [
            "/**",
            "     * @notice Returns whether the pool is in Recovery Mode.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Returns whether the pool is in Recovery Mode.\n     */\n",
        "@notice": "Returns whether the pool is in Recovery Mode.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAssetManagerPoolConfig",
        "visibility": "public",
        "args": [
            {
                "name": "token",
                "type": "IERC20"
            },
            {
                "name": "poolConfig",
                "type": "bytes memory"
            }
        ],
        "func": "function setAssetManagerPoolConfig(IERC20 token, bytes memory poolConfig)\n        public\n        virtual\n        authenticate\n        whenNotPaused\n    {\n        _setAssetManagerPoolConfig(token, poolConfig);\n    }",
        "comments": [
            "/**",
            "     * @notice Set the asset manager parameters for the given token.",
            "     * @dev This is a permissioned function, unavailable when the pool is paused.",
            "     * The details of the configuration data are set by each Asset Manager. (For an example, see",
            "     * `RewardsAssetManager`.)",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Set the asset manager parameters for the given token.\n     * @dev This is a permissioned function, unavailable when the pool is paused.\n     * The details of the configuration data are set by each Asset Manager. (For an example, see\n     * `RewardsAssetManager`.)\n     */\n",
        "@notice": "Set the asset manager parameters for the given token.",
        "@dev": "This is a permissioned function, unavailable when the pool is paused. * The details of the configuration data are set by each Asset Manager. (For an example, see * `RewardsAssetManager`.)",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "pause",
        "visibility": "external",
        "args": [],
        "func": "function pause() external authenticate {\n        _setPaused(true);\n    }",
        "comments": [
            "/**",
            "     * @notice Pause the pool: an emergency action which disables all pool functions.",
            "     * @dev This is a permissioned function that will only work during the Pause Window set during pool factory",
            "     * deployment (see `TemporarilyPausable`).",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Pause the pool: an emergency action which disables all pool functions.\n     * @dev This is a permissioned function that will only work during the Pause Window set during pool factory\n     * deployment (see `TemporarilyPausable`).\n     */\n",
        "@notice": "Pause the pool: an emergency action which disables all pool functions.",
        "@dev": "This is a permissioned function that will only work during the Pause Window set during pool factory * deployment (see `TemporarilyPausable`).",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "unpause",
        "visibility": "external",
        "args": [],
        "func": "function unpause() external authenticate {\n        _setPaused(false);\n    }",
        "comments": [
            "/**",
            "     * @notice Reverse a `pause` operation, and restore a pool to normal functionality.",
            "     * @dev This is a permissioned function that will only work on a paused pool within the Buffer Period set during",
            "     * pool factory deployment (see `TemporarilyPausable`). Note that any paused pools will automatically unpause",
            "     * after the Buffer Period expires.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Reverse a `pause` operation, and restore a pool to normal functionality.\n     * @dev This is a permissioned function that will only work on a paused pool within the Buffer Period set during\n     * pool factory deployment (see `TemporarilyPausable`). Note that any paused pools will automatically unpause\n     * after the Buffer Period expires.\n     */\n",
        "@notice": "Reverse a `pause` operation, and restore a pool to normal functionality.",
        "@dev": "This is a permissioned function that will only work on a paused pool within the Buffer Period set during * pool factory deployment (see `TemporarilyPausable`). Note that any paused pools will automatically unpause * after the Buffer Period expires.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "onJoinPool",
        "visibility": "external",
        "args": [
            {
                "name": "poolId",
                "type": "bytes32"
            },
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "balances",
                "type": "uint256[] memory"
            },
            {
                "name": "lastChangeBlock",
                "type": "uint256"
            },
            {
                "name": "protocolSwapFeePercentage",
                "type": "uint256"
            },
            {
                "name": "userData",
                "type": "bytes memory"
            }
        ],
        "func": "function onJoinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\n        _beforeSwapJoinExit();\n\n        uint256[] memory scalingFactors = _scalingFactors();\n\n        if (totalSupply() == 0) {\n            (uint256 bptAmountOut, uint256[] memory amountsIn) = _onInitializePool(\n                poolId,\n                sender,\n                recipient,\n                scalingFactors,\n                userData\n            );\n\n            // On initialization, we lock _getMinimumBpt() by minting it for the zero address. This BPT acts as a\n            // minimum as it will never be burned, which reduces potential issues with rounding, and also prevents the\n            // Pool from ever being fully drained.\n            _require(bptAmountOut >= _getMinimumBpt(), Errors.MINIMUM_BPT);\n            _mintPoolTokens(address(0), _getMinimumBpt());\n            _mintPoolTokens(recipient, bptAmountOut - _getMinimumBpt());\n\n            // amountsIn are amounts entering the Pool, so we round up.\n            _downscaleUpArray(amountsIn, scalingFactors);\n\n            return (amountsIn, new uint256[](balances.length));\n        } else {\n            _upscaleArray(balances, scalingFactors);\n            (uint256 bptAmountOut, uint256[] memory amountsIn) = _onJoinPool(\n                poolId,\n                sender,\n                recipient,\n                balances,\n                lastChangeBlock,\n                inRecoveryMode() ? 0 : protocolSwapFeePercentage, // Protocol fees are disabled while in recovery mode\n                scalingFactors,\n                userData\n            );\n\n            // Note we no longer use `balances` after calling `_onJoinPool`, which may mutate it.\n\n            _mintPoolTokens(recipient, bptAmountOut);\n\n            // amountsIn are amounts entering the Pool, so we round up.\n            _downscaleUpArray(amountsIn, scalingFactors);\n\n            // This Pool ignores the `dueProtocolFees` return value, so we simply return a zeroed-out array.\n            return (amountsIn, new uint256[](balances.length));\n        }\n    }",
        "comments": [
            "/**",
            "     * @notice Vault hook for adding liquidity to a pool (including the first time, \"initializing\" the pool).",
            "     * @dev This function can only be called from the Vault, from `joinPool`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Vault hook for adding liquidity to a pool (including the first time, \"initializing\" the pool).\n     * @dev This function can only be called from the Vault, from `joinPool`.\n     */\n",
        "@notice": "Vault hook for adding liquidity to a pool (including the first time, \"initializing\" the pool).",
        "@dev": "This function can only be called from the Vault, from `joinPool`.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "onExitPool",
        "visibility": "external",
        "args": [
            {
                "name": "poolId",
                "type": "bytes32"
            },
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "balances",
                "type": "uint256[] memory"
            },
            {
                "name": "lastChangeBlock",
                "type": "uint256"
            },
            {
                "name": "protocolSwapFeePercentage",
                "type": "uint256"
            },
            {
                "name": "userData",
                "type": "bytes memory"
            }
        ],
        "func": "function onExitPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\n        uint256[] memory amountsOut;\n        uint256 bptAmountIn;\n\n        // When a user calls `exitPool`, this is the first point of entry from the Vault.\n        // We first check whether this is a Recovery Mode exit - if so, we proceed using this special lightweight exit\n        // mechanism which avoids computing any complex values, interacting with external contracts, etc., and generally\n        // should always work, even if the Pool's mathematics or a dependency break down.\n        if (userData.isRecoveryModeExitKind()) {\n            // This exit kind is only available in Recovery Mode.\n            _ensureInRecoveryMode();\n\n            // Note that we don't upscale balances nor downscale amountsOut - we don't care about scaling factors during\n            // a recovery mode exit.\n            (bptAmountIn, amountsOut) = _doRecoveryModeExit(balances, totalSupply(), userData);\n        } else {\n            // Note that we only call this if we're not in a recovery mode exit.\n            _beforeSwapJoinExit();\n\n            uint256[] memory scalingFactors = _scalingFactors();\n            _upscaleArray(balances, scalingFactors);\n\n            (bptAmountIn, amountsOut) = _onExitPool(\n                poolId,\n                sender,\n                recipient,\n                balances,\n                lastChangeBlock,\n                inRecoveryMode() ? 0 : protocolSwapFeePercentage, // Protocol fees are disabled while in recovery mode\n                scalingFactors,\n                userData\n            );\n\n            // amountsOut are amounts exiting the Pool, so we round down.\n            _downscaleDownArray(amountsOut, scalingFactors);\n        }\n\n        // Note we no longer use `balances` after calling `_onExitPool`, which may mutate it.\n\n        _burnPoolTokens(sender, bptAmountIn);\n\n        // This Pool ignores the `dueProtocolFees` return value, so we simply return a zeroed-out array.\n        return (amountsOut, new uint256[](balances.length));\n    }",
        "comments": [
            "/**",
            "     * @notice Vault hook for removing liquidity from a pool.",
            "     * @dev This function can only be called from the Vault, from `exitPool`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Vault hook for removing liquidity from a pool.\n     * @dev This function can only be called from the Vault, from `exitPool`.\n     */\n",
        "@notice": "Vault hook for removing liquidity from a pool.",
        "@dev": "This function can only be called from the Vault, from `exitPool`.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "queryJoin",
        "visibility": "external",
        "args": [
            {
                "name": "poolId",
                "type": "bytes32"
            },
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "balances",
                "type": "uint256[] memory"
            },
            {
                "name": "lastChangeBlock",
                "type": "uint256"
            },
            {
                "name": "protocolSwapFeePercentage",
                "type": "uint256"
            },
            {
                "name": "userData",
                "type": "bytes memory"
            }
        ],
        "func": "function queryJoin(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external override returns (uint256 bptOut, uint256[] memory amountsIn) {\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\n\n        _queryAction(\n            poolId,\n            sender,\n            recipient,\n            balances,\n            lastChangeBlock,\n            protocolSwapFeePercentage,\n            userData,\n            _onJoinPool,\n            _downscaleUpArray\n        );\n\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\n        // and we don't need to return anything here - it just silences compiler warnings.\n        return (bptOut, amountsIn);\n    }",
        "comments": [
            "",
            "    // Query functions",
            "",
            "    /**",
            "     * @notice \"Dry run\" `onJoinPool`.",
            "     * @dev Returns the amount of BPT that would be granted to `recipient` if the `onJoinPool` hook were called by the",
            "     * Vault with the same arguments, along with the number of tokens `sender` would have to supply.",
            "     *",
            "     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault",
            "     * data, such as the protocol swap fee percentage and Pool balances.",
            "     *",
            "     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must",
            "     * explicitly use eth_call instead of eth_sendTransaction.",
            "     */",
            "    "
        ],
        "comt": "\n    // Query functions\n\n    /**\n     * @notice \"Dry run\" `onJoinPool`.\n     * @dev Returns the amount of BPT that would be granted to `recipient` if the `onJoinPool` hook were called by the\n     * Vault with the same arguments, along with the number of tokens `sender` would have to supply.\n     *\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\n     * data, such as the protocol swap fee percentage and Pool balances.\n     *\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\n     * explicitly use eth_call instead of eth_sendTransaction.\n     */\n    ",
        "@notice": "\"Dry run\" `onJoinPool`.",
        "@dev": "Returns the amount of BPT that would be granted to `recipient` if the `onJoinPool` hook were called by the * Vault with the same arguments, along with the number of tokens `sender` would have to supply. * * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault * data, such as the protocol swap fee percentage and Pool balances. * * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must * explicitly use eth_call instead of eth_sendTransaction.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 1
    },
    {
        "name": "queryExit",
        "visibility": "external",
        "args": [
            {
                "name": "poolId",
                "type": "bytes32"
            },
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "balances",
                "type": "uint256[] memory"
            },
            {
                "name": "lastChangeBlock",
                "type": "uint256"
            },
            {
                "name": "protocolSwapFeePercentage",
                "type": "uint256"
            },
            {
                "name": "userData",
                "type": "bytes memory"
            }
        ],
        "func": "function queryExit(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external override returns (uint256 bptIn, uint256[] memory amountsOut) {\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\n\n        _queryAction(\n            poolId,\n            sender,\n            recipient,\n            balances,\n            lastChangeBlock,\n            protocolSwapFeePercentage,\n            userData,\n            _onExitPool,\n            _downscaleDownArray\n        );\n\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\n        // and we don't need to return anything here - it just silences compiler warnings.\n        return (bptIn, amountsOut);\n    }",
        "comments": [
            "/**",
            "     * @notice \"Dry run\" `onExitPool`.",
            "     * @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the",
            "     * Vault with the same arguments, along with the number of tokens `recipient` would receive.",
            "     *",
            "     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault",
            "     * data, such as the protocol swap fee percentage and Pool balances.",
            "     *",
            "     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must",
            "     * explicitly use eth_call instead of eth_sendTransaction.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice \"Dry run\" `onExitPool`.\n     * @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the\n     * Vault with the same arguments, along with the number of tokens `recipient` would receive.\n     *\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\n     * data, such as the protocol swap fee percentage and Pool balances.\n     *\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\n     * explicitly use eth_call instead of eth_sendTransaction.\n     */\n",
        "@notice": "\"Dry run\" `onExitPool`.",
        "@dev": "Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the * Vault with the same arguments, along with the number of tokens `recipient` would receive. * * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault * data, such as the protocol swap fee percentage and Pool balances. * * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must * explicitly use eth_call instead of eth_sendTransaction.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 1
    },
    {
        "name": "getScalingFactors",
        "visibility": "external",
        "args": [],
        "func": "function getScalingFactors() external view override returns (uint256[] memory) {\n        return _scalingFactors();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPausedState",
        "visibility": "external",
        "args": [],
        "func": "function getPausedState()\n        external\n        view\n        override\n        returns (\n            bool paused,\n            uint256 pauseWindowEndTime,\n            uint256 bufferPeriodEndTime\n        )\n    {\n        paused = !_isNotPaused();\n        pauseWindowEndTime = _getPauseWindowEndTime();\n        bufferPeriodEndTime = _getBufferPeriodEndTime();\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the current contract pause status, as well as the end times of the Pause Window and Buffer",
            "     * Period.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the current contract pause status, as well as the end times of the Pause Window and Buffer\n     * Period.\n     */\n",
        "@dev": "Returns the current contract pause status, as well as the end times of the Pause Window and Buffer * Period.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "name",
        "visibility": "public",
        "args": [],
        "func": "function name() public view returns (string memory) {\n        return _name;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the name of the token.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the name of the token.\n     */\n",
        "@dev": "Returns the name of the token.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "public",
        "args": [],
        "func": "function symbol() public view returns (string memory) {\n        return _symbol;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the symbol of the token, usually a shorter version of the",
            "     * name.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n",
        "@dev": "Returns the symbol of the token, usually a shorter version of the * name.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decimals",
        "visibility": "public",
        "args": [],
        "func": "function decimals() public view returns (uint8) {\n        return _decimals;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the number of decimals used to get its user representation.",
            "     * For example, if `decimals` equals `2`, a balance of `505` tokens should",
            "     * be displayed to a user as `5,05` (`505 / 10 ** 2`).",
            "     *",
            "     * Tokens usually opt for a value of 18, imitating the relationship between",
            "     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is",
            "     * called.",
            "     *",
            "     * NOTE: This information is only used for _display_ purposes: it in",
            "     * no way affects any of the arithmetic of the contract, including",
            "     * {IERC20-balanceOf} and {IERC20-transfer}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n",
        "@dev": "Returns the number of decimals used to get its user representation. * For example, if `decimals` equals `2`, a balance of `505` tokens should * be displayed to a user as `5,05` (`505 / 10 ** 2`). * * Tokens usually opt for a value of 18, imitating the relationship between * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is * called. * * NOTE: This information is only used for _display_ purposes: it in * no way affects any of the arithmetic of the contract, including * {IERC20-balanceOf} and {IERC20-transfer}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-totalSupply}. The total supply should only be read using this function",
            "     *",
            "     * Can be overridden by derived contracts to store the total supply in a different way (e.g. packed with other",
            "     * storage values).",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-totalSupply}. The total supply should only be read using this function\n     *\n     * Can be overridden by derived contracts to store the total supply in a different way (e.g. packed with other\n     * storage values).\n     */\n",
        "@dev": "See {IERC20-totalSupply}. The total supply should only be read using this function * * Can be overridden by derived contracts to store the total supply in a different way (e.g. packed with other * storage values).",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-balanceOf}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-balanceOf}.\n     */\n",
        "@dev": "See {IERC20-balanceOf}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-transfer}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `recipient` cannot be the zero address.",
            "     * - the caller must have a balance of at least `amount`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n",
        "@dev": "See {IERC20-transfer}. * * Requirements: * * - `recipient` cannot be the zero address. * - the caller must have a balance of at least `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-allowance}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-allowance}.\n     */\n",
        "@dev": "See {IERC20-allowance}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-approve}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n",
        "@dev": "See {IERC20-approve}. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            msg.sender,\n            _allowances[sender][msg.sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE)\n        );\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-transferFrom}.",
            "     *",
            "     * Emits an {Approval} event indicating the updated allowance. This is not",
            "     * required by the EIP. See the note at the beginning of {ERC20}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `sender` and `recipient` cannot be the zero address.",
            "     * - `sender` must have a balance of at least `amount`.",
            "     * - the caller must have allowance for ``sender``'s tokens of at least",
            "     * `amount`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n",
        "@dev": "See {IERC20-transferFrom}. * * Emits an {Approval} event indicating the updated allowance. This is not * required by the EIP. See the note at the beginning of {ERC20}. * * Requirements: * * - `sender` and `recipient` cannot be the zero address. * - `sender` must have a balance of at least `amount`. * - the caller must have allowance for ``sender``'s tokens of at least * `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Atomically increases the allowance granted to `spender` by the caller.",
            "     *",
            "     * This is an alternative to {approve} that can be used as a mitigation for",
            "     * problems described in {IERC20-approve}.",
            "     *",
            "     * Emits an {Approval} event indicating the updated allowance.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n",
        "@dev": "Atomically increases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender].sub(subtractedValue, Errors.ERC20_DECREASED_ALLOWANCE_BELOW_ZERO)\n        );\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Atomically decreases the allowance granted to `spender` by the caller.",
            "     *",
            "     * This is an alternative to {approve} that can be used as a mitigation for",
            "     * problems described in {IERC20-approve}.",
            "     *",
            "     * Emits an {Approval} event indicating the updated allowance.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     * - `spender` must have allowance for the caller of at least",
            "     * `subtractedValue`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n",
        "@dev": "Atomically decreases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address. * - `spender` must have allowance for the caller of at least * `subtractedValue`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getVault",
        "visibility": "public",
        "args": [],
        "func": "function getVault() public view returns (IVault) {\n        return _vault;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address owner, address spender) public view override returns (uint256) {\n        if (spender == address(getVault())) {\n            return uint256(-1);\n        } else {\n            return super.allowance(owner, spender);\n        }\n    }",
        "comments": [
            "",
            "    // Overrides",
            "",
            "    /**",
            "     * @dev Override to grant the Vault infinite allowance, causing for Pool Tokens to not require approval.",
            "     *",
            "     * This is sound as the Vault already provides authorization mechanisms when initiation token transfers, which this",
            "     * contract inherits.",
            "     */",
            "    "
        ],
        "comt": "\n    // Overrides\n\n    /**\n     * @dev Override to grant the Vault infinite allowance, causing for Pool Tokens to not require approval.\n     *\n     * This is sound as the Vault already provides authorization mechanisms when initiation token transfers, which this\n     * contract inherits.\n     */\n    ",
        "@dev": "Override to grant the Vault infinite allowance, causing for Pool Tokens to not require approval. * * This is sound as the Vault already provides authorization mechanisms when initiation token transfers, which this * contract inherits.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        uint256 currentAllowance = allowance(sender, msg.sender);\n        _require(msg.sender == sender || currentAllowance >= amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE);\n\n        _transfer(sender, recipient, amount);\n\n        if (msg.sender != sender && currentAllowance != uint256(-1)) {\n            // Because of the previous require, we know that if msg.sender != sender then currentAllowance >= amount\n            _approve(sender, msg.sender, currentAllowance - amount);\n        }\n\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Override to allow for 'infinite allowance' and let the token owner use `transferFrom` with no self-allowance",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Override to allow for 'infinite allowance' and let the token owner use `transferFrom` with no self-allowance\n     */\n",
        "@dev": "Override to allow for 'infinite allowance' and let the token owner use `transferFrom` with no self-allowance",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(address spender, uint256 amount) public override returns (bool) {\n        uint256 currentAllowance = allowance(msg.sender, spender);\n\n        if (amount >= currentAllowance) {\n            _approve(msg.sender, spender, 0);\n        } else {\n            // No risk of underflow due to if condition\n            _approve(msg.sender, spender, currentAllowance - amount);\n        }\n\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Override to allow decreasing allowance by more than the current amount (setting it to zero)",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Override to allow decreasing allowance by more than the current amount (setting it to zero)\n     */\n",
        "@dev": "Override to allow decreasing allowance by more than the current amount (setting it to zero)",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOwner",
        "visibility": "public",
        "args": [],
        "func": "function getOwner() public view returns (address) {\n        return _owner;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAuthorizer",
        "visibility": "external",
        "args": [],
        "func": "function getAuthorizer() external view returns (IAuthorizer) {\n        return _getAuthorizer();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "enableRecoveryMode",
        "visibility": "external",
        "args": [],
        "func": "function enableRecoveryMode() external override authenticate {\n        _setRecoveryMode(true);\n    }",
        "comments": [
            "/**",
            "     * @notice Enable recovery mode, which enables a special safe exit path for LPs.",
            "     * @dev Does not otherwise affect pool operations (beyond deferring payment of protocol fees), though some pools may",
            "     * perform certain operations in a \"safer\" manner that is less likely to fail, in an attempt to keep the pool",
            "     * running, even in a pathological state. Unlike the Pause operation, which is only available during a short window",
            "     * after factory deployment, Recovery Mode can always be enabled.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Enable recovery mode, which enables a special safe exit path for LPs.\n     * @dev Does not otherwise affect pool operations (beyond deferring payment of protocol fees), though some pools may\n     * perform certain operations in a \"safer\" manner that is less likely to fail, in an attempt to keep the pool\n     * running, even in a pathological state. Unlike the Pause operation, which is only available during a short window\n     * after factory deployment, Recovery Mode can always be enabled.\n     */\n",
        "@notice": "Enable recovery mode, which enables a special safe exit path for LPs.",
        "@dev": "Does not otherwise affect pool operations (beyond deferring payment of protocol fees), though some pools may * perform certain operations in a \"safer\" manner that is less likely to fail, in an attempt to keep the pool * running, even in a pathological state. Unlike the Pause operation, which is only available during a short window * after factory deployment, Recovery Mode can always be enabled.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "disableRecoveryMode",
        "visibility": "external",
        "args": [],
        "func": "function disableRecoveryMode() external override authenticate {\n        _setRecoveryMode(false);\n    }",
        "comments": [
            "/**",
            "     * @notice Disable recovery mode, which disables the special safe exit path for LPs.",
            "     * @dev Protocol fees are not paid while in Recovery Mode, so it should only remain active for as long as strictly",
            "     * necessary.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Disable recovery mode, which disables the special safe exit path for LPs.\n     * @dev Protocol fees are not paid while in Recovery Mode, so it should only remain active for as long as strictly\n     * necessary.\n     */\n",
        "@notice": "Disable recovery mode, which disables the special safe exit path for LPs.",
        "@dev": "Protocol fees are not paid while in Recovery Mode, so it should only remain active for as long as strictly * necessary.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "permit",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            },
            {
                "name": "deadline",
                "type": "uint256"
            },
            {
                "name": "v",
                "type": "uint8"
            },
            {
                "name": "r",
                "type": "bytes32"
            },
            {
                "name": "s",
                "type": "bytes32"
            }
        ],
        "func": "function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        bytes32 structHash = keccak256(\n            abi.encode(_PERMIT_TYPEHASH, owner, spender, value, getNextNonce(owner), deadline)\n        );\n\n        _ensureValidSignature(owner, structHash, _toArraySignature(v, r, s), deadline, Errors.INVALID_SIGNATURE);\n\n        _approve(owner, spender, value);\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20Permit-permit}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20Permit-permit}.\n     */\n",
        "@dev": "See {IERC20Permit-permit}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "nonces",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function nonces(address owner) public view override returns (uint256) {\n        return getNextNonce(owner);\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20Permit-nonces}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20Permit-nonces}.\n     */\n",
        "@dev": "See {IERC20Permit-nonces}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "DOMAIN_SEPARATOR",
        "visibility": "external",
        "args": [],
        "func": "function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return getDomainSeparator();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getDomainSeparator",
        "visibility": "public",
        "args": [],
        "func": "function getDomainSeparator() public view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getNextNonce",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function getNextNonce(address account) public view override returns (uint256) {\n        return _nextNonce[account];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getActionId",
        "visibility": "public",
        "args": [
            {
                "name": "selector",
                "type": "bytes4"
            }
        ],
        "func": "function getActionId(bytes4 selector) public view override returns (bytes32) {\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\n        // multiple contracts.\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getProtocolFeePercentageCache",
        "visibility": "public",
        "args": [
            {
                "name": "feeType",
                "type": "uint256"
            }
        ],
        "func": "function getProtocolFeePercentageCache(uint256 feeType) public view returns (uint256) {\n        if (inRecoveryMode()) {\n            return 0;\n        }\n\n        if (feeType == ProtocolFeeType.SWAP) {\n            return getProtocolSwapFeeDelegation() ? _cache.swapFee : _fixedProtocolSwapFeePercentage;\n        } else if (feeType == ProtocolFeeType.YIELD) {\n            return _cache.yieldFee;\n        } else if (feeType == ProtocolFeeType.AUM) {\n            return _cache.aumFee;\n        } else {\n            _revert(Errors.UNHANDLED_FEE_TYPE);\n        }\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the cached protocol fee percentage. If `getProtocolSwapFeeDelegation()` is false, this value is",
            "     * immutable for swap fee queries. Alternatively, it will track the global fee percentage set in the",
            "     * ProtocolFeePercentagesProvider.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the cached protocol fee percentage. If `getProtocolSwapFeeDelegation()` is false, this value is\n     * immutable for swap fee queries. Alternatively, it will track the global fee percentage set in the\n     * ProtocolFeePercentagesProvider.\n     */\n",
        "@dev": "Returns the cached protocol fee percentage. If `getProtocolSwapFeeDelegation()` is false, this value is * immutable for swap fee queries. Alternatively, it will track the global fee percentage set in the * ProtocolFeePercentagesProvider.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateProtocolFeePercentageCache",
        "visibility": "external",
        "args": [],
        "func": "function updateProtocolFeePercentageCache() external {\n        _beforeProtocolFeeCacheUpdate();\n\n        if (getProtocolSwapFeeDelegation()) {\n            _updateProtocolFeeCache(_protocolFeeProvider, ProtocolFeeType.SWAP);\n        }\n\n        _updateProtocolFeeCache(_protocolFeeProvider, ProtocolFeeType.YIELD);\n        _updateProtocolFeeCache(_protocolFeeProvider, ProtocolFeeType.AUM);\n    }",
        "comments": [
            "/**",
            "     * @dev Can be called by anyone to update the cached fee percentages (swap fee is only updated when delegated).",
            "     * Updates the cache to the latest value set by governance.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Can be called by anyone to update the cached fee percentages (swap fee is only updated when delegated).\n     * Updates the cache to the latest value set by governance.\n     */\n",
        "@dev": "Can be called by anyone to update the cached fee percentages (swap fee is only updated when delegated). * Updates the cache to the latest value set by governance.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getProtocolSwapFeeDelegation",
        "visibility": "public",
        "args": [],
        "func": "function getProtocolSwapFeeDelegation() public view returns (bool) {\n        return _delegatedProtocolSwapFees;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns whether this Pool tracks protocol swap fee changes in the IProtocolFeePercentagesProvider.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns whether this Pool tracks protocol swap fee changes in the IProtocolFeePercentagesProvider.\n     */\n",
        "@dev": "Returns whether this Pool tracks protocol swap fee changes in the IProtocolFeePercentagesProvider.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]