[
    {
        "transactions": 4814,
        "function_num": 274
    },
    {
        "name": "setExternalDependencies",
        "visibility": "external",
        "args": [
            {
                "name": "_masterDepositAddress",
                "type": "address payable"
            },
            {
                "name": "_tbtcSystem",
                "type": "TBTCSystem"
            },
            {
                "name": "_tbtcToken",
                "type": "TBTCToken"
            },
            {
                "name": "_tbtcDepositToken",
                "type": "TBTCDepositToken"
            },
            {
                "name": "_feeRebateToken",
                "type": "FeeRebateToken"
            },
            {
                "name": "_vendingMachineAddress",
                "type": "address"
            }
        ],
        "func": "function setExternalDependencies(\n        address payable _masterDepositAddress,\n        TBTCSystem _tbtcSystem,\n        TBTCToken _tbtcToken,\n        TBTCDepositToken _tbtcDepositToken,\n        FeeRebateToken _feeRebateToken,\n        address _vendingMachineAddress\n    ) external onlyTbtcSystem {\n        masterDepositAddress = _masterDepositAddress;\n        tbtcDepositToken = _tbtcDepositToken;\n        tbtcSystem = _tbtcSystem;\n        tbtcToken = _tbtcToken;\n        feeRebateToken = _feeRebateToken;\n        vendingMachineAddress = _vendingMachineAddress;\n    }",
        "comments": [
            "",
            "    /// @dev                          Set the required external variables.",
            "    /// @param _masterDepositAddress  The address of the master deposit contract.",
            "    /// @param _tbtcSystem            Tbtc system contract.",
            "    /// @param _tbtcToken             TBTC token contract.",
            "    /// @param _tbtcDepositToken      TBTC Deposit Token contract.",
            "    /// @param _feeRebateToken        AFee Rebate Token contract.",
            "    /// @param _vendingMachineAddress Address of the Vending Machine contract.",
            "    "
        ],
        "comt": "\n    /// @dev                          Set the required external variables.\n    /// @param _masterDepositAddress  The address of the master deposit contract.\n    /// @param _tbtcSystem            Tbtc system contract.\n    /// @param _tbtcToken             TBTC token contract.\n    /// @param _tbtcDepositToken      TBTC Deposit Token contract.\n    /// @param _feeRebateToken        AFee Rebate Token contract.\n    /// @param _vendingMachineAddress Address of the Vending Machine contract.\n    ",
        "@dev": "Set the required external variables.",
        "@param1": "_masterDepositAddress The address of the master deposit contract.",
        "@param2": "_tbtcSystem Tbtc system contract.",
        "@param3": "_tbtcToken TBTC token contract.",
        "@param4": "_tbtcDepositToken TBTC Deposit Token contract.",
        "@param5": "_feeRebateToken AFee Rebate Token contract.",
        "@param6": "_vendingMachineAddress Address of the Vending Machine contract.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createDeposit",
        "visibility": "external",
        "args": [
            {
                "name": "_lotSizeSatoshis",
                "type": "uint64"
            }
        ],
        "func": "function createDeposit(uint64 _lotSizeSatoshis) external payable returns(address) {\n        address cloneAddress = createClone(masterDepositAddress);\n        emit DepositCloneCreated(cloneAddress);\n\n        TBTCDepositToken(tbtcDepositToken).mint(msg.sender, uint256(cloneAddress));\n\n        Deposit deposit = Deposit(address(uint160(cloneAddress)));\n        deposit.initialize(address(this));\n        deposit.initializeDeposit.value(msg.value)(\n                tbtcSystem,\n                tbtcToken,\n                tbtcDepositToken,\n                feeRebateToken,\n                vendingMachineAddress,\n                _lotSizeSatoshis\n            );\n\n        return cloneAddress;\n    }",
        "comments": [
            "",
            "    /// @notice Creates a new deposit instance and mints a TDT. This function is",
            "    ///         currently the only way to create a new deposit.",
            "    /// @dev Calls `Deposit.initializeDeposit` to initialize the instance. Mints",
            "    ///      the TDT to the function caller. (See `TBTCDepositToken` for more",
            "    ///      info on TDTs). Reverts if new deposits are currently paused, if the",
            "    ///      specified lot size is not currently permitted, or if the selection",
            "    ///      of the signers fails for any reason. Also reverts if the bonds",
            "    ///      collateralizing the deposit would not be enough to cover a refund",
            "    ///      of the deposit creation fee, should the signer group fail to",
            "    ///      complete its setup process.",
            "    /// @return The address of the new deposit.",
            "    "
        ],
        "comt": "\n    /// @notice Creates a new deposit instance and mints a TDT. This function is\n    ///         currently the only way to create a new deposit.\n    /// @dev Calls `Deposit.initializeDeposit` to initialize the instance. Mints\n    ///      the TDT to the function caller. (See `TBTCDepositToken` for more\n    ///      info on TDTs). Reverts if new deposits are currently paused, if the\n    ///      specified lot size is not currently permitted, or if the selection\n    ///      of the signers fails for any reason. Also reverts if the bonds\n    ///      collateralizing the deposit would not be enough to cover a refund\n    ///      of the deposit creation fee, should the signer group fail to\n    ///      complete its setup process.\n    /// @return The address of the new deposit.\n    ",
        "@notice": "Creates a new deposit instance and mints a TDT. This function is /// currently the only way to create a new deposit.",
        "@dev": "Calls `Deposit.initializeDeposit` to initialize the instance. Mints /// the TDT to the function caller. (See `TBTCDepositToken` for more /// info on TDTs). Reverts if new deposits are currently paused, if the /// specified lot size is not currently permitted, or if the selection /// of the signers fails for any reason. Also reverts if the bonds /// collateralizing the deposit would not be enough to cover a refund /// of the deposit creation fee, should the signer group fail to /// complete its setup process.",
        "@return1": "The address of the new deposit.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "external",
        "args": [
            {
                "name": "_defaultKeepFactory",
                "type": "IBondedECDSAKeepFactory"
            },
            {
                "name": "_depositFactory",
                "type": "DepositFactory"
            },
            {
                "name": "_masterDepositAddress",
                "type": "address payable"
            },
            {
                "name": "_tbtcToken",
                "type": "TBTCToken"
            },
            {
                "name": "_tbtcDepositToken",
                "type": "TBTCDepositToken"
            },
            {
                "name": "_feeRebateToken",
                "type": "FeeRebateToken"
            },
            {
                "name": "_vendingMachine",
                "type": "VendingMachine"
            },
            {
                "name": "_keepThreshold",
                "type": "uint16"
            },
            {
                "name": "_keepSize",
                "type": "uint16"
            }
        ],
        "func": "function initialize(\n        IBondedECDSAKeepFactory _defaultKeepFactory,\n        DepositFactory _depositFactory,\n        address payable _masterDepositAddress,\n        TBTCToken _tbtcToken,\n        TBTCDepositToken _tbtcDepositToken,\n        FeeRebateToken _feeRebateToken,\n        VendingMachine _vendingMachine,\n        uint16 _keepThreshold,\n        uint16 _keepSize\n    ) external onlyOwner {\n        require(initializedTimestamp == 0, \"already initialized\");\n\n        keepFactorySelection.initialize(_defaultKeepFactory);\n        keepThreshold = _keepThreshold;\n        keepSize = _keepSize;\n        initializedTimestamp = block.timestamp;\n        allowNewDeposits = true;\n\n        setTbtcDepositToken(_tbtcDepositToken);\n\n        _vendingMachine.setExternalAddresses(\n            _tbtcToken,\n            _tbtcDepositToken,\n            _feeRebateToken\n        );\n        _depositFactory.setExternalDependencies(\n            _masterDepositAddress,\n            this,\n            _tbtcToken,\n            _tbtcDepositToken,\n            _feeRebateToken,\n            address(_vendingMachine)\n        );\n    }",
        "comments": [
            "",
            "    /// @notice        Initialize contracts",
            "    /// @dev           Only the Deposit factory should call this, and only once.",
            "    /// @param _defaultKeepFactory       ECDSA keep factory backed by KEEP stake.",
            "    /// @param _depositFactory    Deposit Factory. More info in `DepositFactory`.",
            "    /// @param _masterDepositAddress  Master Deposit address. More info in `Deposit`.",
            "    /// @param _tbtcToken         TBTCToken. More info in `TBTCToken`.",
            "    /// @param _tbtcDepositToken  TBTCDepositToken (TDT). More info in `TBTCDepositToken`.",
            "    /// @param _feeRebateToken    FeeRebateToken (FRT). More info in `FeeRebateToken`.",
            "    /// @param _keepThreshold     Signing group honesty threshold.",
            "    /// @param _keepSize          Signing group size.",
            "    "
        ],
        "comt": "\n    /// @notice        Initialize contracts\n    /// @dev           Only the Deposit factory should call this, and only once.\n    /// @param _defaultKeepFactory       ECDSA keep factory backed by KEEP stake.\n    /// @param _depositFactory    Deposit Factory. More info in `DepositFactory`.\n    /// @param _masterDepositAddress  Master Deposit address. More info in `Deposit`.\n    /// @param _tbtcToken         TBTCToken. More info in `TBTCToken`.\n    /// @param _tbtcDepositToken  TBTCDepositToken (TDT). More info in `TBTCDepositToken`.\n    /// @param _feeRebateToken    FeeRebateToken (FRT). More info in `FeeRebateToken`.\n    /// @param _keepThreshold     Signing group honesty threshold.\n    /// @param _keepSize          Signing group size.\n    ",
        "@notice": "Initialize contracts",
        "@dev": "Only the Deposit factory should call this, and only once.",
        "@param1": "_defaultKeepFactory ECDSA keep factory backed by KEEP stake.",
        "@param2": "_depositFactory Deposit Factory. More info in `DepositFactory`.",
        "@param3": "_masterDepositAddress Master Deposit address. More info in `Deposit`.",
        "@param4": "_tbtcToken TBTCToken. More info in `TBTCToken`.",
        "@param5": "_tbtcDepositToken TBTCDepositToken (TDT). More info in `TBTCDepositToken`.",
        "@param6": "_feeRebateToken FeeRebateToken (FRT). More info in `FeeRebateToken`.",
        "@param7": "_keepThreshold Signing group honesty threshold.",
        "@param8": "_keepSize Signing group size.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAllowNewDeposits",
        "visibility": "external",
        "args": [],
        "func": "function getAllowNewDeposits() external view returns (bool) {\n        return allowNewDeposits;\n    }",
        "comments": [
            "",
            "    /// @notice Returns whether new deposits should be allowed.",
            "    /// @return True if new deposits should be allowed by the emergency pause button",
            "    "
        ],
        "comt": "\n    /// @notice Returns whether new deposits should be allowed.\n    /// @return True if new deposits should be allowed by the emergency pause button\n    ",
        "@notice": "Returns whether new deposits should be allowed.",
        "@return1": "True if new deposits should be allowed by the emergency pause button",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getMinimumLotSize",
        "visibility": "public",
        "args": [],
        "func": "function getMinimumLotSize() public view returns (uint256) {\n        return lotSizesSatoshis[0];\n    }",
        "comments": [
            "",
            "    /// @notice Return the lowest lot size currently enabled for deposits.",
            "    /// @return The lowest lot size, in satoshis.",
            "    "
        ],
        "comt": "\n    /// @notice Return the lowest lot size currently enabled for deposits.\n    /// @return The lowest lot size, in satoshis.\n    ",
        "@notice": "Return the lowest lot size currently enabled for deposits.",
        "@return1": "The lowest lot size, in satoshis.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getMaximumLotSize",
        "visibility": "external",
        "args": [],
        "func": "function getMaximumLotSize() external view returns (uint256) {\n        return lotSizesSatoshis[lotSizesSatoshis.length - 1];\n    }",
        "comments": [
            "",
            "    /// @notice Return the largest lot size currently enabled for deposits.",
            "    /// @return The largest lot size, in satoshis.",
            "    "
        ],
        "comt": "\n    /// @notice Return the largest lot size currently enabled for deposits.\n    /// @return The largest lot size, in satoshis.\n    ",
        "@notice": "Return the largest lot size currently enabled for deposits.",
        "@return1": "The largest lot size, in satoshis.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "emergencyPauseNewDeposits",
        "visibility": "external",
        "args": [],
        "func": "function emergencyPauseNewDeposits() external onlyOwner {\n        require(pausedTimestamp == 0, \"emergencyPauseNewDeposits can only be called once\");\n        uint256 sinceInit = block.timestamp - initializedTimestamp;\n        require(sinceInit < 180 days, \"emergencyPauseNewDeposits can only be called within 180 days of initialization\");\n        pausedTimestamp = block.timestamp;\n        allowNewDeposits = false;\n        emit AllowNewDepositsUpdated(false);\n    }",
        "comments": [
            "",
            "    /// @notice One-time-use emergency function to disallow future deposit creation for 10 days.",
            "    "
        ],
        "comt": "\n    /// @notice One-time-use emergency function to disallow future deposit creation for 10 days.\n    ",
        "@notice": "One-time-use emergency function to disallow future deposit creation for 10 days.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "resumeNewDeposits",
        "visibility": "external",
        "args": [],
        "func": "function resumeNewDeposits() external {\n        require(! allowNewDeposits, \"New deposits are currently allowed\");\n        require(pausedTimestamp != 0, \"Deposit has not been paused\");\n        require(block.timestamp.sub(pausedTimestamp) >= pausedDuration, \"Deposits are still paused\");\n        allowNewDeposits = true;\n        emit AllowNewDepositsUpdated(true);\n    }",
        "comments": [
            "",
            "    /// @notice Anyone can reactivate deposit creations after the pause duration is over.",
            "    "
        ],
        "comt": "\n    /// @notice Anyone can reactivate deposit creations after the pause duration is over.\n    ",
        "@notice": "Anyone can reactivate deposit creations after the pause duration is over.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRemainingPauseTerm",
        "visibility": "external",
        "args": [],
        "func": "function getRemainingPauseTerm() external view returns (uint256) {\n        require(! allowNewDeposits, \"New deposits are currently allowed\");\n        return (block.timestamp.sub(pausedTimestamp) >= pausedDuration)?\n            0:\n            pausedDuration.sub(block.timestamp.sub(pausedTimestamp));\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "beginSignerFeeDivisorUpdate",
        "visibility": "external",
        "args": [
            {
                "name": "_signerFeeDivisor",
                "type": "uint16"
            }
        ],
        "func": "function beginSignerFeeDivisorUpdate(uint16 _signerFeeDivisor)\n        external onlyOwner\n    {\n        require(\n            _signerFeeDivisor > 9,\n            \"Signer fee divisor must be greater than 9, for a signer fee that is <= 10%\"\n        );\n        require(\n            _signerFeeDivisor < 5000,\n            \"Signer fee divisor must be less than 5000, for a signer fee that is > 0.02%\"\n        );\n\n        newSignerFeeDivisor = _signerFeeDivisor;\n        signerFeeDivisorChangeInitiated = block.timestamp;\n        emit SignerFeeDivisorUpdateStarted(_signerFeeDivisor, block.timestamp);\n    }",
        "comments": [
            "",
            "    /// @notice Set the system signer fee divisor.",
            "    /// @dev    This can be finalized by calling `finalizeSignerFeeDivisorUpdate`",
            "    ///         Anytime after `governanceTimeDelay` has elapsed.",
            "    /// @param _signerFeeDivisor The signer fee divisor.",
            "    "
        ],
        "comt": "\n    /// @notice Set the system signer fee divisor.\n    /// @dev    This can be finalized by calling `finalizeSignerFeeDivisorUpdate`\n    ///         Anytime after `governanceTimeDelay` has elapsed.\n    /// @param _signerFeeDivisor The signer fee divisor.\n    ",
        "@notice": "Set the system signer fee divisor.",
        "@dev": "This can be finalized by calling `finalizeSignerFeeDivisorUpdate` /// Anytime after `governanceTimeDelay` has elapsed.",
        "@param1": "_signerFeeDivisor The signer fee divisor.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "beginLotSizesUpdate",
        "visibility": "external",
        "args": [
            {
                "name": "_lotSizes",
                "type": "uint64[] calldata"
            }
        ],
        "func": "function beginLotSizesUpdate(uint64[] calldata _lotSizes)\n        external onlyOwner\n    {\n        bool hasSingleBitcoin = false;\n        for (uint i = 0; i < _lotSizes.length; i++) {\n            if (_lotSizes[i] == 10**8) {\n                hasSingleBitcoin = true;\n            } else if (_lotSizes[i] < 50 * 10**3) {\n                // Failed the minimum requirement, break on out.\n                revert(\"Lot sizes less than 0.0005 BTC are not allowed\");\n            } else if (_lotSizes[i] > 10 * 10**9) {\n                // Failed the maximum requirement, break on out.\n                revert(\"Lot sizes greater than 100 BTC are not allowed\");\n            } else if (i > 0 && _lotSizes[i] == _lotSizes[i-1]) {\n                revert(\"Lot size array must not have duplicates\");\n            } else if (i > 0 && _lotSizes[i] < _lotSizes[i-1]) {\n                revert(\"Lot size array must be sorted\");\n            }\n        }\n\n        require(hasSingleBitcoin, \"Lot size array must always contain 1 BTC\");\n\n        emit LotSizesUpdateStarted(_lotSizes, block.timestamp);\n        newLotSizesSatoshis = _lotSizes;\n        lotSizesChangeInitiated = block.timestamp;\n    }",
        "comments": [
            "",
            "    /// @notice Set the allowed deposit lot sizes.",
            "    /// @dev    Lot size array should always contain 10**8 satoshis (1 BTC) and",
            "    ///         cannot contain values less than 50000 satoshis (0.0005 BTC) or",
            "    ///         greater than 10**10 satoshis (100 BTC). Lot size array must not",
            "    ///         have duplicates and it must be sorted.",
            "    ///         This can be finalized by calling `finalizeLotSizesUpdate`",
            "    ///         anytime after `governanceTimeDelay` has elapsed.",
            "    /// @param _lotSizes Array of allowed lot sizes.",
            "    "
        ],
        "comt": "\n    /// @notice Set the allowed deposit lot sizes.\n    /// @dev    Lot size array should always contain 10**8 satoshis (1 BTC) and\n    ///         cannot contain values less than 50000 satoshis (0.0005 BTC) or\n    ///         greater than 10**10 satoshis (100 BTC). Lot size array must not\n    ///         have duplicates and it must be sorted.\n    ///         This can be finalized by calling `finalizeLotSizesUpdate`\n    ///         anytime after `governanceTimeDelay` has elapsed.\n    /// @param _lotSizes Array of allowed lot sizes.\n    ",
        "@notice": "Set the allowed deposit lot sizes.",
        "@dev": "Lot size array should always contain 10**8 satoshis (1 BTC) and /// cannot contain values less than 50000 satoshis (0.0005 BTC) or /// greater than 10**10 satoshis (100 BTC). Lot size array must not /// have duplicates and it must be sorted. /// This can be finalized by calling `finalizeLotSizesUpdate` /// anytime after `governanceTimeDelay` has elapsed.",
        "@param1": "_lotSizes Array of allowed lot sizes.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "beginCollateralizationThresholdsUpdate",
        "visibility": "external",
        "args": [
            {
                "name": "_initialCollateralizedPercent",
                "type": "uint16"
            },
            {
                "name": "_undercollateralizedThresholdPercent",
                "type": "uint16"
            },
            {
                "name": "_severelyUndercollateralizedThresholdPercent",
                "type": "uint16"
            }
        ],
        "func": "function beginCollateralizationThresholdsUpdate(\n        uint16 _initialCollateralizedPercent,\n        uint16 _undercollateralizedThresholdPercent,\n        uint16 _severelyUndercollateralizedThresholdPercent\n    ) external onlyOwner {\n        require(\n            _initialCollateralizedPercent <= 300,\n            \"Initial collateralized percent must be <= 300%\"\n        );\n        require(\n            _initialCollateralizedPercent > 100,\n            \"Initial collateralized percent must be >= 100%\"\n        );\n        require(\n            _initialCollateralizedPercent > _undercollateralizedThresholdPercent,\n            \"Undercollateralized threshold must be < initial collateralized percent\"\n        );\n        require(\n            _undercollateralizedThresholdPercent > _severelyUndercollateralizedThresholdPercent,\n            \"Severe undercollateralized threshold must be < undercollateralized threshold\"\n        );\n\n        newInitialCollateralizedPercent = _initialCollateralizedPercent;\n        newUndercollateralizedThresholdPercent = _undercollateralizedThresholdPercent;\n        newSeverelyUndercollateralizedThresholdPercent = _severelyUndercollateralizedThresholdPercent;\n        collateralizationThresholdsChangeInitiated = block.timestamp;\n        emit CollateralizationThresholdsUpdateStarted(\n            _initialCollateralizedPercent,\n            _undercollateralizedThresholdPercent,\n            _severelyUndercollateralizedThresholdPercent,\n            block.timestamp\n        );\n    }",
        "comments": [
            "",
            "    /// @notice Set the system collateralization levels",
            "    /// @dev    This can be finalized by calling `finalizeCollateralizationThresholdsUpdate`",
            "    ///         Anytime after `governanceTimeDelay` has elapsed.",
            "    /// @param _initialCollateralizedPercent default signing bond percent for new deposits",
            "    /// @param _undercollateralizedThresholdPercent first undercollateralization trigger",
            "    /// @param _severelyUndercollateralizedThresholdPercent second undercollateralization trigger",
            "    "
        ],
        "comt": "\n    /// @notice Set the system collateralization levels\n    /// @dev    This can be finalized by calling `finalizeCollateralizationThresholdsUpdate`\n    ///         Anytime after `governanceTimeDelay` has elapsed.\n    /// @param _initialCollateralizedPercent default signing bond percent for new deposits\n    /// @param _undercollateralizedThresholdPercent first undercollateralization trigger\n    /// @param _severelyUndercollateralizedThresholdPercent second undercollateralization trigger\n    ",
        "@notice": "Set the system collateralization levels",
        "@dev": "This can be finalized by calling `finalizeCollateralizationThresholdsUpdate` /// Anytime after `governanceTimeDelay` has elapsed.",
        "@param1": "_initialCollateralizedPercent default signing bond percent for new deposits",
        "@param2": "_undercollateralizedThresholdPercent first undercollateralization trigger",
        "@param3": "_severelyUndercollateralizedThresholdPercent second undercollateralization trigger",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "beginKeepFactoriesUpdate",
        "visibility": "external",
        "args": [
            {
                "name": "_keepStakedFactory",
                "type": "address"
            },
            {
                "name": "_fullyBackedFactory",
                "type": "address"
            },
            {
                "name": "_factorySelector",
                "type": "address"
            }
        ],
        "func": "function beginKeepFactoriesUpdate(\n        address _keepStakedFactory,\n        address _fullyBackedFactory,\n        address _factorySelector\n    )\n        external onlyOwner\n    {\n        uint256 sinceInit = block.timestamp - initializedTimestamp;\n        require(\n            sinceInit < keepFactoriesUpgradeabilityPeriod,\n            \"beginKeepFactoriesUpdate can only be called within 180 days of initialization\"\n        );\n\n        // It is required that KEEP staked factory address is configured as this is\n        // a default choice factory. Fully backed factory and factory selector\n        // are optional for the system to work, hence they don't have to be provided.\n        require(\n            _keepStakedFactory != address(0),\n            \"KEEP staked factory must be a nonzero address\"\n        );\n\n        newKeepStakedFactory = _keepStakedFactory;\n        newFullyBackedFactory = _fullyBackedFactory;\n        newFactorySelector = _factorySelector;\n        keepFactoriesUpdateInitiated = block.timestamp;\n\n        emit KeepFactoriesUpdateStarted(\n            _keepStakedFactory,\n            _fullyBackedFactory,\n            _factorySelector,\n            block.timestamp\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "beginEthBtcPriceFeedAddition",
        "visibility": "external",
        "args": [
            {
                "name": "_ethBtcPriceFeed",
                "type": "IMedianizer"
            }
        ],
        "func": "function beginEthBtcPriceFeedAddition(IMedianizer _ethBtcPriceFeed) external onlyOwner {\n        bool ethBtcActive;\n        (, ethBtcActive) = _ethBtcPriceFeed.peek();\n        require(ethBtcActive, \"Cannot add inactive feed\");\n\n        nextEthBtcPriceFeed = _ethBtcPriceFeed;\n        ethBtcPriceFeedAdditionInitiated = block.timestamp;\n        emit EthBtcPriceFeedAdditionStarted(address(_ethBtcPriceFeed), block.timestamp);\n    }",
        "comments": [
            "",
            "    /// @notice Add a new ETH/BTC price feed contract to the priecFeed.",
            "    /// @dev This can be finalized by calling `finalizeEthBtcPriceFeedAddition`",
            "    ///      anytime after `priceFeedGovernanceTimeDelay` has elapsed.",
            "    "
        ],
        "comt": "\n    /// @notice Add a new ETH/BTC price feed contract to the priecFeed.\n    /// @dev This can be finalized by calling `finalizeEthBtcPriceFeedAddition`\n    ///      anytime after `priceFeedGovernanceTimeDelay` has elapsed.\n    ",
        "@notice": "Add a new ETH/BTC price feed contract to the priecFeed.",
        "@dev": "This can be finalized by calling `finalizeEthBtcPriceFeedAddition` /// anytime after `priceFeedGovernanceTimeDelay` has elapsed.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "finalizeSignerFeeDivisorUpdate",
        "visibility": "external",
        "args": [],
        "func": "function finalizeSignerFeeDivisorUpdate()\n        external\n        onlyOwner\n        onlyAfterGovernanceDelay(signerFeeDivisorChangeInitiated, governanceTimeDelay)\n    {\n        signerFeeDivisor = newSignerFeeDivisor;\n        emit SignerFeeDivisorUpdated(newSignerFeeDivisor);\n        newSignerFeeDivisor = 0;\n        signerFeeDivisorChangeInitiated = 0;\n    }",
        "comments": [
            "",
            "    /// @notice Finish setting the system signer fee divisor.",
            "    /// @dev `beginSignerFeeDivisorUpdate` must be called first, once `governanceTimeDelay`",
            "    ///       has passed, this function can be called to set the signer fee divisor to the",
            "    ///       value set in `beginSignerFeeDivisorUpdate`",
            "    "
        ],
        "comt": "\n    /// @notice Finish setting the system signer fee divisor.\n    /// @dev `beginSignerFeeDivisorUpdate` must be called first, once `governanceTimeDelay`\n    ///       has passed, this function can be called to set the signer fee divisor to the\n    ///       value set in `beginSignerFeeDivisorUpdate`\n    ",
        "@notice": "Finish setting the system signer fee divisor.",
        "@dev": "`beginSignerFeeDivisorUpdate` must be called first, once `governanceTimeDelay` /// has passed, this function can be called to set the signer fee divisor to the /// value set in `beginSignerFeeDivisorUpdate`",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "finalizeLotSizesUpdate",
        "visibility": "external",
        "args": [],
        "func": "function finalizeLotSizesUpdate()\n        external\n        onlyOwner\n        onlyAfterGovernanceDelay(lotSizesChangeInitiated, governanceTimeDelay) {\n\n        lotSizesSatoshis = newLotSizesSatoshis;\n        emit LotSizesUpdated(newLotSizesSatoshis);\n        lotSizesChangeInitiated = 0;\n        newLotSizesSatoshis.length = 0;\n\n        refreshMinimumBondableValue();\n    }",
        "comments": [
            "    /// @notice Finish setting the accepted system lot sizes.",
            "    /// @dev `beginLotSizesUpdate` must be called first, once `governanceTimeDelay`",
            "    ///       has passed, this function can be called to set the lot sizes to the",
            "    ///       value set in `beginLotSizesUpdate`",
            "    "
        ],
        "comt": "    /// @notice Finish setting the accepted system lot sizes.\n    /// @dev `beginLotSizesUpdate` must be called first, once `governanceTimeDelay`\n    ///       has passed, this function can be called to set the lot sizes to the\n    ///       value set in `beginLotSizesUpdate`\n    ",
        "@notice": "Finish setting the accepted system lot sizes.",
        "@dev": "`beginLotSizesUpdate` must be called first, once `governanceTimeDelay` /// has passed, this function can be called to set the lot sizes to the /// value set in `beginLotSizesUpdate`",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "finalizeCollateralizationThresholdsUpdate",
        "visibility": "external",
        "args": [],
        "func": "function finalizeCollateralizationThresholdsUpdate()\n        external\n        onlyOwner\n        onlyAfterGovernanceDelay(\n            collateralizationThresholdsChangeInitiated,\n            governanceTimeDelay\n        ) {\n\n        initialCollateralizedPercent = newInitialCollateralizedPercent;\n        undercollateralizedThresholdPercent = newUndercollateralizedThresholdPercent;\n        severelyUndercollateralizedThresholdPercent = newSeverelyUndercollateralizedThresholdPercent;\n\n        emit CollateralizationThresholdsUpdated(\n            newInitialCollateralizedPercent,\n            newUndercollateralizedThresholdPercent,\n            newSeverelyUndercollateralizedThresholdPercent\n        );\n\n        newInitialCollateralizedPercent = 0;\n        newUndercollateralizedThresholdPercent = 0;\n        newSeverelyUndercollateralizedThresholdPercent = 0;\n        collateralizationThresholdsChangeInitiated = 0;\n    }",
        "comments": [
            "",
            "    /// @notice Finish setting the system collateralization levels",
            "    /// @dev `beginCollateralizationThresholdsUpdate` must be called first, once `governanceTimeDelay`",
            "    ///       has passed, this function can be called to set the collateralization thresholds to the",
            "    ///       value set in `beginCollateralizationThresholdsUpdate`",
            "    "
        ],
        "comt": "\n    /// @notice Finish setting the system collateralization levels\n    /// @dev `beginCollateralizationThresholdsUpdate` must be called first, once `governanceTimeDelay`\n    ///       has passed, this function can be called to set the collateralization thresholds to the\n    ///       value set in `beginCollateralizationThresholdsUpdate`\n    ",
        "@notice": "Finish setting the system collateralization levels",
        "@dev": "`beginCollateralizationThresholdsUpdate` must be called first, once `governanceTimeDelay` /// has passed, this function can be called to set the collateralization thresholds to the /// value set in `beginCollateralizationThresholdsUpdate`",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "finalizeKeepFactoriesUpdate",
        "visibility": "external",
        "args": [],
        "func": "function finalizeKeepFactoriesUpdate()\n        external\n        onlyOwner\n        onlyAfterGovernanceDelay(\n            keepFactoriesUpdateInitiated,\n            governanceTimeDelay\n        ) {\n\n        keepFactorySelection.setFactories(\n            newKeepStakedFactory,\n            newFullyBackedFactory,\n            newFactorySelector\n        );\n\n        emit KeepFactoriesUpdated(\n            newKeepStakedFactory,\n            newFullyBackedFactory,\n            newFactorySelector\n        );\n\n        keepFactoriesUpdateInitiated = 0;\n        newKeepStakedFactory = address(0);\n        newFullyBackedFactory = address(0);\n        newFactorySelector = address(0);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "finalizeEthBtcPriceFeedAddition",
        "visibility": "external",
        "args": [],
        "func": "function finalizeEthBtcPriceFeedAddition()\n            external\n            onlyOwner\n            onlyAfterGovernanceDelay(\n                ethBtcPriceFeedAdditionInitiated,\n                priceFeedGovernanceTimeDelay\n            ) {\n        // This process interacts with external contracts, so\n        // Checks-Effects-Interactions it.\n        IMedianizer _nextEthBtcPriceFeed = nextEthBtcPriceFeed;\n        nextEthBtcPriceFeed = IMedianizer(0);\n        ethBtcPriceFeedAdditionInitiated = 0;\n\n        emit EthBtcPriceFeedAdded(address(_nextEthBtcPriceFeed));\n\n        priceFeed.addEthBtcFeed(_nextEthBtcPriceFeed);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSignerFeeDivisor",
        "visibility": "external",
        "args": [],
        "func": "function getSignerFeeDivisor() external view returns (uint16) { return signerFeeDivisor; }",
        "comments": [
            "",
            "    /// @notice Gets the system signer fee divisor.",
            "    /// @return The signer fee divisor.",
            "    "
        ],
        "comt": "\n    /// @notice Gets the system signer fee divisor.\n    /// @return The signer fee divisor.\n    ",
        "@notice": "Gets the system signer fee divisor.",
        "@return1": "The signer fee divisor.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAllowedLotSizes",
        "visibility": "external",
        "args": [],
        "func": "function getAllowedLotSizes() external view returns (uint64[] memory){\n        return lotSizesSatoshis;\n    }",
        "comments": [
            "",
            "    /// @notice Gets the allowed lot sizes",
            "    /// @return Uint64 array of allowed lot sizes",
            "    "
        ],
        "comt": "\n    /// @notice Gets the allowed lot sizes\n    /// @return Uint64 array of allowed lot sizes\n    ",
        "@notice": "Gets the allowed lot sizes",
        "@return1": "Uint64 array of allowed lot sizes",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUndercollateralizedThresholdPercent",
        "visibility": "external",
        "args": [],
        "func": "function getUndercollateralizedThresholdPercent() external view returns (uint16) {\n        return undercollateralizedThresholdPercent;\n    }",
        "comments": [
            "",
            "    /// @notice Get the system undercollateralization level for new deposits",
            "    "
        ],
        "comt": "\n    /// @notice Get the system undercollateralization level for new deposits\n    ",
        "@notice": "Get the system undercollateralization level for new deposits",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSeverelyUndercollateralizedThresholdPercent",
        "visibility": "external",
        "args": [],
        "func": "function getSeverelyUndercollateralizedThresholdPercent() external view returns (uint16) {\n        return severelyUndercollateralizedThresholdPercent;\n    }",
        "comments": [
            "",
            "    /// @notice Get the system severe undercollateralization level for new deposits",
            "    "
        ],
        "comt": "\n    /// @notice Get the system severe undercollateralization level for new deposits\n    ",
        "@notice": "Get the system severe undercollateralization level for new deposits",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getInitialCollateralizedPercent",
        "visibility": "external",
        "args": [],
        "func": "function getInitialCollateralizedPercent() external view returns (uint16) {\n        return initialCollateralizedPercent;\n    }",
        "comments": [
            "",
            "    /// @notice Get the system initial collateralized level for new deposits.",
            "    "
        ],
        "comt": "\n    /// @notice Get the system initial collateralized level for new deposits.\n    ",
        "@notice": "Get the system initial collateralized level for new deposits.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "fetchBitcoinPrice",
        "visibility": "external",
        "args": [],
        "func": "function fetchBitcoinPrice() external view returns (uint256) {\n        require(\n            tbtcDepositToken.exists(uint256(msg.sender)),\n            \"Caller must be a Deposit contract\"\n        );\n\n        return _fetchBitcoinPrice();\n    }",
        "comments": [
            "",
            "    /// @notice Get the price of one satoshi in wei.",
            "    /// @dev Reverts if the price of one satoshi is 0 wei, or if the price of",
            "    ///      one satoshi is 1 ether. Can only be called by a deposit with minted",
            "    ///      TDT.",
            "    /// @return The price of one satoshi in wei.",
            "    "
        ],
        "comt": "\n    /// @notice Get the price of one satoshi in wei.\n    /// @dev Reverts if the price of one satoshi is 0 wei, or if the price of\n    ///      one satoshi is 1 ether. Can only be called by a deposit with minted\n    ///      TDT.\n    /// @return The price of one satoshi in wei.\n    ",
        "@notice": "Get the price of one satoshi in wei.",
        "@dev": "Reverts if the price of one satoshi is 0 wei, or if the price of /// one satoshi is 1 ether. Can only be called by a deposit with minted /// TDT.",
        "@return1": "The price of one satoshi in wei.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "fetchRelayCurrentDifficulty",
        "visibility": "external",
        "args": [],
        "func": "function fetchRelayCurrentDifficulty() external view returns (uint256) {\n        return relay.getCurrentEpochDifficulty();\n    }",
        "comments": [
            "",
            "    // Difficulty Oracle",
            "    "
        ],
        "comt": "\n    // Difficulty Oracle\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "fetchRelayPreviousDifficulty",
        "visibility": "external",
        "args": [],
        "func": "function fetchRelayPreviousDifficulty() external view returns (uint256) {\n        return relay.getPrevEpochDifficulty();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRemainingSignerFeeDivisorUpdateTime",
        "visibility": "external",
        "args": [],
        "func": "function getRemainingSignerFeeDivisorUpdateTime() external view returns (uint256) {\n        return getRemainingChangeTime(\n            signerFeeDivisorChangeInitiated,\n            governanceTimeDelay\n        );\n    }",
        "comments": [
            "",
            "    /// @notice Get the time remaining until the signer fee divisor can be updated.",
            "    "
        ],
        "comt": "\n    /// @notice Get the time remaining until the signer fee divisor can be updated.\n    ",
        "@notice": "Get the time remaining until the signer fee divisor can be updated.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRemainingLotSizesUpdateTime",
        "visibility": "external",
        "args": [],
        "func": "function getRemainingLotSizesUpdateTime() external view returns (uint256) {\n        return getRemainingChangeTime(\n            lotSizesChangeInitiated,\n            governanceTimeDelay\n        );\n    }",
        "comments": [
            "",
            "    /// @notice Get the time remaining until the lot sizes can be updated.",
            "    "
        ],
        "comt": "\n    /// @notice Get the time remaining until the lot sizes can be updated.\n    ",
        "@notice": "Get the time remaining until the lot sizes can be updated.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRemainingCollateralizationThresholdsUpdateTime",
        "visibility": "external",
        "args": [],
        "func": "function getRemainingCollateralizationThresholdsUpdateTime() external view returns (uint256) {\n        return getRemainingChangeTime(\n            collateralizationThresholdsChangeInitiated,\n            governanceTimeDelay\n        );\n    }",
        "comments": [
            "",
            "    /// @notice Get the time remaining until the collateralization thresholds can be updated.",
            "    "
        ],
        "comt": "\n    /// @notice Get the time remaining until the collateralization thresholds can be updated.\n    ",
        "@notice": "Get the time remaining until the collateralization thresholds can be updated.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRemainingKeepFactoriesUpdateTime",
        "visibility": "external",
        "args": [],
        "func": "function getRemainingKeepFactoriesUpdateTime() external view returns (uint256) {\n        return getRemainingChangeTime(\n            keepFactoriesUpdateInitiated,\n            governanceTimeDelay\n        );\n    }",
        "comments": [
            "",
            "    /// @notice Get the time remaining until the Keep ETH-only-backed ECDSA keep",
            "    ///         factory and the selection strategy that will choose between it",
            "    ///         and the KEEP-backed factory can be updated.",
            "    "
        ],
        "comt": "\n    /// @notice Get the time remaining until the Keep ETH-only-backed ECDSA keep\n    ///         factory and the selection strategy that will choose between it\n    ///         and the KEEP-backed factory can be updated.\n    ",
        "@notice": "Get the time remaining until the Keep ETH-only-backed ECDSA keep /// factory and the selection strategy that will choose between it /// and the KEEP-backed factory can be updated.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 1,
        "low_quality": 0
    },
    {
        "name": "getRemainingEthBtcPriceFeedAdditionTime",
        "visibility": "external",
        "args": [],
        "func": "function getRemainingEthBtcPriceFeedAdditionTime() external view returns (uint256) {\n        return getRemainingChangeTime(\n            ethBtcPriceFeedAdditionInitiated,\n            priceFeedGovernanceTimeDelay\n        );\n    }",
        "comments": [
            "",
            "    /// @notice Get the time remaining until the signer fee divisor can be updated.",
            "    "
        ],
        "comt": "\n    /// @notice Get the time remaining until the signer fee divisor can be updated.\n    ",
        "@notice": "Get the time remaining until the signer fee divisor can be updated.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRemainingKeepFactoriesUpgradeabilityTime",
        "visibility": "external",
        "args": [],
        "func": "function getRemainingKeepFactoriesUpgradeabilityTime() external view returns (uint256) {\n        return getRemainingChangeTime(\n            initializedTimestamp,\n            keepFactoriesUpgradeabilityPeriod\n        );\n    }",
        "comments": [
            "",
            "    /// @notice Get the time remaining until Keep factories can no longer be updated.",
            "    "
        ],
        "comt": "\n    /// @notice Get the time remaining until Keep factories can no longer be updated.\n    ",
        "@notice": "Get the time remaining until Keep factories can no longer be updated.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "refreshMinimumBondableValue",
        "visibility": "public",
        "args": [],
        "func": "function refreshMinimumBondableValue() public {\n        keepFactorySelection.setMinimumBondableValue(\n            calculateBondRequirementWei(getMinimumLotSize()),\n            keepSize,\n            keepThreshold\n        );\n    }",
        "comments": [
            "",
            "    /// @notice Refreshes the minimum bondable value required from the operator",
            "    /// to join the sortition pool for tBTC. The minimum bondable value is",
            "    /// equal to the current minimum lot size collateralized 150% multiplied by",
            "    /// the current BTC price.",
            "    /// @dev It is recommended to call this function on tBTC initialization and",
            "    /// after minimum lot size update.",
            "    "
        ],
        "comt": "\n    /// @notice Refreshes the minimum bondable value required from the operator\n    /// to join the sortition pool for tBTC. The minimum bondable value is\n    /// equal to the current minimum lot size collateralized 150% multiplied by\n    /// the current BTC price.\n    /// @dev It is recommended to call this function on tBTC initialization and\n    /// after minimum lot size update.\n    ",
        "@notice": "Refreshes the minimum bondable value required from the operator /// to join the sortition pool for tBTC. The minimum bondable value is /// equal to the current minimum lot size collateralized 150% multiplied by /// the current BTC price.",
        "@dev": "It is recommended to call this function on tBTC initialization and /// after minimum lot size update.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getGovernanceTimeDelay",
        "visibility": "external",
        "args": [],
        "func": "function getGovernanceTimeDelay() external pure returns (uint256) {\n        return governanceTimeDelay;\n    }",
        "comments": [
            "",
            "    /// @notice Returns the time delay used for governance actions except for",
            "    ///         price feed additions.",
            "    "
        ],
        "comt": "\n    /// @notice Returns the time delay used for governance actions except for\n    ///         price feed additions.\n    ",
        "@notice": "Returns the time delay used for governance actions except for /// price feed additions.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getKeepFactoriesUpgradeabilityPeriod",
        "visibility": "public",
        "args": [],
        "func": "function getKeepFactoriesUpgradeabilityPeriod() public pure returns (uint256) {\n        return keepFactoriesUpgradeabilityPeriod;\n    }",
        "comments": [
            "",
            "    /// @notice Returns the time period when keep factories upgrades are allowed.",
            "    "
        ],
        "comt": "\n    /// @notice Returns the time period when keep factories upgrades are allowed.\n    ",
        "@notice": "Returns the time period when keep factories upgrades are allowed.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPriceFeedGovernanceTimeDelay",
        "visibility": "external",
        "args": [],
        "func": "function getPriceFeedGovernanceTimeDelay() external pure returns (uint256) {\n        return priceFeedGovernanceTimeDelay;\n    }",
        "comments": [
            "",
            "    /// @notice Returns the time delay used for price feed addition governance",
            "    ///         actions.",
            "    "
        ],
        "comt": "\n    /// @notice Returns the time delay used for price feed addition governance\n    ///         actions.\n    ",
        "@notice": "Returns the time delay used for price feed addition governance /// actions.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getNewDepositFeeEstimate",
        "visibility": "external",
        "args": [],
        "func": "function getNewDepositFeeEstimate()\n        external\n        view\n        returns (uint256)\n    {\n        IBondedECDSAKeepFactory _keepFactory = keepFactorySelection.selectFactory();\n        return _keepFactory.openKeepFeeEstimate();\n    }",
        "comments": [
            "",
            "    /// @notice Gets a fee estimate for creating a new Deposit.",
            "    /// @return Uint256 estimate.",
            "    "
        ],
        "comt": "\n    /// @notice Gets a fee estimate for creating a new Deposit.\n    /// @return Uint256 estimate.\n    ",
        "@notice": "Gets a fee estimate for creating a new Deposit.",
        "@return1": "Uint256 estimate.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "requestNewKeep",
        "visibility": "external",
        "args": [
            {
                "name": "_requestedLotSizeSatoshis",
                "type": "uint64"
            },
            {
                "name": "_maxSecuredLifetime",
                "type": "uint256"
            }
        ],
        "func": "function requestNewKeep(\n        uint64 _requestedLotSizeSatoshis,\n        uint256 _maxSecuredLifetime\n    )\n        external\n        payable\n        returns (address)\n    {\n        require(tbtcDepositToken.exists(uint256(msg.sender)), \"Caller must be a Deposit contract\");\n        require(isAllowedLotSize(_requestedLotSizeSatoshis), \"provided lot size not supported\");\n\n        IBondedECDSAKeepFactory _keepFactory = keepFactorySelection.selectFactoryAndRefresh();\n        uint256 bond = calculateBondRequirementWei(_requestedLotSizeSatoshis);\n        return _keepFactory.openKeep.value(msg.value)(keepSize, keepThreshold, msg.sender, bond, _maxSecuredLifetime);\n    }",
        "comments": [
            "",
            "    /// @notice Request a new keep opening.",
            "    /// @param _requestedLotSizeSatoshis Lot size in satoshis.",
            "    /// @param _maxSecuredLifetime Duration of stake lock in seconds.",
            "    /// @return Address of a new keep.",
            "    "
        ],
        "comt": "\n    /// @notice Request a new keep opening.\n    /// @param _requestedLotSizeSatoshis Lot size in satoshis.\n    /// @param _maxSecuredLifetime Duration of stake lock in seconds.\n    /// @return Address of a new keep.\n    ",
        "@notice": "Request a new keep opening.",
        "@param1": "_requestedLotSizeSatoshis Lot size in satoshis.",
        "@param2": "_maxSecuredLifetime Duration of stake lock in seconds.",
        "@return1": "Address of a new keep.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isAllowedLotSize",
        "visibility": "public",
        "args": [
            {
                "name": "_requestedLotSizeSatoshis",
                "type": "uint64"
            }
        ],
        "func": "function isAllowedLotSize(uint64 _requestedLotSizeSatoshis) public view returns (bool){\n        for( uint i = 0; i < lotSizesSatoshis.length; i++){\n            if (lotSizesSatoshis[i] == _requestedLotSizeSatoshis){\n                return true;\n            }\n        }\n        return false;\n    }",
        "comments": [
            "",
            "    /// @notice Check if a lot size is allowed.",
            "    /// @param _requestedLotSizeSatoshis Lot size to check.",
            "    /// @return True if lot size is allowed, false otherwise.",
            "    "
        ],
        "comt": "\n    /// @notice Check if a lot size is allowed.\n    /// @param _requestedLotSizeSatoshis Lot size to check.\n    /// @return True if lot size is allowed, false otherwise.\n    ",
        "@notice": "Check if a lot size is allowed.",
        "@param1": "_requestedLotSizeSatoshis Lot size to check.",
        "@return1": "True if lot size is allowed, false otherwise.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "lotSizeSatoshis",
        "visibility": "external",
        "args": [],
        "func": "function lotSizeSatoshis() external view returns (uint64){\n        return self.lotSizeSatoshis;\n    }",
        "comments": [
            "",
            "//----------------------------- METADATA LOOKUP ------------------------------//",
            "",
            "    /// @notice Get this deposit's BTC lot size in satoshis.",
            "    /// @return uint64 lot size in satoshis.",
            "    "
        ],
        "comt": "\n//----------------------------- METADATA LOOKUP ------------------------------//\n\n    /// @notice Get this deposit's BTC lot size in satoshis.\n    /// @return uint64 lot size in satoshis.\n    ",
        "@notice": "Get this deposit's BTC lot size in satoshis.",
        "@return1": "uint64 lot size in satoshis.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "lotSizeTbtc",
        "visibility": "external",
        "args": [],
        "func": "function lotSizeTbtc() external view returns (uint256){\n        return self.lotSizeTbtc();\n    }",
        "comments": [
            "",
            "    /// @notice Get this deposit's lot size in TBTC.",
            "    /// @dev This is the same as lotSizeSatoshis(), but is multiplied to scale",
            "    ///      to 18 decimal places.",
            "    /// @return uint256 lot size in TBTC precision (max 18 decimal places).",
            "    "
        ],
        "comt": "\n    /// @notice Get this deposit's lot size in TBTC.\n    /// @dev This is the same as lotSizeSatoshis(), but is multiplied to scale\n    ///      to 18 decimal places.\n    /// @return uint256 lot size in TBTC precision (max 18 decimal places).\n    ",
        "@notice": "Get this deposit's lot size in TBTC.",
        "@dev": "This is the same as lotSizeSatoshis(), but is multiplied to scale /// to 18 decimal places.",
        "@return1": "uint256 lot size in TBTC precision (max 18 decimal places).",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "signerFeeTbtc",
        "visibility": "external",
        "args": [],
        "func": "function signerFeeTbtc() external view returns (uint256) {\n        return self.signerFeeTbtc();\n    }",
        "comments": [
            "",
            "    /// @notice Get the signer fee for this deposit, in TBTC.",
            "    /// @dev This is the one-time fee required by the signers to perform the",
            "    ///      tasks needed to maintain a decentralized and trustless model for",
            "    ///      tBTC. It is a percentage of the deposit's lot size.",
            "    /// @return Fee amount in TBTC.",
            "    "
        ],
        "comt": "\n    /// @notice Get the signer fee for this deposit, in TBTC.\n    /// @dev This is the one-time fee required by the signers to perform the\n    ///      tasks needed to maintain a decentralized and trustless model for\n    ///      tBTC. It is a percentage of the deposit's lot size.\n    /// @return Fee amount in TBTC.\n    ",
        "@notice": "Get the signer fee for this deposit, in TBTC.",
        "@dev": "This is the one-time fee required by the signers to perform the /// tasks needed to maintain a decentralized and trustless model for /// tBTC. It is a percentage of the deposit's lot size.",
        "@return1": "Fee amount in TBTC.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "currentState",
        "visibility": "external",
        "args": [],
        "func": "function currentState() external view returns (uint256) {\n        return uint256(self.currentState);\n    }",
        "comments": [
            "",
            "    /// @notice Get the integer representing the current state.",
            "    /// @dev We implement this because contracts don't handle foreign enums",
            "    ///      well. See `DepositStates` for more info on states.",
            "    /// @return The 0-indexed state from the DepositStates enum.",
            "    "
        ],
        "comt": "\n    /// @notice Get the integer representing the current state.\n    /// @dev We implement this because contracts don't handle foreign enums\n    ///      well. See `DepositStates` for more info on states.\n    /// @return The 0-indexed state from the DepositStates enum.\n    ",
        "@notice": "Get the integer representing the current state.",
        "@dev": "We implement this because contracts don't handle foreign enums /// well. See `DepositStates` for more info on states.",
        "@return1": "The 0-indexed state from the DepositStates enum.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inActive",
        "visibility": "external",
        "args": [],
        "func": "function inActive() external view returns (bool) {\n        return self.inActive();\n    }",
        "comments": [
            "",
            "    /// @notice Check if the Deposit is in ACTIVE state.",
            "    /// @return True if state is ACTIVE, false otherwise.",
            "    "
        ],
        "comt": "\n    /// @notice Check if the Deposit is in ACTIVE state.\n    /// @return True if state is ACTIVE, false otherwise.\n    ",
        "@notice": "Check if the Deposit is in ACTIVE state.",
        "@return1": "True if state is ACTIVE, false otherwise.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "keepAddress",
        "visibility": "external",
        "args": [],
        "func": "function keepAddress() external view returns (address) {\n        return self.keepAddress;\n    }",
        "comments": [
            "",
            "    /// @notice Get the contract address of the BondedECDSAKeep associated with",
            "    ///         this Deposit.",
            "    /// @dev The keep contract address is saved on Deposit initialization.",
            "    /// @return Address of the Keep contract.",
            "    "
        ],
        "comt": "\n    /// @notice Get the contract address of the BondedECDSAKeep associated with\n    ///         this Deposit.\n    /// @dev The keep contract address is saved on Deposit initialization.\n    /// @return Address of the Keep contract.\n    ",
        "@notice": "Get the contract address of the BondedECDSAKeep associated with /// this Deposit.",
        "@dev": "The keep contract address is saved on Deposit initialization.",
        "@return1": "Address of the Keep contract.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "remainingTerm",
        "visibility": "external",
        "args": [],
        "func": "function remainingTerm() external view returns(uint256){\n        return self.remainingTerm();\n    }",
        "comments": [
            "",
            "    /// @notice Retrieve the remaining term of the deposit in seconds.",
            "    /// @dev The value accuracy is not guaranteed since block.timestmap can be",
            "    ///      lightly manipulated by miners.",
            "    /// @return The remaining term of the deposit in seconds. 0 if already at",
            "    ///         term.",
            "    "
        ],
        "comt": "\n    /// @notice Retrieve the remaining term of the deposit in seconds.\n    /// @dev The value accuracy is not guaranteed since block.timestmap can be\n    ///      lightly manipulated by miners.\n    /// @return The remaining term of the deposit in seconds. 0 if already at\n    ///         term.\n    ",
        "@notice": "Retrieve the remaining term of the deposit in seconds.",
        "@dev": "The value accuracy is not guaranteed since block.timestmap can be /// lightly manipulated by miners.",
        "@return1": "The remaining term of the deposit in seconds. 0 if already at /// term.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "collateralizationPercentage",
        "visibility": "external",
        "args": [],
        "func": "function collateralizationPercentage() external view returns (uint256) {\n        return self.collateralizationPercentage();\n    }",
        "comments": [
            "",
            "    /// @notice Get the current collateralization level for this Deposit.",
            "    /// @dev This value represents the percentage of the backing BTC value the",
            "    ///      signers currently must hold as bond.",
            "    /// @return The current collateralization level for this deposit.",
            "    "
        ],
        "comt": "\n    /// @notice Get the current collateralization level for this Deposit.\n    /// @dev This value represents the percentage of the backing BTC value the\n    ///      signers currently must hold as bond.\n    /// @return The current collateralization level for this deposit.\n    ",
        "@notice": "Get the current collateralization level for this Deposit.",
        "@dev": "This value represents the percentage of the backing BTC value the /// signers currently must hold as bond.",
        "@return1": "The current collateralization level for this deposit.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialCollateralizedPercent",
        "visibility": "external",
        "args": [],
        "func": "function initialCollateralizedPercent() external view returns (uint16) {\n        return self.initialCollateralizedPercent;\n    }",
        "comments": [
            "",
            "    /// @notice Get the initial collateralization level for this Deposit.",
            "    /// @dev This value represents the percentage of the backing BTC value",
            "    ///      the signers hold initially. It is set at creation time.",
            "    /// @return The initial collateralization level for this deposit.",
            "    "
        ],
        "comt": "\n    /// @notice Get the initial collateralization level for this Deposit.\n    /// @dev This value represents the percentage of the backing BTC value\n    ///      the signers hold initially. It is set at creation time.\n    /// @return The initial collateralization level for this deposit.\n    ",
        "@notice": "Get the initial collateralization level for this Deposit.",
        "@dev": "This value represents the percentage of the backing BTC value /// the signers hold initially. It is set at creation time.",
        "@return1": "The initial collateralization level for this deposit.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "undercollateralizedThresholdPercent",
        "visibility": "external",
        "args": [],
        "func": "function undercollateralizedThresholdPercent() external view returns (uint16) {\n        return self.undercollateralizedThresholdPercent;\n    }",
        "comments": [
            "",
            "    /// @notice Get the undercollateralization level for this Deposit.",
            "    /// @dev This collateralization level is semi-critical. If the",
            "    ///      collateralization level falls below this percentage the Deposit can",
            "    ///      be courtesy-called by calling `notifyCourtesyCall`. This value",
            "    ///      represents the percentage of the backing BTC value the signers must",
            "    ///      hold as bond in order to not be undercollateralized. It is set at",
            "    ///      creation time. Note that the value for new deposits in TBTCSystem",
            "    ///      can be changed by governance, but the value for a particular",
            "    ///      deposit is static once the deposit is created.",
            "    /// @return The undercollateralized level for this deposit.",
            "    "
        ],
        "comt": "\n    /// @notice Get the undercollateralization level for this Deposit.\n    /// @dev This collateralization level is semi-critical. If the\n    ///      collateralization level falls below this percentage the Deposit can\n    ///      be courtesy-called by calling `notifyCourtesyCall`. This value\n    ///      represents the percentage of the backing BTC value the signers must\n    ///      hold as bond in order to not be undercollateralized. It is set at\n    ///      creation time. Note that the value for new deposits in TBTCSystem\n    ///      can be changed by governance, but the value for a particular\n    ///      deposit is static once the deposit is created.\n    /// @return The undercollateralized level for this deposit.\n    ",
        "@notice": "Get the undercollateralization level for this Deposit.",
        "@dev": "This collateralization level is semi-critical. If the /// collateralization level falls below this percentage the Deposit can /// be courtesy-called by calling `notifyCourtesyCall`. This value /// represents the percentage of the backing BTC value the signers must /// hold as bond in order to not be undercollateralized. It is set at /// creation time. Note that the value for new deposits in TBTCSystem /// can be changed by governance, but the value for a particular /// deposit is static once the deposit is created.",
        "@return1": "The undercollateralized level for this deposit.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "severelyUndercollateralizedThresholdPercent",
        "visibility": "external",
        "args": [],
        "func": "function severelyUndercollateralizedThresholdPercent() external view returns (uint16) {\n        return self.severelyUndercollateralizedThresholdPercent;\n    }",
        "comments": [
            "",
            "    /// @notice Get the severe undercollateralization level for this Deposit.",
            "    /// @dev This collateralization level is critical. If the collateralization",
            "    ///      level falls below this percentage the Deposit can get liquidated.",
            "    ///      This value represents the percentage of the backing BTC value the",
            "    ///      signers must hold as bond in order to not be severely",
            "    ///      undercollateralized. It is set at creation time. Note that the",
            "    ///      value for new deposits in TBTCSystem can be changed by governance,",
            "    ///      but the value for a particular deposit is static once the deposit",
            "    ///      is created.",
            "    /// @return The severely undercollateralized level for this deposit.",
            "    "
        ],
        "comt": "\n    /// @notice Get the severe undercollateralization level for this Deposit.\n    /// @dev This collateralization level is critical. If the collateralization\n    ///      level falls below this percentage the Deposit can get liquidated.\n    ///      This value represents the percentage of the backing BTC value the\n    ///      signers must hold as bond in order to not be severely\n    ///      undercollateralized. It is set at creation time. Note that the\n    ///      value for new deposits in TBTCSystem can be changed by governance,\n    ///      but the value for a particular deposit is static once the deposit\n    ///      is created.\n    /// @return The severely undercollateralized level for this deposit.\n    ",
        "@notice": "Get the severe undercollateralization level for this Deposit.",
        "@dev": "This collateralization level is critical. If the collateralization /// level falls below this percentage the Deposit can get liquidated. /// This value represents the percentage of the backing BTC value the /// signers must hold as bond in order to not be severely /// undercollateralized. It is set at creation time. Note that the /// value for new deposits in TBTCSystem can be changed by governance, /// but the value for a particular deposit is static once the deposit /// is created.",
        "@return1": "The severely undercollateralized level for this deposit.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "utxoValue",
        "visibility": "external",
        "args": [],
        "func": "function utxoValue() external view returns (uint256){\n        require(\n            ! self.inFunding(),\n            \"Deposit has not yet been funded and has no available funding info\"\n        );\n\n        return self.utxoValue();\n    }",
        "comments": [
            "",
            "    /// @notice Get the value of the funding UTXO.",
            "    /// @dev This call will revert if the deposit is not in a state where the",
            "    ///      UTXO info should be valid. In particular, before funding proof is",
            "    ///      successfully submitted (i.e. in states START,",
            "    ///      AWAITING_SIGNER_SETUP, and AWAITING_BTC_FUNDING_PROOF), this value",
            "    ///      would not be valid.",
            "    /// @return The value of the funding UTXO in satoshis.",
            "    "
        ],
        "comt": "\n    /// @notice Get the value of the funding UTXO.\n    /// @dev This call will revert if the deposit is not in a state where the\n    ///      UTXO info should be valid. In particular, before funding proof is\n    ///      successfully submitted (i.e. in states START,\n    ///      AWAITING_SIGNER_SETUP, and AWAITING_BTC_FUNDING_PROOF), this value\n    ///      would not be valid.\n    /// @return The value of the funding UTXO in satoshis.\n    ",
        "@notice": "Get the value of the funding UTXO.",
        "@dev": "This call will revert if the deposit is not in a state where the /// UTXO info should be valid. In particular, before funding proof is /// successfully submitted (i.e. in states START, /// AWAITING_SIGNER_SETUP, and AWAITING_BTC_FUNDING_PROOF), this value /// would not be valid.",
        "@return1": "The value of the funding UTXO in satoshis.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "fundingInfo",
        "visibility": "external",
        "args": [],
        "func": "function fundingInfo() external view returns (bytes8 utxoValueBytes, uint256 fundedAt, bytes memory utxoOutpoint) {\n        require(\n            ! self.inFunding(),\n            \"Deposit has not yet been funded and has no available funding info\"\n        );\n\n        return (self.utxoValueBytes, self.fundedAt, self.utxoOutpoint);\n    }",
        "comments": [
            "",
            "    /// @notice Returns information associated with the funding UXTO.",
            "    /// @dev This call will revert if the deposit is not in a state where the",
            "    ///      funding info should be valid. In particular, before funding proof",
            "    ///      is successfully submitted (i.e. in states START,",
            "    ///      AWAITING_SIGNER_SETUP, and AWAITING_BTC_FUNDING_PROOF), none of",
            "    ///      these values are set or valid.",
            "    /// @return A tuple of (uxtoValueBytes, fundedAt, uxtoOutpoint).",
            "    "
        ],
        "comt": "\n    /// @notice Returns information associated with the funding UXTO.\n    /// @dev This call will revert if the deposit is not in a state where the\n    ///      funding info should be valid. In particular, before funding proof\n    ///      is successfully submitted (i.e. in states START,\n    ///      AWAITING_SIGNER_SETUP, and AWAITING_BTC_FUNDING_PROOF), none of\n    ///      these values are set or valid.\n    /// @return A tuple of (uxtoValueBytes, fundedAt, uxtoOutpoint).\n    ",
        "@notice": "Returns information associated with the funding UXTO.",
        "@dev": "This call will revert if the deposit is not in a state where the /// funding info should be valid. In particular, before funding proof /// is successfully submitted (i.e. in states START, /// AWAITING_SIGNER_SETUP, and AWAITING_BTC_FUNDING_PROOF), none of /// these values are set or valid.",
        "@return1": "A tuple of (uxtoValueBytes, fundedAt, uxtoOutpoint).",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "auctionValue",
        "visibility": "external",
        "args": [],
        "func": "function auctionValue() external view returns (uint256) {\n        require(\n            self.inSignerLiquidation(),\n            \"Deposit has no funds currently at auction\"\n        );\n\n        return self.auctionValue();\n    }",
        "comments": [
            "",
            "    /// @notice Calculates the amount of value at auction right now.",
            "    /// @dev This call will revert if the deposit is not in a state where an",
            "    ///      auction is currently in progress.",
            "    /// @return The value in wei that would be received in exchange for the",
            "    ///         deposit's lot size in TBTC if `purchaseSignerBondsAtAuction`",
            "    ///         were called at the time this function is called.",
            "    "
        ],
        "comt": "\n    /// @notice Calculates the amount of value at auction right now.\n    /// @dev This call will revert if the deposit is not in a state where an\n    ///      auction is currently in progress.\n    /// @return The value in wei that would be received in exchange for the\n    ///         deposit's lot size in TBTC if `purchaseSignerBondsAtAuction`\n    ///         were called at the time this function is called.\n    ",
        "@notice": "Calculates the amount of value at auction right now.",
        "@dev": "This call will revert if the deposit is not in a state where an /// auction is currently in progress.",
        "@return1": "The value in wei that would be received in exchange for the /// deposit's lot size in TBTC if `purchaseSignerBondsAtAuction` /// were called at the time this function is called.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdrawableAmount",
        "visibility": "external",
        "args": [],
        "func": "function withdrawableAmount() external view returns (uint256) {\n        return self.getWithdrawableAmount();\n    }",
        "comments": [
            "",
            "    /// @notice Get caller's ETH withdraw allowance.",
            "    /// @dev Generally ETH is only available to withdraw after the deposit",
            "    ///      reaches a closed state. The amount reported is for the sender, and",
            "    ///      can be withdrawn using `withdrawFunds` if the deposit is in an end",
            "    ///      state.",
            "    /// @return The withdraw allowance in wei.",
            "    "
        ],
        "comt": "\n    /// @notice Get caller's ETH withdraw allowance.\n    /// @dev Generally ETH is only available to withdraw after the deposit\n    ///      reaches a closed state. The amount reported is for the sender, and\n    ///      can be withdrawn using `withdrawFunds` if the deposit is in an end\n    ///      state.\n    /// @return The withdraw allowance in wei.\n    ",
        "@notice": "Get caller's ETH withdraw allowance.",
        "@dev": "Generally ETH is only available to withdraw after the deposit /// reaches a closed state. The amount reported is for the sender, and /// can be withdrawn using `withdrawFunds` if the deposit is in an end /// state.",
        "@return1": "The withdraw allowance in wei.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "notifySignerSetupFailed",
        "visibility": "external",
        "args": [],
        "func": "function notifySignerSetupFailed() external {\n        self.notifySignerSetupFailed();\n    }",
        "comments": [
            "",
            "//------------------------------ FUNDING FLOW --------------------------------//",
            "",
            "    /// @notice Notify the contract that signing group setup has timed out if",
            "    ///         retrieveSignerPubkey is not successfully called within the",
            "    ///         allotted time.",
            "    /// @dev This is considered a signer fault, and the signers' bonds are used",
            "    ///      to make the deposit setup fee available for withdrawal by the TDT",
            "    ///      holder as a refund. The remainder of the signers' bonds are",
            "    ///      returned to the bonding pool and the signers are released from any",
            "    ///      further responsibilities. Reverts if the deposit is not awaiting",
            "    ///      signer setup or if the signing group formation timeout has not",
            "    ///      elapsed.",
            "    "
        ],
        "comt": "\n//------------------------------ FUNDING FLOW --------------------------------//\n\n    /// @notice Notify the contract that signing group setup has timed out if\n    ///         retrieveSignerPubkey is not successfully called within the\n    ///         allotted time.\n    /// @dev This is considered a signer fault, and the signers' bonds are used\n    ///      to make the deposit setup fee available for withdrawal by the TDT\n    ///      holder as a refund. The remainder of the signers' bonds are\n    ///      returned to the bonding pool and the signers are released from any\n    ///      further responsibilities. Reverts if the deposit is not awaiting\n    ///      signer setup or if the signing group formation timeout has not\n    ///      elapsed.\n    ",
        "@notice": "Notify the contract that signing group setup has timed out if /// retrieveSignerPubkey is not successfully called within the /// allotted time.",
        "@dev": "This is considered a signer fault, and the signers' bonds are used /// to make the deposit setup fee available for withdrawal by the TDT /// holder as a refund. The remainder of the signers' bonds are /// returned to the bonding pool and the signers are released from any /// further responsibilities. Reverts if the deposit is not awaiting /// signer setup or if the signing group formation timeout has not /// elapsed.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "retrieveSignerPubkey",
        "visibility": "external",
        "args": [],
        "func": "function retrieveSignerPubkey() external {\n        self.retrieveSignerPubkey();\n    }",
        "comments": [
            "",
            "    /// @notice Notify the contract that the ECDSA keep has generated a public",
            "    ///         key so the deposit contract can pull it in.",
            "    /// @dev Stores the pubkey as 2 bytestrings, X and Y. Emits a",
            "    ///      RegisteredPubkey event with the two components. Reverts if the",
            "    ///      deposit is not awaiting signer setup, if the generated public key",
            "    ///      is unset or has incorrect length, or if the public key has a 0",
            "    ///      X or Y value.",
            "    "
        ],
        "comt": "\n    /// @notice Notify the contract that the ECDSA keep has generated a public\n    ///         key so the deposit contract can pull it in.\n    /// @dev Stores the pubkey as 2 bytestrings, X and Y. Emits a\n    ///      RegisteredPubkey event with the two components. Reverts if the\n    ///      deposit is not awaiting signer setup, if the generated public key\n    ///      is unset or has incorrect length, or if the public key has a 0\n    ///      X or Y value.\n    ",
        "@notice": "Notify the contract that the ECDSA keep has generated a public /// key so the deposit contract can pull it in.",
        "@dev": "Stores the pubkey as 2 bytestrings, X and Y. Emits a /// RegisteredPubkey event with the two components. Reverts if the /// deposit is not awaiting signer setup, if the generated public key /// is unset or has incorrect length, or if the public key has a 0 /// X or Y value.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "notifyFundingTimedOut",
        "visibility": "external",
        "args": [],
        "func": "function notifyFundingTimedOut() external {\n        self.notifyFundingTimedOut();\n    }",
        "comments": [
            "",
            "    /// @notice Notify the contract that the funding phase of the deposit has",
            "    ///         timed out if `provideBTCFundingProof` is not successfully called",
            "    ///         within the allotted time. Any sent BTC is left under control of",
            "    ///         the signer group, and the funder can use `requestFunderAbort` to",
            "    ///         request an at-signer-discretion return of any BTC sent to a",
            "    ///         deposit that has been notified of a funding timeout.",
            "    /// @dev This is considered a funder fault, and the funder's payment for",
            "    ///      opening the deposit is not refunded. Emits a SetupFailed event.",
            "    ///      Reverts if the funding timeout has not yet elapsed, or if the",
            "    ///      deposit is not currently awaiting funding proof.",
            "    "
        ],
        "comt": "\n    /// @notice Notify the contract that the funding phase of the deposit has\n    ///         timed out if `provideBTCFundingProof` is not successfully called\n    ///         within the allotted time. Any sent BTC is left under control of\n    ///         the signer group, and the funder can use `requestFunderAbort` to\n    ///         request an at-signer-discretion return of any BTC sent to a\n    ///         deposit that has been notified of a funding timeout.\n    /// @dev This is considered a funder fault, and the funder's payment for\n    ///      opening the deposit is not refunded. Emits a SetupFailed event.\n    ///      Reverts if the funding timeout has not yet elapsed, or if the\n    ///      deposit is not currently awaiting funding proof.\n    ",
        "@notice": "Notify the contract that the funding phase of the deposit has /// timed out if `provideBTCFundingProof` is not successfully called /// within the allotted time. Any sent BTC is left under control of /// the signer group, and the funder can use `requestFunderAbort` to /// request an at-signer-discretion return of any BTC sent to a /// deposit that has been notified of a funding timeout.",
        "@dev": "This is considered a funder fault, and the funder's payment for /// opening the deposit is not refunded. Emits a SetupFailed event. /// Reverts if the funding timeout has not yet elapsed, or if the /// deposit is not currently awaiting funding proof.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 1,
        "low_quality": 0
    },
    {
        "name": "requestFunderAbort",
        "visibility": "public",
        "args": [
            {
                "name": "_abortOutputScript",
                "type": "bytes memory"
            }
        ],
        "func": "function requestFunderAbort(bytes memory _abortOutputScript) public { // not external to allow bytes memory parameters\n        require(\n            self.depositOwner() == msg.sender,\n            \"Only TDT holder can request funder abort\"\n        );\n\n        self.requestFunderAbort(_abortOutputScript);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "provideFundingECDSAFraudProof",
        "visibility": "public",
        "args": [
            {
                "name": "_v",
                "type": "uint8"
            },
            {
                "name": "_r",
                "type": "bytes32"
            },
            {
                "name": "_s",
                "type": "bytes32"
            },
            {
                "name": "_signedDigest",
                "type": "bytes32"
            },
            {
                "name": "_preimage",
                "type": "bytes memory"
            }
        ],
        "func": "function provideFundingECDSAFraudProof(\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        bytes32 _signedDigest,\n        bytes memory _preimage\n    ) public { // not external to allow bytes memory parameters\n        self.provideFundingECDSAFraudProof(_v, _r, _s, _signedDigest, _preimage);\n    }",
        "comments": [
            "",
            "    /// @notice Anyone can provide a signature corresponding to the signers'",
            "    ///         public key to prove fraud during funding. Note that during",
            "    ///         funding no signature has been requested from the signers, so",
            "    ///         any signature is effectively fraud.",
            "    /// @dev Calls out to the keep to verify if there was fraud.",
            "    /// @param _v Signature recovery value.",
            "    /// @param _r Signature R value.",
            "    /// @param _s Signature S value.",
            "    /// @param _signedDigest The digest signed by the signature (v,r,s) tuple.",
            "    /// @param _preimage The sha256 preimage of the digest.",
            "    "
        ],
        "comt": "\n    /// @notice Anyone can provide a signature corresponding to the signers'\n    ///         public key to prove fraud during funding. Note that during\n    ///         funding no signature has been requested from the signers, so\n    ///         any signature is effectively fraud.\n    /// @dev Calls out to the keep to verify if there was fraud.\n    /// @param _v Signature recovery value.\n    /// @param _r Signature R value.\n    /// @param _s Signature S value.\n    /// @param _signedDigest The digest signed by the signature (v,r,s) tuple.\n    /// @param _preimage The sha256 preimage of the digest.\n    ",
        "@notice": "Anyone can provide a signature corresponding to the signers' /// public key to prove fraud during funding. Note that during /// funding no signature has been requested from the signers, so /// any signature is effectively fraud.",
        "@dev": "Calls out to the keep to verify if there was fraud.",
        "@param1": "_v Signature recovery value.",
        "@param2": "_r Signature R value.",
        "@param3": "_s Signature S value.",
        "@param4": "_signedDigest The digest signed by the signature (v,r,s) tuple.",
        "@param5": "_preimage The sha256 preimage of the digest.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "provideBTCFundingProof",
        "visibility": "public",
        "args": [
            {
                "name": "_txVersion",
                "type": "bytes4"
            },
            {
                "name": "_txInputVector",
                "type": "bytes memory"
            },
            {
                "name": "_txOutputVector",
                "type": "bytes memory"
            },
            {
                "name": "_txLocktime",
                "type": "bytes4"
            },
            {
                "name": "_fundingOutputIndex",
                "type": "uint8"
            },
            {
                "name": "_merkleProof",
                "type": "bytes memory"
            },
            {
                "name": "_txIndexInBlock",
                "type": "uint256"
            },
            {
                "name": "_bitcoinHeaders",
                "type": "bytes memory"
            }
        ],
        "func": "function provideBTCFundingProof(\n        bytes4 _txVersion,\n        bytes memory _txInputVector,\n        bytes memory _txOutputVector,\n        bytes4 _txLocktime,\n        uint8 _fundingOutputIndex,\n        bytes memory _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes memory _bitcoinHeaders\n    ) public { // not external to allow bytes memory parameters\n        self.provideBTCFundingProof(\n            _txVersion,\n            _txInputVector,\n            _txOutputVector,\n            _txLocktime,\n            _fundingOutputIndex,\n            _merkleProof,\n            _txIndexInBlock,\n            _bitcoinHeaders\n        );\n    }",
        "comments": [
            "",
            "    /// @notice Anyone may submit a funding proof to the deposit showing that",
            "    ///         a transaction was submitted and sufficiently confirmed on the",
            "    ///         Bitcoin chain transferring the deposit lot size's amount of BTC",
            "    ///         to the signer-controlled private key corresopnding to this",
            "    ///         deposit. This will move the deposit into an active state.",
            "    /// @dev Takes a pre-parsed transaction and calculates values needed to",
            "    ///      verify funding.",
            "    /// @param _txVersion Transaction version number (4-byte little-endian).",
            "    /// @param _txInputVector All transaction inputs prepended by the number of",
            "    ///        inputs encoded as a VarInt, max 0xFC(252) inputs.",
            "    /// @param _txOutputVector All transaction outputs prepended by the number",
            "    ///         of outputs encoded as a VarInt, max 0xFC(252) outputs.",
            "    /// @param _txLocktime Final 4 bytes of the transaction.",
            "    /// @param _fundingOutputIndex Index of funding output in _txOutputVector",
            "    ///        (0-indexed).",
            "    /// @param _merkleProof The merkle proof of transaction inclusion in a",
            "    ///        block.",
            "    /// @param _txIndexInBlock Transaction index in the block (0-indexed).",
            "    /// @param _bitcoinHeaders Single bytestring of 80-byte bitcoin headers,",
            "    ///        lowest height first.",
            "    "
        ],
        "comt": "\n    /// @notice Anyone may submit a funding proof to the deposit showing that\n    ///         a transaction was submitted and sufficiently confirmed on the\n    ///         Bitcoin chain transferring the deposit lot size's amount of BTC\n    ///         to the signer-controlled private key corresopnding to this\n    ///         deposit. This will move the deposit into an active state.\n    /// @dev Takes a pre-parsed transaction and calculates values needed to\n    ///      verify funding.\n    /// @param _txVersion Transaction version number (4-byte little-endian).\n    /// @param _txInputVector All transaction inputs prepended by the number of\n    ///        inputs encoded as a VarInt, max 0xFC(252) inputs.\n    /// @param _txOutputVector All transaction outputs prepended by the number\n    ///         of outputs encoded as a VarInt, max 0xFC(252) outputs.\n    /// @param _txLocktime Final 4 bytes of the transaction.\n    /// @param _fundingOutputIndex Index of funding output in _txOutputVector\n    ///        (0-indexed).\n    /// @param _merkleProof The merkle proof of transaction inclusion in a\n    ///        block.\n    /// @param _txIndexInBlock Transaction index in the block (0-indexed).\n    /// @param _bitcoinHeaders Single bytestring of 80-byte bitcoin headers,\n    ///        lowest height first.\n    ",
        "@notice": "Anyone may submit a funding proof to the deposit showing that /// a transaction was submitted and sufficiently confirmed on the /// Bitcoin chain transferring the deposit lot size's amount of BTC /// to the signer-controlled private key corresopnding to this /// deposit. This will move the deposit into an active state.",
        "@dev": "Takes a pre-parsed transaction and calculates values needed to /// verify funding.",
        "@param1": "_txVersion Transaction version number (4-byte little-endian).",
        "@param2": "_txInputVector All transaction inputs prepended by the number of /// inputs encoded as a VarInt, max 0xFC(252) inputs.",
        "@param3": "_txOutputVector All transaction outputs prepended by the number /// of outputs encoded as a VarInt, max 0xFC(252) outputs.",
        "@param4": "_txLocktime Final 4 bytes of the transaction.",
        "@param5": "_fundingOutputIndex Index of funding output in _txOutputVector /// (0-indexed).",
        "@param6": "_merkleProof The merkle proof of transaction inclusion in a /// block.",
        "@param7": "_txIndexInBlock Transaction index in the block (0-indexed).",
        "@param8": "_bitcoinHeaders Single bytestring of 80-byte bitcoin headers, /// lowest height first.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 1,
        "low_quality": 0
    },
    {
        "name": "notifyCourtesyCall",
        "visibility": "external",
        "args": [],
        "func": "function notifyCourtesyCall() external {\n        self.notifyCourtesyCall();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "exitCourtesyCall",
        "visibility": "external",
        "args": [],
        "func": "function exitCourtesyCall() external {\n        self.exitCourtesyCall();\n    }",
        "comments": [
            "",
            "    /// @notice Notify the contract that the signers' bond value has recovered",
            "    ///         enough to be considered sufficiently collateralized.",
            "    /// @dev This call will revert if collateral is still below the",
            "    ///      undercollateralized threshold according to the price feed.",
            "    "
        ],
        "comt": "\n    /// @notice Notify the contract that the signers' bond value has recovered\n    ///         enough to be considered sufficiently collateralized.\n    /// @dev This call will revert if collateral is still below the\n    ///      undercollateralized threshold according to the price feed.\n    ",
        "@notice": "Notify the contract that the signers' bond value has recovered /// enough to be considered sufficiently collateralized.",
        "@dev": "This call will revert if collateral is still below the /// undercollateralized threshold according to the price feed.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "notifyCourtesyCallExpired",
        "visibility": "external",
        "args": [],
        "func": "function notifyCourtesyCallExpired() external {\n        self.notifyCourtesyCallExpired();\n    }",
        "comments": [
            "",
            "    /// @notice Notify the contract that the courtesy period has expired and the",
            "    ///         deposit should move into liquidation.",
            "    /// @dev This call will revert if the courtesy call period has not in fact",
            "    ///      expired or is not in the courtesy call state. Courtesy call",
            "    ///      expiration is treated as an abort, and is handled by seizing signer",
            "    ///      bonds and putting them up for auction for the lot size amount in",
            "    ///      TBTC (see `purchaseSignerBondsAtAuction`). Emits a",
            "    ///      LiquidationStarted event. The caller is captured as the liquidation",
            "    ///      initiator, and is eligible for 50% of any bond left after the",
            "    ///      auction is completed.",
            "    "
        ],
        "comt": "\n    /// @notice Notify the contract that the courtesy period has expired and the\n    ///         deposit should move into liquidation.\n    /// @dev This call will revert if the courtesy call period has not in fact\n    ///      expired or is not in the courtesy call state. Courtesy call\n    ///      expiration is treated as an abort, and is handled by seizing signer\n    ///      bonds and putting them up for auction for the lot size amount in\n    ///      TBTC (see `purchaseSignerBondsAtAuction`). Emits a\n    ///      LiquidationStarted event. The caller is captured as the liquidation\n    ///      initiator, and is eligible for 50% of any bond left after the\n    ///      auction is completed.\n    ",
        "@notice": "Notify the contract that the courtesy period has expired and the /// deposit should move into liquidation.",
        "@dev": "This call will revert if the courtesy call period has not in fact /// expired or is not in the courtesy call state. Courtesy call /// expiration is treated as an abort, and is handled by seizing signer /// bonds and putting them up for auction for the lot size amount in /// TBTC (see `purchaseSignerBondsAtAuction`). Emits a /// LiquidationStarted event. The caller is captured as the liquidation /// initiator, and is eligible for 50% of any bond left after the /// auction is completed.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "notifyUndercollateralizedLiquidation",
        "visibility": "external",
        "args": [],
        "func": "function notifyUndercollateralizedLiquidation() external {\n        self.notifyUndercollateralizedLiquidation();\n    }",
        "comments": [
            "",
            "    /// @notice Notify the contract that the signers are undercollateralized.",
            "    /// @dev Calls out to the system for oracle info.",
            "    /// @dev This call will revert if the signers are not in fact severely",
            "    ///      undercollateralized according to the price feed. Severe",
            "    ///      undercollateralization is treated as an abort, and is handled by",
            "    ///      seizing signer bonds and putting them up for auction in exchange",
            "    ///      for the lot size amount in TBTC (see",
            "    ///      `purchaseSignerBondsAtAuction`). Emits a LiquidationStarted event.",
            "    ///      The caller is captured as the liquidation initiator, and is",
            "    ///      eligible for 50% of any bond left after the auction is completed.",
            "    "
        ],
        "comt": "\n    /// @notice Notify the contract that the signers are undercollateralized.\n    /// @dev Calls out to the system for oracle info.\n    /// @dev This call will revert if the signers are not in fact severely\n    ///      undercollateralized according to the price feed. Severe\n    ///      undercollateralization is treated as an abort, and is handled by\n    ///      seizing signer bonds and putting them up for auction in exchange\n    ///      for the lot size amount in TBTC (see\n    ///      `purchaseSignerBondsAtAuction`). Emits a LiquidationStarted event.\n    ///      The caller is captured as the liquidation initiator, and is\n    ///      eligible for 50% of any bond left after the auction is completed.\n    ",
        "@notice": "Notify the contract that the signers are undercollateralized.",
        "@dev": "Calls out to the system for oracle info. * This call will revert if the signers are not in fact severely /// undercollateralized according to the price feed. Severe /// undercollateralization is treated as an abort, and is handled by /// seizing signer bonds and putting them up for auction in exchange /// for the lot size amount in TBTC (see /// `purchaseSignerBondsAtAuction`). Emits a LiquidationStarted event. /// The caller is captured as the liquidation initiator, and is /// eligible for 50% of any bond left after the auction is completed.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "provideECDSAFraudProof",
        "visibility": "public",
        "args": [
            {
                "name": "_v",
                "type": "uint8"
            },
            {
                "name": "_r",
                "type": "bytes32"
            },
            {
                "name": "_s",
                "type": "bytes32"
            },
            {
                "name": "_signedDigest",
                "type": "bytes32"
            },
            {
                "name": "_preimage",
                "type": "bytes memory"
            }
        ],
        "func": "function provideECDSAFraudProof(\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        bytes32 _signedDigest,\n        bytes memory _preimage\n    ) public { // not external to allow bytes memory parameters\n        self.provideECDSAFraudProof(_v, _r, _s, _signedDigest, _preimage);\n    }",
        "comments": [
            "",
            "    /// @notice Anyone can provide a signature corresponding to the signers'",
            "    ///         public key that was not requested to prove fraud. A redemption",
            "    ///         request and a redemption fee increase are the only ways to",
            "    ///         request a signature from the signers.",
            "    /// @dev This call will revert if the underlying keep cannot verify that",
            "    ///      there was fraud. Fraud is handled by seizing signer bonds and",
            "    ///      putting them up for auction in exchange for the lot size amount in",
            "    ///      TBTC (see `purchaseSignerBondsAtAuction`). Emits a",
            "    ///      LiquidationStarted event. The caller is captured as the liquidation",
            "    ///      initiator, and is eligible for any bond left after the auction is",
            "    ///      completed.",
            "    /// @param  _v Signature recovery value.",
            "    /// @param  _r Signature R value.",
            "    /// @param  _s Signature S value.",
            "    /// @param _signedDigest The digest signed by the signature (v,r,s) tuple.",
            "    /// @param _preimage The sha256 preimage of the digest.",
            "    "
        ],
        "comt": "\n    /// @notice Anyone can provide a signature corresponding to the signers'\n    ///         public key that was not requested to prove fraud. A redemption\n    ///         request and a redemption fee increase are the only ways to\n    ///         request a signature from the signers.\n    /// @dev This call will revert if the underlying keep cannot verify that\n    ///      there was fraud. Fraud is handled by seizing signer bonds and\n    ///      putting them up for auction in exchange for the lot size amount in\n    ///      TBTC (see `purchaseSignerBondsAtAuction`). Emits a\n    ///      LiquidationStarted event. The caller is captured as the liquidation\n    ///      initiator, and is eligible for any bond left after the auction is\n    ///      completed.\n    /// @param  _v Signature recovery value.\n    /// @param  _r Signature R value.\n    /// @param  _s Signature S value.\n    /// @param _signedDigest The digest signed by the signature (v,r,s) tuple.\n    /// @param _preimage The sha256 preimage of the digest.\n    ",
        "@notice": "Anyone can provide a signature corresponding to the signers' /// public key that was not requested to prove fraud. A redemption /// request and a redemption fee increase are the only ways to /// request a signature from the signers.",
        "@dev": "This call will revert if the underlying keep cannot verify that /// there was fraud. Fraud is handled by seizing signer bonds and /// putting them up for auction in exchange for the lot size amount in /// TBTC (see `purchaseSignerBondsAtAuction`). Emits a /// LiquidationStarted event. The caller is captured as the liquidation /// initiator, and is eligible for any bond left after the auction is /// completed.",
        "@param1": "_v Signature recovery value.",
        "@param2": "_r Signature R value.",
        "@param3": "_s Signature S value.",
        "@param4": "_signedDigest The digest signed by the signature (v,r,s) tuple.",
        "@param5": "_preimage The sha256 preimage of the digest.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "notifyRedemptionSignatureTimedOut",
        "visibility": "external",
        "args": [],
        "func": "function notifyRedemptionSignatureTimedOut() external {\n        self.notifyRedemptionSignatureTimedOut();\n    }",
        "comments": [
            "",
            "    /// @notice Notify the contract that the signers have failed to produce a",
            "    ///         signature for a redemption request in the allotted time.",
            "    /// @dev This is considered an abort, and is punished by seizing signer",
            "    ///      bonds and putting them up for auction. Emits a LiquidationStarted",
            "    ///      event and a Liquidated event and sends the full signer bond to the",
            "    ///      redeemer. Reverts if the deposit is not currently awaiting a",
            "    ///      signature or if the allotted time has not yet elapsed. The caller",
            "    ///      is captured as the liquidation initiator, and is eligible for 50%",
            "    ///      of any bond left after the auction is completed.",
            "    "
        ],
        "comt": "\n    /// @notice Notify the contract that the signers have failed to produce a\n    ///         signature for a redemption request in the allotted time.\n    /// @dev This is considered an abort, and is punished by seizing signer\n    ///      bonds and putting them up for auction. Emits a LiquidationStarted\n    ///      event and a Liquidated event and sends the full signer bond to the\n    ///      redeemer. Reverts if the deposit is not currently awaiting a\n    ///      signature or if the allotted time has not yet elapsed. The caller\n    ///      is captured as the liquidation initiator, and is eligible for 50%\n    ///      of any bond left after the auction is completed.\n    ",
        "@notice": "Notify the contract that the signers have failed to produce a /// signature for a redemption request in the allotted time.",
        "@dev": "This is considered an abort, and is punished by seizing signer /// bonds and putting them up for auction. Emits a LiquidationStarted /// event and a Liquidated event and sends the full signer bond to the /// redeemer. Reverts if the deposit is not currently awaiting a /// signature or if the allotted time has not yet elapsed. The caller /// is captured as the liquidation initiator, and is eligible for 50% /// of any bond left after the auction is completed.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "notifyRedemptionProofTimedOut",
        "visibility": "external",
        "args": [],
        "func": "function notifyRedemptionProofTimedOut() external {\n        self.notifyRedemptionProofTimedOut();\n    }",
        "comments": [
            "",
            "    /// @notice Notify the contract that the deposit has failed to receive a",
            "    ///         redemption proof in the allotted time.",
            "    /// @dev This call will revert if the deposit is not currently awaiting a",
            "    ///      signature or if the allotted time has not yet elapsed. This is",
            "    ///      considered an abort, and is punished by seizing signer bonds and",
            "    ///      putting them up for auction for the lot size amount in TBTC (see",
            "    ///      `purchaseSignerBondsAtAuction`). Emits a LiquidationStarted event.",
            "    ///      The caller is captured as the liquidation initiator, and",
            "    ///      is eligible for 50% of any bond left after the auction is",
            "    ///     completed.",
            "    "
        ],
        "comt": "\n    /// @notice Notify the contract that the deposit has failed to receive a\n    ///         redemption proof in the allotted time.\n    /// @dev This call will revert if the deposit is not currently awaiting a\n    ///      signature or if the allotted time has not yet elapsed. This is\n    ///      considered an abort, and is punished by seizing signer bonds and\n    ///      putting them up for auction for the lot size amount in TBTC (see\n    ///      `purchaseSignerBondsAtAuction`). Emits a LiquidationStarted event.\n    ///      The caller is captured as the liquidation initiator, and\n    ///      is eligible for 50% of any bond left after the auction is\n    ///     completed.\n    ",
        "@notice": "Notify the contract that the deposit has failed to receive a /// redemption proof in the allotted time.",
        "@dev": "This call will revert if the deposit is not currently awaiting a /// signature or if the allotted time has not yet elapsed. This is /// considered an abort, and is punished by seizing signer bonds and /// putting them up for auction for the lot size amount in TBTC (see /// `purchaseSignerBondsAtAuction`). Emits a LiquidationStarted event. /// The caller is captured as the liquidation initiator, and /// is eligible for 50% of any bond left after the auction is /// completed.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "purchaseSignerBondsAtAuction",
        "visibility": "external",
        "args": [],
        "func": "function purchaseSignerBondsAtAuction() external {\n        self.purchaseSignerBondsAtAuction();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRedemptionTbtcRequirement",
        "visibility": "external",
        "args": [
            {
                "name": "_redeemer",
                "type": "address"
            }
        ],
        "func": "function getRedemptionTbtcRequirement(address _redeemer) external view returns (uint256){\n        (uint256 tbtcPayment,,) = self.calculateRedemptionTbtcAmounts(_redeemer, false);\n        return tbtcPayment;\n    }",
        "comments": [
            "",
            "//---------------------------- REDEMPTION FLOW -------------------------------//",
            "",
            "    /// @notice Get TBTC amount required for redemption by a specified",
            "    ///         _redeemer.",
            "    /// @dev This call will revert if redemption is not possible by _redeemer.",
            "    /// @param _redeemer The deposit redeemer whose TBTC requirement is being",
            "    ///        requested.",
            "    /// @return The amount in TBTC needed by the `_redeemer` to redeem the",
            "    ///         deposit.",
            "    "
        ],
        "comt": "\n//---------------------------- REDEMPTION FLOW -------------------------------//\n\n    /// @notice Get TBTC amount required for redemption by a specified\n    ///         _redeemer.\n    /// @dev This call will revert if redemption is not possible by _redeemer.\n    /// @param _redeemer The deposit redeemer whose TBTC requirement is being\n    ///        requested.\n    /// @return The amount in TBTC needed by the `_redeemer` to redeem the\n    ///         deposit.\n    ",
        "@notice": "Get TBTC amount required for redemption by a specified /// _redeemer.",
        "@dev": "This call will revert if redemption is not possible by _redeemer.",
        "@param1": "_redeemer The deposit redeemer whose TBTC requirement is being /// requested.",
        "@return1": "The amount in TBTC needed by the `_redeemer` to redeem the /// deposit.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOwnerRedemptionTbtcRequirement",
        "visibility": "external",
        "args": [
            {
                "name": "_redeemer",
                "type": "address"
            }
        ],
        "func": "function getOwnerRedemptionTbtcRequirement(address _redeemer) external view returns (uint256){\n        (uint256 tbtcPayment,,) = self.calculateRedemptionTbtcAmounts(_redeemer, true);\n        return tbtcPayment;\n    }",
        "comments": [
            "",
            "    /// @notice Get TBTC amount required for redemption assuming _redeemer",
            "    ///         is this deposit's owner (TDT holder).",
            "    /// @param _redeemer The assumed owner of the deposit's TDT .",
            "    /// @return The amount in TBTC needed to redeem the deposit.",
            "    "
        ],
        "comt": "\n    /// @notice Get TBTC amount required for redemption assuming _redeemer\n    ///         is this deposit's owner (TDT holder).\n    /// @param _redeemer The assumed owner of the deposit's TDT .\n    /// @return The amount in TBTC needed to redeem the deposit.\n    ",
        "@notice": "Get TBTC amount required for redemption assuming _redeemer /// is this deposit's owner (TDT holder).",
        "@param1": "_redeemer The assumed owner of the deposit's TDT .",
        "@return1": "The amount in TBTC needed to redeem the deposit.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "requestRedemption",
        "visibility": "public",
        "args": [
            {
                "name": "_outputValueBytes",
                "type": "bytes8"
            },
            {
                "name": "_redeemerOutputScript",
                "type": "bytes memory"
            }
        ],
        "func": "function requestRedemption(\n        bytes8 _outputValueBytes,\n        bytes memory _redeemerOutputScript\n    ) public { // not external to allow bytes memory parameters\n        self.requestRedemption(_outputValueBytes, _redeemerOutputScript);\n    }",
        "comments": [
            "",
            "    /// @notice Requests redemption of this deposit, meaning the transmission,",
            "    ///         by the signers, of the deposit's UTXO to the specified Bitocin",
            "    ///         output script. Requires approving the deposit to spend the",
            "    ///         amount of TBTC needed to redeem.",
            "    /// @dev The amount of TBTC needed to redeem can be looked up using the",
            "    ///      `getRedemptionTbtcRequirement` or `getOwnerRedemptionTbtcRequirement`",
            "    ///      functions.",
            "    /// @param  _outputValueBytes The 8-byte little-endian output size. The",
            "    ///         difference between this value and the lot size of the deposit",
            "    ///         will be paid as a fee to the Bitcoin miners when the signed",
            "    ///         transaction is broadcast.",
            "    /// @param  _redeemerOutputScript The redeemer's length-prefixed output",
            "    ///         script.",
            "    "
        ],
        "comt": "\n    /// @notice Requests redemption of this deposit, meaning the transmission,\n    ///         by the signers, of the deposit's UTXO to the specified Bitocin\n    ///         output script. Requires approving the deposit to spend the\n    ///         amount of TBTC needed to redeem.\n    /// @dev The amount of TBTC needed to redeem can be looked up using the\n    ///      `getRedemptionTbtcRequirement` or `getOwnerRedemptionTbtcRequirement`\n    ///      functions.\n    /// @param  _outputValueBytes The 8-byte little-endian output size. The\n    ///         difference between this value and the lot size of the deposit\n    ///         will be paid as a fee to the Bitcoin miners when the signed\n    ///         transaction is broadcast.\n    /// @param  _redeemerOutputScript The redeemer's length-prefixed output\n    ///         script.\n    ",
        "@notice": "Requests redemption of this deposit, meaning the transmission, /// by the signers, of the deposit's UTXO to the specified Bitocin /// output script. Requires approving the deposit to spend the /// amount of TBTC needed to redeem.",
        "@dev": "The amount of TBTC needed to redeem can be looked up using the /// `getRedemptionTbtcRequirement` or `getOwnerRedemptionTbtcRequirement` /// functions.",
        "@param1": "_outputValueBytes The 8-byte little-endian output size. The /// difference between this value and the lot size of the deposit /// will be paid as a fee to the Bitcoin miners when the signed /// transaction is broadcast.",
        "@param2": "_redeemerOutputScript The redeemer's length-prefixed output /// script.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "provideRedemptionSignature",
        "visibility": "external",
        "args": [
            {
                "name": "_v",
                "type": "uint8"
            },
            {
                "name": "_r",
                "type": "bytes32"
            },
            {
                "name": "_s",
                "type": "bytes32"
            }
        ],
        "func": "function provideRedemptionSignature(\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external {\n        self.provideRedemptionSignature(_v, _r, _s);\n    }",
        "comments": [
            "",
            "    /// @notice Anyone may provide a withdrawal signature if it was requested.",
            "    /// @dev The signers will be penalized if this function is not called",
            "    ///      correctly within `TBTCConstants.REDEMPTION_SIGNATURE_TIMEOUT`",
            "    ///      seconds of a redemption request or fee increase being received.",
            "    /// @param _v Signature recovery value.",
            "    /// @param _r Signature R value.",
            "    /// @param _s Signature S value. Should be in the low half of secp256k1",
            "    ///        curve's order.",
            "    "
        ],
        "comt": "\n    /// @notice Anyone may provide a withdrawal signature if it was requested.\n    /// @dev The signers will be penalized if this function is not called\n    ///      correctly within `TBTCConstants.REDEMPTION_SIGNATURE_TIMEOUT`\n    ///      seconds of a redemption request or fee increase being received.\n    /// @param _v Signature recovery value.\n    /// @param _r Signature R value.\n    /// @param _s Signature S value. Should be in the low half of secp256k1\n    ///        curve's order.\n    ",
        "@notice": "Anyone may provide a withdrawal signature if it was requested.",
        "@dev": "The signers will be penalized if this function is not called /// correctly within `TBTCConstants.REDEMPTION_SIGNATURE_TIMEOUT` /// seconds of a redemption request or fee increase being received.",
        "@param1": "_v Signature recovery value.",
        "@param2": "_r Signature R value.",
        "@param3": "_s Signature S value. Should be in the low half of secp256k1 /// curve's order.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseRedemptionFee",
        "visibility": "external",
        "args": [
            {
                "name": "_previousOutputValueBytes",
                "type": "bytes8"
            },
            {
                "name": "_newOutputValueBytes",
                "type": "bytes8"
            }
        ],
        "func": "function increaseRedemptionFee(\n        bytes8 _previousOutputValueBytes,\n        bytes8 _newOutputValueBytes\n    ) external {\n        self.increaseRedemptionFee(_previousOutputValueBytes, _newOutputValueBytes);\n    }",
        "comments": [
            "",
            "    /// @notice Anyone may request a signature for a transaction with an",
            "    ///         increased Bitcoin transaction fee.",
            "    /// @dev This call will revert if the fee is already at its maximum, or if",
            "    ///      the new requested fee is not a multiple of the initial requested",
            "    ///      fee. Transaction fees can only be bumped by the amount of the",
            "    ///      initial requested fee. Calling this sends the deposit back to",
            "    ///      the `AWAITING_WITHDRAWAL_SIGNATURE` state and requires the signers",
            "    ///      to `provideRedemptionSignature` for the new output value in a",
            "    ///      timely fashion.",
            "    /// @param _previousOutputValueBytes The previous output's value.",
            "    /// @param _newOutputValueBytes The new output's value.",
            "    "
        ],
        "comt": "\n    /// @notice Anyone may request a signature for a transaction with an\n    ///         increased Bitcoin transaction fee.\n    /// @dev This call will revert if the fee is already at its maximum, or if\n    ///      the new requested fee is not a multiple of the initial requested\n    ///      fee. Transaction fees can only be bumped by the amount of the\n    ///      initial requested fee. Calling this sends the deposit back to\n    ///      the `AWAITING_WITHDRAWAL_SIGNATURE` state and requires the signers\n    ///      to `provideRedemptionSignature` for the new output value in a\n    ///      timely fashion.\n    /// @param _previousOutputValueBytes The previous output's value.\n    /// @param _newOutputValueBytes The new output's value.\n    ",
        "@notice": "Anyone may request a signature for a transaction with an /// increased Bitcoin transaction fee.",
        "@dev": "This call will revert if the fee is already at its maximum, or if /// the new requested fee is not a multiple of the initial requested /// fee. Transaction fees can only be bumped by the amount of the /// initial requested fee. Calling this sends the deposit back to /// the `AWAITING_WITHDRAWAL_SIGNATURE` state and requires the signers /// to `provideRedemptionSignature` for the new output value in a /// timely fashion.",
        "@param1": "_previousOutputValueBytes The previous output's value.",
        "@param2": "_newOutputValueBytes The new output's value.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "provideRedemptionProof",
        "visibility": "public",
        "args": [
            {
                "name": "_txVersion",
                "type": "bytes4"
            },
            {
                "name": "_txInputVector",
                "type": "bytes memory"
            },
            {
                "name": "_txOutputVector",
                "type": "bytes memory"
            },
            {
                "name": "_txLocktime",
                "type": "bytes4"
            },
            {
                "name": "_merkleProof",
                "type": "bytes memory"
            },
            {
                "name": "_txIndexInBlock",
                "type": "uint256"
            },
            {
                "name": "_bitcoinHeaders",
                "type": "bytes memory"
            }
        ],
        "func": "function provideRedemptionProof(\n        bytes4 _txVersion,\n        bytes memory _txInputVector,\n        bytes memory _txOutputVector,\n        bytes4 _txLocktime,\n        bytes memory _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes memory _bitcoinHeaders\n    ) public { // not external to allow bytes memory parameters\n        self.provideRedemptionProof(\n            _txVersion,\n            _txInputVector,\n            _txOutputVector,\n            _txLocktime,\n            _merkleProof,\n            _txIndexInBlock,\n            _bitcoinHeaders\n        );\n    }",
        "comments": [
            "",
            "    /// @notice Anyone may submit a redemption proof to the deposit showing that",
            "    ///         a transaction was submitted and sufficiently confirmed on the",
            "    ///         Bitcoin chain transferring the deposit lot size's amount of BTC",
            "    ///         from the signer-controlled private key corresponding to this",
            "    ///         deposit to the requested redemption output script. This will",
            "    ///         move the deposit into a redeemed state.",
            "    /// @dev Takes a pre-parsed transaction and calculates values needed to",
            "    ///      verify funding. Signers can have their bonds seized if this is not",
            "    ///      called within `TBTCConstants.REDEMPTION_PROOF_TIMEOUT` seconds of",
            "    ///      a redemption signature being provided.",
            "    /// @param _txVersion Transaction version number (4-byte little-endian).",
            "    /// @param _txInputVector All transaction inputs prepended by the number of",
            "    ///        inputs encoded as a VarInt, max 0xFC(252) inputs.",
            "    /// @param _txOutputVector All transaction outputs prepended by the number",
            "    ///         of outputs encoded as a VarInt, max 0xFC(252) outputs.",
            "    /// @param _txLocktime Final 4 bytes of the transaction.",
            "    /// @param _merkleProof The merkle proof of transaction inclusion in a",
            "    ///        block.",
            "    /// @param _txIndexInBlock Transaction index in the block (0-indexed).",
            "    /// @param _bitcoinHeaders Single bytestring of 80-byte bitcoin headers,",
            "    ///        lowest height first.",
            "    "
        ],
        "comt": "\n    /// @notice Anyone may submit a redemption proof to the deposit showing that\n    ///         a transaction was submitted and sufficiently confirmed on the\n    ///         Bitcoin chain transferring the deposit lot size's amount of BTC\n    ///         from the signer-controlled private key corresponding to this\n    ///         deposit to the requested redemption output script. This will\n    ///         move the deposit into a redeemed state.\n    /// @dev Takes a pre-parsed transaction and calculates values needed to\n    ///      verify funding. Signers can have their bonds seized if this is not\n    ///      called within `TBTCConstants.REDEMPTION_PROOF_TIMEOUT` seconds of\n    ///      a redemption signature being provided.\n    /// @param _txVersion Transaction version number (4-byte little-endian).\n    /// @param _txInputVector All transaction inputs prepended by the number of\n    ///        inputs encoded as a VarInt, max 0xFC(252) inputs.\n    /// @param _txOutputVector All transaction outputs prepended by the number\n    ///         of outputs encoded as a VarInt, max 0xFC(252) outputs.\n    /// @param _txLocktime Final 4 bytes of the transaction.\n    /// @param _merkleProof The merkle proof of transaction inclusion in a\n    ///        block.\n    /// @param _txIndexInBlock Transaction index in the block (0-indexed).\n    /// @param _bitcoinHeaders Single bytestring of 80-byte bitcoin headers,\n    ///        lowest height first.\n    ",
        "@notice": "Anyone may submit a redemption proof to the deposit showing that /// a transaction was submitted and sufficiently confirmed on the /// Bitcoin chain transferring the deposit lot size's amount of BTC /// from the signer-controlled private key corresponding to this /// deposit to the requested redemption output script. This will /// move the deposit into a redeemed state.",
        "@dev": "Takes a pre-parsed transaction and calculates values needed to /// verify funding. Signers can have their bonds seized if this is not /// called within `TBTCConstants.REDEMPTION_PROOF_TIMEOUT` seconds of /// a redemption signature being provided.",
        "@param1": "_txVersion Transaction version number (4-byte little-endian).",
        "@param2": "_txInputVector All transaction inputs prepended by the number of /// inputs encoded as a VarInt, max 0xFC(252) inputs.",
        "@param3": "_txOutputVector All transaction outputs prepended by the number /// of outputs encoded as a VarInt, max 0xFC(252) outputs.",
        "@param4": "_txLocktime Final 4 bytes of the transaction.",
        "@param5": "_merkleProof The merkle proof of transaction inclusion in a /// block.",
        "@param6": "_txIndexInBlock Transaction index in the block (0-indexed).",
        "@param7": "_bitcoinHeaders Single bytestring of 80-byte bitcoin headers, /// lowest height first.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 1,
        "low_quality": 0
    },
    {
        "name": "initializeDeposit",
        "visibility": "public",
        "args": [
            {
                "name": "_tbtcSystem",
                "type": "ITBTCSystem"
            },
            {
                "name": "_tbtcToken",
                "type": "TBTCToken"
            },
            {
                "name": "_tbtcDepositToken",
                "type": "IERC721"
            },
            {
                "name": "_feeRebateToken",
                "type": "FeeRebateToken"
            },
            {
                "name": "_vendingMachineAddress",
                "type": "address"
            },
            {
                "name": "_lotSizeSatoshis",
                "type": "uint64"
            }
        ],
        "func": "function initializeDeposit(\n        ITBTCSystem _tbtcSystem,\n        TBTCToken _tbtcToken,\n        IERC721 _tbtcDepositToken,\n        FeeRebateToken _feeRebateToken,\n        address _vendingMachineAddress,\n        uint64 _lotSizeSatoshis\n    ) public onlyFactory payable {\n        self.tbtcSystem = _tbtcSystem;\n        self.tbtcToken = _tbtcToken;\n        self.tbtcDepositToken = _tbtcDepositToken;\n        self.feeRebateToken = _feeRebateToken;\n        self.vendingMachineAddress = _vendingMachineAddress;\n        self.initialize(_lotSizeSatoshis);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferAndRequestRedemption",
        "visibility": "public",
        "args": [
            {
                "name": "_outputValueBytes",
                "type": "bytes8"
            },
            {
                "name": "_redeemerOutputScript",
                "type": "bytes memory"
            },
            {
                "name": "_finalRecipient",
                "type": "address payable"
            }
        ],
        "func": "function transferAndRequestRedemption(\n        bytes8 _outputValueBytes,\n        bytes memory _redeemerOutputScript,\n        address payable _finalRecipient\n    ) public { // not external to allow bytes memory parameters\n        require(\n            msg.sender == self.vendingMachineAddress,\n            \"Only the vending machine can call transferAndRequestRedemption\"\n        );\n        self.transferAndRequestRedemption(\n            _outputValueBytes,\n            _redeemerOutputScript,\n            _finalRecipient\n        );\n    }",
        "comments": [
            "",
            "    /// @notice This function can only be called by the vending machine.",
            "    /// @dev Performs the same action as requestRedemption, but transfers",
            "    ///      ownership of the deposit to the specified _finalRecipient. Used as",
            "    ///      a utility helper for the vending machine's shortcut",
            "    ///      TBTC->redemption path.",
            "    /// @param  _outputValueBytes The 8-byte little-endian output size.",
            "    /// @param  _redeemerOutputScript The redeemer's length-prefixed output script.",
            "    /// @param  _finalRecipient     The address to receive the TDT and later be recorded as deposit redeemer.",
            "    "
        ],
        "comt": "\n    /// @notice This function can only be called by the vending machine.\n    /// @dev Performs the same action as requestRedemption, but transfers\n    ///      ownership of the deposit to the specified _finalRecipient. Used as\n    ///      a utility helper for the vending machine's shortcut\n    ///      TBTC->redemption path.\n    /// @param  _outputValueBytes The 8-byte little-endian output size.\n    /// @param  _redeemerOutputScript The redeemer's length-prefixed output script.\n    /// @param  _finalRecipient     The address to receive the TDT and later be recorded as deposit redeemer.\n    ",
        "@notice": "This function can only be called by the vending machine.",
        "@dev": "Performs the same action as requestRedemption, but transfers /// ownership of the deposit to the specified _finalRecipient. Used as /// a utility helper for the vending machine's shortcut /// TBTC->redemption path.",
        "@param1": "_outputValueBytes The 8-byte little-endian output size.",
        "@param2": "_redeemerOutputScript The redeemer's length-prefixed output script.",
        "@param3": "_finalRecipient The address to receive the TDT and later be recorded as deposit redeemer.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdrawFunds",
        "visibility": "external",
        "args": [],
        "func": "function withdrawFunds() external {\n        self.withdrawFunds();\n    }",
        "comments": [
            "",
            "    /// @notice Withdraw the ETH balance of the deposit allotted to the caller.",
            "    /// @dev Withdrawals can only happen when a contract is in an end-state.",
            "    "
        ],
        "comt": "\n    /// @notice Withdraw the ETH balance of the deposit allotted to the caller.\n    /// @dev Withdrawals can only happen when a contract is in an end-state.\n    ",
        "@notice": "Withdraw the ETH balance of the deposit allotted to the caller.",
        "@dev": "Withdrawals can only happen when a contract is in an end-state.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "submitSignatureFraud",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_v",
                "type": "uint8"
            },
            {
                "name": "_r",
                "type": "bytes32"
            },
            {
                "name": "_s",
                "type": "bytes32"
            },
            {
                "name": "_signedDigest",
                "type": "bytes32"
            },
            {
                "name": "_preimage",
                "type": "bytes memory"
            }
        ],
        "func": "function submitSignatureFraud(\n        DepositUtils.Deposit storage _d,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        bytes32 _signedDigest,\n        bytes memory _preimage\n    ) public {\n        IBondedECDSAKeep _keep = IBondedECDSAKeep(_d.keepAddress);\n        _keep.submitSignatureFraud(_v, _r, _s, _signedDigest, _preimage);\n    }",
        "comments": [
            "",
            "    /// @notice Notifies the keep contract of fraud. Reverts if not fraud.",
            "    /// @dev Calls out to the keep contract. this could get expensive if preimage",
            "    ///      is large.",
            "    /// @param  _d Deposit storage pointer.",
            "    /// @param  _v Signature recovery value.",
            "    /// @param  _r Signature R value.",
            "    /// @param  _s Signature S value.",
            "    /// @param _signedDigest The digest signed by the signature vrs tuple.",
            "    /// @param _preimage The sha256 preimage of the digest.",
            "    "
        ],
        "comt": "\n    /// @notice Notifies the keep contract of fraud. Reverts if not fraud.\n    /// @dev Calls out to the keep contract. this could get expensive if preimage\n    ///      is large.\n    /// @param  _d Deposit storage pointer.\n    /// @param  _v Signature recovery value.\n    /// @param  _r Signature R value.\n    /// @param  _s Signature S value.\n    /// @param _signedDigest The digest signed by the signature vrs tuple.\n    /// @param _preimage The sha256 preimage of the digest.\n    ",
        "@notice": "Notifies the keep contract of fraud. Reverts if not fraud.",
        "@dev": "Calls out to the keep contract. this could get expensive if preimage /// is large.",
        "@param1": "_d Deposit storage pointer.",
        "@param2": "_v Signature recovery value.",
        "@param3": "_r Signature R value.",
        "@param4": "_s Signature S value.",
        "@param5": "_signedDigest The digest signed by the signature vrs tuple.",
        "@param6": "_preimage The sha256 preimage of the digest.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "collateralizationPercentage",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function collateralizationPercentage(DepositUtils.Deposit storage _d) public view returns (uint256) {\n\n        // Determine value of the lot in wei\n        uint256 _satoshiPrice = _d.fetchBitcoinPrice();\n        uint64 _lotSizeSatoshis = _d.lotSizeSatoshis;\n        uint256 _lotValue = _lotSizeSatoshis.mul(_satoshiPrice);\n\n        // Amount of wei the signers have\n        uint256 _bondValue = _d.fetchBondAmount();\n\n        // This converts into a percentage\n        return (_bondValue.mul(100).div(_lotValue));\n    }",
        "comments": [
            "",
            "    /// @notice     Determines the collateralization percentage of the signing group.",
            "    /// @dev        Compares the bond value and lot value.",
            "    /// @param _d   Deposit storage pointer.",
            "    /// @return     Collateralization percentage as uint.",
            "    "
        ],
        "comt": "\n    /// @notice     Determines the collateralization percentage of the signing group.\n    /// @dev        Compares the bond value and lot value.\n    /// @param _d   Deposit storage pointer.\n    /// @return     Collateralization percentage as uint.\n    ",
        "@notice": "Determines the collateralization percentage of the signing group.",
        "@dev": "Compares the bond value and lot value.",
        "@param1": "_d Deposit storage pointer.",
        "@return1": "Collateralization percentage as uint.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "provideECDSAFraudProof",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_v",
                "type": "uint8"
            },
            {
                "name": "_r",
                "type": "bytes32"
            },
            {
                "name": "_s",
                "type": "bytes32"
            },
            {
                "name": "_signedDigest",
                "type": "bytes32"
            },
            {
                "name": "_preimage",
                "type": "bytes memory"
            }
        ],
        "func": "function provideECDSAFraudProof(\n        DepositUtils.Deposit storage _d,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        bytes32 _signedDigest,\n        bytes memory _preimage\n    ) public { // not external to allow bytes memory parameters\n        require(\n            !_d.inFunding(),\n            \"Use provideFundingECDSAFraudProof instead\"\n        );\n        require(\n            !_d.inSignerLiquidation(),\n            \"Signer liquidation already in progress\"\n        );\n        require(!_d.inEndState(), \"Contract has halted\");\n        submitSignatureFraud(_d, _v, _r, _s, _signedDigest, _preimage);\n\n        startLiquidation(_d, true);\n    }",
        "comments": [
            "",
            "    /// @notice                 Anyone can provide a signature that was not requested to prove fraud.",
            "    /// @dev                    Calls out to the keep to verify if there was fraud.",
            "    /// @param  _d              Deposit storage pointer.",
            "    /// @param  _v              Signature recovery value.",
            "    /// @param  _r              Signature R value.",
            "    /// @param  _s              Signature S value.",
            "    /// @param _signedDigest    The digest signed by the signature vrs tuple.",
            "    /// @param _preimage        The sha256 preimage of the digest.",
            "    "
        ],
        "comt": "\n    /// @notice                 Anyone can provide a signature that was not requested to prove fraud.\n    /// @dev                    Calls out to the keep to verify if there was fraud.\n    /// @param  _d              Deposit storage pointer.\n    /// @param  _v              Signature recovery value.\n    /// @param  _r              Signature R value.\n    /// @param  _s              Signature S value.\n    /// @param _signedDigest    The digest signed by the signature vrs tuple.\n    /// @param _preimage        The sha256 preimage of the digest.\n    ",
        "@notice": "Anyone can provide a signature that was not requested to prove fraud.",
        "@dev": "Calls out to the keep to verify if there was fraud.",
        "@param1": "_d Deposit storage pointer.",
        "@param2": "_v Signature recovery value.",
        "@param3": "_r Signature R value.",
        "@param4": "_s Signature S value.",
        "@param5": "_signedDigest The digest signed by the signature vrs tuple.",
        "@param6": "_preimage The sha256 preimage of the digest.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "purchaseSignerBondsAtAuction",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function purchaseSignerBondsAtAuction(DepositUtils.Deposit storage _d) external {\n        bool _wasFraud = _d.inFraudLiquidationInProgress();\n        require(_d.inSignerLiquidation(), \"No active auction\");\n\n        _d.setLiquidated();\n        _d.logLiquidated();\n\n        // Send the TBTC to the redeemer if they exist, otherwise to the TDT\n        // holder. If the TDT holder is the Vending Machine, burn it to maintain\n        // the peg. This is because, if there is a redeemer set here, the TDT\n        // holder has already been made whole at redemption request time.\n        address tbtcRecipient = _d.redeemerAddress;\n        if (tbtcRecipient == address(0)) {\n            tbtcRecipient = _d.depositOwner();\n        }\n        uint256 lotSizeTbtc = _d.lotSizeTbtc();\n\n        require(_d.tbtcToken.balanceOf(msg.sender) >= lotSizeTbtc, \"Not enough TBTC to cover outstanding debt\");\n\n        if(tbtcRecipient == _d.vendingMachineAddress){\n            _d.tbtcToken.burnFrom(msg.sender, lotSizeTbtc);  // burn minimal amount to cover size\n        }\n        else{\n            _d.tbtcToken.transferFrom(msg.sender, tbtcRecipient, lotSizeTbtc);\n        }\n\n        // Distribute funds to auction buyer\n        uint256 valueToDistribute = _d.auctionValue();\n        _d.enableWithdrawal(msg.sender, valueToDistribute);\n\n        // Send any TBTC left to the Fee Rebate Token holder\n        _d.distributeFeeRebate();\n\n        // For fraud, pay remainder to the liquidation initiator.\n        // For non-fraud, split 50-50 between initiator and signers. if the transfer amount is 1,\n        // division will yield a 0 value which causes a revert; instead,\n        // we simply ignore such a tiny amount and leave some wei dust in escrow\n        uint256 contractEthBalance = address(this).balance;\n        address payable initiator = _d.liquidationInitiator;\n\n        if (initiator == address(0)){\n            initiator = address(0xdead);\n        }\n        if (contractEthBalance > valueToDistribute + 1) {\n            uint256 remainingUnallocated = contractEthBalance.sub(valueToDistribute);\n            if (_wasFraud) {\n                _d.enableWithdrawal(initiator, remainingUnallocated);\n            } else {\n                // There will always be a liquidation initiator.\n                uint256 split = remainingUnallocated.div(2);\n                _d.pushFundsToKeepGroup(split);\n                _d.enableWithdrawal(initiator, remainingUnallocated.sub(split));\n            }\n        }\n    }",
        "comments": [
            "",
            "",
            "    /// @notice     Closes an auction and purchases the signer bonds. Payout to buyer, funder, then signers if not fraud.",
            "    /// @dev        For interface, reading auctionValue will give a past value. the current is better.",
            "    /// @param  _d  Deposit storage pointer.",
            "    "
        ],
        "comt": "\n\n    /// @notice     Closes an auction and purchases the signer bonds. Payout to buyer, funder, then signers if not fraud.\n    /// @dev        For interface, reading auctionValue will give a past value. the current is better.\n    /// @param  _d  Deposit storage pointer.\n    ",
        "@notice": "Closes an auction and purchases the signer bonds. Payout to buyer, funder, then signers if not fraud.",
        "@dev": "For interface, reading auctionValue will give a past value. the current is better.",
        "@param1": "_d Deposit storage pointer.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "notifyCourtesyCall",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function notifyCourtesyCall(DepositUtils.Deposit storage _d) external  {\n        require(_d.inActive(), \"Can only courtesy call from active state\");\n        require(collateralizationPercentage(_d) < _d.undercollateralizedThresholdPercent, \"Signers have sufficient collateral\");\n        _d.courtesyCallInitiated = block.timestamp;\n        _d.setCourtesyCall();\n        _d.logCourtesyCalled();\n    }",
        "comments": [
            "",
            "    /// @notice     Notify the contract that the signers are undercollateralized.",
            "    /// @dev        Calls out to the system for oracle info.",
            "    /// @param  _d  Deposit storage pointer.",
            "    "
        ],
        "comt": "\n    /// @notice     Notify the contract that the signers are undercollateralized.\n    /// @dev        Calls out to the system for oracle info.\n    /// @param  _d  Deposit storage pointer.\n    ",
        "@notice": "Notify the contract that the signers are undercollateralized.",
        "@dev": "Calls out to the system for oracle info.",
        "@param1": "_d Deposit storage pointer.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "exitCourtesyCall",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function exitCourtesyCall(DepositUtils.Deposit storage _d) external {\n        require(_d.inCourtesyCall(), \"Not currently in courtesy call\");\n        require(collateralizationPercentage(_d) >= _d.undercollateralizedThresholdPercent, \"Deposit is still undercollateralized\");\n        _d.setActive();\n        _d.logExitedCourtesyCall();\n    }",
        "comments": [
            "",
            "    /// @notice     Goes from courtesy call to active.",
            "    /// @dev        Only callable if collateral is sufficient and the deposit is not expiring.",
            "    /// @param  _d  Deposit storage pointer.",
            "    "
        ],
        "comt": "\n    /// @notice     Goes from courtesy call to active.\n    /// @dev        Only callable if collateral is sufficient and the deposit is not expiring.\n    /// @param  _d  Deposit storage pointer.\n    ",
        "@notice": "Goes from courtesy call to active.",
        "@dev": "Only callable if collateral is sufficient and the deposit is not expiring.",
        "@param1": "_d Deposit storage pointer.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "notifyUndercollateralizedLiquidation",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function notifyUndercollateralizedLiquidation(DepositUtils.Deposit storage _d) external {\n        require(_d.inRedeemableState(), \"Deposit not in active or courtesy call\");\n        require(collateralizationPercentage(_d) < _d.severelyUndercollateralizedThresholdPercent, \"Deposit has sufficient collateral\");\n        startLiquidation(_d, false);\n    }",
        "comments": [
            "",
            "    /// @notice     Notify the contract that the signers are undercollateralized.",
            "    /// @dev        Calls out to the system for oracle info.",
            "    /// @param  _d  Deposit storage pointer.",
            "    "
        ],
        "comt": "\n    /// @notice     Notify the contract that the signers are undercollateralized.\n    /// @dev        Calls out to the system for oracle info.\n    /// @param  _d  Deposit storage pointer.\n    ",
        "@notice": "Notify the contract that the signers are undercollateralized.",
        "@dev": "Calls out to the system for oracle info.",
        "@param1": "_d Deposit storage pointer.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "notifyCourtesyCallExpired",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function notifyCourtesyCallExpired(DepositUtils.Deposit storage _d) external {\n        require(_d.inCourtesyCall(), \"Not in a courtesy call period\");\n        require(block.timestamp >= _d.courtesyCallInitiated.add(TBTCConstants.getCourtesyCallTimeout()), \"Courtesy period has not elapsed\");\n        startLiquidation(_d, false);\n    }",
        "comments": [
            "",
            "    /// @notice     Notifies the contract that the courtesy period has elapsed.",
            "    /// @dev        This is treated as an abort, rather than fraud.",
            "    /// @param  _d  Deposit storage pointer.",
            "    "
        ],
        "comt": "\n    /// @notice     Notifies the contract that the courtesy period has elapsed.\n    /// @dev        This is treated as an abort, rather than fraud.\n    /// @param  _d  Deposit storage pointer.\n    ",
        "@notice": "Notifies the contract that the courtesy period has elapsed.",
        "@dev": "This is treated as an abort, rather than fraud.",
        "@param1": "_d Deposit storage pointer.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inFunding",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inFunding(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return (\n            _d.currentState == uint8(States.AWAITING_SIGNER_SETUP)\n         || _d.currentState == uint8(States.AWAITING_BTC_FUNDING_PROOF)\n        );\n    }",
        "comments": [
            "",
            "    /// @notice     Check if the contract is currently in the funding flow.",
            "    /// @dev        This checks on the funding flow happy path, not the fraud path.",
            "    /// @param _d   Deposit storage pointer.",
            "    /// @return     True if contract is currently in the funding flow else False.",
            "    "
        ],
        "comt": "\n    /// @notice     Check if the contract is currently in the funding flow.\n    /// @dev        This checks on the funding flow happy path, not the fraud path.\n    /// @param _d   Deposit storage pointer.\n    /// @return     True if contract is currently in the funding flow else False.\n    ",
        "@notice": "Check if the contract is currently in the funding flow.",
        "@dev": "This checks on the funding flow happy path, not the fraud path.",
        "@param1": "_d Deposit storage pointer.",
        "@return1": "True if contract is currently in the funding flow else False.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inSignerLiquidation",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inSignerLiquidation(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return (\n            _d.currentState == uint8(States.LIQUIDATION_IN_PROGRESS)\n         || _d.currentState == uint8(States.FRAUD_LIQUIDATION_IN_PROGRESS)\n        );\n    }",
        "comments": [
            "",
            "    /// @notice     Check if the contract is currently in the signer liquidation flow.",
            "    /// @dev        This could be caused by fraud, or by an unfilled margin call.",
            "    /// @param _d   Deposit storage pointer.",
            "    /// @return     True if contract is currently in the liquidaton flow else False.",
            "    "
        ],
        "comt": "\n    /// @notice     Check if the contract is currently in the signer liquidation flow.\n    /// @dev        This could be caused by fraud, or by an unfilled margin call.\n    /// @param _d   Deposit storage pointer.\n    /// @return     True if contract is currently in the liquidaton flow else False.\n    ",
        "@notice": "Check if the contract is currently in the signer liquidation flow.",
        "@dev": "This could be caused by fraud, or by an unfilled margin call.",
        "@param1": "_d Deposit storage pointer.",
        "@return1": "True if contract is currently in the liquidaton flow else False.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inRedemption",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inRedemption(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return (\n            _d.currentState == uint8(States.AWAITING_WITHDRAWAL_SIGNATURE)\n         || _d.currentState == uint8(States.AWAITING_WITHDRAWAL_PROOF)\n        );\n    }",
        "comments": [
            "",
            "    /// @notice     Check if the contract is currently in the redepmtion flow.",
            "    /// @dev        This checks on the redemption flow, not the REDEEMED termination state.",
            "    /// @param _d   Deposit storage pointer.",
            "    /// @return     True if contract is currently in the redemption flow else False.",
            "    "
        ],
        "comt": "\n    /// @notice     Check if the contract is currently in the redepmtion flow.\n    /// @dev        This checks on the redemption flow, not the REDEEMED termination state.\n    /// @param _d   Deposit storage pointer.\n    /// @return     True if contract is currently in the redemption flow else False.\n    ",
        "@notice": "Check if the contract is currently in the redepmtion flow.",
        "@dev": "This checks on the redemption flow, not the REDEEMED termination state.",
        "@param1": "_d Deposit storage pointer.",
        "@return1": "True if contract is currently in the redemption flow else False.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inEndState",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inEndState(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return (\n            _d.currentState == uint8(States.LIQUIDATED)\n         || _d.currentState == uint8(States.REDEEMED)\n         || _d.currentState == uint8(States.FAILED_SETUP)\n        );\n    }",
        "comments": [
            "",
            "    /// @notice     Check if the contract has halted.",
            "    /// @dev        This checks on any halt state, regardless of triggering circumstances.",
            "    /// @param _d   Deposit storage pointer.",
            "    /// @return     True if contract has halted permanently.",
            "    "
        ],
        "comt": "\n    /// @notice     Check if the contract has halted.\n    /// @dev        This checks on any halt state, regardless of triggering circumstances.\n    /// @param _d   Deposit storage pointer.\n    /// @return     True if contract has halted permanently.\n    ",
        "@notice": "Check if the contract has halted.",
        "@dev": "This checks on any halt state, regardless of triggering circumstances.",
        "@param1": "_d Deposit storage pointer.",
        "@return1": "True if contract has halted permanently.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inRedeemableState",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inRedeemableState(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return (\n            _d.currentState == uint8(States.ACTIVE)\n         || _d.currentState == uint8(States.COURTESY_CALL)\n        );\n    }",
        "comments": [
            "",
            "    /// @notice     Check if the contract is available for a redemption request.",
            "    /// @dev        Redemption is available from active and courtesy call.",
            "    /// @param _d   Deposit storage pointer.",
            "    /// @return     True if available, False otherwise.",
            "    "
        ],
        "comt": "\n    /// @notice     Check if the contract is available for a redemption request.\n    /// @dev        Redemption is available from active and courtesy call.\n    /// @param _d   Deposit storage pointer.\n    /// @return     True if available, False otherwise.\n    ",
        "@notice": "Check if the contract is available for a redemption request.",
        "@dev": "Redemption is available from active and courtesy call.",
        "@param1": "_d Deposit storage pointer.",
        "@return1": "True if available, False otherwise.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inStart",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inStart(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return (_d.currentState == uint8(States.START));\n    }",
        "comments": [
            "",
            "    /// @notice     Check if the contract is currently in the start state (awaiting setup).",
            "    /// @dev        This checks on the funding flow happy path, not the fraud path.",
            "    /// @param _d   Deposit storage pointer.",
            "    /// @return     True if contract is currently in the start state else False.",
            "    "
        ],
        "comt": "\n    /// @notice     Check if the contract is currently in the start state (awaiting setup).\n    /// @dev        This checks on the funding flow happy path, not the fraud path.\n    /// @param _d   Deposit storage pointer.\n    /// @return     True if contract is currently in the start state else False.\n    ",
        "@notice": "Check if the contract is currently in the start state (awaiting setup).",
        "@dev": "This checks on the funding flow happy path, not the fraud path.",
        "@param1": "_d Deposit storage pointer.",
        "@return1": "True if contract is currently in the start state else False.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inAwaitingSignerSetup",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inAwaitingSignerSetup(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return _d.currentState == uint8(States.AWAITING_SIGNER_SETUP);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inAwaitingBTCFundingProof",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inAwaitingBTCFundingProof(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return _d.currentState == uint8(States.AWAITING_BTC_FUNDING_PROOF);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inFailedSetup",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inFailedSetup(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return _d.currentState == uint8(States.FAILED_SETUP);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inActive",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inActive(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return _d.currentState == uint8(States.ACTIVE);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inAwaitingWithdrawalSignature",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inAwaitingWithdrawalSignature(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return _d.currentState == uint8(States.AWAITING_WITHDRAWAL_SIGNATURE);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inAwaitingWithdrawalProof",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inAwaitingWithdrawalProof(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return _d.currentState == uint8(States.AWAITING_WITHDRAWAL_PROOF);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inRedeemed",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inRedeemed(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return _d.currentState == uint8(States.REDEEMED);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inCourtesyCall",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inCourtesyCall(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return _d.currentState == uint8(States.COURTESY_CALL);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inFraudLiquidationInProgress",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inFraudLiquidationInProgress(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return _d.currentState == uint8(States.FRAUD_LIQUIDATION_IN_PROGRESS);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inLiquidationInProgress",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inLiquidationInProgress(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return _d.currentState == uint8(States.LIQUIDATION_IN_PROGRESS);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inLiquidated",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function inLiquidated(DepositUtils.Deposit storage _d) external view returns (bool) {\n        return _d.currentState == uint8(States.LIQUIDATED);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAwaitingSignerSetup",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function setAwaitingSignerSetup(DepositUtils.Deposit storage _d) external {\n        _d.currentState = uint8(States.AWAITING_SIGNER_SETUP);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAwaitingBTCFundingProof",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function setAwaitingBTCFundingProof(DepositUtils.Deposit storage _d) external {\n        _d.currentState = uint8(States.AWAITING_BTC_FUNDING_PROOF);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFailedSetup",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function setFailedSetup(DepositUtils.Deposit storage _d) external {\n        _d.currentState = uint8(States.FAILED_SETUP);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setActive",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function setActive(DepositUtils.Deposit storage _d) external {\n        _d.currentState = uint8(States.ACTIVE);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAwaitingWithdrawalSignature",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function setAwaitingWithdrawalSignature(DepositUtils.Deposit storage _d) external {\n        _d.currentState = uint8(States.AWAITING_WITHDRAWAL_SIGNATURE);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAwaitingWithdrawalProof",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function setAwaitingWithdrawalProof(DepositUtils.Deposit storage _d) external {\n        _d.currentState = uint8(States.AWAITING_WITHDRAWAL_PROOF);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setRedeemed",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function setRedeemed(DepositUtils.Deposit storage _d) external {\n        _d.currentState = uint8(States.REDEEMED);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setCourtesyCall",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function setCourtesyCall(DepositUtils.Deposit storage _d) external {\n        _d.currentState = uint8(States.COURTESY_CALL);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFraudLiquidationInProgress",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function setFraudLiquidationInProgress(DepositUtils.Deposit storage _d) external {\n        _d.currentState = uint8(States.FRAUD_LIQUIDATION_IN_PROGRESS);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setLiquidationInProgress",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function setLiquidationInProgress(DepositUtils.Deposit storage _d) external {\n        _d.currentState = uint8(States.LIQUIDATION_IN_PROGRESS);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setLiquidated",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function setLiquidated(DepositUtils.Deposit storage _d) external {\n        _d.currentState = uint8(States.LIQUIDATED);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "currentBlockDifficulty",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            }
        ],
        "func": "function currentBlockDifficulty(Deposit storage _d) public view returns (uint256) {\n        return _d.tbtcSystem.fetchRelayCurrentDifficulty();\n    }",
        "comments": [
            "",
            "    /// @notice         Gets the current block difficulty.",
            "    /// @dev            Calls the light relay and gets the current block difficulty.",
            "    /// @return         The difficulty.",
            "    "
        ],
        "comt": "\n    /// @notice         Gets the current block difficulty.\n    /// @dev            Calls the light relay and gets the current block difficulty.\n    /// @return         The difficulty.\n    ",
        "@notice": "Gets the current block difficulty.",
        "@dev": "Calls the light relay and gets the current block difficulty.",
        "@return1": "The difficulty.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "previousBlockDifficulty",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            }
        ],
        "func": "function previousBlockDifficulty(Deposit storage _d) public view returns (uint256) {\n        return _d.tbtcSystem.fetchRelayPreviousDifficulty();\n    }",
        "comments": [
            "",
            "    /// @notice         Gets the previous block difficulty.",
            "    /// @dev            Calls the light relay and gets the previous block difficulty.",
            "    /// @return         The difficulty.",
            "    "
        ],
        "comt": "\n    /// @notice         Gets the previous block difficulty.\n    /// @dev            Calls the light relay and gets the previous block difficulty.\n    /// @return         The difficulty.\n    ",
        "@notice": "Gets the previous block difficulty.",
        "@dev": "Calls the light relay and gets the previous block difficulty.",
        "@return1": "The difficulty.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "evaluateProofDifficulty",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            },
            {
                "name": "_bitcoinHeaders",
                "type": "bytes memory"
            }
        ],
        "func": "function evaluateProofDifficulty(Deposit storage _d, bytes memory _bitcoinHeaders) public view {\n        uint256 _reqDiff;\n        uint256 _current = currentBlockDifficulty(_d);\n        uint256 _previous = previousBlockDifficulty(_d);\n        uint256 _firstHeaderDiff = _bitcoinHeaders.extractTarget().calculateDifficulty();\n\n        if (_firstHeaderDiff == _current) {\n            _reqDiff = _current;\n        } else if (_firstHeaderDiff == _previous) {\n            _reqDiff = _previous;\n        } else {\n            revert(\"not at current or previous difficulty\");\n        }\n\n        uint256 _observedDiff = _bitcoinHeaders.validateHeaderChain();\n\n        require(_observedDiff != ValidateSPV.getErrBadLength(), \"Invalid length of the headers chain\");\n        require(_observedDiff != ValidateSPV.getErrInvalidChain(), \"Invalid headers chain\");\n        require(_observedDiff != ValidateSPV.getErrLowWork(), \"Insufficient work in a header\");\n\n        require(\n            _observedDiff >= _reqDiff.mul(TBTCConstants.getTxProofDifficultyFactor()),\n            \"Insufficient accumulated difficulty in header chain\"\n        );\n    }",
        "comments": [
            "",
            "    /// @notice                     Evaluates the header difficulties in a proof.",
            "    /// @dev                        Uses the light oracle to source recent difficulty.",
            "    /// @param  _bitcoinHeaders     The header chain to evaluate.",
            "    /// @return                     True if acceptable, otherwise revert.",
            "    "
        ],
        "comt": "\n    /// @notice                     Evaluates the header difficulties in a proof.\n    /// @dev                        Uses the light oracle to source recent difficulty.\n    /// @param  _bitcoinHeaders     The header chain to evaluate.\n    /// @return                     True if acceptable, otherwise revert.\n    ",
        "@notice": "Evaluates the header difficulties in a proof.",
        "@dev": "Uses the light oracle to source recent difficulty.",
        "@param1": "_bitcoinHeaders The header chain to evaluate.",
        "@return1": "True if acceptable, otherwise revert.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "checkProofFromTxId",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            },
            {
                "name": "_txId",
                "type": "bytes32"
            },
            {
                "name": "_merkleProof",
                "type": "bytes memory"
            },
            {
                "name": "_txIndexInBlock",
                "type": "uint256"
            },
            {
                "name": "_bitcoinHeaders",
                "type": "bytes memory"
            }
        ],
        "func": "function checkProofFromTxId(\n        Deposit storage _d,\n        bytes32 _txId,\n        bytes memory _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes memory _bitcoinHeaders\n    ) public view{\n        require(\n            _txId.prove(\n                _bitcoinHeaders.extractMerkleRootLE().toBytes32(),\n                _merkleProof,\n                _txIndexInBlock\n            ),\n            \"Tx merkle proof is not valid for provided header and txId\");\n        evaluateProofDifficulty(_d, _bitcoinHeaders);\n    }",
        "comments": [
            "",
            "    /// @notice                 Syntactically check an SPV proof for a bitcoin transaction with its hash (ID).",
            "    /// @dev                    Stateless SPV Proof verification documented elsewhere (see https://github.com/summa-tx/bitcoin-spv).",
            "    /// @param _d               Deposit storage pointer.",
            "    /// @param _txId            The bitcoin txid of the tx that is purportedly included in the header chain.",
            "    /// @param _merkleProof     The merkle proof of inclusion of the tx in the bitcoin block.",
            "    /// @param _txIndexInBlock  The index of the tx in the Bitcoin block (0-indexed).",
            "    /// @param _bitcoinHeaders  An array of tightly-packed bitcoin headers.",
            "    "
        ],
        "comt": "\n    /// @notice                 Syntactically check an SPV proof for a bitcoin transaction with its hash (ID).\n    /// @dev                    Stateless SPV Proof verification documented elsewhere (see https://github.com/summa-tx/bitcoin-spv).\n    /// @param _d               Deposit storage pointer.\n    /// @param _txId            The bitcoin txid of the tx that is purportedly included in the header chain.\n    /// @param _merkleProof     The merkle proof of inclusion of the tx in the bitcoin block.\n    /// @param _txIndexInBlock  The index of the tx in the Bitcoin block (0-indexed).\n    /// @param _bitcoinHeaders  An array of tightly-packed bitcoin headers.\n    ",
        "@notice": "Syntactically check an SPV proof for a bitcoin transaction with its hash (ID).",
        "@dev": "Stateless SPV Proof verification documented elsewhere (see https://github.com/summa-tx/bitcoin-spv).",
        "@param1": "_d Deposit storage pointer.",
        "@param2": "_txId The bitcoin txid of the tx that is purportedly included in the header chain.",
        "@param3": "_merkleProof The merkle proof of inclusion of the tx in the bitcoin block.",
        "@param4": "_txIndexInBlock The index of the tx in the Bitcoin block (0-indexed).",
        "@param5": "_bitcoinHeaders An array of tightly-packed bitcoin headers.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "findAndParseFundingOutput",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_txOutputVector",
                "type": "bytes memory"
            },
            {
                "name": "_fundingOutputIndex",
                "type": "uint8"
            }
        ],
        "func": "function findAndParseFundingOutput(\n        DepositUtils.Deposit storage _d,\n        bytes memory _txOutputVector,\n        uint8 _fundingOutputIndex\n    ) public view returns (bytes8) {\n        bytes8 _valueBytes;\n        bytes memory _output;\n\n        // Find the output paying the signer PKH\n        _output = _txOutputVector.extractOutputAtIndex(_fundingOutputIndex);\n\n        require(\n            keccak256(_output.extractHash()) == keccak256(abi.encodePacked(signerPKH(_d))),\n            \"Could not identify output funding the required public key hash\"\n        );\n        require(\n            _output.length == 31 &&\n                _output.keccak256Slice(8, 23) == keccak256(abi.encodePacked(hex\"160014\", signerPKH(_d))),\n            \"Funding transaction output type unsupported: only p2wpkh outputs are supported\"\n        );\n\n        _valueBytes = bytes8(_output.slice(0, 8).toBytes32());\n        return _valueBytes;\n    }",
        "comments": [
            "",
            "    /// @notice                     Find and validate funding output in transaction output vector using the index.",
            "    /// @dev                        Gets `_fundingOutputIndex` output from the output vector and validates if it is",
            "    ///                             a p2wpkh output with public key hash matching this deposit's public key hash.",
            "    /// @param _d                   Deposit storage pointer.",
            "    /// @param _txOutputVector      All transaction outputs prepended by the number of outputs encoded as a VarInt, max 0xFC outputs.",
            "    /// @param _fundingOutputIndex  Index of funding output in _txOutputVector.",
            "    /// @return                     Funding value.",
            "    "
        ],
        "comt": "\n    /// @notice                     Find and validate funding output in transaction output vector using the index.\n    /// @dev                        Gets `_fundingOutputIndex` output from the output vector and validates if it is\n    ///                             a p2wpkh output with public key hash matching this deposit's public key hash.\n    /// @param _d                   Deposit storage pointer.\n    /// @param _txOutputVector      All transaction outputs prepended by the number of outputs encoded as a VarInt, max 0xFC outputs.\n    /// @param _fundingOutputIndex  Index of funding output in _txOutputVector.\n    /// @return                     Funding value.\n    ",
        "@notice": "Find and validate funding output in transaction output vector using the index.",
        "@dev": "Gets `_fundingOutputIndex` output from the output vector and validates if it is /// a p2wpkh output with public key hash matching this deposit's public key hash.",
        "@param1": "_d Deposit storage pointer.",
        "@param2": "_txOutputVector All transaction outputs prepended by the number of outputs encoded as a VarInt, max 0xFC outputs.",
        "@param3": "_fundingOutputIndex Index of funding output in _txOutputVector.",
        "@return1": "Funding value.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "validateAndParseFundingSPVProof",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_txVersion",
                "type": "bytes4"
            },
            {
                "name": "_txInputVector",
                "type": "bytes memory"
            },
            {
                "name": "_txOutputVector",
                "type": "bytes memory"
            },
            {
                "name": "_txLocktime",
                "type": "bytes4"
            },
            {
                "name": "_fundingOutputIndex",
                "type": "uint8"
            },
            {
                "name": "_merkleProof",
                "type": "bytes memory"
            },
            {
                "name": "_txIndexInBlock",
                "type": "uint256"
            },
            {
                "name": "_bitcoinHeaders",
                "type": "bytes memory"
            }
        ],
        "func": "function validateAndParseFundingSPVProof(\n        DepositUtils.Deposit storage _d,\n        bytes4 _txVersion,\n        bytes memory _txInputVector,\n        bytes memory _txOutputVector,\n        bytes4 _txLocktime,\n        uint8 _fundingOutputIndex,\n        bytes memory _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes memory _bitcoinHeaders\n    ) public view returns (bytes8 _valueBytes, bytes memory _utxoOutpoint){ // not external to allow bytes memory parameters\n        require(_txInputVector.validateVin(), \"invalid input vector provided\");\n        require(_txOutputVector.validateVout(), \"invalid output vector provided\");\n\n        bytes32 txID = abi.encodePacked(_txVersion, _txInputVector, _txOutputVector, _txLocktime).hash256();\n\n        _valueBytes = findAndParseFundingOutput(_d, _txOutputVector, _fundingOutputIndex);\n\n        require(bytes8LEToUint(_valueBytes) >= _d.lotSizeSatoshis, \"Deposit too small\");\n\n        checkProofFromTxId(_d, txID, _merkleProof, _txIndexInBlock, _bitcoinHeaders);\n\n        // The utxoOutpoint is the LE txID plus the index of the output as a 4-byte LE int\n        // _fundingOutputIndex is a uint8, so we know it is only 1 byte\n        // Therefore, pad with 3 more bytes\n        _utxoOutpoint = abi.encodePacked(txID, _fundingOutputIndex, hex\"000000\");\n    }",
        "comments": [
            "",
            "    /// @notice                     Validates the funding tx and parses information from it.",
            "    /// @dev                        Takes a pre-parsed transaction and calculates values needed to verify funding.",
            "    /// @param  _d                  Deposit storage pointer.",
            "    /// @param _txVersion           Transaction version number (4-byte LE).",
            "    /// @param _txInputVector       All transaction inputs prepended by the number of inputs encoded as a VarInt, max 0xFC(252) inputs.",
            "    /// @param _txOutputVector      All transaction outputs prepended by the number of outputs encoded as a VarInt, max 0xFC(252) outputs.",
            "    /// @param _txLocktime          Final 4 bytes of the transaction.",
            "    /// @param _fundingOutputIndex  Index of funding output in _txOutputVector (0-indexed).",
            "    /// @param _merkleProof         The merkle proof of transaction inclusion in a block.",
            "    /// @param _txIndexInBlock      Transaction index in the block (0-indexed).",
            "    /// @param _bitcoinHeaders      Single bytestring of 80-byte bitcoin headers, lowest height first.",
            "    /// @return                     The 8-byte LE UTXO size in satoshi, the 36byte outpoint.",
            "    "
        ],
        "comt": "\n    /// @notice                     Validates the funding tx and parses information from it.\n    /// @dev                        Takes a pre-parsed transaction and calculates values needed to verify funding.\n    /// @param  _d                  Deposit storage pointer.\n    /// @param _txVersion           Transaction version number (4-byte LE).\n    /// @param _txInputVector       All transaction inputs prepended by the number of inputs encoded as a VarInt, max 0xFC(252) inputs.\n    /// @param _txOutputVector      All transaction outputs prepended by the number of outputs encoded as a VarInt, max 0xFC(252) outputs.\n    /// @param _txLocktime          Final 4 bytes of the transaction.\n    /// @param _fundingOutputIndex  Index of funding output in _txOutputVector (0-indexed).\n    /// @param _merkleProof         The merkle proof of transaction inclusion in a block.\n    /// @param _txIndexInBlock      Transaction index in the block (0-indexed).\n    /// @param _bitcoinHeaders      Single bytestring of 80-byte bitcoin headers, lowest height first.\n    /// @return                     The 8-byte LE UTXO size in satoshi, the 36byte outpoint.\n    ",
        "@notice": "Validates the funding tx and parses information from it.",
        "@dev": "Takes a pre-parsed transaction and calculates values needed to verify funding.",
        "@param1": "_d Deposit storage pointer.",
        "@param2": "_txVersion Transaction version number (4-byte LE).",
        "@param3": "_txInputVector All transaction inputs prepended by the number of inputs encoded as a VarInt, max 0xFC(252) inputs.",
        "@param4": "_txOutputVector All transaction outputs prepended by the number of outputs encoded as a VarInt, max 0xFC(252) outputs.",
        "@param5": "_txLocktime Final 4 bytes of the transaction.",
        "@param6": "_fundingOutputIndex Index of funding output in _txOutputVector (0-indexed).",
        "@param7": "_merkleProof The merkle proof of transaction inclusion in a block.",
        "@param8": "_txIndexInBlock Transaction index in the block (0-indexed).",
        "@param9": "_bitcoinHeaders Single bytestring of 80-byte bitcoin headers, lowest height first.",
        "@return1": "The 8-byte LE UTXO size in satoshi, the 36byte outpoint.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "remainingTerm",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function remainingTerm(DepositUtils.Deposit storage _d) public view returns(uint256){\n        uint256 endOfTerm = _d.fundedAt.add(TBTCConstants.getDepositTerm());\n        if(block.timestamp < endOfTerm ) {\n            return endOfTerm.sub(block.timestamp);\n        }\n        return 0;\n    }",
        "comments": [
            "",
            "    /// @notice Retreive the remaining term of the deposit",
            "    /// @dev    The return value is not guaranteed since block.timestmap can be lightly manipulated by miners.",
            "    /// @return The remaining term of the deposit in seconds. 0 if already at term",
            "    "
        ],
        "comt": "\n    /// @notice Retreive the remaining term of the deposit\n    /// @dev    The return value is not guaranteed since block.timestmap can be lightly manipulated by miners.\n    /// @return The remaining term of the deposit in seconds. 0 if already at term\n    ",
        "@notice": "Retreive the remaining term of the deposit",
        "@dev": "The return value is not guaranteed since block.timestmap can be lightly manipulated by miners.",
        "@return1": "The remaining term of the deposit in seconds. 0 if already at term",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "auctionValue",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            }
        ],
        "func": "function auctionValue(Deposit storage _d) external view returns (uint256) {\n        uint256 _elapsed = block.timestamp.sub(_d.liquidationInitiated);\n        uint256 _available = address(this).balance;\n        if (_elapsed > TBTCConstants.getAuctionDuration()) {\n            return _available;\n        }\n\n        // This should make a smooth flow from base% to 100%\n        uint256 _basePercentage = getAuctionBasePercentage(_d);\n        uint256 _elapsedPercentage = uint256(100).sub(_basePercentage).mul(_elapsed).div(TBTCConstants.getAuctionDuration());\n        uint256 _percentage = _basePercentage.add(_elapsedPercentage);\n\n        return _available.mul(_percentage).div(100);\n    }",
        "comments": [
            "",
            "    /// @notice     Calculates the amount of value at auction right now.",
            "    /// @dev        We calculate the % of the auction that has elapsed, then scale the value up.",
            "    /// @param _d   Deposit storage pointer.",
            "    /// @return     The value in wei to distribute in the auction at the current time.",
            "    "
        ],
        "comt": "\n    /// @notice     Calculates the amount of value at auction right now.\n    /// @dev        We calculate the % of the auction that has elapsed, then scale the value up.\n    /// @param _d   Deposit storage pointer.\n    /// @return     The value in wei to distribute in the auction at the current time.\n    ",
        "@notice": "Calculates the amount of value at auction right now.",
        "@dev": "We calculate the % of the auction that has elapsed, then scale the value up.",
        "@param1": "_d Deposit storage pointer.",
        "@return1": "The value in wei to distribute in the auction at the current time.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "lotSizeTbtc",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            }
        ],
        "func": "function lotSizeTbtc(Deposit storage _d) public view returns (uint256){\n        return _d.lotSizeSatoshis.mul(TBTCConstants.getSatoshiMultiplier());\n    }",
        "comments": [
            "",
            "    /// @notice         Gets the lot size in erc20 decimal places (max 18)",
            "    /// @return         uint256 lot size in 10**18 decimals.",
            "    "
        ],
        "comt": "\n    /// @notice         Gets the lot size in erc20 decimal places (max 18)\n    /// @return         uint256 lot size in 10**18 decimals.\n    ",
        "@notice": "Gets the lot size in erc20 decimal places (max 18)",
        "@return1": "uint256 lot size in 10**18 decimals.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "signerFeeTbtc",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            }
        ],
        "func": "function signerFeeTbtc(Deposit storage _d) public view returns (uint256) {\n        return lotSizeTbtc(_d).div(_d.signerFeeDivisor);\n    }",
        "comments": [
            "",
            "    /// @notice         Determines the fees due to the signers for work performed.",
            "    /// @dev            Signers are paid based on the TBTC issued.",
            "    /// @return         Accumulated fees in 10**18 decimals.",
            "    "
        ],
        "comt": "\n    /// @notice         Determines the fees due to the signers for work performed.\n    /// @dev            Signers are paid based on the TBTC issued.\n    /// @return         Accumulated fees in 10**18 decimals.\n    ",
        "@notice": "Determines the fees due to the signers for work performed.",
        "@dev": "Signers are paid based on the TBTC issued.",
        "@return1": "Accumulated fees in 10**18 decimals.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "determineCompressionPrefix",
        "visibility": "public",
        "args": [
            {
                "name": "_pubkeyY",
                "type": "bytes32"
            }
        ],
        "func": "function determineCompressionPrefix(bytes32 _pubkeyY) public pure returns (bytes memory) {\n        if(uint256(_pubkeyY) & 1 == 1) {\n            return hex\"03\";  // Odd Y\n        } else {\n            return hex\"02\";  // Even Y\n        }\n    }",
        "comments": [
            "",
            "    /// @notice             Determines the prefix to the compressed public key.",
            "    /// @dev                The prefix encodes the parity of the Y coordinate.",
            "    /// @param  _pubkeyY    The Y coordinate of the public key.",
            "    /// @return             The 1-byte prefix for the compressed key.",
            "    "
        ],
        "comt": "\n    /// @notice             Determines the prefix to the compressed public key.\n    /// @dev                The prefix encodes the parity of the Y coordinate.\n    /// @param  _pubkeyY    The Y coordinate of the public key.\n    /// @return             The 1-byte prefix for the compressed key.\n    ",
        "@notice": "Determines the prefix to the compressed public key.",
        "@dev": "The prefix encodes the parity of the Y coordinate.",
        "@param1": "_pubkeyY The Y coordinate of the public key.",
        "@return1": "The 1-byte prefix for the compressed key.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "compressPubkey",
        "visibility": "public",
        "args": [
            {
                "name": "_pubkeyX",
                "type": "bytes32"
            },
            {
                "name": "_pubkeyY",
                "type": "bytes32"
            }
        ],
        "func": "function compressPubkey(bytes32 _pubkeyX, bytes32 _pubkeyY) public pure returns (bytes memory) {\n        return abi.encodePacked(determineCompressionPrefix(_pubkeyY), _pubkeyX);\n    }",
        "comments": [
            "",
            "    /// @notice             Compresses a public key.",
            "    /// @dev                Converts the 64-byte key to a 33-byte key, bitcoin-style.",
            "    /// @param  _pubkeyX    The X coordinate of the public key.",
            "    /// @param  _pubkeyY    The Y coordinate of the public key.",
            "    /// @return             The 33-byte compressed pubkey.",
            "    "
        ],
        "comt": "\n    /// @notice             Compresses a public key.\n    /// @dev                Converts the 64-byte key to a 33-byte key, bitcoin-style.\n    /// @param  _pubkeyX    The X coordinate of the public key.\n    /// @param  _pubkeyY    The Y coordinate of the public key.\n    /// @return             The 33-byte compressed pubkey.\n    ",
        "@notice": "Compresses a public key.",
        "@dev": "Converts the 64-byte key to a 33-byte key, bitcoin-style.",
        "@param1": "_pubkeyX The X coordinate of the public key.",
        "@param2": "_pubkeyY The Y coordinate of the public key.",
        "@return1": "The 33-byte compressed pubkey.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "signerPubkey",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            }
        ],
        "func": "function signerPubkey(Deposit storage _d) external view returns (bytes memory) {\n        return abi.encodePacked(_d.signingGroupPubkeyX, _d.signingGroupPubkeyY);\n    }",
        "comments": [
            "",
            "    /// @notice    Returns the packed public key (64 bytes) for the signing group.",
            "    /// @dev       We store it as 2 bytes32, (2 slots) then repack it on demand.",
            "    /// @return    64 byte public key.",
            "    "
        ],
        "comt": "\n    /// @notice    Returns the packed public key (64 bytes) for the signing group.\n    /// @dev       We store it as 2 bytes32, (2 slots) then repack it on demand.\n    /// @return    64 byte public key.\n    ",
        "@notice": "Returns the packed public key (64 bytes) for the signing group.",
        "@dev": "We store it as 2 bytes32, (2 slots) then repack it on demand.",
        "@return1": "64 byte public key.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "signerPKH",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            }
        ],
        "func": "function signerPKH(Deposit storage _d) public view returns (bytes20) {\n        bytes memory _pubkey = compressPubkey(_d.signingGroupPubkeyX, _d.signingGroupPubkeyY);\n        bytes memory _digest = _pubkey.hash160();\n        return bytes20(_digest.toAddress(0));  // dirty solidity hack\n    }",
        "comments": [
            "",
            "    /// @notice    Returns the Bitcoin pubkeyhash (hash160) for the signing group.",
            "    /// @dev       This is used in bitcoin output scripts for the signers.",
            "    /// @return    20-bytes public key hash.",
            "    "
        ],
        "comt": "\n    /// @notice    Returns the Bitcoin pubkeyhash (hash160) for the signing group.\n    /// @dev       This is used in bitcoin output scripts for the signers.\n    /// @return    20-bytes public key hash.\n    ",
        "@notice": "Returns the Bitcoin pubkeyhash (hash160) for the signing group.",
        "@dev": "This is used in bitcoin output scripts for the signers.",
        "@return1": "20-bytes public key hash.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "utxoValue",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            }
        ],
        "func": "function utxoValue(Deposit storage _d) external view returns (uint256) {\n        return bytes8LEToUint(_d.utxoValueBytes);\n    }",
        "comments": [
            "",
            "    /// @notice    Returns the size of the deposit UTXO in satoshi.",
            "    /// @dev       We store the deposit as bytes8 to make signature checking easier.",
            "    /// @return    UTXO value in satoshi.",
            "    "
        ],
        "comt": "\n    /// @notice    Returns the size of the deposit UTXO in satoshi.\n    /// @dev       We store the deposit as bytes8 to make signature checking easier.\n    /// @return    UTXO value in satoshi.\n    ",
        "@notice": "Returns the size of the deposit UTXO in satoshi.",
        "@dev": "We store the deposit as bytes8 to make signature checking easier.",
        "@return1": "UTXO value in satoshi.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "fetchBitcoinPrice",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            }
        ],
        "func": "function fetchBitcoinPrice(Deposit storage _d) external view returns (uint256) {\n        return _d.tbtcSystem.fetchBitcoinPrice();\n    }",
        "comments": [
            "",
            "    /// @notice     Gets the current price of Bitcoin in Ether.",
            "    /// @dev        Polls the price feed via the system contract.",
            "    /// @return     The current price of 1 sat in wei.",
            "    "
        ],
        "comt": "\n    /// @notice     Gets the current price of Bitcoin in Ether.\n    /// @dev        Polls the price feed via the system contract.\n    /// @return     The current price of 1 sat in wei.\n    ",
        "@notice": "Gets the current price of Bitcoin in Ether.",
        "@dev": "Polls the price feed via the system contract.",
        "@return1": "The current price of 1 sat in wei.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "fetchBondAmount",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            }
        ],
        "func": "function fetchBondAmount(Deposit storage _d) external view returns (uint256) {\n        IBondedECDSAKeep _keep = IBondedECDSAKeep(_d.keepAddress);\n        return _keep.checkBondAmount();\n    }",
        "comments": [
            "",
            "    /// @notice     Fetches the Keep's bond amount in wei.",
            "    /// @dev        Calls the keep contract to do so.",
            "    /// @return     The amount of bonded ETH in wei.",
            "    "
        ],
        "comt": "\n    /// @notice     Fetches the Keep's bond amount in wei.\n    /// @dev        Calls the keep contract to do so.\n    /// @return     The amount of bonded ETH in wei.\n    ",
        "@notice": "Fetches the Keep's bond amount in wei.",
        "@dev": "Calls the keep contract to do so.",
        "@return1": "The amount of bonded ETH in wei.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "bytes8LEToUint",
        "visibility": "public",
        "args": [
            {
                "name": "_b",
                "type": "bytes8"
            }
        ],
        "func": "function bytes8LEToUint(bytes8 _b) public pure returns (uint256) {\n        return abi.encodePacked(_b).reverseEndianness().bytesToUint();\n    }",
        "comments": [
            "",
            "    /// @notice         Convert a LE bytes8 to a uint256.",
            "    /// @dev            Do this by converting to bytes, then reversing endianness, then converting to int.",
            "    /// @return         The uint256 represented in LE by the bytes8.",
            "    "
        ],
        "comt": "\n    /// @notice         Convert a LE bytes8 to a uint256.\n    /// @dev            Do this by converting to bytes, then reversing endianness, then converting to int.\n    /// @return         The uint256 represented in LE by the bytes8.\n    ",
        "@notice": "Convert a LE bytes8 to a uint256.",
        "@dev": "Do this by converting to bytes, then reversing endianness, then converting to int.",
        "@return1": "The uint256 represented in LE by the bytes8.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "wasDigestApprovedForSigning",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            },
            {
                "name": "_digest",
                "type": "bytes32"
            }
        ],
        "func": "function wasDigestApprovedForSigning(Deposit storage _d, bytes32 _digest) external view returns (uint256) {\n        return _d.approvedDigests[_digest];\n    }",
        "comments": [
            "",
            "    /// @notice         Gets timestamp of digest approval for signing.",
            "    /// @dev            Identifies entry in the recorded approvals by keep ID and digest pair.",
            "    /// @param _digest  Digest to check approval for.",
            "    /// @return         Timestamp from the moment of recording the digest for signing.",
            "    ///                 Returns 0 if the digest was not approved for signing.",
            "    "
        ],
        "comt": "\n    /// @notice         Gets timestamp of digest approval for signing.\n    /// @dev            Identifies entry in the recorded approvals by keep ID and digest pair.\n    /// @param _digest  Digest to check approval for.\n    /// @return         Timestamp from the moment of recording the digest for signing.\n    ///                 Returns 0 if the digest was not approved for signing.\n    ",
        "@notice": "Gets timestamp of digest approval for signing.",
        "@dev": "Identifies entry in the recorded approvals by keep ID and digest pair.",
        "@param1": "_digest Digest to check approval for.",
        "@return1": "Timestamp from the moment of recording the digest for signing. /// Returns 0 if the digest was not approved for signing.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "feeRebateTokenHolder",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            }
        ],
        "func": "function feeRebateTokenHolder(Deposit storage _d) public view returns (address payable) {\n        address tokenHolder = address(0);\n        if(_d.feeRebateToken.exists(uint256(address(this)))){\n            tokenHolder = address(uint160(_d.feeRebateToken.ownerOf(uint256(address(this)))));\n        }\n        return address(uint160(tokenHolder));\n    }",
        "comments": [
            "",
            "    /// @notice         Looks up the Fee Rebate Token holder.",
            "    /// @return         The current token holder if the Token exists.",
            "    ///                 address(0) if the token does not exist.",
            "    "
        ],
        "comt": "\n    /// @notice         Looks up the Fee Rebate Token holder.\n    /// @return         The current token holder if the Token exists.\n    ///                 address(0) if the token does not exist.\n    ",
        "@notice": "Looks up the Fee Rebate Token holder.",
        "@return1": "The current token holder if the Token exists. /// address(0) if the token does not exist.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "depositOwner",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            }
        ],
        "func": "function depositOwner(Deposit storage _d) public view returns (address payable) {\n        return address(uint160(_d.tbtcDepositToken.ownerOf(uint256(address(this)))));\n    }",
        "comments": [
            "",
            "    /// @notice         Looks up the deposit beneficiary by calling the tBTC system.",
            "    /// @dev            We cast the address to a uint256 to match the 721 standard.",
            "    /// @return         The current deposit beneficiary.",
            "    "
        ],
        "comt": "\n    /// @notice         Looks up the deposit beneficiary by calling the tBTC system.\n    /// @dev            We cast the address to a uint256 to match the 721 standard.\n    /// @return         The current deposit beneficiary.\n    ",
        "@notice": "Looks up the deposit beneficiary by calling the tBTC system.",
        "@dev": "We cast the address to a uint256 to match the 721 standard.",
        "@return1": "The current deposit beneficiary.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "redemptionTeardown",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "Deposit storage"
            }
        ],
        "func": "function redemptionTeardown(Deposit storage _d) public {\n        _d.redeemerOutputScript = \"\";\n        _d.initialRedemptionFee = 0;\n        _d.withdrawalRequestTime = 0;\n        _d.lastRequestedDigest = bytes32(0);\n    }",
        "comments": [
            "",
            "    /// @notice     Deletes state after termination of redemption process.",
            "    /// @dev        We keep around the redeemer address so we can pay them out.",
            "    "
        ],
        "comt": "\n    /// @notice     Deletes state after termination of redemption process.\n    /// @dev        We keep around the redeemer address so we can pay them out.\n    ",
        "@notice": "Deletes state after termination of redemption process.",
        "@dev": "We keep around the redeemer address so we can pay them out.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getBeneficiaryRewardDivisor",
        "visibility": "external",
        "args": [],
        "func": "function getBeneficiaryRewardDivisor() external pure returns (uint256) { return BENEFICIARY_FEE_DIVISOR; }",
        "comments": [
            "// seconds",
            "",
            "    // Getters for easy access",
            "    "
        ],
        "comt": "// seconds\n\n    // Getters for easy access\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSatoshiMultiplier",
        "visibility": "external",
        "args": [],
        "func": "function getSatoshiMultiplier() external pure returns (uint256) { return SATOSHI_MULTIPLIER; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getDepositTerm",
        "visibility": "external",
        "args": [],
        "func": "function getDepositTerm() external pure returns (uint256) { return DEPOSIT_TERM_LENGTH; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getTxProofDifficultyFactor",
        "visibility": "external",
        "args": [],
        "func": "function getTxProofDifficultyFactor() external pure returns (uint256) { return TX_PROOF_DIFFICULTY_FACTOR; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSignatureTimeout",
        "visibility": "external",
        "args": [],
        "func": "function getSignatureTimeout() external pure returns (uint256) { return REDEMPTION_SIGNATURE_TIMEOUT; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getIncreaseFeeTimer",
        "visibility": "external",
        "args": [],
        "func": "function getIncreaseFeeTimer() external pure returns (uint256) { return INCREASE_FEE_TIMER; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRedemptionProofTimeout",
        "visibility": "external",
        "args": [],
        "func": "function getRedemptionProofTimeout() external pure returns (uint256) { return REDEMPTION_PROOF_TIMEOUT; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getMinimumRedemptionFee",
        "visibility": "external",
        "args": [],
        "func": "function getMinimumRedemptionFee() external pure returns (uint256) { return MINIMUM_REDEMPTION_FEE; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getMinimumUtxoValue",
        "visibility": "external",
        "args": [],
        "func": "function getMinimumUtxoValue() external pure returns (uint256) { return MINIMUM_UTXO_VALUE; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getFundingTimeout",
        "visibility": "external",
        "args": [],
        "func": "function getFundingTimeout() external pure returns (uint256) { return FUNDING_PROOF_TIMEOUT; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSigningGroupFormationTimeout",
        "visibility": "external",
        "args": [],
        "func": "function getSigningGroupFormationTimeout() external pure returns (uint256) { return FORMATION_TIMEOUT; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getCourtesyCallTimeout",
        "visibility": "external",
        "args": [],
        "func": "function getCourtesyCallTimeout() external pure returns (uint256) { return COURTESY_CALL_DURATION; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAuctionDuration",
        "visibility": "external",
        "args": [],
        "func": "function getAuctionDuration() external pure returns (uint256) { return AUCTION_DURATION; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "external",
        "args": [
            {
                "name": "_account",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function mint(address _account, uint256 _amount) external onlyVendingMachine returns (bool) {\n        // NOTE: this is a public function with unchecked minting. Only the\n        // vending machine is allowed to call it, and it is in charge of\n        // ensuring minting is permitted.\n        _mint(_account, _amount);\n        return true;\n    }",
        "comments": [
            "",
            "    /// @dev             Mints an amount of the token and assigns it to an account.",
            "    ///                  Uses the internal _mint function.",
            "    /// @param _account  The account that will receive the created tokens.",
            "    /// @param _amount   The amount of tokens that will be created.",
            "    "
        ],
        "comt": "\n    /// @dev             Mints an amount of the token and assigns it to an account.\n    ///                  Uses the internal _mint function.\n    /// @param _account  The account that will receive the created tokens.\n    /// @param _amount   The amount of tokens that will be created.\n    ",
        "@dev": "Mints an amount of the token and assigns it to an account. /// Uses the internal _mint function.",
        "@param1": "_account The account that will receive the created tokens.",
        "@param2": "_amount The amount of tokens that will be created.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burnFrom",
        "visibility": "external",
        "args": [
            {
                "name": "_account",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function burnFrom(address _account, uint256 _amount) external {\n        _burnFrom(_account, _amount);\n    }",
        "comments": [
            "",
            "    /// @dev             Burns an amount of the token from the given account's balance.",
            "    ///                  deducting from the sender's allowance for said account.",
            "    ///                  Uses the internal _burn function.",
            "    /// @param _account  The account whose tokens will be burnt.",
            "    /// @param _amount   The amount of tokens that will be burnt.",
            "    "
        ],
        "comt": "\n    /// @dev             Burns an amount of the token from the given account's balance.\n    ///                  deducting from the sender's allowance for said account.\n    ///                  Uses the internal _burn function.\n    /// @param _account  The account whose tokens will be burnt.\n    /// @param _amount   The amount of tokens that will be burnt.\n    ",
        "@dev": "Burns an amount of the token from the given account's balance. /// deducting from the sender's allowance for said account. /// Uses the internal _burn function.",
        "@param1": "_account The account whose tokens will be burnt.",
        "@param2": "_amount The amount of tokens that will be burnt.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "external",
        "args": [
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function burn(uint256 _amount) external {\n        _burn(msg.sender, _amount);\n    }",
        "comments": [
            "",
            "    /// @dev Destroys `amount` tokens from `msg.sender`, reducing the",
            "    /// total supply.",
            "    /// @param _amount   The amount of tokens that will be burnt.",
            "    "
        ],
        "comt": "\n    /// @dev Destroys `amount` tokens from `msg.sender`, reducing the\n    /// total supply.\n    /// @param _amount   The amount of tokens that will be burnt.\n    ",
        "@dev": "Destroys `amount` tokens from `msg.sender`, reducing the /// total supply.",
        "@param1": "_amount The amount of tokens that will be burnt.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approveAndCall",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "ITokenRecipient"
            },
            {
                "name": "_value",
                "type": "uint256"
            },
            {
                "name": "_extraData",
                "type": "bytes memory"
            }
        ],
        "func": "function approveAndCall(\n        ITokenRecipient _spender,\n        uint256 _value,\n        bytes memory _extraData\n    ) public returns (bool) { // not external to allow bytes memory parameters\n        if (approve(address(_spender), _value)) {\n            _spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n            return true;\n        }\n        return false;\n    }",
        "comments": [
            "",
            "    /// @notice           Set allowance for other address and notify.",
            "    ///                   Allows `_spender` to spend no more than `_value`",
            "    ///                   tokens on your behalf and then ping the contract about",
            "    ///                   it.",
            "    /// @dev              The `_spender` should implement the `ITokenRecipient`",
            "    ///                   interface to receive approval notifications.",
            "    /// @param _spender   Address of contract authorized to spend.",
            "    /// @param _value     The max amount they can spend.",
            "    /// @param _extraData Extra information to send to the approved contract.",
            "    /// @return true if the `_spender` was successfully approved and acted on",
            "    ///         the approval, false (or revert) otherwise.",
            "    "
        ],
        "comt": "\n    /// @notice           Set allowance for other address and notify.\n    ///                   Allows `_spender` to spend no more than `_value`\n    ///                   tokens on your behalf and then ping the contract about\n    ///                   it.\n    /// @dev              The `_spender` should implement the `ITokenRecipient`\n    ///                   interface to receive approval notifications.\n    /// @param _spender   Address of contract authorized to spend.\n    /// @param _value     The max amount they can spend.\n    /// @param _extraData Extra information to send to the approved contract.\n    /// @return true if the `_spender` was successfully approved and acted on\n    ///         the approval, false (or revert) otherwise.\n    ",
        "@notice": "Set allowance for other address and notify. /// Allows `_spender` to spend no more than `_value` /// tokens on your behalf and then ping the contract about /// it.",
        "@dev": "The `_spender` should implement the `ITokenRecipient` /// interface to receive approval notifications.",
        "@param1": "_spender Address of contract authorized to spend.",
        "@param2": "_value The max amount they can spend.",
        "@param3": "_extraData Extra information to send to the approved contract.",
        "@return1": "true if the `_spender` was successfully approved and acted on /// the approval, false (or revert) otherwise.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }",
        "comments": [
            "/**",
            "     * @dev See `IERC20.totalSupply`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See `IERC20.totalSupply`.\n     */\n",
        "@dev": "See `IERC20.totalSupply`.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }",
        "comments": [
            "/**",
            "     * @dev See `IERC20.balanceOf`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See `IERC20.balanceOf`.\n     */\n",
        "@dev": "See `IERC20.balanceOf`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See `IERC20.transfer`.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `recipient` cannot be the zero address.",
            "     * - the caller must have a balance of at least `amount`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See `IERC20.transfer`.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n",
        "@dev": "See `IERC20.transfer`. * * Requirements: * * - `recipient` cannot be the zero address. * - the caller must have a balance of at least `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }",
        "comments": [
            "/**",
            "     * @dev See `IERC20.allowance`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See `IERC20.allowance`.\n     */\n",
        "@dev": "See `IERC20.allowance`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See `IERC20.approve`.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See `IERC20.approve`.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n",
        "@dev": "See `IERC20.approve`. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See `IERC20.transferFrom`.",
            "     *",
            "     * Emits an `Approval` event indicating the updated allowance. This is not",
            "     * required by the EIP. See the note at the beginning of `ERC20`;",
            "     *",
            "     * Requirements:",
            "     * - `sender` and `recipient` cannot be the zero address.",
            "     * - `sender` must have a balance of at least `value`.",
            "     * - the caller must have allowance for `sender`'s tokens of at least",
            "     * `amount`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See `IERC20.transferFrom`.\n     *\n     * Emits an `Approval` event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of `ERC20`;\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `value`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n",
        "@dev": "See `IERC20.transferFrom`. * * Emits an `Approval` event indicating the updated allowance. This is not * required by the EIP. See the note at the beginning of `ERC20`; * * Requirements: * - `sender` and `recipient` cannot be the zero address. * - `sender` must have a balance of at least `value`. * - the caller must have allowance for `sender`'s tokens of at least * `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Atomically increases the allowance granted to `spender` by the caller.",
            "     *",
            "     * This is an alternative to `approve` that can be used as a mitigation for",
            "     * problems described in `IERC20.approve`.",
            "     *",
            "     * Emits an `Approval` event indicating the updated allowance.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n",
        "@dev": "Atomically increases the allowance granted to `spender` by the caller. * * This is an alternative to `approve` that can be used as a mitigation for * problems described in `IERC20.approve`. * * Emits an `Approval` event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Atomically decreases the allowance granted to `spender` by the caller.",
            "     *",
            "     * This is an alternative to `approve` that can be used as a mitigation for",
            "     * problems described in `IERC20.approve`.",
            "     *",
            "     * Emits an `Approval` event indicating the updated allowance.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     * - `spender` must have allowance for the caller of at least",
            "     * `subtractedValue`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n",
        "@dev": "Atomically decreases the allowance granted to `spender` by the caller. * * This is an alternative to `approve` that can be used as a mitigation for * problems described in `IERC20.approve`. * * Emits an `Approval` event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address. * - `spender` must have allowance for the caller of at least * `subtractedValue`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "name",
        "visibility": "public",
        "args": [],
        "func": "function name() public view returns (string memory) {\n        return _name;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the name of the token.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the name of the token.\n     */\n",
        "@dev": "Returns the name of the token.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "public",
        "args": [],
        "func": "function symbol() public view returns (string memory) {\n        return _symbol;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the symbol of the token, usually a shorter version of the",
            "     * name.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n",
        "@dev": "Returns the symbol of the token, usually a shorter version of the * name.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decimals",
        "visibility": "public",
        "args": [],
        "func": "function decimals() public view returns (uint8) {\n        return _decimals;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the number of decimals used to get its user representation.",
            "     * For example, if `decimals` equals `2`, a balance of `505` tokens should",
            "     * be displayed to a user as `5,05` (`505 / 10 ** 2`).",
            "     *",
            "     * Tokens usually opt for a value of 18, imitating the relationship between",
            "     * Ether and Wei.",
            "     *",
            "     * > Note that this information is only used for _display_ purposes: it in",
            "     * no way affects any of the arithmetic of the contract, including",
            "     * `IERC20.balanceOf` and `IERC20.transfer`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * > Note that this information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * `IERC20.balanceOf` and `IERC20.transfer`.\n     */\n",
        "@dev": "Returns the number of decimals used to get its user representation. * For example, if `decimals` equals `2`, a balance of `505` tokens should * be displayed to a user as `5,05` (`505 / 10 ** 2`). * * Tokens usually opt for a value of 18, imitating the relationship between * Ether and Wei. * * > Note that this information is only used for _display_ purposes: it in * no way affects any of the arithmetic of the contract, including * `IERC20.balanceOf` and `IERC20.transfer`.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "external",
        "args": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_tokenId",
                "type": "uint256"
            }
        ],
        "func": "function mint(address _to, uint256 _tokenId) external onlyVendingMachine {\n        _mint(_to, _tokenId);\n    }",
        "comments": [
            "",
            "    /// @dev Mints a new token.",
            "    /// Reverts if the given token ID already exists.",
            "    /// @param _to The address that will own the minted token.",
            "    /// @param _tokenId uint256 ID of the token to be minted.",
            "    "
        ],
        "comt": "\n    /// @dev Mints a new token.\n    /// Reverts if the given token ID already exists.\n    /// @param _to The address that will own the minted token.\n    /// @param _tokenId uint256 ID of the token to be minted.\n    ",
        "@dev": "Mints a new token. /// Reverts if the given token ID already exists.",
        "@param1": "_to The address that will own the minted token.",
        "@param2": "_tokenId uint256 ID of the token to be minted.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "exists",
        "visibility": "external",
        "args": [
            {
                "name": "_tokenId",
                "type": "uint256"
            }
        ],
        "func": "function exists(uint256 _tokenId) external view returns (bool) {\n        return _exists(_tokenId);\n    }",
        "comments": [
            "",
            "    /// @dev Returns whether the specified token exists.",
            "    /// @param _tokenId uint256 ID of the token to query the existence of.",
            "    /// @return bool whether the token exists.",
            "    "
        ],
        "comt": "\n    /// @dev Returns whether the specified token exists.\n    /// @param _tokenId uint256 ID of the token to query the existence of.\n    /// @return bool whether the token exists.\n    ",
        "@dev": "Returns whether the specified token exists.",
        "@param1": "_tokenId uint256 ID of the token to query the existence of.",
        "@return1": "bool whether the token exists.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "name",
        "visibility": "external",
        "args": [],
        "func": "function name() external view returns (string memory) {\n        return _name;\n    }",
        "comments": [
            "/**",
            "     * @dev Gets the token name.",
            "     * @return string representing the token name",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Gets the token name.\n     * @return string representing the token name\n     */\n",
        "@dev": "Gets the token name.",
        "@return1": "string representing the token name",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "external",
        "args": [],
        "func": "function symbol() external view returns (string memory) {\n        return _symbol;\n    }",
        "comments": [
            "/**",
            "     * @dev Gets the token symbol.",
            "     * @return string representing the token symbol",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Gets the token symbol.\n     * @return string representing the token symbol\n     */\n",
        "@dev": "Gets the token symbol.",
        "@return1": "string representing the token symbol",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "tokenURI",
        "visibility": "external",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function tokenURI(uint256 tokenId) external view returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n        return _tokenURIs[tokenId];\n    }",
        "comments": [
            "/**",
            "     * @dev Returns an URI for a given token ID.",
            "     * Throws if the token ID does not exist. May return an empty string.",
            "     * @param tokenId uint256 ID of the token to query",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns an URI for a given token ID.\n     * Throws if the token ID does not exist. May return an empty string.\n     * @param tokenId uint256 ID of the token to query\n     */\n",
        "@dev": "Returns an URI for a given token ID. * Throws if the token ID does not exist. May return an empty string.",
        "@param1": "tokenId uint256 ID of the token to query",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _ownedTokensCount[owner].current();\n    }",
        "comments": [
            "/**",
            "     * @dev Gets the balance of the specified address.",
            "     * @param owner address to query the balance of",
            "     * @return uint256 representing the amount owned by the passed address",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Gets the balance of the specified address.\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n",
        "@dev": "Gets the balance of the specified address.",
        "@param1": "owner address to query the balance of",
        "@return1": "uint256 representing the amount owned by the passed address",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "ownerOf",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n\n        return owner;\n    }",
        "comments": [
            "/**",
            "     * @dev Gets the owner of the specified token ID.",
            "     * @param tokenId uint256 ID of the token to query the owner of",
            "     * @return address currently marked as the owner of the given token ID",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Gets the owner of the specified token ID.\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n",
        "@dev": "Gets the owner of the specified token ID.",
        "@param1": "tokenId uint256 ID of the token to query the owner of",
        "@return1": "address currently marked as the owner of the given token ID",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }",
        "comments": [
            "/**",
            "     * @dev Approves another address to transfer the given token ID",
            "     * The zero address indicates there is no approved address.",
            "     * There can only be one approved address per token at a given time.",
            "     * Can only be called by the token owner or an approved operator.",
            "     * @param to address to be approved for the given token ID",
            "     * @param tokenId uint256 ID of the token to be approved",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n",
        "@dev": "Approves another address to transfer the given token ID * The zero address indicates there is no approved address. * There can only be one approved address per token at a given time. * Can only be called by the token owner or an approved operator.",
        "@param1": "to address to be approved for the given token ID",
        "@param2": "tokenId uint256 ID of the token to be approved",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getApproved",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }",
        "comments": [
            "/**",
            "     * @dev Gets the approved address for a token ID, or zero if no address set",
            "     * Reverts if the token ID does not exist.",
            "     * @param tokenId uint256 ID of the token to query the approval of",
            "     * @return address currently approved for the given token ID",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n",
        "@dev": "Gets the approved address for a token ID, or zero if no address set * Reverts if the token ID does not exist.",
        "@param1": "tokenId uint256 ID of the token to query the approval of",
        "@return1": "address currently approved for the given token ID",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setApprovalForAll",
        "visibility": "public",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "approved",
                "type": "bool"
            }
        ],
        "func": "function setApprovalForAll(address to, bool approved) public {\n        require(to != msg.sender, \"ERC721: approve to caller\");\n\n        _operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }",
        "comments": [
            "/**",
            "     * @dev Sets or unsets the approval of a given operator",
            "     * An operator is allowed to transfer all tokens of the sender on their behalf.",
            "     * @param to operator address to set the approval",
            "     * @param approved representing the status of the approval to be set",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n",
        "@dev": "Sets or unsets the approval of a given operator * An operator is allowed to transfer all tokens of the sender on their behalf.",
        "@param1": "to operator address to set the approval",
        "@param2": "approved representing the status of the approval to be set",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isApprovedForAll",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "operator",
                "type": "address"
            }
        ],
        "func": "function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }",
        "comments": [
            "/**",
            "     * @dev Tells whether an operator is approved by a given owner.",
            "     * @param owner owner address which you want to query the approval of",
            "     * @param operator operator address which you want to query the approval of",
            "     * @return bool whether the given operator is approved by the given owner",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Tells whether an operator is approved by a given owner.\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n",
        "@dev": "Tells whether an operator is approved by a given owner.",
        "@param1": "owner owner address which you want to query the approval of",
        "@param2": "operator operator address which you want to query the approval of",
        "@return1": "bool whether the given operator is approved by the given owner",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address from, address to, uint256 tokenId) public {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transferFrom(from, to, tokenId);\n    }",
        "comments": [
            "/**",
            "     * @dev Transfers the ownership of a given token ID to another address.",
            "     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible.",
            "     * Requires the msg.sender to be the owner, approved, or operator.",
            "     * @param from current owner of the token",
            "     * @param to address to receive the ownership of the given token ID",
            "     * @param tokenId uint256 ID of the token to be transferred",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Transfers the ownership of a given token ID to another address.\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n     * Requires the msg.sender to be the owner, approved, or operator.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n",
        "@dev": "Transfers the ownership of a given token ID to another address. * Usage of this method is discouraged, use `safeTransferFrom` whenever possible. * Requires the msg.sender to be the owner, approved, or operator.",
        "@param1": "from current owner of the token",
        "@param2": "to address to receive the ownership of the given token ID",
        "@param3": "tokenId uint256 ID of the token to be transferred",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "safeTransferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }",
        "comments": [
            "/**",
            "     * @dev Safely transfers the ownership of a given token ID to another address",
            "     * If the target address is a contract, it must implement `onERC721Received`,",
            "     * which is called upon a safe transfer, and return the magic value",
            "     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,",
            "     * the transfer is reverted.",
            "     * Requires the msg.sender to be the owner, approved, or operator",
            "     * @param from current owner of the token",
            "     * @param to address to receive the ownership of the given token ID",
            "     * @param tokenId uint256 ID of the token to be transferred",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n",
        "@dev": "Safely transfers the ownership of a given token ID to another address * If the target address is a contract, it must implement `onERC721Received`, * which is called upon a safe transfer, and return the magic value * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, * the transfer is reverted. * Requires the msg.sender to be the owner, approved, or operator",
        "@param1": "from current owner of the token",
        "@param2": "to address to receive the ownership of the given token ID",
        "@param3": "tokenId uint256 ID of the token to be transferred",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "safeTransferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            },
            {
                "name": "_data",
                "type": "bytes memory"
            }
        ],
        "func": "function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }",
        "comments": [
            "/**",
            "     * @dev Safely transfers the ownership of a given token ID to another address",
            "     * If the target address is a contract, it must implement `onERC721Received`,",
            "     * which is called upon a safe transfer, and return the magic value",
            "     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,",
            "     * the transfer is reverted.",
            "     * Requires the msg.sender to be the owner, approved, or operator",
            "     * @param from current owner of the token",
            "     * @param to address to receive the ownership of the given token ID",
            "     * @param tokenId uint256 ID of the token to be transferred",
            "     * @param _data bytes data to send along with a safe transfer check",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n",
        "@dev": "Safely transfers the ownership of a given token ID to another address * If the target address is a contract, it must implement `onERC721Received`, * which is called upon a safe transfer, and return the magic value * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, * the transfer is reverted. * Requires the msg.sender to be the owner, approved, or operator",
        "@param1": "from current owner of the token",
        "@param2": "to address to receive the ownership of the given token ID",
        "@param3": "tokenId uint256 ID of the token to be transferred",
        "@param4": "_data bytes data to send along with a safe transfer check",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supportsInterface",
        "visibility": "external",
        "args": [
            {
                "name": "interfaceId",
                "type": "bytes4"
            }
        ],
        "func": "function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }",
        "comments": [
            "/**",
            "     * @dev See `IERC165.supportsInterface`.",
            "     *",
            "     * Time complexity O(1), guaranteed to always use less than 30 000 gas.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See `IERC165.supportsInterface`.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n",
        "@dev": "See `IERC165.supportsInterface`. * * Time complexity O(1), guaranteed to always use less than 30 000 gas.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logCreated",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_keepAddress",
                "type": "address"
            }
        ],
        "func": "function logCreated(DepositUtils.Deposit storage _d, address _keepAddress) external {\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logCreated(_keepAddress);\n    }",
        "comments": [
            "",
            "",
            "    /// @notice               Fires a Created event.",
            "    /// @dev                  `DepositLog.logCreated` fires a Created event with",
            "    ///                       _keepAddress, msg.sender and block.timestamp.",
            "    ///                       msg.sender will be the calling Deposit's address.",
            "    /// @param  _keepAddress  The address of the associated keep.",
            "    "
        ],
        "comt": "\n\n    /// @notice               Fires a Created event.\n    /// @dev                  `DepositLog.logCreated` fires a Created event with\n    ///                       _keepAddress, msg.sender and block.timestamp.\n    ///                       msg.sender will be the calling Deposit's address.\n    /// @param  _keepAddress  The address of the associated keep.\n    ",
        "@notice": "Fires a Created event.",
        "@dev": "`DepositLog.logCreated` fires a Created event with /// _keepAddress, msg.sender and block.timestamp. /// msg.sender will be the calling Deposit's address.",
        "@param1": "_keepAddress The address of the associated keep.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logRedemptionRequested",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_redeemer",
                "type": "address"
            },
            {
                "name": "_digest",
                "type": "bytes32"
            },
            {
                "name": "_utxoValue",
                "type": "uint256"
            },
            {
                "name": "_redeemerOutputScript",
                "type": "bytes memory"
            },
            {
                "name": "_requestedFee",
                "type": "uint256"
            },
            {
                "name": "_outpoint",
                "type": "bytes memory"
            }
        ],
        "func": "function logRedemptionRequested(\n        DepositUtils.Deposit storage _d,\n        address _redeemer,\n        bytes32 _digest,\n        uint256 _utxoValue,\n        bytes memory _redeemerOutputScript,\n        uint256 _requestedFee,\n        bytes memory _outpoint\n    ) public { // not external to allow bytes memory parameters\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logRedemptionRequested(\n            _redeemer,\n            _digest,\n            _utxoValue,\n            _redeemerOutputScript,\n            _requestedFee,\n            _outpoint\n        );\n    }",
        "comments": [
            "",
            "    /// @notice                 Fires a RedemptionRequested event.",
            "    /// @dev                    This is the only event without an explicit timestamp.",
            "    /// @param  _redeemer       The ethereum address of the redeemer.",
            "    /// @param  _digest         The calculated sighash digest.",
            "    /// @param  _utxoValue       The size of the utxo in sat.",
            "    /// @param  _redeemerOutputScript The redeemer's length-prefixed output script.",
            "    /// @param  _requestedFee   The redeemer or bump-system specified fee.",
            "    /// @param  _outpoint       The 36 byte outpoint.",
            "    /// @return                 True if successful, else revert.",
            "    "
        ],
        "comt": "\n    /// @notice                 Fires a RedemptionRequested event.\n    /// @dev                    This is the only event without an explicit timestamp.\n    /// @param  _redeemer       The ethereum address of the redeemer.\n    /// @param  _digest         The calculated sighash digest.\n    /// @param  _utxoValue       The size of the utxo in sat.\n    /// @param  _redeemerOutputScript The redeemer's length-prefixed output script.\n    /// @param  _requestedFee   The redeemer or bump-system specified fee.\n    /// @param  _outpoint       The 36 byte outpoint.\n    /// @return                 True if successful, else revert.\n    ",
        "@notice": "Fires a RedemptionRequested event.",
        "@dev": "This is the only event without an explicit timestamp.",
        "@param1": "_redeemer The ethereum address of the redeemer.",
        "@param2": "_digest The calculated sighash digest.",
        "@param3": "_utxoValue The size of the utxo in sat.",
        "@param4": "_redeemerOutputScript The redeemer's length-prefixed output script.",
        "@param5": "_requestedFee The redeemer or bump-system specified fee.",
        "@param6": "_outpoint The 36 byte outpoint.",
        "@return1": "True if successful, else revert.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logGotRedemptionSignature",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_digest",
                "type": "bytes32"
            },
            {
                "name": "_r",
                "type": "bytes32"
            },
            {
                "name": "_s",
                "type": "bytes32"
            }
        ],
        "func": "function logGotRedemptionSignature(\n        DepositUtils.Deposit storage _d,\n        bytes32 _digest,\n        bytes32 _r,\n        bytes32 _s\n    ) external {\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logGotRedemptionSignature(\n            _digest,\n            _r,\n            _s\n        );\n    }",
        "comments": [
            "",
            "    /// @notice         Fires a GotRedemptionSignature event.",
            "    /// @dev            We append the sender, which is the deposit contract that called.",
            "    /// @param  _digest Signed digest.",
            "    /// @param  _r      Signature r value.",
            "    /// @param  _s      Signature s value.",
            "    /// @return         True if successful, else revert.",
            "    "
        ],
        "comt": "\n    /// @notice         Fires a GotRedemptionSignature event.\n    /// @dev            We append the sender, which is the deposit contract that called.\n    /// @param  _digest Signed digest.\n    /// @param  _r      Signature r value.\n    /// @param  _s      Signature s value.\n    /// @return         True if successful, else revert.\n    ",
        "@notice": "Fires a GotRedemptionSignature event.",
        "@dev": "We append the sender, which is the deposit contract that called.",
        "@param1": "_digest Signed digest.",
        "@param2": "_r Signature r value.",
        "@param3": "_s Signature s value.",
        "@return1": "True if successful, else revert.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logRegisteredPubkey",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_signingGroupPubkeyX",
                "type": "bytes32"
            },
            {
                "name": "_signingGroupPubkeyY",
                "type": "bytes32"
            }
        ],
        "func": "function logRegisteredPubkey(\n        DepositUtils.Deposit storage _d,\n        bytes32 _signingGroupPubkeyX,\n        bytes32 _signingGroupPubkeyY\n    ) external {\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logRegisteredPubkey(\n            _signingGroupPubkeyX,\n            _signingGroupPubkeyY);\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a RegisteredPubkey event.",
            "    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a RegisteredPubkey event.\n    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.\n    ",
        "@notice": "Fires a RegisteredPubkey event.",
        "@dev": "The logger is on a system contract, so all logs from all deposits are from the same address.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logSetupFailed",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function logSetupFailed(DepositUtils.Deposit storage _d) external {\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logSetupFailed();\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a SetupFailed event.",
            "    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a SetupFailed event.\n    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.\n    ",
        "@notice": "Fires a SetupFailed event.",
        "@dev": "The logger is on a system contract, so all logs from all deposits are from the same address.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logFunderRequestedAbort",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_abortOutputScript",
                "type": "bytes memory"
            }
        ],
        "func": "function logFunderRequestedAbort(\n        DepositUtils.Deposit storage _d,\n        bytes memory _abortOutputScript\n    ) public { // not external to allow bytes memory parameters\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logFunderRequestedAbort(_abortOutputScript);\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a FunderAbortRequested event.",
            "    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a FunderAbortRequested event.\n    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.\n    ",
        "@notice": "Fires a FunderAbortRequested event.",
        "@dev": "The logger is on a system contract, so all logs from all deposits are from the same address.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logFraudDuringSetup",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function logFraudDuringSetup(DepositUtils.Deposit storage _d) external {\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logFraudDuringSetup();\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a FraudDuringSetup event.",
            "    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a FraudDuringSetup event.\n    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.\n    ",
        "@notice": "Fires a FraudDuringSetup event.",
        "@dev": "The logger is on a system contract, so all logs from all deposits are from the same address.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logFunded",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_txid",
                "type": "bytes32"
            }
        ],
        "func": "function logFunded(DepositUtils.Deposit storage _d, bytes32 _txid) external {\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logFunded(_txid);\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a Funded event.",
            "    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a Funded event.\n    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.\n    ",
        "@notice": "Fires a Funded event.",
        "@dev": "The logger is on a system contract, so all logs from all deposits are from the same address.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logCourtesyCalled",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function logCourtesyCalled(DepositUtils.Deposit storage _d) external {\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logCourtesyCalled();\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a CourtesyCalled event.",
            "    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a CourtesyCalled event.\n    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.\n    ",
        "@notice": "Fires a CourtesyCalled event.",
        "@dev": "The logger is on a system contract, so all logs from all deposits are from the same address.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logStartedLiquidation",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_wasFraud",
                "type": "bool"
            }
        ],
        "func": "function logStartedLiquidation(DepositUtils.Deposit storage _d, bool _wasFraud) external {\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logStartedLiquidation(_wasFraud);\n    }",
        "comments": [
            "",
            "    /// @notice             Fires a StartedLiquidation event.",
            "    /// @dev                We append the sender, which is the deposit contract that called.",
            "    /// @param _wasFraud    True if liquidating for fraud.",
            "    "
        ],
        "comt": "\n    /// @notice             Fires a StartedLiquidation event.\n    /// @dev                We append the sender, which is the deposit contract that called.\n    /// @param _wasFraud    True if liquidating for fraud.\n    ",
        "@notice": "Fires a StartedLiquidation event.",
        "@dev": "We append the sender, which is the deposit contract that called.",
        "@param1": "_wasFraud True if liquidating for fraud.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logRedeemed",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_txid",
                "type": "bytes32"
            }
        ],
        "func": "function logRedeemed(DepositUtils.Deposit storage _d, bytes32 _txid) external {\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logRedeemed(_txid);\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a Redeemed event.",
            "    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a Redeemed event.\n    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.\n    ",
        "@notice": "Fires a Redeemed event.",
        "@dev": "The logger is on a system contract, so all logs from all deposits are from the same address.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logLiquidated",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function logLiquidated(DepositUtils.Deposit storage _d) external {\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logLiquidated();\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a Liquidated event.",
            "    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a Liquidated event.\n    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.\n    ",
        "@notice": "Fires a Liquidated event.",
        "@dev": "The logger is on a system contract, so all logs from all deposits are from the same address.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logExitedCourtesyCall",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function logExitedCourtesyCall(DepositUtils.Deposit storage _d) external {\n        DepositLog _logger = DepositLog(address(_d.tbtcSystem));\n        _logger.logExitedCourtesyCall();\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a ExitedCourtesyCall event.",
            "    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a ExitedCourtesyCall event.\n    /// @dev        The logger is on a system contract, so all logs from all deposits are from the same address.\n    ",
        "@notice": "Fires a ExitedCourtesyCall event.",
        "@dev": "The logger is on a system contract, so all logs from all deposits are from the same address.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logCreated",
        "visibility": "external",
        "args": [
            {
                "name": "_keepAddress",
                "type": "address"
            }
        ],
        "func": "function logCreated(address _keepAddress) external {\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit Created(msg.sender, _keepAddress, block.timestamp);\n    }",
        "comments": [
            "",
            "    //",
            "    // Logging",
            "    //",
            "",
            "    /// @notice               Fires a Created event.",
            "    /// @dev                  We append the sender, which is the deposit contract that called.",
            "    /// @param  _keepAddress  The address of the associated keep.",
            "    /// @return               True if successful, else revert.",
            "    "
        ],
        "comt": "\n    //\n    // Logging\n    //\n\n    /// @notice               Fires a Created event.\n    /// @dev                  We append the sender, which is the deposit contract that called.\n    /// @param  _keepAddress  The address of the associated keep.\n    /// @return               True if successful, else revert.\n    ",
        "@notice": "Fires a Created event.",
        "@dev": "We append the sender, which is the deposit contract that called.",
        "@param1": "_keepAddress The address of the associated keep.",
        "@return1": "True if successful, else revert.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logRedemptionRequested",
        "visibility": "public",
        "args": [
            {
                "name": "_requester",
                "type": "address"
            },
            {
                "name": "_digest",
                "type": "bytes32"
            },
            {
                "name": "_utxoValue",
                "type": "uint256"
            },
            {
                "name": "_redeemerOutputScript",
                "type": "bytes memory"
            },
            {
                "name": "_requestedFee",
                "type": "uint256"
            },
            {
                "name": "_outpoint",
                "type": "bytes memory"
            }
        ],
        "func": "function logRedemptionRequested(\n        address _requester,\n        bytes32 _digest,\n        uint256 _utxoValue,\n        bytes memory _redeemerOutputScript,\n        uint256 _requestedFee,\n        bytes memory _outpoint\n    ) public {\n        // not external to allow bytes memory parameters\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit RedemptionRequested(\n            msg.sender,\n            _requester,\n            _digest,\n            _utxoValue,\n            _redeemerOutputScript,\n            _requestedFee,\n            _outpoint\n        );\n    }",
        "comments": [
            "",
            "    /// @notice                 Fires a RedemptionRequested event.",
            "    /// @dev                    This is the only event without an explicit timestamp.",
            "    /// @param  _requester      The ethereum address of the requester.",
            "    /// @param  _digest         The calculated sighash digest.",
            "    /// @param  _utxoValue       The size of the utxo in sat.",
            "    /// @param  _redeemerOutputScript The redeemer's length-prefixed output script.",
            "    /// @param  _requestedFee   The requester or bump-system specified fee.",
            "    /// @param  _outpoint       The 36 byte outpoint.",
            "    /// @return                 True if successful, else revert.",
            "    "
        ],
        "comt": "\n    /// @notice                 Fires a RedemptionRequested event.\n    /// @dev                    This is the only event without an explicit timestamp.\n    /// @param  _requester      The ethereum address of the requester.\n    /// @param  _digest         The calculated sighash digest.\n    /// @param  _utxoValue       The size of the utxo in sat.\n    /// @param  _redeemerOutputScript The redeemer's length-prefixed output script.\n    /// @param  _requestedFee   The requester or bump-system specified fee.\n    /// @param  _outpoint       The 36 byte outpoint.\n    /// @return                 True if successful, else revert.\n    ",
        "@notice": "Fires a RedemptionRequested event.",
        "@dev": "This is the only event without an explicit timestamp.",
        "@param1": "_requester The ethereum address of the requester.",
        "@param2": "_digest The calculated sighash digest.",
        "@param3": "_utxoValue The size of the utxo in sat.",
        "@param4": "_redeemerOutputScript The redeemer's length-prefixed output script.",
        "@param5": "_requestedFee The requester or bump-system specified fee.",
        "@param6": "_outpoint The 36 byte outpoint.",
        "@return1": "True if successful, else revert.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logGotRedemptionSignature",
        "visibility": "external",
        "args": [
            {
                "name": "_digest",
                "type": "bytes32"
            },
            {
                "name": "_r",
                "type": "bytes32"
            },
            {
                "name": "_s",
                "type": "bytes32"
            }
        ],
        "func": "function logGotRedemptionSignature(bytes32 _digest, bytes32 _r, bytes32 _s)\n        external\n    {\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit GotRedemptionSignature(\n            msg.sender,\n            _digest,\n            _r,\n            _s,\n            block.timestamp\n        );\n    }",
        "comments": [
            "",
            "    /// @notice         Fires a GotRedemptionSignature event.",
            "    /// @dev            We append the sender, which is the deposit contract that called.",
            "    /// @param  _digest signed digest.",
            "    /// @param  _r      signature r value.",
            "    /// @param  _s      signature s value.",
            "    "
        ],
        "comt": "\n    /// @notice         Fires a GotRedemptionSignature event.\n    /// @dev            We append the sender, which is the deposit contract that called.\n    /// @param  _digest signed digest.\n    /// @param  _r      signature r value.\n    /// @param  _s      signature s value.\n    ",
        "@notice": "Fires a GotRedemptionSignature event.",
        "@dev": "We append the sender, which is the deposit contract that called.",
        "@param1": "_digest signed digest.",
        "@param2": "_r signature r value.",
        "@param3": "_s signature s value.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logRegisteredPubkey",
        "visibility": "external",
        "args": [
            {
                "name": "_signingGroupPubkeyX",
                "type": "bytes32"
            },
            {
                "name": "_signingGroupPubkeyY",
                "type": "bytes32"
            }
        ],
        "func": "function logRegisteredPubkey(\n        bytes32 _signingGroupPubkeyX,\n        bytes32 _signingGroupPubkeyY\n    ) external {\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit RegisteredPubkey(\n            msg.sender,\n            _signingGroupPubkeyX,\n            _signingGroupPubkeyY,\n            block.timestamp\n        );\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a RegisteredPubkey event.",
            "    /// @dev        We append the sender, which is the deposit contract that called.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a RegisteredPubkey event.\n    /// @dev        We append the sender, which is the deposit contract that called.\n    ",
        "@notice": "Fires a RegisteredPubkey event.",
        "@dev": "We append the sender, which is the deposit contract that called.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logSetupFailed",
        "visibility": "external",
        "args": [],
        "func": "function logSetupFailed() external {\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit SetupFailed(msg.sender, block.timestamp);\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a SetupFailed event.",
            "    /// @dev        We append the sender, which is the deposit contract that called.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a SetupFailed event.\n    /// @dev        We append the sender, which is the deposit contract that called.\n    ",
        "@notice": "Fires a SetupFailed event.",
        "@dev": "We append the sender, which is the deposit contract that called.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logFunderRequestedAbort",
        "visibility": "public",
        "args": [
            {
                "name": "_abortOutputScript",
                "type": "bytes memory"
            }
        ],
        "func": "function logFunderRequestedAbort(bytes memory _abortOutputScript) public {\n        // not external to allow bytes memory parameters\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit FunderAbortRequested(msg.sender, _abortOutputScript);\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a FunderAbortRequested event.",
            "    /// @dev        We append the sender, which is the deposit contract that called.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a FunderAbortRequested event.\n    /// @dev        We append the sender, which is the deposit contract that called.\n    ",
        "@notice": "Fires a FunderAbortRequested event.",
        "@dev": "We append the sender, which is the deposit contract that called.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logFraudDuringSetup",
        "visibility": "external",
        "args": [],
        "func": "function logFraudDuringSetup() external {\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit FraudDuringSetup(msg.sender, block.timestamp);\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a FraudDuringSetup event.",
            "    /// @dev        We append the sender, which is the deposit contract that called.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a FraudDuringSetup event.\n    /// @dev        We append the sender, which is the deposit contract that called.\n    ",
        "@notice": "Fires a FraudDuringSetup event.",
        "@dev": "We append the sender, which is the deposit contract that called.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logFunded",
        "visibility": "external",
        "args": [
            {
                "name": "_txid",
                "type": "bytes32"
            }
        ],
        "func": "function logFunded(bytes32 _txid) external {\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit Funded(msg.sender, _txid, block.timestamp);\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a Funded event.",
            "    /// @dev        We append the sender, which is the deposit contract that called.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a Funded event.\n    /// @dev        We append the sender, which is the deposit contract that called.\n    ",
        "@notice": "Fires a Funded event.",
        "@dev": "We append the sender, which is the deposit contract that called.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logCourtesyCalled",
        "visibility": "external",
        "args": [],
        "func": "function logCourtesyCalled() external {\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit CourtesyCalled(msg.sender, block.timestamp);\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a CourtesyCalled event.",
            "    /// @dev        We append the sender, which is the deposit contract that called.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a CourtesyCalled event.\n    /// @dev        We append the sender, which is the deposit contract that called.\n    ",
        "@notice": "Fires a CourtesyCalled event.",
        "@dev": "We append the sender, which is the deposit contract that called.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logStartedLiquidation",
        "visibility": "external",
        "args": [
            {
                "name": "_wasFraud",
                "type": "bool"
            }
        ],
        "func": "function logStartedLiquidation(bool _wasFraud) external {\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit StartedLiquidation(msg.sender, _wasFraud, block.timestamp);\n    }",
        "comments": [
            "",
            "    /// @notice             Fires a StartedLiquidation event.",
            "    /// @dev                We append the sender, which is the deposit contract that called.",
            "    /// @param _wasFraud    True if liquidating for fraud.",
            "    "
        ],
        "comt": "\n    /// @notice             Fires a StartedLiquidation event.\n    /// @dev                We append the sender, which is the deposit contract that called.\n    /// @param _wasFraud    True if liquidating for fraud.\n    ",
        "@notice": "Fires a StartedLiquidation event.",
        "@dev": "We append the sender, which is the deposit contract that called.",
        "@param1": "_wasFraud True if liquidating for fraud.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logRedeemed",
        "visibility": "external",
        "args": [
            {
                "name": "_txid",
                "type": "bytes32"
            }
        ],
        "func": "function logRedeemed(bytes32 _txid) external {\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit Redeemed(msg.sender, _txid, block.timestamp);\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a Redeemed event",
            "    /// @dev        We append the sender, which is the deposit contract that called.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a Redeemed event\n    /// @dev        We append the sender, which is the deposit contract that called.\n    ",
        "@notice": "Fires a Redeemed event",
        "@dev": "We append the sender, which is the deposit contract that called.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logLiquidated",
        "visibility": "external",
        "args": [],
        "func": "function logLiquidated() external {\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit Liquidated(msg.sender, block.timestamp);\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a Liquidated event",
            "    /// @dev        We append the sender, which is the deposit contract that called.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a Liquidated event\n    /// @dev        We append the sender, which is the deposit contract that called.\n    ",
        "@notice": "Fires a Liquidated event",
        "@dev": "We append the sender, which is the deposit contract that called.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "logExitedCourtesyCall",
        "visibility": "external",
        "args": [],
        "func": "function logExitedCourtesyCall() external {\n        require(\n            approvedToLog(msg.sender),\n            \"Caller is not approved to log events\"\n        );\n        emit ExitedCourtesyCall(msg.sender, block.timestamp);\n    }",
        "comments": [
            "",
            "    /// @notice     Fires a ExitedCourtesyCall event",
            "    /// @dev        We append the sender, which is the deposit contract that called.",
            "    "
        ],
        "comt": "\n    /// @notice     Fires a ExitedCourtesyCall event\n    /// @dev        We append the sender, which is the deposit contract that called.\n    ",
        "@notice": "Fires a ExitedCourtesyCall event",
        "@dev": "We append the sender, which is the deposit contract that called.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approvedToLog",
        "visibility": "public",
        "args": [
            {
                "name": "_caller",
                "type": "address"
            }
        ],
        "func": "function approvedToLog(address _caller) public view returns (bool) {\n        return tbtcDepositToken.exists(uint256(_caller));\n    }",
        "comments": [
            "",
            "    //",
            "    // AUTH",
            "    //",
            "",
            "    /// @notice             Checks if an address is an allowed logger.",
            "    /// @dev                checks tbtcDepositToken to see if the caller represents",
            "    ///                     an existing deposit.",
            "    ///                     We don't require this, so deposits are not bricked if the system borks.",
            "    /// @param  _caller     The address of the calling contract.",
            "    /// @return             True if approved, otherwise false.",
            "    "
        ],
        "comt": "\n    //\n    // AUTH\n    //\n\n    /// @notice             Checks if an address is an allowed logger.\n    /// @dev                checks tbtcDepositToken to see if the caller represents\n    ///                     an existing deposit.\n    ///                     We don't require this, so deposits are not bricked if the system borks.\n    /// @param  _caller     The address of the calling contract.\n    /// @return             True if approved, otherwise false.\n    ",
        "@notice": "Checks if an address is an allowed logger.",
        "@dev": "checks tbtcDepositToken to see if the caller represents /// an existing deposit. /// We don't require this, so deposits are not bricked if the system borks.",
        "@param1": "_caller The address of the calling contract.",
        "@return1": "True if approved, otherwise false.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "external",
        "args": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_tokenId",
                "type": "uint256"
            }
        ],
        "func": "function mint(address _to, uint256 _tokenId) external onlyFactory {\n        _mint(_to, _tokenId);\n    }",
        "comments": [
            "",
            "    /// @dev Mints a new token.",
            "    /// Reverts if the given token ID already exists.",
            "    /// @param _to The address that will own the minted token",
            "    /// @param _tokenId uint256 ID of the token to be minted",
            "    "
        ],
        "comt": "\n    /// @dev Mints a new token.\n    /// Reverts if the given token ID already exists.\n    /// @param _to The address that will own the minted token\n    /// @param _tokenId uint256 ID of the token to be minted\n    ",
        "@dev": "Mints a new token. /// Reverts if the given token ID already exists.",
        "@param1": "_to The address that will own the minted token",
        "@param2": "_tokenId uint256 ID of the token to be minted",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "exists",
        "visibility": "external",
        "args": [
            {
                "name": "_tokenId",
                "type": "uint256"
            }
        ],
        "func": "function exists(uint256 _tokenId) external view returns (bool) {\n        return _exists(_tokenId);\n    }",
        "comments": [
            "",
            "    /// @dev Returns whether the specified token exists.",
            "    /// @param _tokenId uint256 ID of the token to query the existence of.",
            "    /// @return bool whether the token exists.",
            "    "
        ],
        "comt": "\n    /// @dev Returns whether the specified token exists.\n    /// @param _tokenId uint256 ID of the token to query the existence of.\n    /// @return bool whether the token exists.\n    ",
        "@dev": "Returns whether the specified token exists.",
        "@param1": "_tokenId uint256 ID of the token to query the existence of.",
        "@return1": "bool whether the token exists.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approveAndCall",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "ITokenRecipient"
            },
            {
                "name": "_tdtId",
                "type": "uint256"
            },
            {
                "name": "_extraData",
                "type": "bytes memory"
            }
        ],
        "func": "function approveAndCall(\n        ITokenRecipient _spender,\n        uint256 _tdtId,\n        bytes memory _extraData\n    ) public returns (bool) { // not external to allow bytes memory parameters\n        approve(address(_spender), _tdtId);\n        _spender.receiveApproval(msg.sender, _tdtId, address(this), _extraData);\n        return true;\n    }",
        "comments": [
            "",
            "    /// @notice           Allow another address to spend on the caller's behalf.",
            "    ///                   Set allowance for other address and notify.",
            "    ///                   Allows `_spender` to transfer the specified TDT",
            "    ///                   on your behalf and then ping the contract about it.",
            "    /// @dev              The `_spender` should implement the `ITokenRecipient`",
            "    ///                   interface below to receive approval notifications.",
            "    /// @param _spender   `ITokenRecipient`-conforming contract authorized to",
            "    ///        operate on the approved token.",
            "    /// @param _tdtId     The TDT they can spend.",
            "    /// @param _extraData Extra information to send to the approved contract.",
            "    "
        ],
        "comt": "\n    /// @notice           Allow another address to spend on the caller's behalf.\n    ///                   Set allowance for other address and notify.\n    ///                   Allows `_spender` to transfer the specified TDT\n    ///                   on your behalf and then ping the contract about it.\n    /// @dev              The `_spender` should implement the `ITokenRecipient`\n    ///                   interface below to receive approval notifications.\n    /// @param _spender   `ITokenRecipient`-conforming contract authorized to\n    ///        operate on the approved token.\n    /// @param _tdtId     The TDT they can spend.\n    /// @param _extraData Extra information to send to the approved contract.\n    ",
        "@notice": "Allow another address to spend on the caller's behalf. /// Set allowance for other address and notify. /// Allows `_spender` to transfer the specified TDT /// on your behalf and then ping the contract about it.",
        "@dev": "The `_spender` should implement the `ITokenRecipient` /// interface below to receive approval notifications.",
        "@param1": "_spender `ITokenRecipient`-conforming contract authorized to /// operate on the approved token.",
        "@param2": "_tdtId The TDT they can spend.",
        "@param3": "_extraData Extra information to send to the approved contract.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "_factory",
                "type": "address"
            }
        ],
        "func": "function initialize(address _factory) public {\n        require(_factory != address(0), \"Factory cannot be the zero address.\");\n        require(! _initialized, \"Factory can only be initialized once.\");\n\n        _depositFactory = _factory;\n        _initialized = true;\n    }",
        "comments": [
            "",
            "    /// @notice Set the address of the System contract on contract",
            "    ///         initialization.",
            "    /// @dev Since this function is not access-controlled, it should be called",
            "    ///      transactionally with contract instantiation. In cases where a",
            "    ///      regular contract directly inherits from DepositFactoryAuthority,",
            "    ///      that should happen in the constructor. In cases where the inheritor",
            "    ///      is binstead used via a clone factory, the same function that",
            "    ///      creates a new clone should also trigger initialization.",
            "    "
        ],
        "comt": "\n    /// @notice Set the address of the System contract on contract\n    ///         initialization.\n    /// @dev Since this function is not access-controlled, it should be called\n    ///      transactionally with contract instantiation. In cases where a\n    ///      regular contract directly inherits from DepositFactoryAuthority,\n    ///      that should happen in the constructor. In cases where the inheritor\n    ///      is binstead used via a clone factory, the same function that\n    ///      creates a new clone should also trigger initialization.\n    ",
        "@notice": "Set the address of the System contract on contract /// initialization.",
        "@dev": "Since this function is not access-controlled, it should be called /// transactionally with contract instantiation. In cases where a /// regular contract directly inherits from DepositFactoryAuthority, /// that should happen in the constructor. In cases where the inheritor /// is binstead used via a clone factory, the same function that /// creates a new clone should also trigger initialization.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_lotSizeSatoshis",
                "type": "uint64"
            }
        ],
        "func": "function initialize(\n        DepositUtils.Deposit storage _d,\n        uint64 _lotSizeSatoshis\n    ) public {\n        require(_d.tbtcSystem.getAllowNewDeposits(), \"New deposits aren't allowed.\");\n        require(_d.inStart(), \"Deposit setup already requested\");\n\n        _d.lotSizeSatoshis = _lotSizeSatoshis;\n\n        _d.keepSetupFee = _d.tbtcSystem.getNewDepositFeeEstimate();\n\n        // Note: this is a library, and library functions cannot be marked as\n        // payable. Thus, we disable Solium's check that msg.value can only be\n        // used in a payable function---this restriction actually applies to the\n        // caller of this `initialize` function, Deposit.initializeDeposit.\n        /* solium-disable-next-line value-in-payable */\n        _d.keepAddress = _d.tbtcSystem.requestNewKeep.value(msg.value)(\n            _lotSizeSatoshis,\n            TBTCConstants.getDepositTerm()\n        );\n\n        require(_d.fetchBondAmount() >= _d.keepSetupFee, \"Insufficient signer bonds to cover setup fee\");\n\n        _d.signerFeeDivisor = _d.tbtcSystem.getSignerFeeDivisor();\n        _d.undercollateralizedThresholdPercent = _d.tbtcSystem.getUndercollateralizedThresholdPercent();\n        _d.severelyUndercollateralizedThresholdPercent = _d.tbtcSystem.getSeverelyUndercollateralizedThresholdPercent();\n        _d.initialCollateralizedPercent = _d.tbtcSystem.getInitialCollateralizedPercent();\n        _d.signingGroupRequestedAt = block.timestamp;\n\n        _d.setAwaitingSignerSetup();\n        _d.logCreated(_d.keepAddress);\n    }",
        "comments": [
            "",
            "    /// @notice Internally called function to set up a newly created Deposit",
            "    ///         instance. This should not be called by developers, use",
            "    ///         `DepositFactory.createDeposit` to create a new deposit.",
            "    /// @dev If called directly, the transaction will revert since the call will",
            "    ///      be executed on an already set-up instance.",
            "    /// @param _d Deposit storage pointer.",
            "    /// @param _lotSizeSatoshis Lot size in satoshis.",
            "    "
        ],
        "comt": "\n    /// @notice Internally called function to set up a newly created Deposit\n    ///         instance. This should not be called by developers, use\n    ///         `DepositFactory.createDeposit` to create a new deposit.\n    /// @dev If called directly, the transaction will revert since the call will\n    ///      be executed on an already set-up instance.\n    /// @param _d Deposit storage pointer.\n    /// @param _lotSizeSatoshis Lot size in satoshis.\n    ",
        "@notice": "Internally called function to set up a newly created Deposit /// instance. This should not be called by developers, use /// `DepositFactory.createDeposit` to create a new deposit.",
        "@dev": "If called directly, the transaction will revert since the call will /// be executed on an already set-up instance.",
        "@param1": "_d Deposit storage pointer.",
        "@param2": "_lotSizeSatoshis Lot size in satoshis.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "notifySignerSetupFailed",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function notifySignerSetupFailed(DepositUtils.Deposit storage _d) external {\n        require(_d.inAwaitingSignerSetup(), \"Not awaiting setup\");\n        require(\n            block.timestamp > _d.signingGroupRequestedAt.add(TBTCConstants.getSigningGroupFormationTimeout()),\n            \"Signing group formation timeout not yet elapsed\"\n        );\n\n        // refund the deposit owner the cost to create a new Deposit at the time the Deposit was opened.\n        uint256 _seized = _d.seizeSignerBonds();\n\n        if(_seized >= _d.keepSetupFee){\n            /* solium-disable-next-line security/no-send */\n            _d.enableWithdrawal(_d.depositOwner(), _d.keepSetupFee);\n            _d.pushFundsToKeepGroup(_seized.sub(_d.keepSetupFee));\n        }\n\n        _d.setFailedSetup();\n        _d.logSetupFailed();\n\n        fundingTeardown(_d);\n    }",
        "comments": [
            "",
            "    /// @notice     Anyone may notify the contract that signing group setup has timed out.",
            "    /// @param  _d  Deposit storage pointer.",
            "    "
        ],
        "comt": "\n    /// @notice     Anyone may notify the contract that signing group setup has timed out.\n    /// @param  _d  Deposit storage pointer.\n    ",
        "@notice": "Anyone may notify the contract that signing group setup has timed out.",
        "@param1": "_d Deposit storage pointer.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "retrieveSignerPubkey",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function retrieveSignerPubkey(DepositUtils.Deposit storage _d) public {\n        require(_d.inAwaitingSignerSetup(), \"Not currently awaiting signer setup\");\n\n        bytes memory _publicKey = IBondedECDSAKeep(_d.keepAddress).getPublicKey();\n        require(_publicKey.length == 64, \"public key not set or not 64-bytes long\");\n\n        _d.signingGroupPubkeyX = _publicKey.slice(0, 32).toBytes32();\n        _d.signingGroupPubkeyY = _publicKey.slice(32, 32).toBytes32();\n        require(_d.signingGroupPubkeyY != bytes32(0) && _d.signingGroupPubkeyX != bytes32(0), \"Keep returned bad pubkey\");\n        _d.fundingProofTimerStart = block.timestamp;\n\n        _d.setAwaitingBTCFundingProof();\n        _d.logRegisteredPubkey(\n            _d.signingGroupPubkeyX,\n            _d.signingGroupPubkeyY);\n    }",
        "comments": [
            "",
            "    /// @notice             we poll the Keep contract to retrieve our pubkey.",
            "    /// @dev                We store the pubkey as 2 bytestrings, X and Y.",
            "    /// @param  _d          Deposit storage pointer.",
            "    /// @return             True if successful, otherwise revert.",
            "    "
        ],
        "comt": "\n    /// @notice             we poll the Keep contract to retrieve our pubkey.\n    /// @dev                We store the pubkey as 2 bytestrings, X and Y.\n    /// @param  _d          Deposit storage pointer.\n    /// @return             True if successful, otherwise revert.\n    ",
        "@notice": "we poll the Keep contract to retrieve our pubkey.",
        "@dev": "We store the pubkey as 2 bytestrings, X and Y.",
        "@param1": "_d Deposit storage pointer.",
        "@return1": "True if successful, otherwise revert.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "notifyFundingTimedOut",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function notifyFundingTimedOut(DepositUtils.Deposit storage _d) external {\n        require(_d.inAwaitingBTCFundingProof(), \"Funding timeout has not started\");\n        require(\n            block.timestamp > _d.fundingProofTimerStart.add(TBTCConstants.getFundingTimeout()),\n            \"Funding timeout has not elapsed.\"\n        );\n        _d.setFailedSetup();\n        _d.logSetupFailed();\n\n        _d.closeKeep();\n        fundingTeardown(_d);\n    }",
        "comments": [
            "",
            "    /// @notice Anyone may notify the contract that the funder has failed to",
            "    ///         prove that they have sent BTC in time.",
            "    /// @dev This is considered a funder fault, and the funder's payment for",
            "    ///      opening the deposit is not refunded. Reverts if the funding timeout",
            "    ///      has not yet elapsed, or if the deposit is not currently awaiting",
            "    ///      funding proof.",
            "    /// @param _d Deposit storage pointer.",
            "    "
        ],
        "comt": "\n    /// @notice Anyone may notify the contract that the funder has failed to\n    ///         prove that they have sent BTC in time.\n    /// @dev This is considered a funder fault, and the funder's payment for\n    ///      opening the deposit is not refunded. Reverts if the funding timeout\n    ///      has not yet elapsed, or if the deposit is not currently awaiting\n    ///      funding proof.\n    /// @param _d Deposit storage pointer.\n    ",
        "@notice": "Anyone may notify the contract that the funder has failed to /// prove that they have sent BTC in time.",
        "@dev": "This is considered a funder fault, and the funder's payment for /// opening the deposit is not refunded. Reverts if the funding timeout /// has not yet elapsed, or if the deposit is not currently awaiting /// funding proof.",
        "@param1": "_d Deposit storage pointer.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "requestFunderAbort",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_abortOutputScript",
                "type": "bytes memory"
            }
        ],
        "func": "function requestFunderAbort(\n        DepositUtils.Deposit storage _d,\n        bytes memory _abortOutputScript\n    ) public { // not external to allow bytes memory parameters\n        require(\n            _d.inFailedSetup(),\n            \"The deposit has not failed funding\"\n        );\n\n        _d.logFunderRequestedAbort(_abortOutputScript);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "provideFundingECDSAFraudProof",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_v",
                "type": "uint8"
            },
            {
                "name": "_r",
                "type": "bytes32"
            },
            {
                "name": "_s",
                "type": "bytes32"
            },
            {
                "name": "_signedDigest",
                "type": "bytes32"
            },
            {
                "name": "_preimage",
                "type": "bytes memory"
            }
        ],
        "func": "function provideFundingECDSAFraudProof(\n        DepositUtils.Deposit storage _d,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        bytes32 _signedDigest,\n        bytes memory _preimage\n    ) public { // not external to allow bytes memory parameters\n        require(\n            _d.inAwaitingBTCFundingProof(),\n            \"Signer fraud during funding flow only available while awaiting funding\"\n        );\n\n        _d.submitSignatureFraud(_v, _r, _s, _signedDigest, _preimage);\n        _d.logFraudDuringSetup();\n\n        // Allow deposit owner to withdraw seized bonds after contract termination.\n        uint256 _seized = _d.seizeSignerBonds();\n        _d.enableWithdrawal(_d.depositOwner(), _seized);\n\n        fundingFraudTeardown(_d);\n        _d.setFailedSetup();\n        _d.logSetupFailed();\n    }",
        "comments": [
            "",
            "    /// @notice                 Anyone can provide a signature that was not requested to prove fraud during funding.",
            "    /// @dev                    Calls out to the keep to verify if there was fraud.",
            "    /// @param  _d              Deposit storage pointer.",
            "    /// @param  _v              Signature recovery value.",
            "    /// @param  _r              Signature R value.",
            "    /// @param  _s              Signature S value.",
            "    /// @param _signedDigest    The digest signed by the signature vrs tuple.",
            "    /// @param _preimage        The sha256 preimage of the digest.",
            "    /// @return                 True if successful, otherwise revert.",
            "    "
        ],
        "comt": "\n    /// @notice                 Anyone can provide a signature that was not requested to prove fraud during funding.\n    /// @dev                    Calls out to the keep to verify if there was fraud.\n    /// @param  _d              Deposit storage pointer.\n    /// @param  _v              Signature recovery value.\n    /// @param  _r              Signature R value.\n    /// @param  _s              Signature S value.\n    /// @param _signedDigest    The digest signed by the signature vrs tuple.\n    /// @param _preimage        The sha256 preimage of the digest.\n    /// @return                 True if successful, otherwise revert.\n    ",
        "@notice": "Anyone can provide a signature that was not requested to prove fraud during funding.",
        "@dev": "Calls out to the keep to verify if there was fraud.",
        "@param1": "_d Deposit storage pointer.",
        "@param2": "_v Signature recovery value.",
        "@param3": "_r Signature R value.",
        "@param4": "_s Signature S value.",
        "@param5": "_signedDigest The digest signed by the signature vrs tuple.",
        "@param6": "_preimage The sha256 preimage of the digest.",
        "@return1": "True if successful, otherwise revert.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "provideBTCFundingProof",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_txVersion",
                "type": "bytes4"
            },
            {
                "name": "_txInputVector",
                "type": "bytes memory"
            },
            {
                "name": "_txOutputVector",
                "type": "bytes memory"
            },
            {
                "name": "_txLocktime",
                "type": "bytes4"
            },
            {
                "name": "_fundingOutputIndex",
                "type": "uint8"
            },
            {
                "name": "_merkleProof",
                "type": "bytes memory"
            },
            {
                "name": "_txIndexInBlock",
                "type": "uint256"
            },
            {
                "name": "_bitcoinHeaders",
                "type": "bytes memory"
            }
        ],
        "func": "function provideBTCFundingProof(\n        DepositUtils.Deposit storage _d,\n        bytes4 _txVersion,\n        bytes memory _txInputVector,\n        bytes memory _txOutputVector,\n        bytes4 _txLocktime,\n        uint8 _fundingOutputIndex,\n        bytes memory _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes memory _bitcoinHeaders\n    ) public { // not external to allow bytes memory parameters\n\n        require(_d.inAwaitingBTCFundingProof(), \"Not awaiting funding\");\n\n        bytes8 _valueBytes;\n        bytes memory  _utxoOutpoint;\n\n        (_valueBytes, _utxoOutpoint) = _d.validateAndParseFundingSPVProof(\n            _txVersion,\n            _txInputVector,\n            _txOutputVector,\n            _txLocktime,\n            _fundingOutputIndex,\n            _merkleProof,\n            _txIndexInBlock,\n            _bitcoinHeaders\n        );\n\n        // Write down the UTXO info and set to active. Congratulations :)\n        _d.utxoValueBytes = _valueBytes;\n        _d.utxoOutpoint = _utxoOutpoint;\n        _d.fundedAt = block.timestamp;\n\n        bytes32 _txid = abi.encodePacked(_txVersion, _txInputVector, _txOutputVector, _txLocktime).hash256();\n\n        fundingTeardown(_d);\n        _d.setActive();\n        _d.logFunded(_txid);\n    }",
        "comments": [
            "",
            "    /// @notice                     Anyone may notify the deposit of a funding proof to activate the deposit.",
            "    ///                             This is the happy-path of the funding flow. It means that we have succeeded.",
            "    /// @dev                        Takes a pre-parsed transaction and calculates values needed to verify funding.",
            "    /// @param  _d                  Deposit storage pointer.",
            "    /// @param _txVersion           Transaction version number (4-byte LE).",
            "    /// @param _txInputVector       All transaction inputs prepended by the number of inputs encoded as a VarInt, max 0xFC(252) inputs.",
            "    /// @param _txOutputVector      All transaction outputs prepended by the number of outputs encoded as a VarInt, max 0xFC(252) outputs.",
            "    /// @param _txLocktime          Final 4 bytes of the transaction.",
            "    /// @param _fundingOutputIndex  Index of funding output in _txOutputVector (0-indexed).",
            "    /// @param _merkleProof         The merkle proof of transaction inclusion in a block.",
            "    /// @param _txIndexInBlock      Transaction index in the block (0-indexed).",
            "    /// @param _bitcoinHeaders      Single bytestring of 80-byte bitcoin headers, lowest height first.",
            "    "
        ],
        "comt": "\n    /// @notice                     Anyone may notify the deposit of a funding proof to activate the deposit.\n    ///                             This is the happy-path of the funding flow. It means that we have succeeded.\n    /// @dev                        Takes a pre-parsed transaction and calculates values needed to verify funding.\n    /// @param  _d                  Deposit storage pointer.\n    /// @param _txVersion           Transaction version number (4-byte LE).\n    /// @param _txInputVector       All transaction inputs prepended by the number of inputs encoded as a VarInt, max 0xFC(252) inputs.\n    /// @param _txOutputVector      All transaction outputs prepended by the number of outputs encoded as a VarInt, max 0xFC(252) outputs.\n    /// @param _txLocktime          Final 4 bytes of the transaction.\n    /// @param _fundingOutputIndex  Index of funding output in _txOutputVector (0-indexed).\n    /// @param _merkleProof         The merkle proof of transaction inclusion in a block.\n    /// @param _txIndexInBlock      Transaction index in the block (0-indexed).\n    /// @param _bitcoinHeaders      Single bytestring of 80-byte bitcoin headers, lowest height first.\n    ",
        "@notice": "Anyone may notify the deposit of a funding proof to activate the deposit. /// This is the happy-path of the funding flow. It means that we have succeeded.",
        "@dev": "Takes a pre-parsed transaction and calculates values needed to verify funding.",
        "@param1": "_d Deposit storage pointer.",
        "@param2": "_txVersion Transaction version number (4-byte LE).",
        "@param3": "_txInputVector All transaction inputs prepended by the number of inputs encoded as a VarInt, max 0xFC(252) inputs.",
        "@param4": "_txOutputVector All transaction outputs prepended by the number of outputs encoded as a VarInt, max 0xFC(252) outputs.",
        "@param5": "_txLocktime Final 4 bytes of the transaction.",
        "@param6": "_fundingOutputIndex Index of funding output in _txOutputVector (0-indexed).",
        "@param7": "_merkleProof The merkle proof of transaction inclusion in a block.",
        "@param8": "_txIndexInBlock Transaction index in the block (0-indexed).",
        "@param9": "_bitcoinHeaders Single bytestring of 80-byte bitcoin headers, lowest height first.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferAndRequestRedemption",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_outputValueBytes",
                "type": "bytes8"
            },
            {
                "name": "_redeemerOutputScript",
                "type": "bytes memory"
            },
            {
                "name": "_finalRecipient",
                "type": "address payable"
            }
        ],
        "func": "function transferAndRequestRedemption(\n        DepositUtils.Deposit storage _d,\n        bytes8 _outputValueBytes,\n        bytes memory _redeemerOutputScript,\n        address payable _finalRecipient\n    ) public { // not external to allow bytes memory parameters\n        _d.tbtcDepositToken.transferFrom(msg.sender, _finalRecipient, uint256(address(this)));\n\n        _requestRedemption(_d, _outputValueBytes, _redeemerOutputScript, _finalRecipient);\n    }",
        "comments": [
            "",
            "    /// @notice                     Anyone can request redemption as long as they can.",
            "    ///                             approve the TDT transfer to the final recipient.",
            "    /// @dev                        The redeemer specifies details about the Bitcoin redemption tx and pays for the redemption",
            "    ///                             on behalf of _finalRecipient.",
            "    /// @param  _d                  Deposit storage pointer.",
            "    /// @param  _outputValueBytes   The 8-byte LE output size.",
            "    /// @param  _redeemerOutputScript The redeemer's length-prefixed output script.",
            "    /// @param  _finalRecipient     The address to receive the TDT and later be recorded as deposit redeemer.",
            "    "
        ],
        "comt": "\n    /// @notice                     Anyone can request redemption as long as they can.\n    ///                             approve the TDT transfer to the final recipient.\n    /// @dev                        The redeemer specifies details about the Bitcoin redemption tx and pays for the redemption\n    ///                             on behalf of _finalRecipient.\n    /// @param  _d                  Deposit storage pointer.\n    /// @param  _outputValueBytes   The 8-byte LE output size.\n    /// @param  _redeemerOutputScript The redeemer's length-prefixed output script.\n    /// @param  _finalRecipient     The address to receive the TDT and later be recorded as deposit redeemer.\n    ",
        "@notice": "Anyone can request redemption as long as they can. /// approve the TDT transfer to the final recipient.",
        "@dev": "The redeemer specifies details about the Bitcoin redemption tx and pays for the redemption /// on behalf of _finalRecipient.",
        "@param1": "_d Deposit storage pointer.",
        "@param2": "_outputValueBytes The 8-byte LE output size.",
        "@param3": "_redeemerOutputScript The redeemer's length-prefixed output script.",
        "@param4": "_finalRecipient The address to receive the TDT and later be recorded as deposit redeemer.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "requestRedemption",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_outputValueBytes",
                "type": "bytes8"
            },
            {
                "name": "_redeemerOutputScript",
                "type": "bytes memory"
            }
        ],
        "func": "function requestRedemption(\n        DepositUtils.Deposit storage _d,\n        bytes8 _outputValueBytes,\n        bytes memory _redeemerOutputScript\n    ) public { // not external to allow bytes memory parameters\n        _requestRedemption(_d, _outputValueBytes, _redeemerOutputScript, msg.sender);\n    }",
        "comments": [
            "",
            "    /// @notice                     Only TDT holder can request redemption,",
            "    ///                             unless Deposit is expired or in COURTESY_CALL.",
            "    /// @dev                        The redeemer specifies details about the Bitcoin redemption transaction.",
            "    /// @param  _d                  Deposit storage pointer.",
            "    /// @param  _outputValueBytes   The 8-byte LE output size.",
            "    /// @param  _redeemerOutputScript The redeemer's length-prefixed output script.",
            "    "
        ],
        "comt": "\n    /// @notice                     Only TDT holder can request redemption,\n    ///                             unless Deposit is expired or in COURTESY_CALL.\n    /// @dev                        The redeemer specifies details about the Bitcoin redemption transaction.\n    /// @param  _d                  Deposit storage pointer.\n    /// @param  _outputValueBytes   The 8-byte LE output size.\n    /// @param  _redeemerOutputScript The redeemer's length-prefixed output script.\n    ",
        "@notice": "Only TDT holder can request redemption, /// unless Deposit is expired or in COURTESY_CALL.",
        "@dev": "The redeemer specifies details about the Bitcoin redemption transaction.",
        "@param1": "_d Deposit storage pointer.",
        "@param2": "_outputValueBytes The 8-byte LE output size.",
        "@param3": "_redeemerOutputScript The redeemer's length-prefixed output script.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "provideRedemptionSignature",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_v",
                "type": "uint8"
            },
            {
                "name": "_r",
                "type": "bytes32"
            },
            {
                "name": "_s",
                "type": "bytes32"
            }
        ],
        "func": "function provideRedemptionSignature(\n        DepositUtils.Deposit storage _d,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external {\n        require(_d.inAwaitingWithdrawalSignature(), \"Not currently awaiting a signature\");\n\n        // If we're outside of the signature window, we COULD punish signers here\n        // Instead, we consider this a no-harm-no-foul situation.\n        // The signers have not stolen funds. Most likely they've just inconvenienced someone\n\n        // Validate `s` value for a malleability concern described in EIP-2.\n        // Only signatures with `s` value in the lower half of the secp256k1\n        // curve's order are considered valid.\n        require(\n            uint256(_s) <=\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"Malleable signature - s should be in the low half of secp256k1 curve's order\"\n        );\n\n        // The signature must be valid on the pubkey\n        require(\n            _d.signerPubkey().checkSig(\n                _d.lastRequestedDigest,\n                _v, _r, _s\n            ),\n            \"Invalid signature\"\n        );\n\n        // A signature has been provided, now we wait for fee bump or redemption\n        _d.setAwaitingWithdrawalProof();\n        _d.logGotRedemptionSignature(\n            _d.lastRequestedDigest,\n            _r,\n            _s);\n\n    }",
        "comments": [
            "",
            "    /// @notice     Anyone may provide a withdrawal signature if it was requested.",
            "    /// @dev        The signers will be penalized if this (or provideRedemptionProof) is not called.",
            "    /// @param  _d  Deposit storage pointer.",
            "    /// @param  _v  Signature recovery value.",
            "    /// @param  _r  Signature R value.",
            "    /// @param  _s  Signature S value. Should be in the low half of secp256k1 curve's order.",
            "    "
        ],
        "comt": "\n    /// @notice     Anyone may provide a withdrawal signature if it was requested.\n    /// @dev        The signers will be penalized if this (or provideRedemptionProof) is not called.\n    /// @param  _d  Deposit storage pointer.\n    /// @param  _v  Signature recovery value.\n    /// @param  _r  Signature R value.\n    /// @param  _s  Signature S value. Should be in the low half of secp256k1 curve's order.\n    ",
        "@notice": "Anyone may provide a withdrawal signature if it was requested.",
        "@dev": "The signers will be penalized if this (or provideRedemptionProof) is not called.",
        "@param1": "_d Deposit storage pointer.",
        "@param2": "_v Signature recovery value.",
        "@param3": "_r Signature R value.",
        "@param4": "_s Signature S value. Should be in the low half of secp256k1 curve's order.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseRedemptionFee",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_previousOutputValueBytes",
                "type": "bytes8"
            },
            {
                "name": "_newOutputValueBytes",
                "type": "bytes8"
            }
        ],
        "func": "function increaseRedemptionFee(\n        DepositUtils.Deposit storage _d,\n        bytes8 _previousOutputValueBytes,\n        bytes8 _newOutputValueBytes\n    ) public {\n        require(_d.inAwaitingWithdrawalProof(), \"Fee increase only available after signature provided\");\n        require(block.timestamp >= _d.withdrawalRequestTime.add(TBTCConstants.getIncreaseFeeTimer()), \"Fee increase not yet permitted\");\n\n        uint256 _newOutputValue = checkRelationshipToPrevious(_d, _previousOutputValueBytes, _newOutputValueBytes);\n\n        // If the fee bump shrinks the UTXO value below the minimum allowed\n        // value, clamp it to that minimum. Further fee bumps will be disallowed\n        // by checkRelationshipToPrevious.\n        if (_newOutputValue < TBTCConstants.getMinimumUtxoValue()) {\n            _newOutputValue = TBTCConstants.getMinimumUtxoValue();\n        }\n\n        _d.latestRedemptionFee = _d.utxoValue().sub(_newOutputValue);\n\n        // Calculate the next sighash\n        bytes32 _sighash = CheckBitcoinSigs.wpkhSpendSighash(\n            _d.utxoOutpoint,\n            _d.signerPKH(),\n            _d.utxoValueBytes,\n            _newOutputValueBytes,\n            _d.redeemerOutputScript);\n\n        // Ratchet the signature and redemption proof timeouts\n        _d.withdrawalRequestTime = block.timestamp;\n        _d.lastRequestedDigest = _sighash;\n\n        approveDigest(_d, _sighash);\n\n        // Go back to waiting for a signature\n        _d.setAwaitingWithdrawalSignature();\n        _d.logRedemptionRequested(\n            msg.sender,\n            _sighash,\n            _d.utxoValue(),\n            _d.redeemerOutputScript,\n            _d.latestRedemptionFee,\n            _d.utxoOutpoint);\n    }",
        "comments": [
            "",
            "    /// @notice                             Anyone may notify the contract that a fee bump is needed.",
            "    /// @dev                                This sends us back to AWAITING_WITHDRAWAL_SIGNATURE.",
            "    /// @param  _d                          Deposit storage pointer.",
            "    /// @param  _previousOutputValueBytes   The previous output's value.",
            "    /// @param  _newOutputValueBytes        The new output's value.",
            "    "
        ],
        "comt": "\n    /// @notice                             Anyone may notify the contract that a fee bump is needed.\n    /// @dev                                This sends us back to AWAITING_WITHDRAWAL_SIGNATURE.\n    /// @param  _d                          Deposit storage pointer.\n    /// @param  _previousOutputValueBytes   The previous output's value.\n    /// @param  _newOutputValueBytes        The new output's value.\n    ",
        "@notice": "Anyone may notify the contract that a fee bump is needed.",
        "@dev": "This sends us back to AWAITING_WITHDRAWAL_SIGNATURE.",
        "@param1": "_d Deposit storage pointer.",
        "@param2": "_previousOutputValueBytes The previous output's value.",
        "@param3": "_newOutputValueBytes The new output's value.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "checkRelationshipToPrevious",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_previousOutputValueBytes",
                "type": "bytes8"
            },
            {
                "name": "_newOutputValueBytes",
                "type": "bytes8"
            }
        ],
        "func": "function checkRelationshipToPrevious(\n        DepositUtils.Deposit storage _d,\n        bytes8 _previousOutputValueBytes,\n        bytes8 _newOutputValueBytes\n    ) public view returns (uint256 _newOutputValue){\n\n        // Check that we're incrementing the fee by exactly the redeemer's initial fee\n        uint256 _previousOutputValue = DepositUtils.bytes8LEToUint(_previousOutputValueBytes);\n        _newOutputValue = DepositUtils.bytes8LEToUint(_newOutputValueBytes);\n        require(_previousOutputValue.sub(_newOutputValue) == _d.initialRedemptionFee, \"Not an allowed fee step\");\n\n        // Calculate the previous one so we can check that it really is the previous one\n        bytes32 _previousSighash = CheckBitcoinSigs.wpkhSpendSighash(\n            _d.utxoOutpoint,\n            _d.signerPKH(),\n            _d.utxoValueBytes,\n            _previousOutputValueBytes,\n            _d.redeemerOutputScript);\n        require(\n            _d.wasDigestApprovedForSigning(_previousSighash) == _d.withdrawalRequestTime,\n            \"Provided previous value does not yield previous sighash\"\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "provideRedemptionProof",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_txVersion",
                "type": "bytes4"
            },
            {
                "name": "_txInputVector",
                "type": "bytes memory"
            },
            {
                "name": "_txOutputVector",
                "type": "bytes memory"
            },
            {
                "name": "_txLocktime",
                "type": "bytes4"
            },
            {
                "name": "_merkleProof",
                "type": "bytes memory"
            },
            {
                "name": "_txIndexInBlock",
                "type": "uint256"
            },
            {
                "name": "_bitcoinHeaders",
                "type": "bytes memory"
            }
        ],
        "func": "function provideRedemptionProof(\n        DepositUtils.Deposit storage _d,\n        bytes4 _txVersion,\n        bytes memory _txInputVector,\n        bytes memory _txOutputVector,\n        bytes4 _txLocktime,\n        bytes memory _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes memory _bitcoinHeaders\n    ) public { // not external to allow bytes memory parameters\n        bytes32 _txid;\n        uint256 _fundingOutputValue;\n\n        require(_d.inRedemption(), \"Redemption proof only allowed from redemption flow\");\n\n        _fundingOutputValue = redemptionTransactionChecks(_d, _txInputVector, _txOutputVector);\n\n        _txid = abi.encodePacked(_txVersion, _txInputVector, _txOutputVector, _txLocktime).hash256();\n        _d.checkProofFromTxId(_txid, _merkleProof, _txIndexInBlock, _bitcoinHeaders);\n\n        require((_d.utxoValue().sub(_fundingOutputValue)) <= _d.latestRedemptionFee, \"Incorrect fee amount\");\n\n        // Transfer TBTC to signers and close the keep.\n        distributeSignerFee(_d);\n        _d.closeKeep();\n\n        _d.distributeFeeRebate();\n\n        // We're done yey!\n        _d.setRedeemed();\n        _d.redemptionTeardown();\n        _d.logRedeemed(_txid);\n    }",
        "comments": [
            "",
            "    /// @notice                 Anyone may provide a withdrawal proof to prove redemption.",
            "    /// @dev                    The signers will be penalized if this is not called.",
            "    /// @param  _d              Deposit storage pointer.",
            "    /// @param  _txVersion      Transaction version number (4-byte LE).",
            "    /// @param  _txInputVector  All transaction inputs prepended by the number of inputs encoded as a VarInt, max 0xFC(252) inputs.",
            "    /// @param  _txOutputVector All transaction outputs prepended by the number of outputs encoded as a VarInt, max 0xFC(252) outputs.",
            "    /// @param  _txLocktime     Final 4 bytes of the transaction.",
            "    /// @param  _merkleProof    The merkle proof of inclusion of the tx in the bitcoin block.",
            "    /// @param  _txIndexInBlock The index of the tx in the Bitcoin block (0-indexed).",
            "    /// @param  _bitcoinHeaders An array of tightly-packed bitcoin headers.",
            "    "
        ],
        "comt": "\n    /// @notice                 Anyone may provide a withdrawal proof to prove redemption.\n    /// @dev                    The signers will be penalized if this is not called.\n    /// @param  _d              Deposit storage pointer.\n    /// @param  _txVersion      Transaction version number (4-byte LE).\n    /// @param  _txInputVector  All transaction inputs prepended by the number of inputs encoded as a VarInt, max 0xFC(252) inputs.\n    /// @param  _txOutputVector All transaction outputs prepended by the number of outputs encoded as a VarInt, max 0xFC(252) outputs.\n    /// @param  _txLocktime     Final 4 bytes of the transaction.\n    /// @param  _merkleProof    The merkle proof of inclusion of the tx in the bitcoin block.\n    /// @param  _txIndexInBlock The index of the tx in the Bitcoin block (0-indexed).\n    /// @param  _bitcoinHeaders An array of tightly-packed bitcoin headers.\n    ",
        "@notice": "Anyone may provide a withdrawal proof to prove redemption.",
        "@dev": "The signers will be penalized if this is not called.",
        "@param1": "_d Deposit storage pointer.",
        "@param2": "_txVersion Transaction version number (4-byte LE).",
        "@param3": "_txInputVector All transaction inputs prepended by the number of inputs encoded as a VarInt, max 0xFC(252) inputs.",
        "@param4": "_txOutputVector All transaction outputs prepended by the number of outputs encoded as a VarInt, max 0xFC(252) outputs.",
        "@param5": "_txLocktime Final 4 bytes of the transaction.",
        "@param6": "_merkleProof The merkle proof of inclusion of the tx in the bitcoin block.",
        "@param7": "_txIndexInBlock The index of the tx in the Bitcoin block (0-indexed).",
        "@param8": "_bitcoinHeaders An array of tightly-packed bitcoin headers.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "redemptionTransactionChecks",
        "visibility": "public",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            },
            {
                "name": "_txInputVector",
                "type": "bytes memory"
            },
            {
                "name": "_txOutputVector",
                "type": "bytes memory"
            }
        ],
        "func": "function redemptionTransactionChecks(\n        DepositUtils.Deposit storage _d,\n        bytes memory _txInputVector,\n        bytes memory _txOutputVector\n    ) public view returns (uint256) {\n        require(_txInputVector.validateVin(), \"invalid input vector provided\");\n        require(_txOutputVector.validateVout(), \"invalid output vector provided\");\n        bytes memory _input = _txInputVector.slice(1, _txInputVector.length-1);\n\n        require(\n            keccak256(_input.extractOutpoint()) == keccak256(_d.utxoOutpoint),\n            \"Tx spends the wrong UTXO\"\n        );\n\n        bytes memory _output = _txOutputVector.slice(1, _txOutputVector.length-1);\n        bytes memory _expectedOutputScript = _d.redeemerOutputScript;\n        require(_output.length - 8 >= _d.redeemerOutputScript.length, \"Output script is too short to extract the expected script\");\n        require(\n            keccak256(_output.slice(8, _expectedOutputScript.length)) == keccak256(_expectedOutputScript),\n            \"Tx sends value to wrong output script\"\n        );\n        return (uint256(_output.extractValue()));\n    }",
        "comments": [
            "",
            "    /// @notice                 Check the redemption transaction input and output vector to ensure the transaction spends",
            "    ///                         the correct UTXO and sends value to the appropriate public key hash.",
            "    /// @dev                    We only look at the first input and first output. Revert if we find the wrong UTXO or value recipient.",
            "    ///                         It's safe to look at only the first input/output as anything that breaks this can be considered fraud",
            "    ///                         and can be caught by ECDSAFraudProof.",
            "    /// @param  _d              Deposit storage pointer.",
            "    /// @param _txInputVector   All transaction inputs prepended by the number of inputs encoded as a VarInt, max 0xFC(252) inputs.",
            "    /// @param _txOutputVector  All transaction outputs prepended by the number of outputs encoded as a VarInt, max 0xFC(252) outputs.",
            "    /// @return                 The value sent to the redeemer's public key hash.",
            "    "
        ],
        "comt": "\n    /// @notice                 Check the redemption transaction input and output vector to ensure the transaction spends\n    ///                         the correct UTXO and sends value to the appropriate public key hash.\n    /// @dev                    We only look at the first input and first output. Revert if we find the wrong UTXO or value recipient.\n    ///                         It's safe to look at only the first input/output as anything that breaks this can be considered fraud\n    ///                         and can be caught by ECDSAFraudProof.\n    /// @param  _d              Deposit storage pointer.\n    /// @param _txInputVector   All transaction inputs prepended by the number of inputs encoded as a VarInt, max 0xFC(252) inputs.\n    /// @param _txOutputVector  All transaction outputs prepended by the number of outputs encoded as a VarInt, max 0xFC(252) outputs.\n    /// @return                 The value sent to the redeemer's public key hash.\n    ",
        "@notice": "Check the redemption transaction input and output vector to ensure the transaction spends /// the correct UTXO and sends value to the appropriate public key hash.",
        "@dev": "We only look at the first input and first output. Revert if we find the wrong UTXO or value recipient. /// It's safe to look at only the first input/output as anything that breaks this can be considered fraud /// and can be caught by ECDSAFraudProof.",
        "@param1": "_d Deposit storage pointer.",
        "@param2": "_txInputVector All transaction inputs prepended by the number of inputs encoded as a VarInt, max 0xFC(252) inputs.",
        "@param3": "_txOutputVector All transaction outputs prepended by the number of outputs encoded as a VarInt, max 0xFC(252) outputs.",
        "@return1": "The value sent to the redeemer's public key hash.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "notifyRedemptionSignatureTimedOut",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function notifyRedemptionSignatureTimedOut(DepositUtils.Deposit storage _d) external {\n        require(_d.inAwaitingWithdrawalSignature(), \"Not currently awaiting a signature\");\n        require(block.timestamp > _d.withdrawalRequestTime.add(TBTCConstants.getSignatureTimeout()), \"Signature timer has not elapsed\");\n        _d.startLiquidation(false);  // not fraud, just failure\n    }",
        "comments": [
            "",
            "    /// @notice     Anyone may notify the contract that the signers have failed to produce a signature.",
            "    /// @dev        This is considered fraud, and is punished.",
            "    /// @param  _d  Deposit storage pointer.",
            "    "
        ],
        "comt": "\n    /// @notice     Anyone may notify the contract that the signers have failed to produce a signature.\n    /// @dev        This is considered fraud, and is punished.\n    /// @param  _d  Deposit storage pointer.\n    ",
        "@notice": "Anyone may notify the contract that the signers have failed to produce a signature.",
        "@dev": "This is considered fraud, and is punished.",
        "@param1": "_d Deposit storage pointer.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "notifyRedemptionProofTimedOut",
        "visibility": "external",
        "args": [
            {
                "name": "_d",
                "type": "DepositUtils.Deposit storage"
            }
        ],
        "func": "function notifyRedemptionProofTimedOut(DepositUtils.Deposit storage _d) external {\n        require(_d.inAwaitingWithdrawalProof(), \"Not currently awaiting a redemption proof\");\n        require(block.timestamp > _d.withdrawalRequestTime.add(TBTCConstants.getRedemptionProofTimeout()), \"Proof timer has not elapsed\");\n        _d.startLiquidation(false);  // not fraud, just failure\n    }",
        "comments": [
            "",
            "    /// @notice     Anyone may notify the contract that the signers have failed to produce a redemption proof.",
            "    /// @dev        This is considered fraud, and is punished.",
            "    /// @param  _d  Deposit storage pointer.",
            "    "
        ],
        "comt": "\n    /// @notice     Anyone may notify the contract that the signers have failed to produce a redemption proof.\n    /// @dev        This is considered fraud, and is punished.\n    /// @param  _d  Deposit storage pointer.\n    ",
        "@notice": "Anyone may notify the contract that the signers have failed to produce a redemption proof.",
        "@dev": "This is considered fraud, and is punished.",
        "@param1": "_d Deposit storage pointer.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "external",
        "args": [
            {
                "name": "_tbtcSystemAddress",
                "type": "address"
            },
            {
                "name": "_ETHBTCPriceFeed",
                "type": "IMedianizer"
            }
        ],
        "func": "function initialize(\n        address _tbtcSystemAddress,\n        IMedianizer _ETHBTCPriceFeed\n    )\n        external onlyOwner\n    {\n        require(!_initialized, \"Already initialized.\");\n        tbtcSystemAddress = _tbtcSystemAddress;\n        ethBtcFeeds.push(_ETHBTCPriceFeed);\n        _initialized = true;\n    }",
        "comments": [
            "",
            "    /// @notice Initialises the addresses of the ETHBTC price feeds.",
            "    /// @param _tbtcSystemAddress Address of the `TBTCSystem` contract. Used for access control.",
            "    /// @param _ETHBTCPriceFeed The ETHBTC price feed address.",
            "    "
        ],
        "comt": "\n    /// @notice Initialises the addresses of the ETHBTC price feeds.\n    /// @param _tbtcSystemAddress Address of the `TBTCSystem` contract. Used for access control.\n    /// @param _ETHBTCPriceFeed The ETHBTC price feed address.\n    ",
        "@notice": "Initialises the addresses of the ETHBTC price feeds.",
        "@param1": "_tbtcSystemAddress Address of the `TBTCSystem` contract. Used for access control.",
        "@param2": "_ETHBTCPriceFeed The ETHBTC price feed address.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPrice",
        "visibility": "external",
        "args": [],
        "func": "function getPrice()\n        external onlyTbtcSystem view returns (uint256)\n    {\n        bool ethBtcActive = false;\n        uint256 ethBtc = 0;\n\n        for(uint i = 0; i < ethBtcFeeds.length; i++){\n            (ethBtc, ethBtcActive) = ethBtcFeeds[i].peek();\n            if(ethBtcActive) {\n                break;\n            }\n        }\n\n        require(ethBtcActive, \"Price feed offline\");\n\n        // convert eth/btc to sat/wei\n        // We typecast down to uint128, because the first 128 bits of\n        // the medianizer value is unrelated to the price.\n        return uint256(10**28).div(uint256(uint128(ethBtc)));\n    }",
        "comments": [
            "",
            "    /// @notice Get the current price of 1 satoshi in wei.",
            "    /// @dev This does not account for any 'Flippening' event.",
            "    /// @return The price of one satoshi in wei.",
            "    "
        ],
        "comt": "\n    /// @notice Get the current price of 1 satoshi in wei.\n    /// @dev This does not account for any 'Flippening' event.\n    /// @return The price of one satoshi in wei.\n    ",
        "@notice": "Get the current price of 1 satoshi in wei.",
        "@dev": "This does not account for any 'Flippening' event.",
        "@return1": "The price of one satoshi in wei.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getWorkingEthBtcFeed",
        "visibility": "external",
        "args": [],
        "func": "function getWorkingEthBtcFeed() external view returns (address){\n        bool ethBtcActive;\n\n        for(uint i = 0; i < ethBtcFeeds.length; i++){\n            (, ethBtcActive) = ethBtcFeeds[i].peek();\n            if(ethBtcActive) {\n                return address(ethBtcFeeds[i]);\n            }\n        }\n        return address(0);\n    }",
        "comments": [
            "",
            "    /// @notice Get the first active Medianizer contract from the ethBtcFeeds array.",
            "    /// @return The address of the first Active Medianizer. address(0) if none found",
            "    "
        ],
        "comt": "\n    /// @notice Get the first active Medianizer contract from the ethBtcFeeds array.\n    /// @return The address of the first Active Medianizer. address(0) if none found\n    ",
        "@notice": "Get the first active Medianizer contract from the ethBtcFeeds array.",
        "@return1": "The address of the first Active Medianizer. address(0) if none found",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addEthBtcFeed",
        "visibility": "external",
        "args": [
            {
                "name": "_newEthBtcFeed",
                "type": "IMedianizer"
            }
        ],
        "func": "function addEthBtcFeed(IMedianizer _newEthBtcFeed) external onlyTbtcSystem {\n        bool ethBtcActive;\n        (, ethBtcActive) = _newEthBtcFeed.peek();\n        require(ethBtcActive, \"Cannot add inactive feed\");\n        ethBtcFeeds.push(_newEthBtcFeed);\n    }",
        "comments": [
            "",
            "    /// @notice Add _newEthBtcFeed to internal ethBtcFeeds array.",
            "    /// @dev IMedianizer must be active in order to add.",
            "    "
        ],
        "comt": "\n    /// @notice Add _newEthBtcFeed to internal ethBtcFeeds array.\n    /// @dev IMedianizer must be active in order to add.\n    ",
        "@notice": "Add _newEthBtcFeed to internal ethBtcFeeds array.",
        "@dev": "IMedianizer must be active in order to add.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "owner",
        "visibility": "public",
        "args": [],
        "func": "function owner() public view returns (address) {\n        return _owner;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the address of the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the address of the current owner.\n     */\n",
        "@dev": "Returns the address of the current owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isOwner",
        "visibility": "public",
        "args": [],
        "func": "function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns true if the caller is the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns true if the caller is the current owner.\n     */\n",
        "@dev": "Returns true if the caller is the current owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceOwnership",
        "visibility": "public",
        "args": [],
        "func": "function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }",
        "comments": [
            "/**",
            "     * @dev Leaves the contract without owner. It will not be possible to call",
            "     * `onlyOwner` functions anymore. Can only be called by the current owner.",
            "     *",
            "     * > Note: Renouncing ownership will leave the contract without an owner,",
            "     * thereby removing any functionality that is only available to the owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * > Note: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n",
        "@dev": "Leaves the contract without owner. It will not be possible to call * `onlyOwner` functions anymore. Can only be called by the current owner. * * > Note: Renouncing ownership will leave the contract without an owner, * thereby removing any functionality that is only available to the owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferOwnership",
        "visibility": "public",
        "args": [
            {
                "name": "newOwner",
                "type": "address"
            }
        ],
        "func": "function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }",
        "comments": [
            "/**",
            "     * @dev Transfers ownership of the contract to a new account (`newOwner`).",
            "     * Can only be called by the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n",
        "@dev": "Transfers ownership of the contract to a new account (`newOwner`). * Can only be called by the current owner.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setExternalAddresses",
        "visibility": "external",
        "args": [
            {
                "name": "_tbtcToken",
                "type": "TBTCToken"
            },
            {
                "name": "_tbtcDepositToken",
                "type": "TBTCDepositToken"
            },
            {
                "name": "_feeRebateToken",
                "type": "FeeRebateToken"
            }
        ],
        "func": "function setExternalAddresses(\n        TBTCToken _tbtcToken,\n        TBTCDepositToken _tbtcDepositToken,\n        FeeRebateToken _feeRebateToken\n    ) external onlyTbtcSystem {\n        tbtcToken = _tbtcToken;\n        tbtcDepositToken = _tbtcDepositToken;\n        feeRebateToken = _feeRebateToken;\n    }",
        "comments": [
            "",
            "    /// @notice Set external contracts needed by the Vending Machine.",
            "    /// @dev    Addresses are used to update the local contract instance.",
            "    /// @param _tbtcToken        TBTCToken contract. More info in `TBTCToken`.",
            "    /// @param _tbtcDepositToken TBTCDepositToken (TDT) contract. More info in `TBTCDepositToken`.",
            "    /// @param _feeRebateToken   FeeRebateToken (FRT) contract. More info in `FeeRebateToken`.",
            "    "
        ],
        "comt": "\n    /// @notice Set external contracts needed by the Vending Machine.\n    /// @dev    Addresses are used to update the local contract instance.\n    /// @param _tbtcToken        TBTCToken contract. More info in `TBTCToken`.\n    /// @param _tbtcDepositToken TBTCDepositToken (TDT) contract. More info in `TBTCDepositToken`.\n    /// @param _feeRebateToken   FeeRebateToken (FRT) contract. More info in `FeeRebateToken`.\n    ",
        "@notice": "Set external contracts needed by the Vending Machine.",
        "@dev": "Addresses are used to update the local contract instance.",
        "@param1": "_tbtcToken TBTCToken contract. More info in `TBTCToken`.",
        "@param2": "_tbtcDepositToken TBTCDepositToken (TDT) contract. More info in `TBTCDepositToken`.",
        "@param3": "_feeRebateToken FeeRebateToken (FRT) contract. More info in `FeeRebateToken`.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "tbtcToTdt",
        "visibility": "external",
        "args": [
            {
                "name": "_tdtId",
                "type": "uint256"
            }
        ],
        "func": "function tbtcToTdt(uint256 _tdtId) external {\n        require(tbtcDepositToken.exists(_tdtId), \"tBTC Deposit Token does not exist\");\n        require(isQualified(address(_tdtId)), \"Deposit must be qualified\");\n\n        uint256 depositValue = Deposit(address(uint160(_tdtId))).lotSizeTbtc();\n        require(tbtcToken.balanceOf(msg.sender) >= depositValue, \"Not enough TBTC for TDT exchange\");\n        tbtcToken.burnFrom(msg.sender, depositValue);\n\n        // TODO do we need the owner check below? transferFrom can be approved for a user, which might be an interesting use case.\n        require(tbtcDepositToken.ownerOf(_tdtId) == address(this), \"Deposit is locked\");\n        tbtcDepositToken.transferFrom(address(this), msg.sender, _tdtId);\n    }",
        "comments": [
            "",
            "    /// @notice Burns TBTC and transfers the tBTC Deposit Token to the caller",
            "    ///         as long as it is qualified.",
            "    /// @dev    We burn the lotSize of the Deposit in order to maintain",
            "    ///         the TBTC supply peg in the Vending Machine. VendingMachine must be approved",
            "    ///         by the caller to burn the required amount.",
            "    /// @param _tdtId ID of tBTC Deposit Token to buy.",
            "    "
        ],
        "comt": "\n    /// @notice Burns TBTC and transfers the tBTC Deposit Token to the caller\n    ///         as long as it is qualified.\n    /// @dev    We burn the lotSize of the Deposit in order to maintain\n    ///         the TBTC supply peg in the Vending Machine. VendingMachine must be approved\n    ///         by the caller to burn the required amount.\n    /// @param _tdtId ID of tBTC Deposit Token to buy.\n    ",
        "@notice": "Burns TBTC and transfers the tBTC Deposit Token to the caller /// as long as it is qualified.",
        "@dev": "We burn the lotSize of the Deposit in order to maintain /// the TBTC supply peg in the Vending Machine. VendingMachine must be approved /// by the caller to burn the required amount.",
        "@param1": "_tdtId ID of tBTC Deposit Token to buy.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "tdtToTbtc",
        "visibility": "public",
        "args": [
            {
                "name": "_tdtId",
                "type": "uint256"
            }
        ],
        "func": "function tdtToTbtc(uint256 _tdtId) public {\n        require(tbtcDepositToken.exists(_tdtId), \"tBTC Deposit Token does not exist\");\n        require(isQualified(address(_tdtId)), \"Deposit must be qualified\");\n\n        tbtcDepositToken.transferFrom(msg.sender, address(this), _tdtId);\n\n        Deposit deposit = Deposit(address(uint160(_tdtId)));\n        uint256 signerFee = deposit.signerFeeTbtc();\n        uint256 depositValue = deposit.lotSizeTbtc();\n\n        require(canMint(depositValue), \"Can't mint more than the max supply cap\");\n\n        // If the backing Deposit does not have a signer fee in escrow, mint it.\n        if(tbtcToken.balanceOf(address(_tdtId)) < signerFee) {\n            tbtcToken.mint(msg.sender, depositValue.sub(signerFee));\n            tbtcToken.mint(address(_tdtId), signerFee);\n        }\n        else{\n            tbtcToken.mint(msg.sender, depositValue);\n        }\n\n        // owner of the TDT during first TBTC mint receives the FRT\n        if(!feeRebateToken.exists(_tdtId)){\n            feeRebateToken.mint(msg.sender, _tdtId);\n        }\n    }",
        "comments": [
            "",
            "    /// @notice Transfer the tBTC Deposit Token and mint TBTC.",
            "    /// @dev    Transfers TDT from caller to vending machine, and mints TBTC to caller.",
            "    ///         Vending Machine must be approved to transfer TDT by the caller.",
            "    /// @param _tdtId ID of tBTC Deposit Token to sell.",
            "    "
        ],
        "comt": "\n    /// @notice Transfer the tBTC Deposit Token and mint TBTC.\n    /// @dev    Transfers TDT from caller to vending machine, and mints TBTC to caller.\n    ///         Vending Machine must be approved to transfer TDT by the caller.\n    /// @param _tdtId ID of tBTC Deposit Token to sell.\n    ",
        "@notice": "Transfer the tBTC Deposit Token and mint TBTC.",
        "@dev": "Transfers TDT from caller to vending machine, and mints TBTC to caller. /// Vending Machine must be approved to transfer TDT by the caller.",
        "@param1": "_tdtId ID of tBTC Deposit Token to sell.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "canMint",
        "visibility": "public",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function canMint(uint256 amount) public view returns (bool) {\n        return getMintedSupply().add(amount) < getMaxSupply();\n    }",
        "comments": [
            "",
            "    /// @notice Return whether an amount of TBTC can be minted according to the supply cap",
            "    ///         schedule",
            "    /// @dev This function is also used by TBTCSystem to decide whether to allow a new deposit.",
            "    /// @return True if the amount can be minted without hitting the max supply, false otherwise.",
            "    "
        ],
        "comt": "\n    /// @notice Return whether an amount of TBTC can be minted according to the supply cap\n    ///         schedule\n    /// @dev This function is also used by TBTCSystem to decide whether to allow a new deposit.\n    /// @return True if the amount can be minted without hitting the max supply, false otherwise.\n    ",
        "@notice": "Return whether an amount of TBTC can be minted according to the supply cap /// schedule",
        "@dev": "This function is also used by TBTCSystem to decide whether to allow a new deposit.",
        "@return1": "True if the amount can be minted without hitting the max supply, false otherwise.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isQualified",
        "visibility": "public",
        "args": [
            {
                "name": "_depositAddress",
                "type": "address payable"
            }
        ],
        "func": "function isQualified(address payable _depositAddress) public view returns (bool) {\n        return Deposit(_depositAddress).inActive();\n    }",
        "comments": [
            "",
            "    /// @notice Determines whether a deposit is qualified for minting TBTC.",
            "    /// @param _depositAddress The address of the deposit",
            "    "
        ],
        "comt": "\n    /// @notice Determines whether a deposit is qualified for minting TBTC.\n    /// @param _depositAddress The address of the deposit\n    ",
        "@notice": "Determines whether a deposit is qualified for minting TBTC.",
        "@param1": "_depositAddress The address of the deposit",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getMintedSupply",
        "visibility": "public",
        "args": [],
        "func": "function getMintedSupply() public view returns (uint256) {\n        return tbtcToken.totalSupply();\n    }",
        "comments": [
            "",
            "    /// @notice Return the minted TBTC supply in weitoshis (BTC * 10 ** 18).",
            "    "
        ],
        "comt": "\n    /// @notice Return the minted TBTC supply in weitoshis (BTC * 10 ** 18).\n    ",
        "@notice": "Return the minted TBTC supply in weitoshis (BTC * 10 ** 18).",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getMaxSupply",
        "visibility": "public",
        "args": [],
        "func": "function getMaxSupply() public view returns (uint256) {\n        uint256 age = block.timestamp - createdAt;\n\n        if(age < 2 days) {\n            return 2 * 10 ** 18;\n        }\n\n        if (age < 7 days) {\n            return 100 * 10 ** 18;\n        }\n\n        if (age < 14 days) {\n            return 250 * 10 ** 18;\n        }\n\n        if (age < 21 days) {\n            return 500 * 10 ** 18;\n        }\n\n        if (age < 28 days) {\n            return 750 * 10 ** 18;\n        }\n\n        if (age < 35 days) {\n            return 1000 * 10 ** 18;\n        }\n\n        if (age < 42 days) {\n            return 1500 * 10 ** 18;\n        }\n\n        if (age < 49 days) {\n            return 2000 * 10 ** 18;\n        }\n\n        if (age < 56 days) {\n            return 2500 * 10 ** 18;\n        }\n\n        if (age < 63 days) {\n            return 3000 * 10 ** 18;\n        }\n\n        return 21e6 * 10 ** 18;\n    }",
        "comments": [
            "",
            "    /// @notice Get the maximum TBTC token supply based on the age of the",
            "    ///         contract deployment. The supply cap starts at 2 BTC for the two",
            "    ///         days, 100 for the first week, 250 for the next, then 500, 750,",
            "    ///         1000, 1500, 2000, 2500, and 3000... finally removing the minting",
            "    ///         restriction after 9 weeks and returning 21M BTC as a sanity",
            "    ///         check.",
            "    /// @return The max supply in weitoshis (BTC * 10 ** 18).",
            "    "
        ],
        "comt": "\n    /// @notice Get the maximum TBTC token supply based on the age of the\n    ///         contract deployment. The supply cap starts at 2 BTC for the two\n    ///         days, 100 for the first week, 250 for the next, then 500, 750,\n    ///         1000, 1500, 2000, 2500, and 3000... finally removing the minting\n    ///         restriction after 9 weeks and returning 21M BTC as a sanity\n    ///         check.\n    /// @return The max supply in weitoshis (BTC * 10 ** 18).\n    ",
        "@notice": "Get the maximum TBTC token supply based on the age of the /// contract deployment. The supply cap starts at 2 BTC for the two /// days, 100 for the first week, 250 for the next, then 500, 750, /// 1000, 1500, 2000, 2500, and 3000... finally removing the minting /// restriction after 9 weeks and returning 21M BTC as a sanity /// check.",
        "@return1": "The max supply in weitoshis (BTC * 10 ** 18).",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "unqualifiedDepositToTbtc",
        "visibility": "public",
        "args": [
            {
                "name": "_depositAddress",
                "type": "address payable"
            },
            {
                "name": "_txVersion",
                "type": "bytes4"
            },
            {
                "name": "_txInputVector",
                "type": "bytes memory"
            },
            {
                "name": "_txOutputVector",
                "type": "bytes memory"
            },
            {
                "name": "_txLocktime",
                "type": "bytes4"
            },
            {
                "name": "_fundingOutputIndex",
                "type": "uint8"
            },
            {
                "name": "_merkleProof",
                "type": "bytes memory"
            },
            {
                "name": "_txIndexInBlock",
                "type": "uint256"
            },
            {
                "name": "_bitcoinHeaders",
                "type": "bytes memory"
            }
        ],
        "func": "function unqualifiedDepositToTbtc(\n        address payable _depositAddress,\n        bytes4 _txVersion,\n        bytes memory _txInputVector,\n        bytes memory _txOutputVector,\n        bytes4 _txLocktime,\n        uint8 _fundingOutputIndex,\n        bytes memory _merkleProof,\n        uint256 _txIndexInBlock,\n        bytes memory _bitcoinHeaders\n    ) public { // not external to allow bytes memory parameters\n        Deposit _d = Deposit(_depositAddress);\n        _d.provideBTCFundingProof(\n            _txVersion,\n            _txInputVector,\n            _txOutputVector,\n            _txLocktime,\n            _fundingOutputIndex,\n            _merkleProof,\n            _txIndexInBlock,\n            _bitcoinHeaders\n        );\n\n        tdtToTbtc(uint256(_depositAddress));\n    }",
        "comments": [
            "",
            "    // WRAPPERS",
            "",
            "    /// @notice Qualifies a deposit and mints TBTC.",
            "    /// @dev User must allow VendingManchine to transfer TDT.",
            "    "
        ],
        "comt": "\n    // WRAPPERS\n\n    /// @notice Qualifies a deposit and mints TBTC.\n    /// @dev User must allow VendingManchine to transfer TDT.\n    ",
        "@notice": "Qualifies a deposit and mints TBTC.",
        "@dev": "User must allow VendingManchine to transfer TDT.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "tbtcToBtc",
        "visibility": "public",
        "args": [
            {
                "name": "_depositAddress",
                "type": "address payable"
            },
            {
                "name": "_outputValueBytes",
                "type": "bytes8"
            },
            {
                "name": "_redeemerOutputScript",
                "type": "bytes memory"
            }
        ],
        "func": "function tbtcToBtc(\n        address payable _depositAddress,\n        bytes8 _outputValueBytes,\n        bytes memory _redeemerOutputScript\n    ) public { // not external to allow bytes memory parameters\n        require(tbtcDepositToken.exists(uint256(_depositAddress)), \"tBTC Deposit Token does not exist\");\n        Deposit _d = Deposit(_depositAddress);\n\n        tbtcToken.burnFrom(msg.sender, _d.lotSizeTbtc());\n        tbtcDepositToken.approve(_depositAddress, uint256(_depositAddress));\n\n        uint256 tbtcOwed = _d.getOwnerRedemptionTbtcRequirement(msg.sender);\n\n        if(tbtcOwed != 0){\n            tbtcToken.transferFrom(msg.sender, address(this), tbtcOwed);\n            tbtcToken.approve(_depositAddress, tbtcOwed);\n        }\n\n        _d.transferAndRequestRedemption(_outputValueBytes, _redeemerOutputScript, msg.sender);\n    }",
        "comments": [
            "",
            "    /// @notice Redeems a Deposit by purchasing a TDT with TBTC for _finalRecipient,",
            "    ///         and using the TDT to redeem corresponding Deposit as _finalRecipient.",
            "    ///         This function will revert if the Deposit is not in ACTIVE state.",
            "    /// @dev Vending Machine transfers TBTC allowance to Deposit.",
            "    /// @param  _depositAddress     The address of the Deposit to redeem.",
            "    /// @param  _outputValueBytes   The 8-byte Bitcoin transaction output size in Little Endian.",
            "    /// @param  _redeemerOutputScript The redeemer's length-prefixed output script.",
            "    "
        ],
        "comt": "\n    /// @notice Redeems a Deposit by purchasing a TDT with TBTC for _finalRecipient,\n    ///         and using the TDT to redeem corresponding Deposit as _finalRecipient.\n    ///         This function will revert if the Deposit is not in ACTIVE state.\n    /// @dev Vending Machine transfers TBTC allowance to Deposit.\n    /// @param  _depositAddress     The address of the Deposit to redeem.\n    /// @param  _outputValueBytes   The 8-byte Bitcoin transaction output size in Little Endian.\n    /// @param  _redeemerOutputScript The redeemer's length-prefixed output script.\n    ",
        "@notice": "Redeems a Deposit by purchasing a TDT with TBTC for _finalRecipient, /// and using the TDT to redeem corresponding Deposit as _finalRecipient. /// This function will revert if the Deposit is not in ACTIVE state.",
        "@dev": "Vending Machine transfers TBTC allowance to Deposit.",
        "@param1": "_depositAddress The address of the Deposit to redeem.",
        "@param2": "_outputValueBytes The 8-byte Bitcoin transaction output size in Little Endian.",
        "@param3": "_redeemerOutputScript The redeemer's length-prefixed output script.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getCurrentEpochDifficulty",
        "visibility": "external",
        "args": [],
        "func": "function getCurrentEpochDifficulty() external view returns (uint256) {\n        return currentEpochDiff;\n    }",
        "comments": [
            "",
            "    /// @notice     Getter for currentEpochDiff",
            "    /// @dev        This is updated when a new heavist header has a new diff",
            "    /// @return     The difficulty of the bestKnownDigest",
            "    "
        ],
        "comt": "\n    /// @notice     Getter for currentEpochDiff\n    /// @dev        This is updated when a new heavist header has a new diff\n    /// @return     The difficulty of the bestKnownDigest\n    ",
        "@notice": "Getter for currentEpochDiff",
        "@dev": "This is updated when a new heavist header has a new diff",
        "@return1": "The difficulty of the bestKnownDigest",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPrevEpochDifficulty",
        "visibility": "external",
        "args": [],
        "func": "function getPrevEpochDifficulty() external view returns (uint256) {\n        return prevEpochDiff;\n    }",
        "comments": [
            "    /// @notice     Getter for prevEpochDiff",
            "    /// @dev        This is updated when a difficulty change is accepted",
            "    /// @return     The difficulty of the previous epoch",
            "    "
        ],
        "comt": "    /// @notice     Getter for prevEpochDiff\n    /// @dev        This is updated when a difficulty change is accepted\n    /// @return     The difficulty of the previous epoch\n    ",
        "@notice": "Getter for prevEpochDiff",
        "@dev": "This is updated when a difficulty change is accepted",
        "@return1": "The difficulty of the previous epoch",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRelayGenesis",
        "visibility": "public",
        "args": [],
        "func": "function getRelayGenesis() public view returns (bytes32) {\n        return relayGenesis;\n    }",
        "comments": [
            "",
            "    /// @notice     Getter for relayGenesis",
            "    /// @dev        This is an initialization parameter",
            "    /// @return     The hash of the first block of the relay",
            "    "
        ],
        "comt": "\n    /// @notice     Getter for relayGenesis\n    /// @dev        This is an initialization parameter\n    /// @return     The hash of the first block of the relay\n    ",
        "@notice": "Getter for relayGenesis",
        "@dev": "This is an initialization parameter",
        "@return1": "The hash of the first block of the relay",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getBestKnownDigest",
        "visibility": "public",
        "args": [],
        "func": "function getBestKnownDigest() public view returns (bytes32) {\n        return bestKnownDigest;\n    }",
        "comments": [
            "",
            "    /// @notice     Getter for bestKnownDigest",
            "    /// @dev        This updated only by calling markNewHeaviest",
            "    /// @return     The hash of the best marked chain tip",
            "    "
        ],
        "comt": "\n    /// @notice     Getter for bestKnownDigest\n    /// @dev        This updated only by calling markNewHeaviest\n    /// @return     The hash of the best marked chain tip\n    ",
        "@notice": "Getter for bestKnownDigest",
        "@dev": "This updated only by calling markNewHeaviest",
        "@return1": "The hash of the best marked chain tip",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getLastReorgCommonAncestor",
        "visibility": "public",
        "args": [],
        "func": "function getLastReorgCommonAncestor() public view returns (bytes32) {\n        return lastReorgCommonAncestor;\n    }",
        "comments": [
            "",
            "    /// @notice     Getter for relayGenesis",
            "    /// @dev        This is updated only by calling markNewHeaviest",
            "    /// @return     The hash of the shared ancestor of the most recent fork",
            "    "
        ],
        "comt": "\n    /// @notice     Getter for relayGenesis\n    /// @dev        This is updated only by calling markNewHeaviest\n    /// @return     The hash of the shared ancestor of the most recent fork\n    ",
        "@notice": "Getter for relayGenesis",
        "@dev": "This is updated only by calling markNewHeaviest",
        "@return1": "The hash of the shared ancestor of the most recent fork",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "findHeight",
        "visibility": "external",
        "args": [
            {
                "name": "_digest",
                "type": "bytes32"
            }
        ],
        "func": "function findHeight(bytes32 _digest) external view returns (uint256) {\n        return _findHeight(_digest);\n    }",
        "comments": [
            "",
            "    /// @notice         Finds the height of a header by its digest",
            "    /// @dev            Will fail if the header is unknown",
            "    /// @param _digest  The header digest to search for",
            "    /// @return         The height of the header, or error if unknown",
            "    "
        ],
        "comt": "\n    /// @notice         Finds the height of a header by its digest\n    /// @dev            Will fail if the header is unknown\n    /// @param _digest  The header digest to search for\n    /// @return         The height of the header, or error if unknown\n    ",
        "@notice": "Finds the height of a header by its digest",
        "@dev": "Will fail if the header is unknown",
        "@param1": "_digest The header digest to search for",
        "@return1": "The height of the header, or error if unknown",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "findAncestor",
        "visibility": "external",
        "args": [
            {
                "name": "_digest",
                "type": "bytes32"
            },
            {
                "name": "_offset",
                "type": "uint256"
            }
        ],
        "func": "function findAncestor(bytes32 _digest, uint256 _offset) external view returns (bytes32) {\n        return _findAncestor(_digest, _offset);\n    }",
        "comments": [
            "",
            "    /// @notice         Finds an ancestor for a block by its digest",
            "    /// @dev            Will fail if the header is unknown",
            "    /// @param _digest  The header digest to search for",
            "    /// @return         The height of the header, or error if unknown",
            "    "
        ],
        "comt": "\n    /// @notice         Finds an ancestor for a block by its digest\n    /// @dev            Will fail if the header is unknown\n    /// @param _digest  The header digest to search for\n    /// @return         The height of the header, or error if unknown\n    ",
        "@notice": "Finds an ancestor for a block by its digest",
        "@dev": "Will fail if the header is unknown",
        "@param1": "_digest The header digest to search for",
        "@return1": "The height of the header, or error if unknown",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isAncestor",
        "visibility": "external",
        "args": [
            {
                "name": "_ancestor",
                "type": "bytes32"
            },
            {
                "name": "_descendant",
                "type": "bytes32"
            },
            {
                "name": "_limit",
                "type": "uint256"
            }
        ],
        "func": "function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view returns (bool) {\n        return _isAncestor(_ancestor, _descendant, _limit);\n    }",
        "comments": [
            "",
            "    /// @notice             Checks if a digest is an ancestor of the current one",
            "    /// @dev                Limit the amount of lookups (and thus gas usage) with _limit",
            "    /// @param _ancestor    The prospective ancestor",
            "    /// @param _descendant  The descendant to check",
            "    /// @param _limit       The maximum number of blocks to check",
            "    /// @return             true if ancestor is at most limit blocks lower than descendant, otherwise false",
            "    "
        ],
        "comt": "\n    /// @notice             Checks if a digest is an ancestor of the current one\n    /// @dev                Limit the amount of lookups (and thus gas usage) with _limit\n    /// @param _ancestor    The prospective ancestor\n    /// @param _descendant  The descendant to check\n    /// @param _limit       The maximum number of blocks to check\n    /// @return             true if ancestor is at most limit blocks lower than descendant, otherwise false\n    ",
        "@notice": "Checks if a digest is an ancestor of the current one",
        "@dev": "Limit the amount of lookups (and thus gas usage) with _limit",
        "@param1": "_ancestor The prospective ancestor",
        "@param2": "_descendant The descendant to check",
        "@param3": "_limit The maximum number of blocks to check",
        "@return1": "true if ancestor is at most limit blocks lower than descendant, otherwise false",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addHeaders",
        "visibility": "external",
        "args": [
            {
                "name": "_anchor",
                "type": "bytes calldata"
            },
            {
                "name": "_headers",
                "type": "bytes calldata"
            }
        ],
        "func": "function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool) {\n        return _addHeaders(_anchor, _headers, false);\n    }",
        "comments": [
            "",
            "    /// @notice             Adds headers to storage after validating",
            "    /// @dev                We check integrity and consistency of the header chain",
            "    /// @param  _anchor     The header immediately preceeding the new chain",
            "    /// @param  _headers    A tightly-packed list of 80-byte Bitcoin headers",
            "    /// @return             True if successfully written, error otherwise",
            "    "
        ],
        "comt": "\n    /// @notice             Adds headers to storage after validating\n    /// @dev                We check integrity and consistency of the header chain\n    /// @param  _anchor     The header immediately preceeding the new chain\n    /// @param  _headers    A tightly-packed list of 80-byte Bitcoin headers\n    /// @return             True if successfully written, error otherwise\n    ",
        "@notice": "Adds headers to storage after validating",
        "@dev": "We check integrity and consistency of the header chain",
        "@param1": "_anchor The header immediately preceeding the new chain",
        "@param2": "_headers A tightly-packed list of 80-byte Bitcoin headers",
        "@return1": "True if successfully written, error otherwise",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addHeadersWithRetarget",
        "visibility": "external",
        "args": [
            {
                "name": "_oldPeriodStartHeader",
                "type": "bytes calldata"
            },
            {
                "name": "_oldPeriodEndHeader",
                "type": "bytes calldata"
            },
            {
                "name": "_headers",
                "type": "bytes calldata"
            }
        ],
        "func": "function addHeadersWithRetarget(\n        bytes calldata _oldPeriodStartHeader,\n        bytes calldata _oldPeriodEndHeader,\n        bytes calldata _headers\n    ) external returns (bool) {\n        return _addHeadersWithRetarget(_oldPeriodStartHeader, _oldPeriodEndHeader, _headers);\n    }",
        "comments": [
            "",
            "    /// @notice                       Adds headers to storage, performs additional validation of retarget",
            "    /// @dev                          Checks the retarget, the heights, and the linkage",
            "    /// @param  _oldPeriodStartHeader The first header in the difficulty period being closed",
            "    /// @param  _oldPeriodEndHeader   The last header in the difficulty period being closed",
            "    /// @param  _headers              A tightly-packed list of 80-byte Bitcoin headers",
            "    /// @return                       True if successfully written, error otherwise",
            "    "
        ],
        "comt": "\n    /// @notice                       Adds headers to storage, performs additional validation of retarget\n    /// @dev                          Checks the retarget, the heights, and the linkage\n    /// @param  _oldPeriodStartHeader The first header in the difficulty period being closed\n    /// @param  _oldPeriodEndHeader   The last header in the difficulty period being closed\n    /// @param  _headers              A tightly-packed list of 80-byte Bitcoin headers\n    /// @return                       True if successfully written, error otherwise\n    ",
        "@notice": "Adds headers to storage, performs additional validation of retarget",
        "@dev": "Checks the retarget, the heights, and the linkage",
        "@param1": "_oldPeriodStartHeader The first header in the difficulty period being closed",
        "@param2": "_oldPeriodEndHeader The last header in the difficulty period being closed",
        "@param3": "_headers A tightly-packed list of 80-byte Bitcoin headers",
        "@return1": "True if successfully written, error otherwise",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "markNewHeaviest",
        "visibility": "external",
        "args": [
            {
                "name": "_ancestor",
                "type": "bytes32"
            },
            {
                "name": "_currentBest",
                "type": "bytes calldata"
            },
            {
                "name": "_newBest",
                "type": "bytes calldata"
            },
            {
                "name": "_limit",
                "type": "uint256"
            }
        ],
        "func": "function markNewHeaviest(\n        bytes32 _ancestor,\n        bytes calldata _currentBest,\n        bytes calldata _newBest,\n        uint256 _limit\n    ) external returns (bool) {\n        return _markNewHeaviest(_ancestor, _currentBest, _newBest, _limit);\n    }",
        "comments": [
            "",
            "    /// @notice                   Gives a starting point for the relay",
            "    /// @dev                      We don't check this AT ALL really. Don't use relays with bad genesis",
            "    /// @param  _ancestor         The digest of the most recent common ancestor",
            "    /// @param  _currentBest      The 80-byte header referenced by bestKnownDigest",
            "    /// @param  _newBest          The 80-byte header to mark as the new best",
            "    /// @param  _limit            Limit the amount of traversal of the chain",
            "    /// @return                   True if successfully updates bestKnownDigest, error otherwise",
            "    "
        ],
        "comt": "\n    /// @notice                   Gives a starting point for the relay\n    /// @dev                      We don't check this AT ALL really. Don't use relays with bad genesis\n    /// @param  _ancestor         The digest of the most recent common ancestor\n    /// @param  _currentBest      The 80-byte header referenced by bestKnownDigest\n    /// @param  _newBest          The 80-byte header to mark as the new best\n    /// @param  _limit            Limit the amount of traversal of the chain\n    /// @return                   True if successfully updates bestKnownDigest, error otherwise\n    ",
        "@notice": "Gives a starting point for the relay",
        "@dev": "We don't check this AT ALL really. Don't use relays with bad genesis",
        "@param1": "_ancestor The digest of the most recent common ancestor",
        "@param2": "_currentBest The 80-byte header referenced by bestKnownDigest",
        "@param3": "_newBest The 80-byte header to mark as the new best",
        "@param4": "_limit Limit the amount of traversal of the chain",
        "@return1": "True if successfully updates bestKnownDigest, error otherwise",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "heaviestFromAncestor",
        "visibility": "external",
        "args": [
            {
                "name": "_ancestor",
                "type": "bytes32"
            },
            {
                "name": "_left",
                "type": "bytes calldata"
            },
            {
                "name": "_right",
                "type": "bytes calldata"
            }
        ],
        "func": "function heaviestFromAncestor(\n        bytes32 _ancestor,\n        bytes calldata _left,\n        bytes calldata _right\n    ) external view returns (bytes32) {\n        return _heaviestFromAncestor(_ancestor, _left, _right);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isMostRecentAncestor",
        "visibility": "external",
        "args": [
            {
                "name": "_ancestor",
                "type": "bytes32"
            },
            {
                "name": "_left",
                "type": "bytes32"
            },
            {
                "name": "_right",
                "type": "bytes32"
            },
            {
                "name": "_limit",
                "type": "uint256"
            }
        ],
        "func": "function isMostRecentAncestor(\n        bytes32 _ancestor,\n        bytes32 _left,\n        bytes32 _right,\n        uint256 _limit\n    ) external view returns (bool) {\n        return _isMostRecentAncestor(_ancestor, _left, _right, _limit);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "_self",
                "type": "Storage storage"
            },
            {
                "name": "_defaultFactory",
                "type": "IBondedECDSAKeepFactory"
            }
        ],
        "func": "function initialize(\n        Storage storage _self,\n        IBondedECDSAKeepFactory _defaultFactory\n    ) public {\n        require(\n            address(_self.keepStakedFactory) == address(0),\n            \"Already initialized\"\n        );\n\n        _self.keepStakedFactory = IBondedECDSAKeepFactory(_defaultFactory);\n        _self.selectedFactory = _self.keepStakedFactory;\n    }",
        "comments": [
            "",
            "    /// @notice Initializes the library with the default KEEP-stake-based",
            "    /// factory. The default factory is guaranteed to be set and this function",
            "    /// must be called when creating contract using this library.",
            "    /// @dev This function can be called only one time.",
            "    "
        ],
        "comt": "\n    /// @notice Initializes the library with the default KEEP-stake-based\n    /// factory. The default factory is guaranteed to be set and this function\n    /// must be called when creating contract using this library.\n    /// @dev This function can be called only one time.\n    ",
        "@notice": "Initializes the library with the default KEEP-stake-based /// factory. The default factory is guaranteed to be set and this function /// must be called when creating contract using this library.",
        "@dev": "This function can be called only one time.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "selectFactory",
        "visibility": "public",
        "args": [
            {
                "name": "_self",
                "type": "Storage storage"
            }
        ],
        "func": "function selectFactory(\n        Storage storage _self\n    ) public view returns (IBondedECDSAKeepFactory) {\n        return _self.selectedFactory;\n    }",
        "comments": [
            "",
            "    /// @notice Returns the selected keep factory.",
            "    /// This function guarantees that the same factory is returned for every",
            "    /// call until selectFactoryAndRefresh is executed. This lets to evaluate",
            "    /// open keep fee estimate on the same factory that will be used later for",
            "    /// opening a new keep (fee estimate and open keep requests are two",
            "    /// separate calls).",
            "    /// @return Selected keep factory. The same vale will be returned for every",
            "    /// call of this function until selectFactoryAndRefresh is executed.",
            "    "
        ],
        "comt": "\n    /// @notice Returns the selected keep factory.\n    /// This function guarantees that the same factory is returned for every\n    /// call until selectFactoryAndRefresh is executed. This lets to evaluate\n    /// open keep fee estimate on the same factory that will be used later for\n    /// opening a new keep (fee estimate and open keep requests are two\n    /// separate calls).\n    /// @return Selected keep factory. The same vale will be returned for every\n    /// call of this function until selectFactoryAndRefresh is executed.\n    ",
        "@notice": "Returns the selected keep factory. /// This function guarantees that the same factory is returned for every /// call until selectFactoryAndRefresh is executed. This lets to evaluate /// open keep fee estimate on the same factory that will be used later for /// opening a new keep (fee estimate and open keep requests are two /// separate calls).",
        "@return1": "Selected keep factory. The same vale will be returned for every /// call of this function until selectFactoryAndRefresh is executed.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 1,
        "low_quality": 0
    },
    {
        "name": "selectFactoryAndRefresh",
        "visibility": "external",
        "args": [
            {
                "name": "_self",
                "type": "Storage storage"
            }
        ],
        "func": "function selectFactoryAndRefresh(\n        Storage storage _self\n    ) external returns (IBondedECDSAKeepFactory) {\n        IBondedECDSAKeepFactory factory = selectFactory(_self);\n        refreshFactory(_self);\n\n        return factory;\n    }",
        "comments": [
            "",
            "    /// @notice Returns the selected keep factory and refreshes the choice",
            "    /// for the next select call. The value returned by this function has been",
            "    /// evaluated during the previous call. This lets to return the same value",
            "    /// from selectFactory and selectFactoryAndRefresh, thus, allowing to use",
            "    /// the same factory for which open keep fee estimate was evaluated (fee",
            "    /// estimate and open keep requests are two separate calls).",
            "    /// @return Selected keep factory.",
            "    "
        ],
        "comt": "\n    /// @notice Returns the selected keep factory and refreshes the choice\n    /// for the next select call. The value returned by this function has been\n    /// evaluated during the previous call. This lets to return the same value\n    /// from selectFactory and selectFactoryAndRefresh, thus, allowing to use\n    /// the same factory for which open keep fee estimate was evaluated (fee\n    /// estimate and open keep requests are two separate calls).\n    /// @return Selected keep factory.\n    ",
        "@notice": "Returns the selected keep factory and refreshes the choice /// for the next select call. The value returned by this function has been /// evaluated during the previous call. This lets to return the same value /// from selectFactory and selectFactoryAndRefresh, thus, allowing to use /// the same factory for which open keep fee estimate was evaluated (fee /// estimate and open keep requests are two separate calls).",
        "@return1": "Selected keep factory.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 1,
        "low_quality": 0
    },
    {
        "name": "setMinimumBondableValue",
        "visibility": "external",
        "args": [
            {
                "name": "_self",
                "type": "Storage storage"
            },
            {
                "name": "_minimumBondableValue",
                "type": "uint256"
            },
            {
                "name": "_groupSize",
                "type": "uint256"
            },
            {
                "name": "_honestThreshold",
                "type": "uint256"
            }
        ],
        "func": "function setMinimumBondableValue(\n        Storage storage _self,\n        uint256 _minimumBondableValue,\n        uint256 _groupSize,\n        uint256 _honestThreshold\n    ) external {\n        if (address(_self.keepStakedFactory) != address(0)) {\n            _self.keepStakedFactory.setMinimumBondableValue(\n                _minimumBondableValue,\n                _groupSize,\n                _honestThreshold\n            );\n        }\n        if (address(_self.fullyBackedFactory) != address(0)) {\n            _self.fullyBackedFactory.setMinimumBondableValue(\n                _minimumBondableValue,\n                _groupSize,\n                _honestThreshold\n            );\n        }\n    }",
        "comments": [
            "",
            "    /// @notice Sets the minimum bondable value required from the operator to",
            "    /// join the sortition pool for tBTC.",
            "    /// @param _minimumBondableValue The minimum bond value the application",
            "    /// requires from a single keep.",
            "    /// @param _groupSize Number of signers in the keep.",
            "    /// @param _honestThreshold Minimum number of honest keep signers.",
            "    "
        ],
        "comt": "\n    /// @notice Sets the minimum bondable value required from the operator to\n    /// join the sortition pool for tBTC.\n    /// @param _minimumBondableValue The minimum bond value the application\n    /// requires from a single keep.\n    /// @param _groupSize Number of signers in the keep.\n    /// @param _honestThreshold Minimum number of honest keep signers.\n    ",
        "@notice": "Sets the minimum bondable value required from the operator to /// join the sortition pool for tBTC.",
        "@param1": "_minimumBondableValue The minimum bond value the application /// requires from a single keep.",
        "@param2": "_groupSize Number of signers in the keep.",
        "@param3": "_honestThreshold Minimum number of honest keep signers.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "receiveApproval",
        "visibility": "public",
        "args": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_tokenId",
                "type": "uint256"
            },
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "_extraData",
                "type": "bytes memory"
            }
        ],
        "func": "function receiveApproval(\n        address _from,\n        uint256 _tokenId,\n        address,\n        bytes memory _extraData\n    ) public { // not external to allow bytes memory parameters\n        require(msg.sender == address(tbtcDepositToken), \"Only token contract can call receiveApproval\");\n\n        tbtcDepositToken.transferFrom(_from, address(this), _tokenId);\n        tbtcDepositToken.approve(address(vendingMachine), _tokenId);\n\n        // Verify _extraData is a call to unqualifiedDepositToTbtc.\n        bytes4 functionSignature;\n        assembly {\n            functionSignature := and(mload(add(_extraData, 0x20)), not(0xff))\n        }\n        require(\n            functionSignature == vendingMachine.unqualifiedDepositToTbtc.selector,\n            \"Bad _extraData signature. Call must be to unqualifiedDepositToTbtc.\"\n        );\n\n        // Call the VendingMachine.\n        // We could explictly encode the call to vending machine, but this would\n        // involve manually parsing _extraData and allocating variables.\n        // We capture the `returnData` in order to forward any nested revert message\n        // from the contract call.\n        /* solium-disable-next-line security/no-low-level-calls */\n        (bool success, bytes memory returnData) = address(vendingMachine).call(_extraData);\n\n        string memory revertMessage;\n        assembly {\n            // A revert message is ABI-encoded as a call to Error(string).\n            // Slicing the Error() signature (4 bytes) and Data offset (4 bytes)\n            // leaves us with a pre-encoded string.\n            // We also slice off the ABI-coded length of returnData (32).\n            revertMessage := add(returnData, 0x44)\n        }\n\n        require(success, revertMessage);\n\n        // Transfer the TBTC and feeRebateToken to the user.\n        tbtcToken.transfer(_from, tbtcToken.balanceOf(address(this)));\n        feeRebateToken.transferFrom(address(this), _from, uint256(_tokenId));\n    }",
        "comments": [
            "",
            "    /// @notice Receives approval for a TDT transfer, and calls `VendingMachine.unqualifiedDepositToTbtc` for a user.",
            "    /// @dev Implements the approveAndCall receiver interface.",
            "    /// @param _from The owner of the token who approved them for transfer.",
            "    /// @param _tokenId Approved TDT for the transfer.",
            "    /// @param _extraData Encoded function call to `VendingMachine.unqualifiedDepositToTbtc`.",
            "    "
        ],
        "comt": "\n    /// @notice Receives approval for a TDT transfer, and calls `VendingMachine.unqualifiedDepositToTbtc` for a user.\n    /// @dev Implements the approveAndCall receiver interface.\n    /// @param _from The owner of the token who approved them for transfer.\n    /// @param _tokenId Approved TDT for the transfer.\n    /// @param _extraData Encoded function call to `VendingMachine.unqualifiedDepositToTbtc`.\n    ",
        "@notice": "Receives approval for a TDT transfer, and calls `VendingMachine.unqualifiedDepositToTbtc` for a user.",
        "@dev": "Implements the approveAndCall receiver interface.",
        "@param1": "_from The owner of the token who approved them for transfer.",
        "@param2": "_tokenId Approved TDT for the transfer.",
        "@param3": "_extraData Encoded function call to `VendingMachine.unqualifiedDepositToTbtc`.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "receiveApproval",
        "visibility": "public",
        "args": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            },
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "_extraData",
                "type": "bytes memory"
            }
        ],
        "func": "function receiveApproval(\n        address _from,\n        uint256 _amount,\n        address,\n        bytes memory _extraData\n    ) public { // not external to allow bytes memory parameters\n        require(msg.sender == address(tbtcToken), \"Only token contract can call receiveApproval\");\n\n        tbtcToken.transferFrom(_from, address(this), _amount);\n        tbtcToken.approve(address(vendingMachine), _amount);\n\n        // Verify _extraData is a call to tbtcToBtc.\n        bytes4 functionSignature;\n        assembly {\n            functionSignature := and(mload(add(_extraData, 0x20)), not(0xff))\n        }\n        require(\n            functionSignature == vendingMachine.tbtcToBtc.selector,\n            \"Bad _extraData signature. Call must be to tbtcToBtc.\"\n        );\n\n        // We capture the `returnData` in order to forward any nested revert message\n        // from the contract call.\n        // solium-disable-next-line security/no-low-level-calls\n        (bool success, bytes memory returnData) = address(vendingMachine).call(_extraData);\n\n        string memory revertMessage;\n        assembly {\n            // A revert message is ABI-encoded as a call to Error(string).\n            // Slicing the Error() signature (4 bytes) and Data offset (4 bytes)\n            // leaves us with a pre-encoded string.\n            // We also slice off the ABI-coded length of returnData (32).\n            revertMessage := add(returnData, 0x44)\n        }\n\n        require(success, revertMessage);\n    }",
        "comments": [
            "",
            "    /// @notice Receives approval for a TBTC transfer, and calls `VendingMachine.tbtcToBtc` for a user.",
            "    /// @dev Implements the approveAndCall receiver interface.",
            "    /// @param _from The owner of the token who approved them for transfer.",
            "    /// @param _amount Approved TBTC amount for the transfer.",
            "    /// @param _extraData Encoded function call to `VendingMachine.tbtcToBtc`.",
            "    "
        ],
        "comt": "\n    /// @notice Receives approval for a TBTC transfer, and calls `VendingMachine.tbtcToBtc` for a user.\n    /// @dev Implements the approveAndCall receiver interface.\n    /// @param _from The owner of the token who approved them for transfer.\n    /// @param _amount Approved TBTC amount for the transfer.\n    /// @param _extraData Encoded function call to `VendingMachine.tbtcToBtc`.\n    ",
        "@notice": "Receives approval for a TBTC transfer, and calls `VendingMachine.tbtcToBtc` for a user.",
        "@dev": "Implements the approveAndCall receiver interface.",
        "@param1": "_from The owner of the token who approved them for transfer.",
        "@param2": "_amount Approved TBTC amount for the transfer.",
        "@param3": "_extraData Encoded function call to `VendingMachine.tbtcToBtc`.",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getBeneficiaryRewardDivisor",
        "visibility": "external",
        "args": [],
        "func": "function getBeneficiaryRewardDivisor() external pure returns (uint256) { return BENEFICIARY_FEE_DIVISOR; }",
        "comments": [
            "// seconds",
            "",
            "    // Getters for easy access",
            "    "
        ],
        "comt": "// seconds\n\n    // Getters for easy access\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSatoshiMultiplier",
        "visibility": "external",
        "args": [],
        "func": "function getSatoshiMultiplier() external pure returns (uint256) { return SATOSHI_MULTIPLIER; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getDepositTerm",
        "visibility": "external",
        "args": [],
        "func": "function getDepositTerm() external pure returns (uint256) { return DEPOSIT_TERM_LENGTH; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getTxProofDifficultyFactor",
        "visibility": "external",
        "args": [],
        "func": "function getTxProofDifficultyFactor() external pure returns (uint256) { return TX_PROOF_DIFFICULTY_FACTOR; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSignatureTimeout",
        "visibility": "external",
        "args": [],
        "func": "function getSignatureTimeout() external pure returns (uint256) { return REDEMPTION_SIGNATURE_TIMEOUT; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getIncreaseFeeTimer",
        "visibility": "external",
        "args": [],
        "func": "function getIncreaseFeeTimer() external pure returns (uint256) { return INCREASE_FEE_TIMER; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRedemptionProofTimeout",
        "visibility": "external",
        "args": [],
        "func": "function getRedemptionProofTimeout() external pure returns (uint256) { return REDEMPTION_PROOF_TIMEOUT; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getMinimumRedemptionFee",
        "visibility": "external",
        "args": [],
        "func": "function getMinimumRedemptionFee() external pure returns (uint256) { return MINIMUM_REDEMPTION_FEE; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getFundingTimeout",
        "visibility": "external",
        "args": [],
        "func": "function getFundingTimeout() external pure returns (uint256) { return FUNDING_PROOF_TIMEOUT; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSigningGroupFormationTimeout",
        "visibility": "external",
        "args": [],
        "func": "function getSigningGroupFormationTimeout() external pure returns (uint256) { return FORMATION_TIMEOUT; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getCourtesyCallTimeout",
        "visibility": "external",
        "args": [],
        "func": "function getCourtesyCallTimeout() external pure returns (uint256) { return COURTESY_CALL_DURATION; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAuctionDuration",
        "visibility": "external",
        "args": [],
        "func": "function getAuctionDuration() external pure returns (uint256) { return AUCTION_DURATION; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]