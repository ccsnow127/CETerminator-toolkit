[
    {
        "transactions": 2914,
        "function_num": 52
    },
    {
        "name": "owner",
        "visibility": "public",
        "args": [],
        "func": "function owner() public view virtual returns (address) {\n        return _owner;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the address of the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the address of the current owner.\n     */\n",
        "@dev": "Returns the address of the current owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceOwnership",
        "visibility": "public",
        "args": [],
        "func": "function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }",
        "comments": [
            "/**",
            "     * @dev Leaves the contract without owner. It will not be possible to call",
            "     * `onlyOwner` functions anymore. Can only be called by the current owner.",
            "     *",
            "     * NOTE: Renouncing ownership will leave the contract without an owner,",
            "     * thereby removing any functionality that is only available to the owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n",
        "@dev": "Leaves the contract without owner. It will not be possible to call * `onlyOwner` functions anymore. Can only be called by the current owner. * * NOTE: Renouncing ownership will leave the contract without an owner, * thereby removing any functionality that is only available to the owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferOwnership",
        "visibility": "public",
        "args": [
            {
                "name": "newOwner",
                "type": "address"
            }
        ],
        "func": "function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }",
        "comments": [
            "/**",
            "     * @dev Transfers ownership of the contract to a new account (`newOwner`).",
            "     * Can only be called by the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n",
        "@dev": "Transfers ownership of the contract to a new account (`newOwner`). * Can only be called by the current owner.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the total number of tokens in existence.",
            "     * Burned tokens will reduce the count.",
            "     * To get the total number of tokens minted, please see {_totalMinted}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n",
        "@dev": "Returns the total number of tokens in existence. * Burned tokens will reduce the count. * To get the total number of tokens minted, please see {_totalMinted}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function balanceOf(\n        address owner\n    ) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }",
        "comments": [
            "",
            "    // =============================================================",
            "    //                    ADDRESS DATA OPERATIONS",
            "    // =============================================================",
            "",
            "    /**",
            "     * @dev Returns the number of tokens in `owner`'s account.",
            "     */",
            "    "
        ],
        "comt": "\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    ",
        "@dev": "Returns the number of tokens in `owner`'s account.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supportsInterface",
        "visibility": "public",
        "args": [
            {
                "name": "interfaceId",
                "type": "bytes4"
            }
        ],
        "func": "function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }",
        "comments": [
            "",
            "    // =============================================================",
            "    //                            IERC165",
            "    // =============================================================",
            "",
            "    /**",
            "     * @dev Returns true if this contract implements the interface defined by",
            "     * `interfaceId`. See the corresponding",
            "     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)",
            "     * to learn more about how these ids are created.",
            "     *",
            "     * This function call must use less than 30000 gas.",
            "     */",
            "    "
        ],
        "comt": "\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    ",
        "@dev": "Returns true if this contract implements the interface defined by * `interfaceId`. See the corresponding * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) * to learn more about how these ids are created. * * This function call must use less than 30000 gas.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "name",
        "visibility": "public",
        "args": [],
        "func": "function name() public view virtual override returns (string memory) {\n        return _name;\n    }",
        "comments": [
            "",
            "    // =============================================================",
            "    //                        IERC721Metadata",
            "    // =============================================================",
            "",
            "    /**",
            "     * @dev Returns the token collection name.",
            "     */",
            "    "
        ],
        "comt": "\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    ",
        "@dev": "Returns the token collection name.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "public",
        "args": [],
        "func": "function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the token collection symbol.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the token collection symbol.\n     */\n",
        "@dev": "Returns the token collection symbol.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "tokenURI",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function tokenURI(\n        uint256 tokenId\n    ) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length != 0\n                ? string(abi.encodePacked(baseURI, _toString(tokenId)))\n                : \"\";\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n",
        "@dev": "Returns the Uniform Resource Identifier (URI) for `tokenId` token.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "ownerOf",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function ownerOf(\n        uint256 tokenId\n    ) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }",
        "comments": [
            "",
            "    // =============================================================",
            "    //                     OWNERSHIPS OPERATIONS",
            "    // =============================================================",
            "",
            "    /**",
            "     * @dev Returns the owner of the `tokenId` token.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `tokenId` must exist.",
            "     */",
            "    "
        ],
        "comt": "\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    ",
        "@dev": "Returns the owner of the `tokenId` token. * * Requirements: * * - `tokenId` must exist.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function approve(\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }",
        "comments": [
            "/**",
            "     * @dev Gives permission to `to` to transfer `tokenId` token to another account.",
            "     * The approval is cleared when the token is transferred.",
            "     *",
            "     * Only a single account can be approved at a time, so approving the",
            "     * zero address clears previous approvals.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - The caller must own the token or be an approved operator.",
            "     * - `tokenId` must exist.",
            "     *",
            "     * Emits an {Approval} event.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n",
        "@dev": "Gives permission to `to` to transfer `tokenId` token to another account. * The approval is cleared when the token is transferred. * * Only a single account can be approved at a time, so approving the * zero address clears previous approvals. * * Requirements: * * - The caller must own the token or be an approved operator. * - `tokenId` must exist. * * Emits an {Approval} event.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getApproved",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function getApproved(\n        uint256 tokenId\n    ) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the account approved for `tokenId` token.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `tokenId` must exist.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n",
        "@dev": "Returns the account approved for `tokenId` token. * * Requirements: * * - `tokenId` must exist.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setApprovalForAll",
        "visibility": "public",
        "args": [
            {
                "name": "operator",
                "type": "address"
            },
            {
                "name": "approved",
                "type": "bool"
            }
        ],
        "func": "function setApprovalForAll(\n        address operator,\n        bool approved\n    ) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }",
        "comments": [
            "/**",
            "     * @dev Approve or remove `operator` as an operator for the caller.",
            "     * Operators can call {transferFrom} or {safeTransferFrom}",
            "     * for any token owned by the caller.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - The `operator` cannot be the caller.",
            "     *",
            "     * Emits an {ApprovalForAll} event.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n",
        "@dev": "Approve or remove `operator` as an operator for the caller. * Operators can call {transferFrom} or {safeTransferFrom} * for any token owned by the caller. * * Requirements: * * - The `operator` cannot be the caller. * * Emits an {ApprovalForAll} event.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isApprovedForAll",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "operator",
                "type": "address"
            }
        ],
        "func": "function isApprovedForAll(\n        address owner,\n        address operator\n    ) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }",
        "comments": [
            "/**",
            "     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.",
            "     *",
            "     * See {setApprovalForAll}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n",
        "@dev": "Returns if the `operator` is allowed to manage all of the assets of `owner`. * * See {setApprovalForAll}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from)\n            revert TransferFromIncorrectOwner();\n\n        (\n            uint256 approvedAddressSlot,\n            address approvedAddress\n        ) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (\n            !_isSenderApprovedOrOwner(\n                approvedAddress,\n                from,\n                _msgSenderERC721A()\n            )\n        )\n            if (!isApprovedForAll(from, _msgSenderERC721A()))\n                revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED |\n                    _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }",
        "comments": [
            "/**",
            "     * @dev Transfers `tokenId` from `from` to `to`.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `from` cannot be the zero address.",
            "     * - `to` cannot be the zero address.",
            "     * - `tokenId` token must be owned by `from`.",
            "     * - If the caller is not `from`, it must be approved to move this token",
            "     * by either {approve} or {setApprovalForAll}.",
            "     *",
            "     * Emits a {Transfer} event.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n",
        "@dev": "Transfers `tokenId` from `from` to `to`. * * Requirements: * * - `from` cannot be the zero address. * - `to` cannot be the zero address. * - `tokenId` token must be owned by `from`. * - If the caller is not `from`, it must be approved to move this token * by either {approve} or {setApprovalForAll}. * * Emits a {Transfer} event.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "safeTransferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }",
        "comments": [
            "/**",
            "     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n",
        "@dev": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "safeTransferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            },
            {
                "name": "_data",
                "type": "bytes memory"
            }
        ],
        "func": "function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public payable virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }",
        "comments": [
            "/**",
            "     * @dev Safely transfers `tokenId` token from `from` to `to`.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `from` cannot be the zero address.",
            "     * - `to` cannot be the zero address.",
            "     * - `tokenId` token must exist and be owned by `from`.",
            "     * - If the caller is not `from`, it must be approved to move this token",
            "     * by either {approve} or {setApprovalForAll}.",
            "     * - If `to` refers to a smart contract, it must implement",
            "     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.",
            "     *",
            "     * Emits a {Transfer} event.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n",
        "@dev": "Safely transfers `tokenId` token from `from` to `to`. * * Requirements: * * - `from` cannot be the zero address. * - `to` cannot be the zero address. * - `tokenId` token must exist and be owned by `from`. * - If the caller is not `from`, it must be approved to move this token * by either {approve} or {setApprovalForAll}. * - If `to` refers to a smart contract, it must implement * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. * * Emits a {Transfer} event.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "reserveMint",
        "visibility": "public",
        "args": [
            {
                "name": "quantity",
                "type": "uint256"
            }
        ],
        "func": "function reserveMint(uint256 quantity) public onlyOwner checkQuantity(quantity) {\n        _safeMint(msg.sender, quantity);\n        _reserveCounter = _reserveCounter + quantity;\n    }",
        "comments": [
            "",
            "    // mint functions",
            "",
            "    "
        ],
        "comt": "\n    // mint functions\n\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "airDrop",
        "visibility": "public",
        "args": [
            {
                "name": "_to",
                "type": "address[] calldata"
            },
            {
                "name": "quantity",
                "type": "uint256"
            }
        ],
        "func": "function airDrop(\n        address[] calldata _to,\n        uint256 quantity\n    ) public onlyOwner checkQuantity(quantity * _to.length) {\n        for (uint256 i = 0; i < _to.length; i++) {\n            _safeMint(_to[i], quantity);\n            _airdropCounter = _airdropCounter + quantity;\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mintPreSaleTokens",
        "visibility": "public",
        "args": [
            {
                "name": "quantity",
                "type": "uint256"
            },
            {
                "name": "_merkleProof",
                "type": "bytes32[] calldata"
            }
        ],
        "func": "function mintPreSaleTokens(\n        uint256 quantity,\n        bytes32[] calldata _merkleProof\n    ) public payable \n                merkleProven(_merkleProof, MintPass.PRE_SALE)\n                checkQuantity(quantity) \n                price(PRESALE_PRICE, quantity)\n    {\n        require(_preSaleActive, \"PreSale is not active\");\n        require(\n            _preSaleMintCounter[msg.sender] + quantity <= maxPreSaleMintAmount,\n            \"Exceeds max per address\"\n        );\n\n        _safeMint(msg.sender, quantity);\n        _preSaleCounter = _preSaleCounter + quantity;\n        _preSaleMintCounter[msg.sender] =\n            _preSaleMintCounter[msg.sender] +\n            quantity;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "publicSaleMint",
        "visibility": "public",
        "args": [
            {
                "name": "quantity",
                "type": "uint256"
            }
        ],
        "func": "function publicSaleMint(uint256 quantity) public payable\n                checkQuantity(quantity)\n                price(PUBLIC_PRICE, quantity)\n    {\n        require(_publicSaleActive, \"PublicSale is not active\");\n        require(\n            _publicSaleMintCounter[msg.sender] + quantity <= maxPublicSaleMintAmount,\n            \"Exceeds max per address\"\n        );\n\n        _safeMint(msg.sender, quantity);\n        _publicCounter = _publicCounter + quantity;\n        _publicSaleMintCounter[msg.sender] =\n            _publicSaleMintCounter[msg.sender] +\n            quantity;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mintOgSaleTokens",
        "visibility": "public",
        "args": [
            {
                "name": "quantity",
                "type": "uint256"
            },
            {
                "name": "_merkleProof",
                "type": "bytes32[] calldata"
            }
        ],
        "func": "function mintOgSaleTokens(\n        uint256 quantity,\n        bytes32[] calldata _merkleProof\n    ) public payable\n                merkleProven(_merkleProof, MintPass.OG_SALE)\n                checkQuantity(quantity)\n                price(OGSALE_PRICE, quantity)\n    {\n        require(_ogSaleActive, \"OGSale is not active\");\n        require(\n            _ogSaleMintCounter[msg.sender] + quantity <= maxOgSaleMintAmount,\n            \"Exceeds max per address\"\n        );\n\n        _safeMint(msg.sender, quantity);\n        _ogSaleCounter = _ogSaleCounter + quantity;\n        _ogSaleMintCounter[msg.sender] =\n            _ogSaleMintCounter[msg.sender] +\n            quantity;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mintFreeSaleTokens",
        "visibility": "public",
        "args": [
            {
                "name": "quantity",
                "type": "uint256"
            },
            {
                "name": "_merkleProof",
                "type": "bytes32[] calldata"
            },
            {
                "name": "maxQty",
                "type": "uint256"
            }
        ],
        "func": "function mintFreeSaleTokens(\n        uint256 quantity,\n        bytes32[] calldata _merkleProof,\n        uint256 maxQty\n    ) public payable \n                merkleProvenFree(_merkleProof, MintPass.FREE_SALE, maxQty)\n                checkQuantity(quantity)\n                price(0, 0)\n    {\n        require(_freeSaleActive, \"FreeSale is not active\");\n        require(\n            _freeSaleMintCounter[msg.sender] + quantity <= maxQty,\n            \"Exceeds max per address\"\n        );\n\n        _safeMint(msg.sender, quantity);\n        _freeSaleCounter = _freeSaleCounter + quantity;\n        _freeSaleMintCounter[msg.sender] =\n            _freeSaleMintCounter[msg.sender] +\n            quantity;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUserMintInfo",
        "visibility": "external",
        "args": [
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function getUserMintInfo(address user) external view returns (\n        UserMinted memory mintInfo,\n        PriceInfo memory priceInfo,\n        MaxMintInfo memory maxMintInfo,\n        SaleInfo memory saleInfo,\n\n        uint256 _totalSupply,\n        uint256 _maxSupply,\n        bytes32 _merkleRoot\n    ) {\n        mintInfo = UserMinted(\n            _preSaleMintCounter[user],\n            _ogSaleMintCounter[user],\n            _freeSaleMintCounter[user],\n            _publicSaleMintCounter[user]\n        );\n        priceInfo = PriceInfo(PRESALE_PRICE, OGSALE_PRICE, PUBLIC_PRICE);\n        maxMintInfo = MaxMintInfo(maxPreSaleMintAmount, maxOgSaleMintAmount, maxPublicSaleMintAmount);\n        saleInfo = SaleInfo(_preSaleActive, _ogSaleActive, _freeSaleActive, _publicSaleActive);\n\n        _totalSupply = totalSupply();\n        _maxSupply = MAX_SUPPLY;\n        _merkleRoot = merkleRoot;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getMintInfo",
        "visibility": "external",
        "args": [],
        "func": "function getMintInfo() external view \n        returns(\n            PriceInfo memory priceInfo,\n            MaxMintInfo memory maxMintInfo,\n            SaleInfo memory saleInfo,\n\n            uint256 _totalSupply,\n            uint256 _maxSupply,\n            bytes32 _merkleRoot\n    ) {\n        priceInfo = PriceInfo(PRESALE_PRICE, OGSALE_PRICE, PUBLIC_PRICE);\n        maxMintInfo = MaxMintInfo(maxPreSaleMintAmount, maxOgSaleMintAmount, maxPublicSaleMintAmount);\n        saleInfo = SaleInfo(_preSaleActive, _ogSaleActive, _freeSaleActive, _publicSaleActive);\n\n        _totalSupply = totalSupply();\n        _maxSupply = MAX_SUPPLY;\n        _merkleRoot = merkleRoot;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getBalance",
        "visibility": "public",
        "args": [],
        "func": "function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }",
        "comments": [
            "",
            "    // balance",
            "",
            "    "
        ],
        "comt": "\n    // balance\n\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "public",
        "args": [],
        "func": "function withdraw() public payable onlyOwner {\n        uint256 balance = address(this).balance;\n        require(balance > 0, \"No ether left to withdraw\");\n        payable(msg.sender).transfer(balance);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setBaseURI",
        "visibility": "public",
        "args": [
            {
                "name": "baseURI",
                "type": "string calldata"
            }
        ],
        "func": "function setBaseURI(string calldata baseURI) public onlyOwner {\n        _baseTokenURI = baseURI;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setNotRevealedURI",
        "visibility": "public",
        "args": [
            {
                "name": "_notRevealedURI",
                "type": "string memory"
            }
        ],
        "func": "function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {\n        notRevealedUri = _notRevealedURI;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "reveal",
        "visibility": "public",
        "args": [
            {
                "name": "_state",
                "type": "bool"
            }
        ],
        "func": "function reveal(bool _state) public onlyOwner {\n        _revealed = _state;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "tokenURI",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function tokenURI(\n        uint256 tokenId\n    ) public view virtual override returns (string memory) {\n        require(\n            _exists(tokenId),\n            \"ERC721AMetadata: URI query for nonexistent token\"\n        );\n\n        if (_revealed == false) {\n            return notRevealedUri;\n        }\n\n        string memory currentBaseURI = _baseURI();\n        return\n            bytes(currentBaseURI).length > 0\n                ? string(\n                    abi.encodePacked(\n                        currentBaseURI,\n                        Strings.toString(tokenId),\n                        baseExtension\n                    )\n                )\n                : \"\";\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setApprovalForAll",
        "visibility": "public",
        "args": [
            {
                "name": "operator",
                "type": "address"
            },
            {
                "name": "approved",
                "type": "bool"
            }
        ],
        "func": "function setApprovalForAll(\n        address operator,\n        bool approved\n    ) public override onlyAllowedOperatorApproval(operator) {\n        super.setApprovalForAll(operator, approved);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "operator",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function approve(\n        address operator,\n        uint256 tokenId\n    ) public payable override onlyAllowedOperatorApproval(operator) {\n        super.approve(operator, tokenId);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable override onlyAllowedOperator(from) {\n        super.transferFrom(from, to, tokenId);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "safeTransferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "safeTransferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            },
            {
                "name": "data",
                "type": "bytes memory"
            }
        ],
        "func": "function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public payable override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId, data);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setRoyaltyReceiver",
        "visibility": "public",
        "args": [
            {
                "name": "royaltyReceiver",
                "type": "address"
            }
        ],
        "func": "function setRoyaltyReceiver(address royaltyReceiver) public onlyOwner {\n        royaltyAddress = royaltyReceiver;\n    }",
        "comments": [
            "",
            "    // ERC2981",
            "    "
        ],
        "comt": "\n    // ERC2981\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setRoyaltyPercentage",
        "visibility": "public",
        "args": [
            {
                "name": "royaltyPercentage",
                "type": "uint256"
            }
        ],
        "func": "function setRoyaltyPercentage(uint256 royaltyPercentage) public onlyOwner {\n        royaltyPercent = royaltyPercentage;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "royaltyInfo",
        "visibility": "external",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            },
            {
                "name": "salePrice",
                "type": "uint256"
            }
        ],
        "func": "function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view override returns (address receiver, uint256 royaltyAmount) {\n        require(_exists(tokenId), \"Non-existent token\");\n        return (royaltyAddress, (salePrice * royaltyPercent) / 10000);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supportsInterface",
        "visibility": "public",
        "args": [
            {
                "name": "interfaceId",
                "type": "bytes4"
            }
        ],
        "func": "function supportsInterface(\n        bytes4 interfaceId\n    ) public view override(ERC721A, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC2981).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }",
        "comments": [
            "",
            "    // ERC165",
            "    "
        ],
        "comt": "\n    // ERC165\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPreSaleActive",
        "visibility": "public",
        "args": [
            {
                "name": "_state",
                "type": "bool"
            }
        ],
        "func": "function setPreSaleActive(bool _state) public onlyOwner {\n        _preSaleActive = _state;\n    }",
        "comments": [
            "",
            "    // Setters",
            "    "
        ],
        "comt": "\n    // Setters\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPublicSaleActive",
        "visibility": "public",
        "args": [
            {
                "name": "_state",
                "type": "bool"
            }
        ],
        "func": "function setPublicSaleActive(bool _state) public onlyOwner {\n        _publicSaleActive = _state;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setOgSaleActive",
        "visibility": "public",
        "args": [
            {
                "name": "_state",
                "type": "bool"
            }
        ],
        "func": "function setOgSaleActive(bool _state) public onlyOwner {\n        _ogSaleActive = _state;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFreeSaleActive",
        "visibility": "public",
        "args": [
            {
                "name": "_state",
                "type": "bool"
            }
        ],
        "func": "function setFreeSaleActive(bool _state) public onlyOwner {\n        _freeSaleActive = _state;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMaxSupply",
        "visibility": "public",
        "args": [
            {
                "name": "_maxSupply",
                "type": "uint256"
            }
        ],
        "func": "function setMaxSupply(uint256 _maxSupply) public onlyOwner {\n        MAX_SUPPLY = _maxSupply;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMaxPreSaleMintAmount",
        "visibility": "public",
        "args": [
            {
                "name": "_newQty",
                "type": "uint256"
            }
        ],
        "func": "function setMaxPreSaleMintAmount(uint256 _newQty) public onlyOwner {\n        maxPreSaleMintAmount = _newQty;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setOgSaleMintAmount",
        "visibility": "public",
        "args": [
            {
                "name": "_newQty",
                "type": "uint256"
            }
        ],
        "func": "function setOgSaleMintAmount(uint256 _newQty) public onlyOwner {\n        maxOgSaleMintAmount = _newQty;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPublicSaleMintAmount",
        "visibility": "public",
        "args": [
            {
                "name": "_newQty",
                "type": "uint256"
            }
        ],
        "func": "function setPublicSaleMintAmount(uint256 _newQty) public onlyOwner {\n        maxPublicSaleMintAmount = _newQty;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPublicMintPrice",
        "visibility": "public",
        "args": [
            {
                "name": "_newCost",
                "type": "uint256"
            }
        ],
        "func": "function setPublicMintPrice(uint256 _newCost) public onlyOwner {\n        PUBLIC_PRICE = _newCost;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPresaleMintPrice",
        "visibility": "public",
        "args": [
            {
                "name": "_newCost",
                "type": "uint256"
            }
        ],
        "func": "function setPresaleMintPrice(uint256 _newCost) public onlyOwner {\n        PRESALE_PRICE = _newCost;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setOgSaleMintPrice",
        "visibility": "public",
        "args": [
            {
                "name": "_newCost",
                "type": "uint256"
            }
        ],
        "func": "function setOgSaleMintPrice(uint256 _newCost) public onlyOwner {\n        OGSALE_PRICE = _newCost;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMerkleRoot",
        "visibility": "public",
        "args": [
            {
                "name": "_merkleRoot",
                "type": "bytes32"
            }
        ],
        "func": "function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {\n        merkleRoot = _merkleRoot;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]