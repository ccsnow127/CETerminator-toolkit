[
    {
        "transactions": 554,
        "function_num": 428
    },
    {
        "name": "foo",
        "visibility": "public",
        "args": [],
        "func": "function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supportsInterface",
        "visibility": "public",
        "args": [
            {
                "name": "interfaceId",
                "type": "bytes4"
            }
        ],
        "func": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n  }",
        "comments": [
            "/**",
            "   * @dev See {IERC165-supportsInterface}.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev See {IERC165-supportsInterface}.\n   */\n",
        "@dev": "See {IERC165-supportsInterface}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function hasRole(bytes32 role, address account) public view override returns (bool) {\n    return _roles[role].members[account];\n  }",
        "comments": [
            "/**",
            "   * @dev Returns `true` if `account` has been granted `role`.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n",
        "@dev": "Returns `true` if `account` has been granted `role`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRoleAdmin",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            }
        ],
        "func": "function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n    return _roles[role].adminRole;\n  }",
        "comments": [
            "/**",
            "   * @dev Returns the admin role that controls `role`. See {grantRole} and",
            "   * {revokeRole}.",
            "   *",
            "   * To change a role's admin, use {_setRoleAdmin}.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n",
        "@dev": "Returns the admin role that controls `role`. See {grantRole} and * {revokeRole}. * * To change a role's admin, use {_setRoleAdmin}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "grantRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function grantRole(bytes32 role, address account)\n    public\n    virtual\n    override\n    onlyRole(getRoleAdmin(role))\n  {\n    _grantRole(role, account);\n  }",
        "comments": [
            "/**",
            "   * @dev Grants `role` to `account`.",
            "   *",
            "   * If `account` had not been already granted `role`, emits a {RoleGranted}",
            "   * event.",
            "   *",
            "   * Requirements:",
            "   *",
            "   * - the caller must have ``role``'s admin role.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n",
        "@dev": "Grants `role` to `account`. * * If `account` had not been already granted `role`, emits a {RoleGranted} * event. * * Requirements: * * - the caller must have ``role``'s admin role.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "revokeRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function revokeRole(bytes32 role, address account)\n    public\n    virtual\n    override\n    onlyRole(getRoleAdmin(role))\n  {\n    _revokeRole(role, account);\n  }",
        "comments": [
            "/**",
            "   * @dev Revokes `role` from `account`.",
            "   *",
            "   * If `account` had been granted `role`, emits a {RoleRevoked} event.",
            "   *",
            "   * Requirements:",
            "   *",
            "   * - the caller must have ``role``'s admin role.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n",
        "@dev": "Revokes `role` from `account`. * * If `account` had been granted `role`, emits a {RoleRevoked} event. * * Requirements: * * - the caller must have ``role``'s admin role.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function renounceRole(bytes32 role, address account) public virtual override {\n    require(account == _msgSender(), 'AccessControl: can only renounce roles for self');\n\n    _revokeRole(role, account);\n  }",
        "comments": [
            "/**",
            "   * @dev Revokes `role` from the calling account.",
            "   *",
            "   * Roles are often managed via {grantRole} and {revokeRole}: this function's",
            "   * purpose is to provide a mechanism for accounts to lose their privileges",
            "   * if they are compromised (such as when a trusted device is misplaced).",
            "   *",
            "   * If the calling account had been granted `role`, emits a {RoleRevoked}",
            "   * event.",
            "   *",
            "   * Requirements:",
            "   *",
            "   * - the caller must be `account`.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `account`.\n   */\n",
        "@dev": "Revokes `role` from the calling account. * * Roles are often managed via {grantRole} and {revokeRole}: this function's * purpose is to provide a mechanism for accounts to lose their privileges * if they are compromised (such as when a trusted device is misplaced). * * If the calling account had been granted `role`, emits a {RoleRevoked} * event. * * Requirements: * * - the caller must be `account`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supportsInterface",
        "visibility": "public",
        "args": [
            {
                "name": "interfaceId",
                "type": "bytes4"
            }
        ],
        "func": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supportsInterface",
        "visibility": "public",
        "args": [
            {
                "name": "interfaceId",
                "type": "bytes4"
            }
        ],
        "func": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }",
        "comments": [
            "/**",
            "   * @dev See {IERC165-supportsInterface}.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev See {IERC165-supportsInterface}.\n   */\n",
        "@dev": "See {IERC165-supportsInterface}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "name",
        "visibility": "public",
        "args": [],
        "func": "function name() public view returns (string memory) {\n    return _name;\n  }",
        "comments": [
            "/**",
            "   * @dev Returns the name of the token.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Returns the name of the token.\n   */\n",
        "@dev": "Returns the name of the token.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "public",
        "args": [],
        "func": "function symbol() public view returns (string memory) {\n    return _symbol;\n  }",
        "comments": [
            "/**",
            "   * @dev Returns the symbol of the token, usually a shorter version of the",
            "   * name.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Returns the symbol of the token, usually a shorter version of the\n   * name.\n   */\n",
        "@dev": "Returns the symbol of the token, usually a shorter version of the * name.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decimals",
        "visibility": "public",
        "args": [],
        "func": "function decimals() public view returns (uint8) {\n    return _decimals;\n  }",
        "comments": [
            "/**",
            "   * @dev Returns the number of decimals used to get its user representation.",
            "   * For example, if `decimals` equals `2`, a balance of `505` tokens should",
            "   * be displayed to a user as `5,05` (`505 / 10 ** 2`).",
            "   *",
            "   * Tokens usually opt for a value of 18, imitating the relationship between",
            "   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is",
            "   * called.",
            "   *",
            "   * NOTE: This information is only used for _display_ purposes: it in",
            "   * no way affects any of the arithmetic of the contract, including",
            "   * {IERC20-balanceOf} and {IERC20-transfer}.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Returns the number of decimals used to get its user representation.\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n   *\n   * Tokens usually opt for a value of 18, imitating the relationship between\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n   * called.\n   *\n   * NOTE: This information is only used for _display_ purposes: it in\n   * no way affects any of the arithmetic of the contract, including\n   * {IERC20-balanceOf} and {IERC20-transfer}.\n   */\n",
        "@dev": "Returns the number of decimals used to get its user representation. * For example, if `decimals` equals `2`, a balance of `505` tokens should * be displayed to a user as `5,05` (`505 / 10 ** 2`). * * Tokens usually opt for a value of 18, imitating the relationship between * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is * called. * * NOTE: This information is only used for _display_ purposes: it in * no way affects any of the arithmetic of the contract, including * {IERC20-balanceOf} and {IERC20-transfer}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view override returns (uint256) {\n    return _totalSupply;\n  }",
        "comments": [
            "/**",
            "   * @dev See {IERC20-totalSupply}.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev See {IERC20-totalSupply}.\n   */\n",
        "@dev": "See {IERC20-totalSupply}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address account) public view override returns (uint256) {\n    return _balances[account];\n  }",
        "comments": [
            "/**",
            "   * @dev See {IERC20-balanceOf}.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev See {IERC20-balanceOf}.\n   */\n",
        "@dev": "See {IERC20-balanceOf}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev See {IERC20-transfer}.",
            "   *",
            "   * Requirements:",
            "   *",
            "   * - `recipient` cannot be the zero address.",
            "   * - the caller must have a balance of at least `amount`.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev See {IERC20-transfer}.\n   *\n   * Requirements:\n   *\n   * - `recipient` cannot be the zero address.\n   * - the caller must have a balance of at least `amount`.\n   */\n",
        "@dev": "See {IERC20-transfer}. * * Requirements: * * - `recipient` cannot be the zero address. * - the caller must have a balance of at least `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address owner, address spender)\n    public\n    view\n    virtual\n    override\n    returns (uint256)\n  {\n    return _allowances[owner][spender];\n  }",
        "comments": [
            "/**",
            "   * @dev See {IERC20-allowance}.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev See {IERC20-allowance}.\n   */\n",
        "@dev": "See {IERC20-allowance}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function approve(address spender, uint256 amount) public virtual override returns (bool) {\n    _approve(_msgSender(), spender, amount);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev See {IERC20-approve}.",
            "   *",
            "   * Requirements:",
            "   *",
            "   * - `spender` cannot be the zero address.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev See {IERC20-approve}.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n",
        "@dev": "See {IERC20-approve}. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    _transfer(sender, recipient, amount);\n    _approve(\n      sender,\n      _msgSender(),\n      _allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance')\n    );\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev See {IERC20-transferFrom}.",
            "   *",
            "   * Emits an {Approval} event indicating the updated allowance. This is not",
            "   * required by the EIP. See the note at the beginning of {ERC20};",
            "   *",
            "   * Requirements:",
            "   * - `sender` and `recipient` cannot be the zero address.",
            "   * - `sender` must have a balance of at least `amount`.",
            "   * - the caller must have allowance for ``sender``'s tokens of at least",
            "   * `amount`.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev See {IERC20-transferFrom}.\n   *\n   * Emits an {Approval} event indicating the updated allowance. This is not\n   * required by the EIP. See the note at the beginning of {ERC20};\n   *\n   * Requirements:\n   * - `sender` and `recipient` cannot be the zero address.\n   * - `sender` must have a balance of at least `amount`.\n   * - the caller must have allowance for ``sender``'s tokens of at least\n   * `amount`.\n   */\n",
        "@dev": "See {IERC20-transferFrom}. * * Emits an {Approval} event indicating the updated allowance. This is not * required by the EIP. See the note at the beginning of {ERC20}; * * Requirements: * - `sender` and `recipient` cannot be the zero address. * - `sender` must have a balance of at least `amount`. * - the caller must have allowance for ``sender``'s tokens of at least * `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Atomically increases the allowance granted to `spender` by the caller.",
            "   *",
            "   * This is an alternative to {approve} that can be used as a mitigation for",
            "   * problems described in {IERC20-approve}.",
            "   *",
            "   * Emits an {Approval} event indicating the updated allowance.",
            "   *",
            "   * Requirements:",
            "   *",
            "   * - `spender` cannot be the zero address.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n",
        "@dev": "Atomically increases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(address spender, uint256 subtractedValue)\n    public\n    virtual\n    returns (bool)\n  {\n    _approve(\n      _msgSender(),\n      spender,\n      _allowances[_msgSender()][spender].sub(\n        subtractedValue,\n        'ERC20: decreased allowance below zero'\n      )\n    );\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Atomically decreases the allowance granted to `spender` by the caller.",
            "   *",
            "   * This is an alternative to {approve} that can be used as a mitigation for",
            "   * problems described in {IERC20-approve}.",
            "   *",
            "   * Emits an {Approval} event indicating the updated allowance.",
            "   *",
            "   * Requirements:",
            "   *",
            "   * - `spender` cannot be the zero address.",
            "   * - `spender` must have allowance for the caller of at least",
            "   * `subtractedValue`.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `spender` must have allowance for the caller of at least\n   * `subtractedValue`.\n   */\n",
        "@dev": "Atomically decreases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address. * - `spender` must have allowance for the caller of at least * `subtractedValue`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "owner",
        "visibility": "public",
        "args": [],
        "func": "function owner() public view returns (address) {\n    return _owner;\n  }",
        "comments": [
            "/**",
            "   * @dev Returns the address of the current owner.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Returns the address of the current owner.\n   */\n",
        "@dev": "Returns the address of the current owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceOwnership",
        "visibility": "public",
        "args": [],
        "func": "function renounceOwnership() public virtual onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }",
        "comments": [
            "/**",
            "   * @dev Leaves the contract without owner. It will not be possible to call",
            "   * `onlyOwner` functions anymore. Can only be called by the current owner.",
            "   *",
            "   * NOTE: Renouncing ownership will leave the contract without an owner,",
            "   * thereby removing any functionality that is only available to the owner.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Leaves the contract without owner. It will not be possible to call\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\n   *\n   * NOTE: Renouncing ownership will leave the contract without an owner,\n   * thereby removing any functionality that is only available to the owner.\n   */\n",
        "@dev": "Leaves the contract without owner. It will not be possible to call * `onlyOwner` functions anymore. Can only be called by the current owner. * * NOTE: Renouncing ownership will leave the contract without an owner, * thereby removing any functionality that is only available to the owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferOwnership",
        "visibility": "public",
        "args": [
            {
                "name": "newOwner",
                "type": "address"
            }
        ],
        "func": "function transferOwnership(address newOwner) public virtual onlyOwner {\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }",
        "comments": [
            "/**",
            "   * @dev Transfers ownership of the contract to a new account (`newOwner`).",
            "   * Can only be called by the current owner.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n",
        "@dev": "Transfers ownership of the contract to a new account (`newOwner`). * Can only be called by the current owner.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "admin",
        "visibility": "external",
        "args": [],
        "func": "function admin() external ifAdmin returns (address) {\n    return _admin();\n  }",
        "comments": [
            "/**",
            "   * @return The address of the proxy admin.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @return The address of the proxy admin.\n   */\n",
        "@return1": "The address of the proxy admin.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "implementation",
        "visibility": "external",
        "args": [],
        "func": "function implementation() external ifAdmin returns (address) {\n    return _implementation();\n  }",
        "comments": [
            "/**",
            "   * @return The address of the implementation.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @return The address of the implementation.\n   */\n",
        "@return1": "The address of the implementation.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "changeAdmin",
        "visibility": "external",
        "args": [
            {
                "name": "newAdmin",
                "type": "address"
            }
        ],
        "func": "function changeAdmin(address newAdmin) external ifAdmin {\n    require(newAdmin != address(0), 'Cannot change the admin of a proxy to the zero address');\n    emit AdminChanged(_admin(), newAdmin);\n    _setAdmin(newAdmin);\n  }",
        "comments": [
            "/**",
            "   * @dev Changes the admin of the proxy.",
            "   * Only the current admin can call this function.",
            "   * @param newAdmin Address to transfer proxy administration to.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Changes the admin of the proxy.\n   * Only the current admin can call this function.\n   * @param newAdmin Address to transfer proxy administration to.\n   */\n",
        "@dev": "Changes the admin of the proxy. * Only the current admin can call this function.",
        "@param1": "newAdmin Address to transfer proxy administration to.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "upgradeTo",
        "visibility": "external",
        "args": [
            {
                "name": "newImplementation",
                "type": "address"
            }
        ],
        "func": "function upgradeTo(address newImplementation) external ifAdmin {\n    _upgradeTo(newImplementation);\n  }",
        "comments": [
            "/**",
            "   * @dev Upgrade the backing implementation of the proxy.",
            "   * Only the admin can call this function.",
            "   * @param newImplementation Address of the new implementation.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Upgrade the backing implementation of the proxy.\n   * Only the admin can call this function.\n   * @param newImplementation Address of the new implementation.\n   */\n",
        "@dev": "Upgrade the backing implementation of the proxy. * Only the admin can call this function.",
        "@param1": "newImplementation Address of the new implementation.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "upgradeToAndCall",
        "visibility": "external",
        "args": [
            {
                "name": "newImplementation",
                "type": "address"
            },
            {
                "name": "data",
                "type": "bytes calldata"
            }
        ],
        "func": "function upgradeToAndCall(address newImplementation, bytes calldata data)\n    external\n    payable\n    ifAdmin\n  {\n    _upgradeTo(newImplementation);\n    (bool success, ) = newImplementation.delegatecall(data);\n    require(success);\n  }",
        "comments": [
            "/**",
            "   * @dev Upgrade the backing implementation of the proxy and call a function",
            "   * on the new implementation.",
            "   * This is useful to initialize the proxied contract.",
            "   * @param newImplementation Address of the new implementation.",
            "   * @param data Data to send as msg.data in the low level call.",
            "   * It should include the signature and the parameters of the function to be called, as described in",
            "   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Upgrade the backing implementation of the proxy and call a function\n   * on the new implementation.\n   * This is useful to initialize the proxied contract.\n   * @param newImplementation Address of the new implementation.\n   * @param data Data to send as msg.data in the low level call.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   */\n",
        "@dev": "Upgrade the backing implementation of the proxy and call a function * on the new implementation. * This is useful to initialize the proxied contract.",
        "@param1": "newImplementation Address of the new implementation.",
        "@param2": "data Data to send as msg.data in the low level call. * It should include the signature and the parameters of the function to be called, as described in * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "logic",
                "type": "address"
            },
            {
                "name": "admin",
                "type": "address"
            },
            {
                "name": "data",
                "type": "bytes memory"
            }
        ],
        "func": "function initialize(\n    address logic,\n    address admin,\n    bytes memory data\n  ) public payable {\n    require(_implementation() == address(0));\n    InitializableUpgradeabilityProxy.initialize(logic, data);\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n    _setAdmin(admin);\n  }",
        "comments": [
            "/**",
            "   * Contract initializer.",
            "   * @param logic address of the initial implementation.",
            "   * @param admin Address of the proxy administrator.",
            "   * @param data Data to send as msg.data to the implementation to initialize the proxied contract.",
            "   * It should include the signature and the parameters of the function to be called, as described in",
            "   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.",
            "   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.",
            "   */",
            ""
        ],
        "comt": "/**\n   * Contract initializer.\n   * @param logic address of the initial implementation.\n   * @param admin Address of the proxy administrator.\n   * @param data Data to send as msg.data to the implementation to initialize the proxied contract.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   */\n",
        "@param1": "logic address of the initial implementation.",
        "@param2": "admin Address of the proxy administrator.",
        "@param3": "data Data to send as msg.data to the implementation to initialize the proxied contract. * It should include the signature and the parameters of the function to be called, as described in * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding. * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "_logic",
                "type": "address"
            },
            {
                "name": "_data",
                "type": "bytes memory"
            }
        ],
        "func": "function initialize(address _logic, bytes memory _data) public payable {\n    require(_implementation() == address(0));\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n    _setImplementation(_logic);\n    if (_data.length > 0) {\n      (bool success, ) = _logic.delegatecall(_data);\n      require(success);\n    }\n  }",
        "comments": [
            "/**",
            "   * @dev Contract initializer.",
            "   * @param _logic Address of the initial implementation.",
            "   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.",
            "   * It should include the signature and the parameters of the function to be called, as described in",
            "   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.",
            "   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Contract initializer.\n   * @param _logic Address of the initial implementation.\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   */\n",
        "@dev": "Contract initializer.",
        "@param1": "_logic Address of the initial implementation.",
        "@param2": "_data Data to send as msg.data to the implementation to initialize the proxied contract. * It should include the signature and the parameters of the function to be called, as described in * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding. * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "public",
        "args": [],
        "func": "function deposit() public payable {\n    balanceOf[msg.sender] += msg.value;\n    emit Deposit(msg.sender, msg.value);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "public",
        "args": [
            {
                "name": "wad",
                "type": "uint256"
            }
        ],
        "func": "function withdraw(uint256 wad) public {\n    require(balanceOf[msg.sender] >= wad);\n    balanceOf[msg.sender] -= wad;\n    payable(msg.sender).transfer(wad);\n    emit Withdrawal(msg.sender, wad);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view returns (uint256) {\n    return address(this).balance;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "guy",
                "type": "address"
            },
            {
                "name": "wad",
                "type": "uint256"
            }
        ],
        "func": "function approve(address guy, uint256 wad) public returns (bool) {\n    allowance[msg.sender][guy] = wad;\n    emit Approval(msg.sender, guy, wad);\n    return true;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "dst",
                "type": "address"
            },
            {
                "name": "wad",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address dst, uint256 wad) public returns (bool) {\n    return transferFrom(msg.sender, dst, wad);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "src",
                "type": "address"
            },
            {
                "name": "dst",
                "type": "address"
            },
            {
                "name": "wad",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n    address src,\n    address dst,\n    uint256 wad\n  ) public returns (bool) {\n    require(balanceOf[src] >= wad);\n\n    if (src != msg.sender && allowance[src][msg.sender] != type(uint256).max) {\n      require(allowance[src][msg.sender] >= wad);\n      allowance[src][msg.sender] -= wad;\n    }\n\n    balanceOf[src] -= wad;\n    balanceOf[dst] += wad;\n\n    emit Transfer(src, dst, wad);\n\n    return true;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAssetSources",
        "visibility": "external",
        "args": [
            {
                "name": "assets",
                "type": "address[] calldata"
            },
            {
                "name": "sources",
                "type": "address[] calldata"
            }
        ],
        "func": "function setAssetSources(address[] calldata assets, address[] calldata sources)\n    external\n    override\n    onlyAssetListingOrPoolAdmins\n  {\n    _setAssetsSources(assets, sources);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IFintochOracle",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IFintochOracle\n  ",
        "@inheritdoc": "IFintochOracle",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFallbackOracle",
        "visibility": "external",
        "args": [
            {
                "name": "fallbackOracle",
                "type": "address"
            }
        ],
        "func": "function setFallbackOracle(address fallbackOracle)\n    external\n    override\n    onlyAssetListingOrPoolAdmins\n  {\n    _setFallbackOracle(fallbackOracle);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IFintochOracle",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IFintochOracle\n  ",
        "@inheritdoc": "IFintochOracle",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAssetPrice",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getAssetPrice(address asset) public view override returns (uint256) {\n    AggregatorInterface source = assetsSources[asset];\n\n    if (asset == BASE_CURRENCY) {\n      return BASE_CURRENCY_UNIT;\n    } else if (address(source) == address(0)) {\n      return _fallbackOracle.getAssetPrice(asset);\n    } else {\n      int256 price = source.latestAnswer();\n      if (price > 0) {\n        return uint256(price);\n      } else {\n        return _fallbackOracle.getAssetPrice(asset);\n      }\n    }\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPriceOracleGetter",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPriceOracleGetter\n  ",
        "@inheritdoc": "IPriceOracleGetter",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAssetsPrices",
        "visibility": "external",
        "args": [
            {
                "name": "assets",
                "type": "address[] calldata"
            }
        ],
        "func": "function getAssetsPrices(address[] calldata assets)\n    external\n    view\n    override\n    returns (uint256[] memory)\n  {\n    uint256[] memory prices = new uint256[](assets.length);\n    for (uint256 i = 0; i < assets.length; i++) {\n      prices[i] = getAssetPrice(assets[i]);\n    }\n    return prices;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IFintochOracle",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IFintochOracle\n  ",
        "@inheritdoc": "IFintochOracle",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSourceOfAsset",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getSourceOfAsset(address asset) external view override returns (address) {\n    return address(assetsSources[asset]);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IFintochOracle",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IFintochOracle\n  ",
        "@inheritdoc": "IFintochOracle",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getFallbackOracle",
        "visibility": "external",
        "args": [],
        "func": "function getFallbackOracle() external view returns (address) {\n    return address(_fallbackOracle);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IFintochOracle",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IFintochOracle\n  ",
        "@inheritdoc": "IFintochOracle",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAllReservesTokens",
        "visibility": "external",
        "args": [],
        "func": "function getAllReservesTokens() external view returns (TokenData[] memory) {\n    IPool pool = IPool(ADDRESSES_PROVIDER.getPool());\n    address[] memory reserves = pool.getReservesList();\n    TokenData[] memory reservesTokens = new TokenData[](reserves.length);\n    for (uint256 i = 0; i < reserves.length; i++) {\n      if (reserves[i] == MKR) {\n        reservesTokens[i] = TokenData({symbol: 'MKR', tokenAddress: reserves[i]});\n        continue;\n      }\n      if (reserves[i] == ETH) {\n        reservesTokens[i] = TokenData({symbol: 'ETH', tokenAddress: reserves[i]});\n        continue;\n      }\n      reservesTokens[i] = TokenData({\n        symbol: IERC20Detailed(reserves[i]).symbol(),\n        tokenAddress: reserves[i]\n      });\n    }\n    return reservesTokens;\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the list of the existing reserves in the pool.",
            "   * @dev Handling MKR and ETH in a different way since they do not have standard `symbol` functions.",
            "   * @return The list of reserves, pairs of symbols and addresses",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Returns the list of the existing reserves in the pool.\n   * @dev Handling MKR and ETH in a different way since they do not have standard `symbol` functions.\n   * @return The list of reserves, pairs of symbols and addresses\n   */\n",
        "@notice": "Returns the list of the existing reserves in the pool.",
        "@dev": "Handling MKR and ETH in a different way since they do not have standard `symbol` functions.",
        "@return1": "The list of reserves, pairs of symbols and addresses",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAllATokens",
        "visibility": "external",
        "args": [],
        "func": "function getAllATokens() external view returns (TokenData[] memory) {\n    IPool pool = IPool(ADDRESSES_PROVIDER.getPool());\n    address[] memory reserves = pool.getReservesList();\n    TokenData[] memory aTokens = new TokenData[](reserves.length);\n    for (uint256 i = 0; i < reserves.length; i++) {\n      DataTypes.ReserveData memory reserveData = pool.getReserveData(reserves[i]);\n      aTokens[i] = TokenData({\n        symbol: IERC20Detailed(reserveData.aTokenAddress).symbol(),\n        tokenAddress: reserveData.aTokenAddress\n      });\n    }\n    return aTokens;\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the list of the existing ATokens in the pool.",
            "   * @return The list of ATokens, pairs of symbols and addresses",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Returns the list of the existing ATokens in the pool.\n   * @return The list of ATokens, pairs of symbols and addresses\n   */\n",
        "@notice": "Returns the list of the existing ATokens in the pool.",
        "@return1": "The list of ATokens, pairs of symbols and addresses",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReserveConfigurationData",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getReserveConfigurationData(address asset)\n    external\n    view\n    returns (\n      uint256 decimals,\n      uint256 ltv,\n      uint256 liquidationThreshold,\n      uint256 liquidationBonus,\n      uint256 reserveFactor,\n      bool usageAsCollateralEnabled,\n      bool borrowingEnabled,\n      bool stableBorrowRateEnabled,\n      bool isActive,\n      bool isFrozen\n    )\n  {\n    DataTypes.ReserveConfigurationMap memory configuration = IPool(ADDRESSES_PROVIDER.getPool())\n      .getConfiguration(asset);\n\n    (ltv, liquidationThreshold, liquidationBonus, decimals, reserveFactor, ) = configuration\n      .getParams();\n\n    (isActive, isFrozen, borrowingEnabled, stableBorrowRateEnabled, ) = configuration.getFlags();\n\n    usageAsCollateralEnabled = liquidationThreshold != 0;\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the configuration data of the reserve",
            "   * @dev Not returning borrow and supply caps for compatibility, nor pause flag",
            "   * @param asset The address of the underlying asset of the reserve",
            "   * @return decimals The number of decimals of the reserve",
            "   * @return ltv The ltv of the reserve",
            "   * @return liquidationThreshold The liquidationThreshold of the reserve",
            "   * @return liquidationBonus The liquidationBonus of the reserve",
            "   * @return reserveFactor The reserveFactor of the reserve",
            "   * @return usageAsCollateralEnabled True if the usage as collateral is enabled, false otherwise",
            "   * @return borrowingEnabled True if borrowing is enabled, false otherwise",
            "   * @return stableBorrowRateEnabled True if stable rate borrowing is enabled, false otherwise",
            "   * @return isActive True if it is active, false otherwise",
            "   * @return isFrozen True if it is frozen, false otherwise",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the configuration data of the reserve\n   * @dev Not returning borrow and supply caps for compatibility, nor pause flag\n   * @param asset The address of the underlying asset of the reserve\n   * @return decimals The number of decimals of the reserve\n   * @return ltv The ltv of the reserve\n   * @return liquidationThreshold The liquidationThreshold of the reserve\n   * @return liquidationBonus The liquidationBonus of the reserve\n   * @return reserveFactor The reserveFactor of the reserve\n   * @return usageAsCollateralEnabled True if the usage as collateral is enabled, false otherwise\n   * @return borrowingEnabled True if borrowing is enabled, false otherwise\n   * @return stableBorrowRateEnabled True if stable rate borrowing is enabled, false otherwise\n   * @return isActive True if it is active, false otherwise\n   * @return isFrozen True if it is frozen, false otherwise\n   **/\n",
        "@notice": "Returns the configuration data of the reserve",
        "@dev": "Not returning borrow and supply caps for compatibility, nor pause flag",
        "@param1": "asset The address of the underlying asset of the reserve",
        "@return1": "decimals The number of decimals of the reserve",
        "@return2": "ltv The ltv of the reserve",
        "@return3": "liquidationThreshold The liquidationThreshold of the reserve",
        "@return4": "liquidationBonus The liquidationBonus of the reserve",
        "@return5": "reserveFactor The reserveFactor of the reserve",
        "@return6": "usageAsCollateralEnabled True if the usage as collateral is enabled, false otherwise",
        "@return7": "borrowingEnabled True if borrowing is enabled, false otherwise",
        "@return8": "stableBorrowRateEnabled True if stable rate borrowing is enabled, false otherwise",
        "@return9": "isActive True if it is active, false otherwise",
        "@return10": "isFrozen True if it is frozen, false otherwise",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReserveEModeCategory",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getReserveEModeCategory(address asset) external view returns (uint256) {\n    DataTypes.ReserveConfigurationMap memory configuration = IPool(ADDRESSES_PROVIDER.getPool())\n      .getConfiguration(asset);\n    return configuration.getEModeCategory();\n  }",
        "comments": [
            "/**",
            "   * Returns the efficiency mode category of the reserve",
            "   * @param asset The address of the underlying asset of the reserve",
            "   * @return The eMode id of the reserve",
            "   */",
            ""
        ],
        "comt": "/**\n   * Returns the efficiency mode category of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The eMode id of the reserve\n   */\n",
        "@param1": "asset The address of the underlying asset of the reserve",
        "@return1": "The eMode id of the reserve",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReserveCaps",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getReserveCaps(address asset)\n    external\n    view\n    returns (uint256 borrowCap, uint256 supplyCap)\n  {\n    (borrowCap, supplyCap) = IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getCaps();\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the caps parameters of the reserve",
            "   * @param asset The address of the underlying asset of the reserve",
            "   * @return borrowCap The borrow cap of the reserve",
            "   * @return supplyCap The supply cap of the reserve",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the caps parameters of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return borrowCap The borrow cap of the reserve\n   * @return supplyCap The supply cap of the reserve\n   **/\n",
        "@notice": "Returns the caps parameters of the reserve",
        "@param1": "asset The address of the underlying asset of the reserve",
        "@return1": "borrowCap The borrow cap of the reserve",
        "@return2": "supplyCap The supply cap of the reserve",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPaused",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getPaused(address asset) external view returns (bool isPaused) {\n    (, , , , isPaused) = IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getFlags();\n  }",
        "comments": [
            "/**",
            "   * @notice Returns if the pool is paused",
            "   * @param asset The address of the underlying asset of the reserve",
            "   * @return isPaused True if the pool is paused, false otherwise",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns if the pool is paused\n   * @param asset The address of the underlying asset of the reserve\n   * @return isPaused True if the pool is paused, false otherwise\n   **/\n",
        "@notice": "Returns if the pool is paused",
        "@param1": "asset The address of the underlying asset of the reserve",
        "@return1": "isPaused True if the pool is paused, false otherwise",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSiloedBorrowing",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getSiloedBorrowing(address asset) external view returns (bool) {\n    return IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getSiloedBorrowing();\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the siloed borrowing flag",
            "   * @param asset The address of the underlying asset of the reserve",
            "   * @return True if the asset is siloed for borrowing",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the siloed borrowing flag\n   * @param asset The address of the underlying asset of the reserve\n   * @return True if the asset is siloed for borrowing\n   **/\n",
        "@notice": "Returns the siloed borrowing flag",
        "@param1": "asset The address of the underlying asset of the reserve",
        "@return1": "True if the asset is siloed for borrowing",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getLiquidationProtocolFee",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getLiquidationProtocolFee(address asset) external view returns (uint256) {\n    return IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getLiquidationProtocolFee();\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the protocol fee on the liquidation bonus",
            "   * @param asset The address of the underlying asset of the reserve",
            "   * @return The protocol fee on liquidation",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the protocol fee on the liquidation bonus\n   * @param asset The address of the underlying asset of the reserve\n   * @return The protocol fee on liquidation\n   **/\n",
        "@notice": "Returns the protocol fee on the liquidation bonus",
        "@param1": "asset The address of the underlying asset of the reserve",
        "@return1": "The protocol fee on liquidation",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUnbackedMintCap",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getUnbackedMintCap(address asset) external view returns (uint256) {\n    return IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getUnbackedMintCap();\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the unbacked mint cap of the reserve",
            "   * @param asset The address of the underlying asset of the reserve",
            "   * @return The unbacked mint cap of the reserve",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the unbacked mint cap of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The unbacked mint cap of the reserve\n   **/\n",
        "@notice": "Returns the unbacked mint cap of the reserve",
        "@param1": "asset The address of the underlying asset of the reserve",
        "@return1": "The unbacked mint cap of the reserve",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getDebtCeiling",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getDebtCeiling(address asset) external view returns (uint256) {\n    return IPool(ADDRESSES_PROVIDER.getPool()).getConfiguration(asset).getDebtCeiling();\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the debt ceiling of the reserve",
            "   * @param asset The address of the underlying asset of the reserve",
            "   * @return The debt ceiling of the reserve",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the debt ceiling of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The debt ceiling of the reserve\n   **/\n",
        "@notice": "Returns the debt ceiling of the reserve",
        "@param1": "asset The address of the underlying asset of the reserve",
        "@return1": "The debt ceiling of the reserve",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getDebtCeilingDecimals",
        "visibility": "external",
        "args": [],
        "func": "function getDebtCeilingDecimals() external pure returns (uint256) {\n    return ReserveConfiguration.DEBT_CEILING_DECIMALS;\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the debt ceiling decimals",
            "   * @return The debt ceiling decimals",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the debt ceiling decimals\n   * @return The debt ceiling decimals\n   **/\n",
        "@notice": "Returns the debt ceiling decimals",
        "@return1": "The debt ceiling decimals",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReserveData",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getReserveData(address asset)\n    external\n    view\n    override\n    returns (\n      uint256 unbacked,\n      uint256 accruedToTreasuryScaled,\n      uint256 totalAToken,\n      uint256 totalStableDebt,\n      uint256 totalVariableDebt,\n      uint256 liquidityRate,\n      uint256 variableBorrowRate,\n      uint256 stableBorrowRate,\n      uint256 averageStableBorrowRate,\n      uint256 liquidityIndex,\n      uint256 variableBorrowIndex,\n      uint40 lastUpdateTimestamp\n    )\n  {\n    DataTypes.ReserveData memory reserve = IPool(ADDRESSES_PROVIDER.getPool()).getReserveData(\n      asset\n    );\n\n    return (\n      reserve.unbacked,\n      reserve.accruedToTreasury,\n      IERC20Detailed(reserve.aTokenAddress).totalSupply(),\n      IERC20Detailed(reserve.stableDebtTokenAddress).totalSupply(),\n      IERC20Detailed(reserve.variableDebtTokenAddress).totalSupply(),\n      reserve.currentLiquidityRate,\n      reserve.currentVariableBorrowRate,\n      reserve.currentStableBorrowRate,\n      IStableDebtToken(reserve.stableDebtTokenAddress).getAverageStableRate(),\n      reserve.liquidityIndex,\n      reserve.variableBorrowIndex,\n      reserve.lastUpdateTimestamp\n    );\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the reserve data",
            "   * @param asset The address of the underlying asset of the reserve",
            "   * @return unbacked The amount of unbacked tokens",
            "   * @return accruedToTreasuryScaled The scaled amount of tokens accrued to treasury that is to be minted",
            "   * @return totalAToken The total supply of the aToken",
            "   * @return totalStableDebt The total stable debt of the reserve",
            "   * @return totalVariableDebt The total variable debt of the reserve",
            "   * @return liquidityRate The liquidity rate of the reserve",
            "   * @return variableBorrowRate The variable borrow rate of the reserve",
            "   * @return stableBorrowRate The stable borrow rate of the reserve",
            "   * @return averageStableBorrowRate The average stable borrow rate of the reserve",
            "   * @return liquidityIndex The liquidity index of the reserve",
            "   * @return variableBorrowIndex The variable borrow index of the reserve",
            "   * @return lastUpdateTimestamp The timestamp of the last update of the reserve",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the reserve data\n   * @param asset The address of the underlying asset of the reserve\n   * @return unbacked The amount of unbacked tokens\n   * @return accruedToTreasuryScaled The scaled amount of tokens accrued to treasury that is to be minted\n   * @return totalAToken The total supply of the aToken\n   * @return totalStableDebt The total stable debt of the reserve\n   * @return totalVariableDebt The total variable debt of the reserve\n   * @return liquidityRate The liquidity rate of the reserve\n   * @return variableBorrowRate The variable borrow rate of the reserve\n   * @return stableBorrowRate The stable borrow rate of the reserve\n   * @return averageStableBorrowRate The average stable borrow rate of the reserve\n   * @return liquidityIndex The liquidity index of the reserve\n   * @return variableBorrowIndex The variable borrow index of the reserve\n   * @return lastUpdateTimestamp The timestamp of the last update of the reserve\n   **/\n",
        "@notice": "Returns the reserve data",
        "@param1": "asset The address of the underlying asset of the reserve",
        "@return1": "unbacked The amount of unbacked tokens",
        "@return2": "accruedToTreasuryScaled The scaled amount of tokens accrued to treasury that is to be minted",
        "@return3": "totalAToken The total supply of the aToken",
        "@return4": "totalStableDebt The total stable debt of the reserve",
        "@return5": "totalVariableDebt The total variable debt of the reserve",
        "@return6": "liquidityRate The liquidity rate of the reserve",
        "@return7": "variableBorrowRate The variable borrow rate of the reserve",
        "@return8": "stableBorrowRate The stable borrow rate of the reserve",
        "@return9": "averageStableBorrowRate The average stable borrow rate of the reserve",
        "@return10": "liquidityIndex The liquidity index of the reserve",
        "@return11": "variableBorrowIndex The variable borrow index of the reserve",
        "@return12": "lastUpdateTimestamp The timestamp of the last update of the reserve",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getATokenTotalSupply",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getATokenTotalSupply(address asset) external view override returns (uint256) {\n    DataTypes.ReserveData memory reserve = IPool(ADDRESSES_PROVIDER.getPool()).getReserveData(\n      asset\n    );\n    return IERC20Detailed(reserve.aTokenAddress).totalSupply();\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the total supply of aTokens for a given asset",
            "   * @param asset The address of the underlying asset of the reserve",
            "   * @return The total supply of the aToken",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the total supply of aTokens for a given asset\n   * @param asset The address of the underlying asset of the reserve\n   * @return The total supply of the aToken\n   **/\n",
        "@notice": "Returns the total supply of aTokens for a given asset",
        "@param1": "asset The address of the underlying asset of the reserve",
        "@return1": "The total supply of the aToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getTotalDebt",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getTotalDebt(address asset) external view override returns (uint256) {\n    DataTypes.ReserveData memory reserve = IPool(ADDRESSES_PROVIDER.getPool()).getReserveData(\n      asset\n    );\n    return\n      IERC20Detailed(reserve.stableDebtTokenAddress).totalSupply() +\n      IERC20Detailed(reserve.variableDebtTokenAddress).totalSupply();\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the total debt for a given asset",
            "   * @param asset The address of the underlying asset of the reserve",
            "   * @return The total debt for asset",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the total debt for a given asset\n   * @param asset The address of the underlying asset of the reserve\n   * @return The total debt for asset\n   **/\n",
        "@notice": "Returns the total debt for a given asset",
        "@param1": "asset The address of the underlying asset of the reserve",
        "@return1": "The total debt for asset",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUserReserveData",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function getUserReserveData(address asset, address user)\n    external\n    view\n    returns (\n      uint256 currentATokenBalance,\n      uint256 currentStableDebt,\n      uint256 currentVariableDebt,\n      uint256 principalStableDebt,\n      uint256 scaledVariableDebt,\n      uint256 stableBorrowRate,\n      uint256 liquidityRate,\n      uint40 stableRateLastUpdated,\n      bool usageAsCollateralEnabled\n    )\n  {\n    DataTypes.ReserveData memory reserve = IPool(ADDRESSES_PROVIDER.getPool()).getReserveData(\n      asset\n    );\n\n    DataTypes.UserConfigurationMap memory userConfig = IPool(ADDRESSES_PROVIDER.getPool())\n      .getUserConfiguration(user);\n\n    currentATokenBalance = IERC20Detailed(reserve.aTokenAddress).balanceOf(user);\n    currentVariableDebt = IERC20Detailed(reserve.variableDebtTokenAddress).balanceOf(user);\n    currentStableDebt = IERC20Detailed(reserve.stableDebtTokenAddress).balanceOf(user);\n    principalStableDebt = IStableDebtToken(reserve.stableDebtTokenAddress).principalBalanceOf(user);\n    scaledVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress).scaledBalanceOf(user);\n    liquidityRate = reserve.currentLiquidityRate;\n    stableBorrowRate = IStableDebtToken(reserve.stableDebtTokenAddress).getUserStableRate(user);\n    stableRateLastUpdated = IStableDebtToken(reserve.stableDebtTokenAddress).getUserLastUpdated(\n      user\n    );\n    usageAsCollateralEnabled = userConfig.isUsingAsCollateral(reserve.id);\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the user data in a reserve",
            "   * @param asset The address of the underlying asset of the reserve",
            "   * @param user The address of the user",
            "   * @return currentATokenBalance The current AToken balance of the user",
            "   * @return currentStableDebt The current stable debt of the user",
            "   * @return currentVariableDebt The current variable debt of the user",
            "   * @return principalStableDebt The principal stable debt of the user",
            "   * @return scaledVariableDebt The scaled variable debt of the user",
            "   * @return stableBorrowRate The stable borrow rate of the user",
            "   * @return liquidityRate The liquidity rate of the reserve",
            "   * @return stableRateLastUpdated The timestamp of the last update of the user stable rate",
            "   * @return usageAsCollateralEnabled True if the user is using the asset as collateral, false",
            "   *         otherwise",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the user data in a reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @param user The address of the user\n   * @return currentATokenBalance The current AToken balance of the user\n   * @return currentStableDebt The current stable debt of the user\n   * @return currentVariableDebt The current variable debt of the user\n   * @return principalStableDebt The principal stable debt of the user\n   * @return scaledVariableDebt The scaled variable debt of the user\n   * @return stableBorrowRate The stable borrow rate of the user\n   * @return liquidityRate The liquidity rate of the reserve\n   * @return stableRateLastUpdated The timestamp of the last update of the user stable rate\n   * @return usageAsCollateralEnabled True if the user is using the asset as collateral, false\n   *         otherwise\n   **/\n",
        "@notice": "Returns the user data in a reserve",
        "@param1": "asset The address of the underlying asset of the reserve",
        "@param2": "user The address of the user",
        "@return1": "currentATokenBalance The current AToken balance of the user",
        "@return2": "currentStableDebt The current stable debt of the user",
        "@return3": "currentVariableDebt The current variable debt of the user",
        "@return4": "principalStableDebt The principal stable debt of the user",
        "@return5": "scaledVariableDebt The scaled variable debt of the user",
        "@return6": "stableBorrowRate The stable borrow rate of the user",
        "@return7": "liquidityRate The liquidity rate of the reserve",
        "@return8": "stableRateLastUpdated The timestamp of the last update of the user stable rate",
        "@return9": "usageAsCollateralEnabled True if the user is using the asset as collateral, false * otherwise",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReserveTokensAddresses",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getReserveTokensAddresses(address asset)\n    external\n    view\n    returns (\n      address aTokenAddress,\n      address stableDebtTokenAddress,\n      address variableDebtTokenAddress\n    )\n  {\n    DataTypes.ReserveData memory reserve = IPool(ADDRESSES_PROVIDER.getPool()).getReserveData(\n      asset\n    );\n\n    return (\n      reserve.aTokenAddress,\n      reserve.stableDebtTokenAddress,\n      reserve.variableDebtTokenAddress\n    );\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the token addresses of the reserve",
            "   * @param asset The address of the underlying asset of the reserve",
            "   * @return aTokenAddress The AToken address of the reserve",
            "   * @return stableDebtTokenAddress The StableDebtToken address of the reserve",
            "   * @return variableDebtTokenAddress The VariableDebtToken address of the reserve",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Returns the token addresses of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return aTokenAddress The AToken address of the reserve\n   * @return stableDebtTokenAddress The StableDebtToken address of the reserve\n   * @return variableDebtTokenAddress The VariableDebtToken address of the reserve\n   */\n",
        "@notice": "Returns the token addresses of the reserve",
        "@param1": "asset The address of the underlying asset of the reserve",
        "@return1": "aTokenAddress The AToken address of the reserve",
        "@return2": "stableDebtTokenAddress The StableDebtToken address of the reserve",
        "@return3": "variableDebtTokenAddress The VariableDebtToken address of the reserve",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getInterestRateStrategyAddress",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getInterestRateStrategyAddress(address asset)\n    external\n    view\n    returns (address irStrategyAddress)\n  {\n    DataTypes.ReserveData memory reserve = IPool(ADDRESSES_PROVIDER.getPool()).getReserveData(\n      asset\n    );\n\n    return (reserve.interestRateStrategyAddress);\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the address of the Interest Rate strategy",
            "   * @param asset The address of the underlying asset of the reserve",
            "   * @return irStrategyAddress The address of the Interest Rate strategy",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Returns the address of the Interest Rate strategy\n   * @param asset The address of the underlying asset of the reserve\n   * @return irStrategyAddress The address of the Interest Rate strategy\n   */\n",
        "@notice": "Returns the address of the Interest Rate strategy",
        "@param1": "asset The address of the underlying asset of the reserve",
        "@return1": "irStrategyAddress The address of the Interest Rate strategy",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "encodeSupplyParams",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "referralCode",
                "type": "uint16"
            }
        ],
        "func": "function encodeSupplyParams(\n    address asset,\n    uint256 amount,\n    uint16 referralCode\n  ) external view returns (bytes32) {\n    DataTypes.ReserveData memory data = POOL.getReserveData(asset);\n\n    uint16 assetId = data.id;\n    uint128 shortenedAmount = amount.toUint128();\n    bytes32 res;\n\n    assembly {\n      res := add(assetId, add(shl(16, shortenedAmount), shl(144, referralCode)))\n    }\n    return res;\n  }",
        "comments": [
            "/**",
            "   * @notice Encodes supply parameters from standard input to compact representation of 1 bytes32",
            "   * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf",
            "   * @param asset The address of the underlying asset to supply",
            "   * @param amount The amount to be supplied",
            "   * @param referralCode referralCode Code used to register the integrator originating the operation, for potential rewards.",
            "   *   0 if the action is executed directly by the user, without any middle-man",
            "   * @return compact representation of supply parameters",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Encodes supply parameters from standard input to compact representation of 1 bytes32\n   * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf\n   * @param asset The address of the underlying asset to supply\n   * @param amount The amount to be supplied\n   * @param referralCode referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @return compact representation of supply parameters\n   */\n",
        "@notice": "Encodes supply parameters from standard input to compact representation of 1 bytes32",
        "@dev": "Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf",
        "@param1": "asset The address of the underlying asset to supply",
        "@param2": "amount The amount to be supplied",
        "@param3": "referralCode referralCode Code used to register the integrator originating the operation, for potential rewards. * 0 if the action is executed directly by the user, without any middle-man",
        "@return1": "compact representation of supply parameters",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "encodeSupplyWithPermitParams",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "referralCode",
                "type": "uint16"
            },
            {
                "name": "deadline",
                "type": "uint256"
            },
            {
                "name": "permitV",
                "type": "uint8"
            },
            {
                "name": "permitR",
                "type": "bytes32"
            },
            {
                "name": "permitS",
                "type": "bytes32"
            }
        ],
        "func": "function encodeSupplyWithPermitParams(\n    address asset,\n    uint256 amount,\n    uint16 referralCode,\n    uint256 deadline,\n    uint8 permitV,\n    bytes32 permitR,\n    bytes32 permitS\n  )\n    external\n    view\n    returns (\n      bytes32,\n      bytes32,\n      bytes32\n    )\n  {\n    DataTypes.ReserveData memory data = POOL.getReserveData(asset);\n\n    uint16 assetId = data.id;\n    uint128 shortenedAmount = amount.toUint128();\n    uint32 shortenedDeadline = deadline.toUint32();\n\n    bytes32 res;\n    assembly {\n      res := add(\n        assetId,\n        add(\n          shl(16, shortenedAmount),\n          add(shl(144, referralCode), add(shl(160, shortenedDeadline), shl(192, permitV)))\n        )\n      )\n    }\n\n    return (res, permitR, permitS);\n  }",
        "comments": [
            "/**",
            "   * @notice Encodes supplyWithPermit parameters from standard input to compact representation of 3 bytes32",
            "   * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf",
            "   * @param asset The address of the underlying asset to supply",
            "   * @param amount The amount to be supplied",
            "   * @param referralCode referralCode Code used to register the integrator originating the operation, for potential rewards.",
            "   *   0 if the action is executed directly by the user, without any middle-man",
            "   * @param deadline The deadline timestamp that the permit is valid",
            "   * @param permitV The V parameter of ERC712 permit sig",
            "   * @param permitR The R parameter of ERC712 permit sig",
            "   * @param permitS The S parameter of ERC712 permit sig",
            "   * @return compact representation of supplyWithPermit parameters",
            "   * @return The R parameter of ERC712 permit sig",
            "   * @return The S parameter of ERC712 permit sig",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Encodes supplyWithPermit parameters from standard input to compact representation of 3 bytes32\n   * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf\n   * @param asset The address of the underlying asset to supply\n   * @param amount The amount to be supplied\n   * @param referralCode referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @param deadline The deadline timestamp that the permit is valid\n   * @param permitV The V parameter of ERC712 permit sig\n   * @param permitR The R parameter of ERC712 permit sig\n   * @param permitS The S parameter of ERC712 permit sig\n   * @return compact representation of supplyWithPermit parameters\n   * @return The R parameter of ERC712 permit sig\n   * @return The S parameter of ERC712 permit sig\n   */\n",
        "@notice": "Encodes supplyWithPermit parameters from standard input to compact representation of 3 bytes32",
        "@dev": "Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf",
        "@param1": "asset The address of the underlying asset to supply",
        "@param2": "amount The amount to be supplied",
        "@param3": "referralCode referralCode Code used to register the integrator originating the operation, for potential rewards. * 0 if the action is executed directly by the user, without any middle-man",
        "@param4": "deadline The deadline timestamp that the permit is valid",
        "@param5": "permitV The V parameter of ERC712 permit sig",
        "@param6": "permitR The R parameter of ERC712 permit sig",
        "@param7": "permitS The S parameter of ERC712 permit sig",
        "@return1": "compact representation of supplyWithPermit parameters",
        "@return2": "The R parameter of ERC712 permit sig",
        "@return3": "The S parameter of ERC712 permit sig",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "encodeWithdrawParams",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function encodeWithdrawParams(address asset, uint256 amount) external view returns (bytes32) {\n    DataTypes.ReserveData memory data = POOL.getReserveData(asset);\n\n    uint16 assetId = data.id;\n    uint128 shortenedAmount = amount == type(uint256).max ? type(uint128).max : amount.toUint128();\n\n    bytes32 res;\n    assembly {\n      res := add(assetId, shl(16, shortenedAmount))\n    }\n    return res;\n  }",
        "comments": [
            "/**",
            "   * @notice Encodes withdraw parameters from standard input to compact representation of 1 bytes32",
            "   * @dev Without a to parameter as the compact calls to L2Pool will use msg.sender as to",
            "   * @param asset The address of the underlying asset to withdraw",
            "   * @param amount The underlying amount to be withdrawn",
            "   * @return compact representation of withdraw parameters",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Encodes withdraw parameters from standard input to compact representation of 1 bytes32\n   * @dev Without a to parameter as the compact calls to L2Pool will use msg.sender as to\n   * @param asset The address of the underlying asset to withdraw\n   * @param amount The underlying amount to be withdrawn\n   * @return compact representation of withdraw parameters\n   */\n",
        "@notice": "Encodes withdraw parameters from standard input to compact representation of 1 bytes32",
        "@dev": "Without a to parameter as the compact calls to L2Pool will use msg.sender as to",
        "@param1": "asset The address of the underlying asset to withdraw",
        "@param2": "amount The underlying amount to be withdrawn",
        "@return1": "compact representation of withdraw parameters",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "encodeBorrowParams",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "interestRateMode",
                "type": "uint256"
            },
            {
                "name": "referralCode",
                "type": "uint16"
            }
        ],
        "func": "function encodeBorrowParams(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    uint16 referralCode\n  ) external view returns (bytes32) {\n    DataTypes.ReserveData memory data = POOL.getReserveData(asset);\n\n    uint16 assetId = data.id;\n    uint128 shortenedAmount = amount.toUint128();\n    uint8 shortenedInterestRateMode = interestRateMode.toUint8();\n    bytes32 res;\n    assembly {\n      res := add(\n        assetId,\n        add(\n          shl(16, shortenedAmount),\n          add(shl(144, shortenedInterestRateMode), shl(152, referralCode))\n        )\n      )\n    }\n    return res;\n  }",
        "comments": [
            "/**",
            "   * @notice Encodes borrow parameters from standard input to compact representation of 1 bytes32",
            "   * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf",
            "   * @param asset The address of the underlying asset to borrow",
            "   * @param amount The amount to be borrowed",
            "   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable",
            "   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.",
            "   *   0 if the action is executed directly by the user, without any middle-man",
            "   * @return compact representation of withdraw parameters",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Encodes borrow parameters from standard input to compact representation of 1 bytes32\n   * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf\n   * @param asset The address of the underlying asset to borrow\n   * @param amount The amount to be borrowed\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @return compact representation of withdraw parameters\n   */\n",
        "@notice": "Encodes borrow parameters from standard input to compact representation of 1 bytes32",
        "@dev": "Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf",
        "@param1": "asset The address of the underlying asset to borrow",
        "@param2": "amount The amount to be borrowed",
        "@param3": "interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable",
        "@param4": "referralCode The code used to register the integrator originating the operation, for potential rewards. * 0 if the action is executed directly by the user, without any middle-man",
        "@return1": "compact representation of withdraw parameters",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "encodeRepayParams",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "interestRateMode",
                "type": "uint256"
            }
        ],
        "func": "function encodeRepayParams(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode\n  ) public view returns (bytes32) {\n    DataTypes.ReserveData memory data = POOL.getReserveData(asset);\n\n    uint16 assetId = data.id;\n    uint128 shortenedAmount = amount == type(uint256).max ? type(uint128).max : amount.toUint128();\n    uint8 shortenedInterestRateMode = interestRateMode.toUint8();\n\n    bytes32 res;\n    assembly {\n      res := add(assetId, add(shl(16, shortenedAmount), shl(144, shortenedInterestRateMode)))\n    }\n    return res;\n  }",
        "comments": [
            "/**",
            "   * @notice Encodes repay parameters from standard input to compact representation of 1 bytes32",
            "   * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf",
            "   * @param asset The address of the borrowed underlying asset previously borrowed",
            "   * @param amount The amount to repay",
            "   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `interestRateMode`",
            "   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable",
            "   * @return compact representation of repay parameters",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Encodes repay parameters from standard input to compact representation of 1 bytes32\n   * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf\n   * @param asset The address of the borrowed underlying asset previously borrowed\n   * @param amount The amount to repay\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `interestRateMode`\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n   * @return compact representation of repay parameters\n   */\n",
        "@notice": "Encodes repay parameters from standard input to compact representation of 1 bytes32",
        "@dev": "Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf",
        "@param1": "asset The address of the borrowed underlying asset previously borrowed",
        "@param2": "amount The amount to repay * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `interestRateMode`",
        "@param3": "interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable",
        "@return1": "compact representation of repay parameters",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "encodeRepayWithPermitParams",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "interestRateMode",
                "type": "uint256"
            },
            {
                "name": "deadline",
                "type": "uint256"
            },
            {
                "name": "permitV",
                "type": "uint8"
            },
            {
                "name": "permitR",
                "type": "bytes32"
            },
            {
                "name": "permitS",
                "type": "bytes32"
            }
        ],
        "func": "function encodeRepayWithPermitParams(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    uint256 deadline,\n    uint8 permitV,\n    bytes32 permitR,\n    bytes32 permitS\n  )\n    external\n    view\n    returns (\n      bytes32,\n      bytes32,\n      bytes32\n    )\n  {\n    DataTypes.ReserveData memory data = POOL.getReserveData(asset);\n\n    uint16 assetId = data.id;\n    uint128 shortenedAmount = amount == type(uint256).max ? type(uint128).max : amount.toUint128();\n    uint8 shortenedInterestRateMode = interestRateMode.toUint8();\n    uint32 shortenedDeadline = deadline.toUint32();\n\n    bytes32 res;\n    assembly {\n      res := add(\n        assetId,\n        add(\n          shl(16, shortenedAmount),\n          add(\n            shl(144, shortenedInterestRateMode),\n            add(shl(152, shortenedDeadline), shl(184, permitV))\n          )\n        )\n      )\n    }\n    return (res, permitR, permitS);\n  }",
        "comments": [
            "/**",
            "   * @notice Encodes repayWithPermit parameters from standard input to compact representation of 3 bytes32",
            "   * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf",
            "   * @param asset The address of the borrowed underlying asset previously borrowed",
            "   * @param amount The amount to repay",
            "   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`",
            "   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable",
            "   * @param deadline The deadline timestamp that the permit is valid",
            "   * @param permitV The V parameter of ERC712 permit sig",
            "   * @param permitR The R parameter of ERC712 permit sig",
            "   * @param permitS The S parameter of ERC712 permit sig",
            "   * @return compact representation of repayWithPermit parameters",
            "   * @return The R parameter of ERC712 permit sig",
            "   * @return The S parameter of ERC712 permit sig",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Encodes repayWithPermit parameters from standard input to compact representation of 3 bytes32\n   * @dev Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf\n   * @param asset The address of the borrowed underlying asset previously borrowed\n   * @param amount The amount to repay\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n   * @param deadline The deadline timestamp that the permit is valid\n   * @param permitV The V parameter of ERC712 permit sig\n   * @param permitR The R parameter of ERC712 permit sig\n   * @param permitS The S parameter of ERC712 permit sig\n   * @return compact representation of repayWithPermit parameters\n   * @return The R parameter of ERC712 permit sig\n   * @return The S parameter of ERC712 permit sig\n   */\n",
        "@notice": "Encodes repayWithPermit parameters from standard input to compact representation of 3 bytes32",
        "@dev": "Without an onBehalfOf parameter as the compact calls to L2Pool will use msg.sender as onBehalfOf",
        "@param1": "asset The address of the borrowed underlying asset previously borrowed",
        "@param2": "amount The amount to repay * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`",
        "@param3": "interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable",
        "@param4": "deadline The deadline timestamp that the permit is valid",
        "@param5": "permitV The V parameter of ERC712 permit sig",
        "@param6": "permitR The R parameter of ERC712 permit sig",
        "@param7": "permitS The S parameter of ERC712 permit sig",
        "@return1": "compact representation of repayWithPermit parameters",
        "@return2": "The R parameter of ERC712 permit sig",
        "@return3": "The S parameter of ERC712 permit sig",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "encodeRepayWithATokensParams",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "interestRateMode",
                "type": "uint256"
            }
        ],
        "func": "function encodeRepayWithATokensParams(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode\n  ) external view returns (bytes32) {\n    return encodeRepayParams(asset, amount, interestRateMode);\n  }",
        "comments": [
            "/**",
            "   * @notice Encodes repay with aToken parameters from standard input to compact representation of 1 bytes32",
            "   * @param asset The address of the borrowed underlying asset previously borrowed",
            "   * @param amount The amount to repay",
            "   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`",
            "   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable",
            "   * @return compact representation of repay with aToken parameters",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Encodes repay with aToken parameters from standard input to compact representation of 1 bytes32\n   * @param asset The address of the borrowed underlying asset previously borrowed\n   * @param amount The amount to repay\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n   * @return compact representation of repay with aToken parameters\n   */\n",
        "@notice": "Encodes repay with aToken parameters from standard input to compact representation of 1 bytes32",
        "@param1": "asset The address of the borrowed underlying asset previously borrowed",
        "@param2": "amount The amount to repay * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`",
        "@param3": "interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable",
        "@return1": "compact representation of repay with aToken parameters",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "encodeSwapBorrowRateMode",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "interestRateMode",
                "type": "uint256"
            }
        ],
        "func": "function encodeSwapBorrowRateMode(address asset, uint256 interestRateMode)\n    external\n    view\n    returns (bytes32)\n  {\n    DataTypes.ReserveData memory data = POOL.getReserveData(asset);\n    uint16 assetId = data.id;\n    uint8 shortenedInterestRateMode = interestRateMode.toUint8();\n    bytes32 res;\n    assembly {\n      res := add(assetId, shl(16, shortenedInterestRateMode))\n    }\n    return res;\n  }",
        "comments": [
            "/**",
            "   * @notice Encodes swap borrow rate mode parameters from standard input to compact representation of 1 bytes32",
            "   * @param asset The address of the underlying asset borrowed",
            "   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable",
            "   * @return compact representation of swap borrow rate mode parameters",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Encodes swap borrow rate mode parameters from standard input to compact representation of 1 bytes32\n   * @param asset The address of the underlying asset borrowed\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n   * @return compact representation of swap borrow rate mode parameters\n   */\n",
        "@notice": "Encodes swap borrow rate mode parameters from standard input to compact representation of 1 bytes32",
        "@param1": "asset The address of the underlying asset borrowed",
        "@param2": "interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable",
        "@return1": "compact representation of swap borrow rate mode parameters",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "encodeRebalanceStableBorrowRate",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function encodeRebalanceStableBorrowRate(address asset, address user)\n    external\n    view\n    returns (bytes32)\n  {\n    DataTypes.ReserveData memory data = POOL.getReserveData(asset);\n    uint16 assetId = data.id;\n\n    bytes32 res;\n    assembly {\n      res := add(assetId, shl(16, user))\n    }\n    return res;\n  }",
        "comments": [
            "/**",
            "   * @notice Encodes rebalance stable borrow rate parameters from standard input to compact representation of 1 bytes32",
            "   * @param asset The address of the underlying asset borrowed",
            "   * @param user The address of the user to be rebalanced",
            "   * @return compact representation of rebalance stable borrow rate parameters",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Encodes rebalance stable borrow rate parameters from standard input to compact representation of 1 bytes32\n   * @param asset The address of the underlying asset borrowed\n   * @param user The address of the user to be rebalanced\n   * @return compact representation of rebalance stable borrow rate parameters\n   */\n",
        "@notice": "Encodes rebalance stable borrow rate parameters from standard input to compact representation of 1 bytes32",
        "@param1": "asset The address of the underlying asset borrowed",
        "@param2": "user The address of the user to be rebalanced",
        "@return1": "compact representation of rebalance stable borrow rate parameters",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "encodeSetUserUseReserveAsCollateral",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "useAsCollateral",
                "type": "bool"
            }
        ],
        "func": "function encodeSetUserUseReserveAsCollateral(address asset, bool useAsCollateral)\n    external\n    view\n    returns (bytes32)\n  {\n    DataTypes.ReserveData memory data = POOL.getReserveData(asset);\n    uint16 assetId = data.id;\n    bytes32 res;\n    assembly {\n      res := add(assetId, shl(16, useAsCollateral))\n    }\n    return res;\n  }",
        "comments": [
            "/**",
            "   * @notice Encodes set user use reserve as collateral parameters from standard input to compact representation of 1 bytes32",
            "   * @param asset The address of the underlying asset borrowed",
            "   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise",
            "   * @return compact representation of set user use reserve as collateral parameters",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Encodes set user use reserve as collateral parameters from standard input to compact representation of 1 bytes32\n   * @param asset The address of the underlying asset borrowed\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\n   * @return compact representation of set user use reserve as collateral parameters\n   */\n",
        "@notice": "Encodes set user use reserve as collateral parameters from standard input to compact representation of 1 bytes32",
        "@param1": "asset The address of the underlying asset borrowed",
        "@param2": "useAsCollateral True if the user wants to use the supply as collateral, false otherwise",
        "@return1": "compact representation of set user use reserve as collateral parameters",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "encodeLiquidationCall",
        "visibility": "external",
        "args": [
            {
                "name": "collateralAsset",
                "type": "address"
            },
            {
                "name": "debtAsset",
                "type": "address"
            },
            {
                "name": "user",
                "type": "address"
            },
            {
                "name": "debtToCover",
                "type": "uint256"
            },
            {
                "name": "receiveAToken",
                "type": "bool"
            }
        ],
        "func": "function encodeLiquidationCall(\n    address collateralAsset,\n    address debtAsset,\n    address user,\n    uint256 debtToCover,\n    bool receiveAToken\n  ) external view returns (bytes32, bytes32) {\n    DataTypes.ReserveData memory collateralData = POOL.getReserveData(collateralAsset);\n    uint16 collateralAssetId = collateralData.id;\n\n    DataTypes.ReserveData memory debtData = POOL.getReserveData(debtAsset);\n    uint16 debtAssetId = debtData.id;\n\n    uint128 shortenedDebtToCover = debtToCover == type(uint256).max\n      ? type(uint128).max\n      : debtToCover.toUint128();\n\n    bytes32 res1;\n    bytes32 res2;\n\n    assembly {\n      res1 := add(add(collateralAssetId, shl(16, debtAssetId)), shl(32, user))\n      res2 := add(shortenedDebtToCover, shl(128, receiveAToken))\n    }\n    return (res1, res2);\n  }",
        "comments": [
            "/**",
            "   * @notice Encodes liquidation call parameters from standard input to compact representation of 2 bytes32",
            "   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation",
            "   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation",
            "   * @param user The address of the borrower getting liquidated",
            "   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover",
            "   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants",
            "   * to receive the underlying collateral asset directly",
            "   * @return First half ot compact representation of liquidation call parameters",
            "   * @return Second half ot compact representation of liquidation call parameters",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Encodes liquidation call parameters from standard input to compact representation of 2 bytes32\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n   * @param user The address of the borrower getting liquidated\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n   * to receive the underlying collateral asset directly\n   * @return First half ot compact representation of liquidation call parameters\n   * @return Second half ot compact representation of liquidation call parameters\n   */\n",
        "@notice": "Encodes liquidation call parameters from standard input to compact representation of 2 bytes32",
        "@param1": "collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation",
        "@param2": "debtAsset The address of the underlying borrowed asset to be repaid with the liquidation",
        "@param3": "user The address of the borrower getting liquidated",
        "@param4": "debtToCover The debt amount of borrowed `asset` the liquidator wants to cover",
        "@param5": "receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants * to receive the underlying collateral asset directly",
        "@return1": "First half ot compact representation of liquidation call parameters",
        "@return2": "Second half ot compact representation of liquidation call parameters",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFailExecutionTransfer",
        "visibility": "public",
        "args": [
            {
                "name": "fail",
                "type": "bool"
            }
        ],
        "func": "function setFailExecutionTransfer(bool fail) public {\n    _failExecution = fail;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAmountToApprove",
        "visibility": "public",
        "args": [
            {
                "name": "amountToApprove",
                "type": "uint256"
            }
        ],
        "func": "function setAmountToApprove(uint256 amountToApprove) public {\n    _amountToApprove = amountToApprove;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setSimulateEOA",
        "visibility": "public",
        "args": [
            {
                "name": "flag",
                "type": "bool"
            }
        ],
        "func": "function setSimulateEOA(bool flag) public {\n    _simulateEOA = flag;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAmountToApprove",
        "visibility": "public",
        "args": [],
        "func": "function getAmountToApprove() public view returns (uint256) {\n    return _amountToApprove;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "simulateEOA",
        "visibility": "public",
        "args": [],
        "func": "function simulateEOA() public view returns (bool) {\n    return _simulateEOA;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeOperation",
        "visibility": "public",
        "args": [
            {
                "name": "assets",
                "type": "address[] memory"
            },
            {
                "name": "amounts",
                "type": "uint256[] memory"
            },
            {
                "name": "premiums",
                "type": "uint256[] memory"
            },
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "params",
                "type": "// initiator\n    bytes memory //"
            }
        ],
        "func": "function executeOperation(\n    address[] memory assets,\n    uint256[] memory amounts,\n    uint256[] memory premiums,\n    address, // initiator\n    bytes memory // params\n  ) public override returns (bool) {\n    if (_failExecution) {\n      emit ExecutedWithFail(assets, amounts, premiums);\n      return !_simulateEOA;\n    }\n\n    for (uint256 i = 0; i < assets.length; i++) {\n      //mint to this contract the specific amount\n      MintableERC20 token = MintableERC20(assets[i]);\n\n      //check the contract has the specified balance\n      require(\n        amounts[i] <= IERC20(assets[i]).balanceOf(address(this)),\n        'Invalid balance for the contract'\n      );\n\n      uint256 amountToReturn = (_amountToApprove != 0)\n        ? _amountToApprove\n        : amounts[i] + premiums[i];\n      //execution does not fail - mint tokens and return them to the _destination\n\n      token.mint(premiums[i]);\n\n      IERC20(assets[i]).approve(address(POOL), amountToReturn);\n    }\n\n    emit ExecutedWithSuccess(assets, amounts, premiums);\n\n    return true;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFailExecutionTransfer",
        "visibility": "public",
        "args": [
            {
                "name": "fail",
                "type": "bool"
            }
        ],
        "func": "function setFailExecutionTransfer(bool fail) public {\n    _failExecution = fail;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAmountToApprove",
        "visibility": "public",
        "args": [
            {
                "name": "amountToApprove",
                "type": "uint256"
            }
        ],
        "func": "function setAmountToApprove(uint256 amountToApprove) public {\n    _amountToApprove = amountToApprove;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setSimulateEOA",
        "visibility": "public",
        "args": [
            {
                "name": "flag",
                "type": "bool"
            }
        ],
        "func": "function setSimulateEOA(bool flag) public {\n    _simulateEOA = flag;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAmountToApprove",
        "visibility": "public",
        "args": [],
        "func": "function getAmountToApprove() public view returns (uint256) {\n    return _amountToApprove;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "simulateEOA",
        "visibility": "public",
        "args": [],
        "func": "function simulateEOA() public view returns (bool) {\n    return _simulateEOA;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeOperation",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "premium",
                "type": "uint256"
            },
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "params",
                "type": "// initiator\n    bytes memory //"
            }
        ],
        "func": "function executeOperation(\n    address asset,\n    uint256 amount,\n    uint256 premium,\n    address, // initiator\n    bytes memory // params\n  ) public override returns (bool) {\n    if (_failExecution) {\n      emit ExecutedWithFail(asset, amount, premium);\n      return !_simulateEOA;\n    }\n\n    //mint to this contract the specific amount\n    MintableERC20 token = MintableERC20(asset);\n\n    //check the contract has the specified balance\n    require(amount <= IERC20(asset).balanceOf(address(this)), 'Invalid balance for the contract');\n\n    uint256 amountToReturn = (_amountToApprove != 0) ? _amountToApprove : amount.add(premium);\n    //execution does not fail - mint tokens and return them to the _destination\n\n    token.mint(premium);\n\n    IERC20(asset).approve(address(POOL), amountToReturn);\n\n    emit ExecutedWithSuccess(asset, amount, premium);\n\n    return true;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAssetData",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            }
        ],
        "func": "function getAssetData(address)\n    external\n    pure\n    override\n    returns (\n      uint256,\n      uint256,\n      uint256\n    )\n  {\n    return (0, 0, 0);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "assets",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            }
        ],
        "func": "function assets(address)\n    external\n    pure\n    override\n    returns (\n      uint128,\n      uint128,\n      uint256\n    )\n  {\n    return (0, 0, 0);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setClaimer",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "address",
                "type": "address"
            }
        ],
        "func": "function setClaimer(address, address) external override {}",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getClaimer",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            }
        ],
        "func": "function getClaimer(address) external pure override returns (address) {\n    return address(1);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "configureAssets",
        "visibility": "external",
        "args": [
            {
                "name": "calldata",
                "type": "address[]"
            },
            {
                "name": "calldata",
                "type": "uint256[]"
            }
        ],
        "func": "function configureAssets(address[] calldata, uint256[] calldata) external override {}",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "handleAction",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "uint256",
                "type": "uint256"
            },
            {
                "name": "uint256",
                "type": "uint256"
            }
        ],
        "func": "function handleAction(\n    address,\n    uint256,\n    uint256\n  ) external override {}",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRewardsBalance",
        "visibility": "external",
        "args": [
            {
                "name": "calldata",
                "type": "address[]"
            },
            {
                "name": "address",
                "type": "address"
            }
        ],
        "func": "function getRewardsBalance(address[] calldata, address) external pure override returns (uint256) {\n    return 0;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "claimRewards",
        "visibility": "external",
        "args": [
            {
                "name": "calldata",
                "type": "address[]"
            },
            {
                "name": "uint256",
                "type": "uint256"
            },
            {
                "name": "address",
                "type": "address"
            }
        ],
        "func": "function claimRewards(\n    address[] calldata,\n    uint256,\n    address\n  ) external pure override returns (uint256) {\n    return 0;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "claimRewardsOnBehalf",
        "visibility": "external",
        "args": [
            {
                "name": "calldata",
                "type": "address[]"
            },
            {
                "name": "uint256",
                "type": "uint256"
            },
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "address",
                "type": "address"
            }
        ],
        "func": "function claimRewardsOnBehalf(\n    address[] calldata,\n    uint256,\n    address,\n    address\n  ) external pure override returns (uint256) {\n    return 0;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUserUnclaimedRewards",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            }
        ],
        "func": "function getUserUnclaimedRewards(address) external pure override returns (uint256) {\n    return 0;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUserAssetData",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "address",
                "type": "address"
            }
        ],
        "func": "function getUserAssetData(address, address) external pure override returns (uint256) {\n    return 0;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "REWARD_TOKEN",
        "visibility": "external",
        "args": [],
        "func": "function REWARD_TOKEN() external pure override returns (address) {\n    return address(0);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "PRECISION",
        "visibility": "external",
        "args": [],
        "func": "function PRECISION() external pure override returns (uint8) {\n    return 0;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "DISTRIBUTION_END",
        "visibility": "external",
        "args": [],
        "func": "function DISTRIBUTION_END() external pure override returns (uint256) {\n    return 0;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "external",
        "args": [
            {
                "name": "manager",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function initialize(address manager, uint256 value) external {\n    _manager = manager;\n    _value = value;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getManager",
        "visibility": "external",
        "args": [],
        "func": "function getManager() external view returns (address) {\n    return _manager;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setManager",
        "visibility": "external",
        "args": [
            {
                "name": "newManager",
                "type": "address"
            }
        ],
        "func": "function setManager(address newManager) external {\n    _manager = newManager;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "external",
        "args": [
            {
                "name": "addressesProvider",
                "type": "address"
            }
        ],
        "func": "function initialize(address addressesProvider) external {\n    _addressesProvider = addressesProvider;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getManager",
        "visibility": "external",
        "args": [],
        "func": "function getManager() external view returns (address) {\n    return _manager;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setManager",
        "visibility": "external",
        "args": [
            {
                "name": "newManager",
                "type": "address"
            }
        ],
        "func": "function setManager(address newManager) external {\n    _manager = newManager;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAddressesProvider",
        "visibility": "external",
        "args": [],
        "func": "function getAddressesProvider() external view returns (address) {\n    return _addressesProvider;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "external",
        "args": [
            {
                "name": "provider",
                "type": "address"
            }
        ],
        "func": "function initialize(address provider) external {\n    _addressesProvider = provider;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addReserveToReservesList",
        "visibility": "external",
        "args": [
            {
                "name": "reserve",
                "type": "address"
            }
        ],
        "func": "function addReserveToReservesList(address reserve) external {\n    _reserveList.push(reserve);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReservesList",
        "visibility": "external",
        "args": [],
        "func": "function getReservesList() external view returns (address[] memory) {\n    address[] memory reservesList = new address[](_reserveList.length);\n    for (uint256 i; i < _reserveList.length; i++) {\n      reservesList[i] = _reserveList[i];\n    }\n    return reservesList;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMaxNumberOfReserves",
        "visibility": "public",
        "args": [
            {
                "name": "newMaxNumberOfReserves",
                "type": "uint16"
            }
        ],
        "func": "function setMaxNumberOfReserves(uint16 newMaxNumberOfReserves) public {\n    _maxNumberOfReserves = newMaxNumberOfReserves;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "MAX_NUMBER_RESERVES",
        "visibility": "public",
        "args": [],
        "func": "function MAX_NUMBER_RESERVES() public view override returns (uint16) {\n    return _maxNumberOfReserves;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "dropReserve",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function dropReserve(address asset) external override {\n    _reservesList[_reserves[asset].id] = address(0);\n    delete _reserves[asset];\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setLtv",
        "visibility": "external",
        "args": [
            {
                "name": "ltv",
                "type": "uint256"
            }
        ],
        "func": "function setLtv(uint256 ltv) external {\n    DataTypes.ReserveConfigurationMap memory config = configuration;\n    config.setLtv(ltv);\n    configuration = config;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getLtv",
        "visibility": "external",
        "args": [],
        "func": "function getLtv() external view returns (uint256) {\n    return configuration.getLtv();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setLiquidationBonus",
        "visibility": "external",
        "args": [
            {
                "name": "bonus",
                "type": "uint256"
            }
        ],
        "func": "function setLiquidationBonus(uint256 bonus) external {\n    DataTypes.ReserveConfigurationMap memory config = configuration;\n    config.setLiquidationBonus(bonus);\n    configuration = config;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getLiquidationBonus",
        "visibility": "external",
        "args": [],
        "func": "function getLiquidationBonus() external view returns (uint256) {\n    return configuration.getLiquidationBonus();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setLiquidationThreshold",
        "visibility": "external",
        "args": [
            {
                "name": "threshold",
                "type": "uint256"
            }
        ],
        "func": "function setLiquidationThreshold(uint256 threshold) external {\n    DataTypes.ReserveConfigurationMap memory config = configuration;\n    config.setLiquidationThreshold(threshold);\n    configuration = config;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getLiquidationThreshold",
        "visibility": "external",
        "args": [],
        "func": "function getLiquidationThreshold() external view returns (uint256) {\n    return configuration.getLiquidationThreshold();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setDecimals",
        "visibility": "external",
        "args": [
            {
                "name": "decimals",
                "type": "uint256"
            }
        ],
        "func": "function setDecimals(uint256 decimals) external {\n    DataTypes.ReserveConfigurationMap memory config = configuration;\n    config.setDecimals(decimals);\n    configuration = config;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getDecimals",
        "visibility": "external",
        "args": [],
        "func": "function getDecimals() external view returns (uint256) {\n    return configuration.getDecimals();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFrozen",
        "visibility": "external",
        "args": [
            {
                "name": "frozen",
                "type": "bool"
            }
        ],
        "func": "function setFrozen(bool frozen) external {\n    DataTypes.ReserveConfigurationMap memory config = configuration;\n    config.setFrozen(frozen);\n    configuration = config;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getFrozen",
        "visibility": "external",
        "args": [],
        "func": "function getFrozen() external view returns (bool) {\n    return configuration.getFrozen();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setBorrowingEnabled",
        "visibility": "external",
        "args": [
            {
                "name": "enabled",
                "type": "bool"
            }
        ],
        "func": "function setBorrowingEnabled(bool enabled) external {\n    DataTypes.ReserveConfigurationMap memory config = configuration;\n    config.setBorrowingEnabled(enabled);\n    configuration = config;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getBorrowingEnabled",
        "visibility": "external",
        "args": [],
        "func": "function getBorrowingEnabled() external view returns (bool) {\n    return configuration.getBorrowingEnabled();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setStableRateBorrowingEnabled",
        "visibility": "external",
        "args": [
            {
                "name": "enabled",
                "type": "bool"
            }
        ],
        "func": "function setStableRateBorrowingEnabled(bool enabled) external {\n    DataTypes.ReserveConfigurationMap memory config = configuration;\n    config.setStableRateBorrowingEnabled(enabled);\n    configuration = config;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getStableRateBorrowingEnabled",
        "visibility": "external",
        "args": [],
        "func": "function getStableRateBorrowingEnabled() external view returns (bool) {\n    return configuration.getStableRateBorrowingEnabled();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setReserveFactor",
        "visibility": "external",
        "args": [
            {
                "name": "reserveFactor",
                "type": "uint256"
            }
        ],
        "func": "function setReserveFactor(uint256 reserveFactor) external {\n    DataTypes.ReserveConfigurationMap memory config = configuration;\n    config.setReserveFactor(reserveFactor);\n    configuration = config;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReserveFactor",
        "visibility": "external",
        "args": [],
        "func": "function getReserveFactor() external view returns (uint256) {\n    return configuration.getReserveFactor();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setBorrowCap",
        "visibility": "external",
        "args": [
            {
                "name": "borrowCap",
                "type": "uint256"
            }
        ],
        "func": "function setBorrowCap(uint256 borrowCap) external {\n    DataTypes.ReserveConfigurationMap memory config = configuration;\n    config.setBorrowCap(borrowCap);\n    configuration = config;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getBorrowCap",
        "visibility": "external",
        "args": [],
        "func": "function getBorrowCap() external view returns (uint256) {\n    return configuration.getBorrowCap();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getEModeCategory",
        "visibility": "external",
        "args": [],
        "func": "function getEModeCategory() external view returns (uint256) {\n    return configuration.getEModeCategory();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setEModeCategory",
        "visibility": "external",
        "args": [
            {
                "name": "categoryId",
                "type": "uint256"
            }
        ],
        "func": "function setEModeCategory(uint256 categoryId) external {\n    DataTypes.ReserveConfigurationMap memory config = configuration;\n    config.setEModeCategory(categoryId);\n    configuration = config;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setSupplyCap",
        "visibility": "external",
        "args": [
            {
                "name": "supplyCap",
                "type": "uint256"
            }
        ],
        "func": "function setSupplyCap(uint256 supplyCap) external {\n    DataTypes.ReserveConfigurationMap memory config = configuration;\n    config.setSupplyCap(supplyCap);\n    configuration = config;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSupplyCap",
        "visibility": "external",
        "args": [],
        "func": "function getSupplyCap() external view returns (uint256) {\n    return configuration.getSupplyCap();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setLiquidationProtocolFee",
        "visibility": "external",
        "args": [
            {
                "name": "liquidationProtocolFee",
                "type": "uint256"
            }
        ],
        "func": "function setLiquidationProtocolFee(uint256 liquidationProtocolFee) external {\n    DataTypes.ReserveConfigurationMap memory config = configuration;\n    config.setLiquidationProtocolFee(liquidationProtocolFee);\n    configuration = config;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getLiquidationProtocolFee",
        "visibility": "external",
        "args": [],
        "func": "function getLiquidationProtocolFee() external view returns (uint256) {\n    return configuration.getLiquidationProtocolFee();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setUnbackedMintCap",
        "visibility": "external",
        "args": [
            {
                "name": "unbackedMintCap",
                "type": "uint256"
            }
        ],
        "func": "function setUnbackedMintCap(uint256 unbackedMintCap) external {\n    DataTypes.ReserveConfigurationMap memory config = configuration;\n    config.setUnbackedMintCap(unbackedMintCap);\n    configuration = config;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUnbackedMintCap",
        "visibility": "external",
        "args": [],
        "func": "function getUnbackedMintCap() external view returns (uint256) {\n    return configuration.getUnbackedMintCap();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getFlags",
        "visibility": "external",
        "args": [],
        "func": "function getFlags()\n    external\n    view\n    returns (\n      bool,\n      bool,\n      bool,\n      bool,\n      bool\n    )\n  {\n    return configuration.getFlags();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getParams",
        "visibility": "external",
        "args": [],
        "func": "function getParams()\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    )\n  {\n    return configuration.getParams();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getCaps",
        "visibility": "external",
        "args": [],
        "func": "function getCaps() external view returns (uint256, uint256) {\n    return configuration.getCaps();\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "destroyAndTransfer",
        "visibility": "external",
        "args": [
            {
                "name": "to",
                "type": "address payable"
            }
        ],
        "func": "function destroyAndTransfer(address payable to) external payable {\n    selfdestruct(to);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "latestAnswer",
        "visibility": "external",
        "args": [],
        "func": "function latestAnswer() external view returns (int256) {\n    return _latestAnswer;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getTokenType",
        "visibility": "external",
        "args": [],
        "func": "function getTokenType() external pure returns (uint256) {\n    return 1;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decimals",
        "visibility": "external",
        "args": [],
        "func": "function decimals() external pure returns (uint8) {\n    return 8;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAssetPrice",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getAssetPrice(address asset) external view override returns (uint256) {\n    return prices[asset];\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAssetPrice",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "price",
                "type": "uint256"
            }
        ],
        "func": "function setAssetPrice(address asset, uint256 price) external override {\n    prices[asset] = price;\n    emit AssetPriceUpdated(asset, price, block.timestamp);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getEthUsdPrice",
        "visibility": "external",
        "args": [],
        "func": "function getEthUsdPrice() external view returns (uint256) {\n    return ethPriceUsd;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setEthUsdPrice",
        "visibility": "external",
        "args": [
            {
                "name": "price",
                "type": "uint256"
            }
        ],
        "func": "function setEthUsdPrice(uint256 price) external {\n    ethPriceUsd = price;\n    emit EthPriceUpdated(price, block.timestamp);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAnswer",
        "visibility": "external",
        "args": [
            {
                "name": "isDown",
                "type": "bool"
            },
            {
                "name": "timestamp",
                "type": "uint256"
            }
        ],
        "func": "function setAnswer(bool isDown, uint256 timestamp) external onlyOwner {\n    _isDown = isDown;\n    _timestampGotUp = timestamp;\n  }",
        "comments": [
            "/**",
            "   * @notice Updates the health status of the sequencer.",
            "   * @param isDown True if the sequencer is down, false otherwise",
            "   * @param timestamp The timestamp of last time the sequencer got up",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Updates the health status of the sequencer.\n   * @param isDown True if the sequencer is down, false otherwise\n   * @param timestamp The timestamp of last time the sequencer got up\n   */\n",
        "@notice": "Updates the health status of the sequencer.",
        "@param1": "isDown True if the sequencer is down, false otherwise",
        "@param2": "timestamp The timestamp of last time the sequencer got up",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "latestRoundData",
        "visibility": "external",
        "args": [],
        "func": "function latestRoundData()\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    int256 isDown;\n    if (_isDown) {\n      isDown = 1;\n    }\n    return (0, isDown, 0, _timestampGotUp, 0);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc ISequencerOracle",
            "  "
        ],
        "comt": "\n  /// @inheritdoc ISequencerOracle\n  ",
        "@inheritdoc": "ISequencerOracle",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supplyAsset",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function supplyAsset(address asset, uint256 amount) public {\n    MintableERC20 token = MintableERC20(asset);\n    token.mint(amount);\n    token.approve(address(_pool), type(uint256).max);\n    _pool.supply(asset, amount, address(this), 0);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeOperation",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "premium",
                "type": "uint256"
            },
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "params",
                "type": "// initiator\n    bytes memory //"
            }
        ],
        "func": "function executeOperation(\n    address asset,\n    uint256 amount,\n    uint256 premium,\n    address, // initiator\n    bytes memory // params\n  ) public override returns (bool) {\n    MintableERC20 token = MintableERC20(asset);\n    uint256 amountToReturn = amount.add(premium);\n\n    // Also do a normal borrow here in the middle\n    _innerBorrow(asset);\n\n    token.mint(premium);\n    IERC20(asset).approve(address(POOL), amountToReturn);\n\n    return true;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setLiquidityRate",
        "visibility": "public",
        "args": [
            {
                "name": "liquidityRate",
                "type": "uint256"
            }
        ],
        "func": "function setLiquidityRate(uint256 liquidityRate) public {\n    _liquidityRate = liquidityRate;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setStableBorrowRate",
        "visibility": "public",
        "args": [
            {
                "name": "stableBorrowRate",
                "type": "uint256"
            }
        ],
        "func": "function setStableBorrowRate(uint256 stableBorrowRate) public {\n    _stableBorrowRate = stableBorrowRate;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setVariableBorrowRate",
        "visibility": "public",
        "args": [
            {
                "name": "variableBorrowRate",
                "type": "uint256"
            }
        ],
        "func": "function setVariableBorrowRate(uint256 variableBorrowRate) public {\n    _variableBorrowRate = variableBorrowRate;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "calculateInterestRates",
        "visibility": "external",
        "args": [
            {
                "name": "memory",
                "type": "DataTypes.CalculateInterestRatesParams"
            }
        ],
        "func": "function calculateInterestRates(DataTypes.CalculateInterestRatesParams memory)\n    external\n    view\n    override\n    returns (\n      uint256 liquidityRate,\n      uint256 stableBorrowRate,\n      uint256 variableBorrowRate\n    )\n  {\n    return (_liquidityRate, _stableBorrowRate, _variableBorrowRate);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getVariableRateSlope1",
        "visibility": "external",
        "args": [],
        "func": "function getVariableRateSlope1() external view returns (uint256) {\n    return _variableRateSlope1;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getVariableRateSlope2",
        "visibility": "external",
        "args": [],
        "func": "function getVariableRateSlope2() external view returns (uint256) {\n    return _variableRateSlope2;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getStableRateSlope1",
        "visibility": "external",
        "args": [],
        "func": "function getStableRateSlope1() external view returns (uint256) {\n    return _stableRateSlope1;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getStableRateSlope2",
        "visibility": "external",
        "args": [],
        "func": "function getStableRateSlope2() external view returns (uint256) {\n    return _stableRateSlope2;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getBaseVariableBorrowRate",
        "visibility": "external",
        "args": [],
        "func": "function getBaseVariableBorrowRate() external view override returns (uint256) {\n    return _baseVariableBorrowRate;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getMaxVariableBorrowRate",
        "visibility": "external",
        "args": [],
        "func": "function getMaxVariableBorrowRate() external view override returns (uint256) {\n    return _baseVariableBorrowRate + _variableRateSlope1 + _variableRateSlope2;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "wad",
        "visibility": "public",
        "args": [],
        "func": "function wad() public pure returns (uint256) {\n    return WadRayMath.WAD;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "ray",
        "visibility": "public",
        "args": [],
        "func": "function ray() public pure returns (uint256) {\n    return WadRayMath.RAY;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "halfRay",
        "visibility": "public",
        "args": [],
        "func": "function halfRay() public pure returns (uint256) {\n    return WadRayMath.HALF_RAY;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "halfWad",
        "visibility": "public",
        "args": [],
        "func": "function halfWad() public pure returns (uint256) {\n    return WadRayMath.HALF_WAD;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "wadMul",
        "visibility": "public",
        "args": [
            {
                "name": "a",
                "type": "uint256"
            },
            {
                "name": "b",
                "type": "uint256"
            }
        ],
        "func": "function wadMul(uint256 a, uint256 b) public pure returns (uint256) {\n    return WadRayMath.wadMul(a, b);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "wadDiv",
        "visibility": "public",
        "args": [
            {
                "name": "a",
                "type": "uint256"
            },
            {
                "name": "b",
                "type": "uint256"
            }
        ],
        "func": "function wadDiv(uint256 a, uint256 b) public pure returns (uint256) {\n    return WadRayMath.wadDiv(a, b);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rayMul",
        "visibility": "public",
        "args": [
            {
                "name": "a",
                "type": "uint256"
            },
            {
                "name": "b",
                "type": "uint256"
            }
        ],
        "func": "function rayMul(uint256 a, uint256 b) public pure returns (uint256) {\n    return WadRayMath.rayMul(a, b);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rayDiv",
        "visibility": "public",
        "args": [
            {
                "name": "a",
                "type": "uint256"
            },
            {
                "name": "b",
                "type": "uint256"
            }
        ],
        "func": "function rayDiv(uint256 a, uint256 b) public pure returns (uint256) {\n    return WadRayMath.rayDiv(a, b);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rayToWad",
        "visibility": "public",
        "args": [
            {
                "name": "a",
                "type": "uint256"
            }
        ],
        "func": "function rayToWad(uint256 a) public pure returns (uint256) {\n    return WadRayMath.rayToWad(a);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "wadToRay",
        "visibility": "public",
        "args": [
            {
                "name": "a",
                "type": "uint256"
            }
        ],
        "func": "function wadToRay(uint256 a) public pure returns (uint256) {\n    return WadRayMath.wadToRay(a);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "public",
        "args": [
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function mint(uint256 value) public returns (bool) {\n    _mint(msg.sender, value);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Function to mint tokens",
            "   * @param value The amount of tokens to mint.",
            "   * @return A boolean that indicates if the operation was successful.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Function to mint tokens\n   * @param value The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n",
        "@dev": "Function to mint tokens",
        "@param1": "value The amount of tokens to mint.",
        "@return1": "A boolean that indicates if the operation was successful.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "delegate",
        "visibility": "external",
        "args": [
            {
                "name": "delegateeAddress",
                "type": "address"
            }
        ],
        "func": "function delegate(address delegateeAddress) external override {\n    delegatee = delegateeAddress;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "permit",
        "visibility": "external",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            },
            {
                "name": "deadline",
                "type": "uint256"
            },
            {
                "name": "v",
                "type": "uint8"
            },
            {
                "name": "r",
                "type": "bytes32"
            },
            {
                "name": "s",
                "type": "bytes32"
            }
        ],
        "func": "function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external override {\n    require(owner != address(0), 'INVALID_OWNER');\n    //solium-disable-next-line\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\n    uint256 currentValidNonce = _nonces[owner];\n    bytes32 digest = keccak256(\n      abi.encodePacked(\n        '\\x19\\x01',\n        DOMAIN_SEPARATOR,\n        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\n      )\n    );\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\n    _nonces[owner] = currentValidNonce + 1;\n    _approve(owner, spender, value);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20WithPermit",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20WithPermit\n  ",
        "@inheritdoc": "IERC20WithPermit",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "public",
        "args": [
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function mint(uint256 value) public returns (bool) {\n    _mint(_msgSender(), value);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Function to mint tokens",
            "   * @param value The amount of tokens to mint.",
            "   * @return A boolean that indicates if the operation was successful.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Function to mint tokens\n   * @param value The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n",
        "@dev": "Function to mint tokens",
        "@param1": "value The amount of tokens to mint.",
        "@return1": "A boolean that indicates if the operation was successful.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function mint(address account, uint256 value) public returns (bool) {\n    _mint(account, value);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Function to mint tokens to address",
            "   * @param account The account to mint tokens.",
            "   * @param value The amount of tokens to mint.",
            "   * @return A boolean that indicates if the operation was successful.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Function to mint tokens to address\n   * @param account The account to mint tokens.\n   * @param value The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n",
        "@dev": "Function to mint tokens to address",
        "@param1": "account The account to mint tokens.",
        "@param2": "value The amount of tokens to mint.",
        "@return1": "A boolean that indicates if the operation was successful.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "nonces",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function nonces(address owner) public view virtual returns (uint256) {\n    return _nonces[owner];\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "public",
        "args": [
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function mint(uint256 value) public returns (bool) {\n    balanceOf[msg.sender] += value;\n    emit Transfer(address(0), msg.sender, value);\n    return true;\n  }",
        "comments": [
            "  // Mint not backed by Ether: only for testing purposes",
            "  "
        ],
        "comt": "  // Mint not backed by Ether: only for testing purposes\n  ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function mint(address account, uint256 value) public returns (bool) {\n    balanceOf[account] += value;\n    emit Transfer(address(0), account, value);\n    return true;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "external",
        "args": [
            {
                "name": "val",
                "type": "uint256"
            },
            {
                "name": "txt",
                "type": "string memory"
            },
            {
                "name": "vals",
                "type": "uint256[] memory"
            }
        ],
        "func": "function initialize(\n    uint256 val,\n    string memory txt,\n    uint256[] memory vals\n  ) external initializer {\n    value = val;\n    text = txt;\n    values = vals;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setValue",
        "visibility": "public",
        "args": [
            {
                "name": "newValue",
                "type": "uint256"
            }
        ],
        "func": "function setValue(uint256 newValue) public {\n    value = newValue;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setValueViaProxy",
        "visibility": "public",
        "args": [
            {
                "name": "newValue",
                "type": "uint256"
            }
        ],
        "func": "function setValueViaProxy(uint256 newValue) public {\n    value = newValue;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "val",
                "type": "uint256"
            },
            {
                "name": "txt",
                "type": "string memory"
            },
            {
                "name": "vals",
                "type": "uint256[] memory"
            }
        ],
        "func": "function initialize(\n    uint256 val,\n    string memory txt,\n    uint256[] memory vals\n  ) public initializer {\n    value = val;\n    text = txt;\n    values = vals;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setValue",
        "visibility": "public",
        "args": [
            {
                "name": "newValue",
                "type": "uint256"
            }
        ],
        "func": "function setValue(uint256 newValue) public {\n    value = newValue;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setValueViaProxy",
        "visibility": "public",
        "args": [
            {
                "name": "newValue",
                "type": "uint256"
            }
        ],
        "func": "function setValueViaProxy(uint256 newValue) public {\n    value = newValue;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "val",
                "type": "uint256"
            }
        ],
        "func": "function initialize(uint256 val) public initializer {\n    value = val;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "val",
                "type": "uint256"
            }
        ],
        "func": "function initialize(uint256 val) public initializer {\n    value = val;\n    if (value < 2) {\n      initialize(value + 1);\n    }\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setRoleAdmin",
        "visibility": "external",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "adminRole",
                "type": "bytes32"
            }
        ],
        "func": "function setRoleAdmin(bytes32 role, bytes32 adminRole)\n    external\n    override\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    _setRoleAdmin(role, adminRole);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addPoolAdmin",
        "visibility": "external",
        "args": [
            {
                "name": "admin",
                "type": "address"
            }
        ],
        "func": "function addPoolAdmin(address admin) external override {\n    grantRole(POOL_ADMIN_ROLE, admin);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "removePoolAdmin",
        "visibility": "external",
        "args": [
            {
                "name": "admin",
                "type": "address"
            }
        ],
        "func": "function removePoolAdmin(address admin) external override {\n    revokeRole(POOL_ADMIN_ROLE, admin);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isPoolAdmin",
        "visibility": "external",
        "args": [
            {
                "name": "admin",
                "type": "address"
            }
        ],
        "func": "function isPoolAdmin(address admin) external view override returns (bool) {\n    return hasRole(POOL_ADMIN_ROLE, admin);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addEmergencyAdmin",
        "visibility": "external",
        "args": [
            {
                "name": "admin",
                "type": "address"
            }
        ],
        "func": "function addEmergencyAdmin(address admin) external override {\n    grantRole(EMERGENCY_ADMIN_ROLE, admin);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "removeEmergencyAdmin",
        "visibility": "external",
        "args": [
            {
                "name": "admin",
                "type": "address"
            }
        ],
        "func": "function removeEmergencyAdmin(address admin) external override {\n    revokeRole(EMERGENCY_ADMIN_ROLE, admin);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isEmergencyAdmin",
        "visibility": "external",
        "args": [
            {
                "name": "admin",
                "type": "address"
            }
        ],
        "func": "function isEmergencyAdmin(address admin) external view override returns (bool) {\n    return hasRole(EMERGENCY_ADMIN_ROLE, admin);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addRiskAdmin",
        "visibility": "external",
        "args": [
            {
                "name": "admin",
                "type": "address"
            }
        ],
        "func": "function addRiskAdmin(address admin) external override {\n    grantRole(RISK_ADMIN_ROLE, admin);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "removeRiskAdmin",
        "visibility": "external",
        "args": [
            {
                "name": "admin",
                "type": "address"
            }
        ],
        "func": "function removeRiskAdmin(address admin) external override {\n    revokeRole(RISK_ADMIN_ROLE, admin);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isRiskAdmin",
        "visibility": "external",
        "args": [
            {
                "name": "admin",
                "type": "address"
            }
        ],
        "func": "function isRiskAdmin(address admin) external view override returns (bool) {\n    return hasRole(RISK_ADMIN_ROLE, admin);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addFlashBorrower",
        "visibility": "external",
        "args": [
            {
                "name": "borrower",
                "type": "address"
            }
        ],
        "func": "function addFlashBorrower(address borrower) external override {\n    grantRole(FLASH_BORROWER_ROLE, borrower);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "removeFlashBorrower",
        "visibility": "external",
        "args": [
            {
                "name": "borrower",
                "type": "address"
            }
        ],
        "func": "function removeFlashBorrower(address borrower) external override {\n    revokeRole(FLASH_BORROWER_ROLE, borrower);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isFlashBorrower",
        "visibility": "external",
        "args": [
            {
                "name": "borrower",
                "type": "address"
            }
        ],
        "func": "function isFlashBorrower(address borrower) external view override returns (bool) {\n    return hasRole(FLASH_BORROWER_ROLE, borrower);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addBridge",
        "visibility": "external",
        "args": [
            {
                "name": "bridge",
                "type": "address"
            }
        ],
        "func": "function addBridge(address bridge) external override {\n    grantRole(BRIDGE_ROLE, bridge);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "removeBridge",
        "visibility": "external",
        "args": [
            {
                "name": "bridge",
                "type": "address"
            }
        ],
        "func": "function removeBridge(address bridge) external override {\n    revokeRole(BRIDGE_ROLE, bridge);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isBridge",
        "visibility": "external",
        "args": [
            {
                "name": "bridge",
                "type": "address"
            }
        ],
        "func": "function isBridge(address bridge) external view override returns (bool) {\n    return hasRole(BRIDGE_ROLE, bridge);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addAssetListingAdmin",
        "visibility": "external",
        "args": [
            {
                "name": "admin",
                "type": "address"
            }
        ],
        "func": "function addAssetListingAdmin(address admin) external override {\n    grantRole(ASSET_LISTING_ADMIN_ROLE, admin);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "removeAssetListingAdmin",
        "visibility": "external",
        "args": [
            {
                "name": "admin",
                "type": "address"
            }
        ],
        "func": "function removeAssetListingAdmin(address admin) external override {\n    revokeRole(ASSET_LISTING_ADMIN_ROLE, admin);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isAssetListingAdmin",
        "visibility": "external",
        "args": [
            {
                "name": "admin",
                "type": "address"
            }
        ],
        "func": "function isAssetListingAdmin(address admin) external view override returns (bool) {\n    return hasRole(ASSET_LISTING_ADMIN_ROLE, admin);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IACLManager",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IACLManager\n  ",
        "@inheritdoc": "IACLManager",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getMarketId",
        "visibility": "external",
        "args": [],
        "func": "function getMarketId() external view override returns (string memory) {\n    return _marketId;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMarketId",
        "visibility": "external",
        "args": [
            {
                "name": "newMarketId",
                "type": "string memory"
            }
        ],
        "func": "function setMarketId(string memory newMarketId) external override onlyOwner {\n    _setMarketId(newMarketId);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAddress",
        "visibility": "public",
        "args": [
            {
                "name": "id",
                "type": "bytes32"
            }
        ],
        "func": "function getAddress(bytes32 id) public view override returns (address) {\n    return _addresses[id];\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAddress",
        "visibility": "external",
        "args": [
            {
                "name": "id",
                "type": "bytes32"
            },
            {
                "name": "newAddress",
                "type": "address"
            }
        ],
        "func": "function setAddress(bytes32 id, address newAddress) external override onlyOwner {\n    address oldAddress = _addresses[id];\n    _addresses[id] = newAddress;\n    emit AddressSet(id, oldAddress, newAddress);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAddressAsProxy",
        "visibility": "external",
        "args": [
            {
                "name": "id",
                "type": "bytes32"
            },
            {
                "name": "newImplementationAddress",
                "type": "address"
            }
        ],
        "func": "function setAddressAsProxy(bytes32 id, address newImplementationAddress)\n    external\n    override\n    onlyOwner\n  {\n    address proxyAddress = _addresses[id];\n    address oldImplementationAddress = _getProxyImplementation(id);\n    _updateImpl(id, newImplementationAddress);\n    emit AddressSetAsProxy(id, proxyAddress, oldImplementationAddress, newImplementationAddress);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPool",
        "visibility": "external",
        "args": [],
        "func": "function getPool() external view override returns (address) {\n    return getAddress(POOL);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPoolImpl",
        "visibility": "external",
        "args": [
            {
                "name": "newPoolImpl",
                "type": "address"
            }
        ],
        "func": "function setPoolImpl(address newPoolImpl) external override onlyOwner {\n    address oldPoolImpl = _getProxyImplementation(POOL);\n    _updateImpl(POOL, newPoolImpl);\n    emit PoolUpdated(oldPoolImpl, newPoolImpl);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPoolConfigurator",
        "visibility": "external",
        "args": [],
        "func": "function getPoolConfigurator() external view override returns (address) {\n    return getAddress(POOL_CONFIGURATOR);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPoolConfiguratorImpl",
        "visibility": "external",
        "args": [
            {
                "name": "newPoolConfiguratorImpl",
                "type": "address"
            }
        ],
        "func": "function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external override onlyOwner {\n    address oldPoolConfiguratorImpl = _getProxyImplementation(POOL_CONFIGURATOR);\n    _updateImpl(POOL_CONFIGURATOR, newPoolConfiguratorImpl);\n    emit PoolConfiguratorUpdated(oldPoolConfiguratorImpl, newPoolConfiguratorImpl);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPriceOracle",
        "visibility": "external",
        "args": [],
        "func": "function getPriceOracle() external view override returns (address) {\n    return getAddress(PRICE_ORACLE);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPriceOracle",
        "visibility": "external",
        "args": [
            {
                "name": "newPriceOracle",
                "type": "address"
            }
        ],
        "func": "function setPriceOracle(address newPriceOracle) external override onlyOwner {\n    address oldPriceOracle = _addresses[PRICE_ORACLE];\n    _addresses[PRICE_ORACLE] = newPriceOracle;\n    emit PriceOracleUpdated(oldPriceOracle, newPriceOracle);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getACLManager",
        "visibility": "external",
        "args": [],
        "func": "function getACLManager() external view override returns (address) {\n    return getAddress(ACL_MANAGER);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setACLManager",
        "visibility": "external",
        "args": [
            {
                "name": "newAclManager",
                "type": "address"
            }
        ],
        "func": "function setACLManager(address newAclManager) external override onlyOwner {\n    address oldAclManager = _addresses[ACL_MANAGER];\n    _addresses[ACL_MANAGER] = newAclManager;\n    emit ACLManagerUpdated(oldAclManager, newAclManager);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getACLAdmin",
        "visibility": "external",
        "args": [],
        "func": "function getACLAdmin() external view override returns (address) {\n    return getAddress(ACL_ADMIN);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setACLAdmin",
        "visibility": "external",
        "args": [
            {
                "name": "newAclAdmin",
                "type": "address"
            }
        ],
        "func": "function setACLAdmin(address newAclAdmin) external override onlyOwner {\n    address oldAclAdmin = _addresses[ACL_ADMIN];\n    _addresses[ACL_ADMIN] = newAclAdmin;\n    emit ACLAdminUpdated(oldAclAdmin, newAclAdmin);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPriceOracleSentinel",
        "visibility": "external",
        "args": [],
        "func": "function getPriceOracleSentinel() external view override returns (address) {\n    return getAddress(PRICE_ORACLE_SENTINEL);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPriceOracleSentinel",
        "visibility": "external",
        "args": [
            {
                "name": "newPriceOracleSentinel",
                "type": "address"
            }
        ],
        "func": "function setPriceOracleSentinel(address newPriceOracleSentinel) external override onlyOwner {\n    address oldPriceOracleSentinel = _addresses[PRICE_ORACLE_SENTINEL];\n    _addresses[PRICE_ORACLE_SENTINEL] = newPriceOracleSentinel;\n    emit PriceOracleSentinelUpdated(oldPriceOracleSentinel, newPriceOracleSentinel);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPoolDataProvider",
        "visibility": "external",
        "args": [],
        "func": "function getPoolDataProvider() external view override returns (address) {\n    return getAddress(DATA_PROVIDER);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPoolDataProvider",
        "visibility": "external",
        "args": [
            {
                "name": "newDataProvider",
                "type": "address"
            }
        ],
        "func": "function setPoolDataProvider(address newDataProvider) external override onlyOwner {\n    address oldDataProvider = _addresses[DATA_PROVIDER];\n    _addresses[DATA_PROVIDER] = newDataProvider;\n    emit PoolDataProviderUpdated(oldDataProvider, newDataProvider);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProvider",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProvider\n  ",
        "@inheritdoc": "IPoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAddressesProvidersList",
        "visibility": "external",
        "args": [],
        "func": "function getAddressesProvidersList() external view override returns (address[] memory) {\n    return _addressesProvidersList;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProviderRegistry",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProviderRegistry\n  ",
        "@inheritdoc": "IPoolAddressesProviderRegistry",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registerAddressesProvider",
        "visibility": "external",
        "args": [
            {
                "name": "provider",
                "type": "address"
            },
            {
                "name": "id",
                "type": "uint256"
            }
        ],
        "func": "function registerAddressesProvider(address provider, uint256 id) external override onlyOwner {\n    require(id != 0, Errors.INVALID_ADDRESSES_PROVIDER_ID);\n    require(_idToAddressesProvider[id] == address(0), Errors.INVALID_ADDRESSES_PROVIDER_ID);\n    require(_addressesProviderToId[provider] == 0, Errors.ADDRESSES_PROVIDER_ALREADY_ADDED);\n\n    _addressesProviderToId[provider] = id;\n    _idToAddressesProvider[id] = provider;\n\n    _addToAddressesProvidersList(provider);\n    emit AddressesProviderRegistered(provider, id);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProviderRegistry",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProviderRegistry\n  ",
        "@inheritdoc": "IPoolAddressesProviderRegistry",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "unregisterAddressesProvider",
        "visibility": "external",
        "args": [
            {
                "name": "provider",
                "type": "address"
            }
        ],
        "func": "function unregisterAddressesProvider(address provider) external override onlyOwner {\n    require(_addressesProviderToId[provider] != 0, Errors.ADDRESSES_PROVIDER_NOT_REGISTERED);\n    uint256 oldId = _addressesProviderToId[provider];\n    _idToAddressesProvider[oldId] = address(0);\n    _addressesProviderToId[provider] = 0;\n\n    _removeFromAddressesProvidersList(provider);\n\n    emit AddressesProviderUnregistered(provider, oldId);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProviderRegistry",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProviderRegistry\n  ",
        "@inheritdoc": "IPoolAddressesProviderRegistry",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAddressesProviderIdByAddress",
        "visibility": "external",
        "args": [
            {
                "name": "addressesProvider",
                "type": "address"
            }
        ],
        "func": "function getAddressesProviderIdByAddress(address addressesProvider)\n    external\n    view\n    override\n    returns (uint256)\n  {\n    return _addressesProviderToId[addressesProvider];\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProviderRegistry",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProviderRegistry\n  ",
        "@inheritdoc": "IPoolAddressesProviderRegistry",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAddressesProviderAddressById",
        "visibility": "external",
        "args": [
            {
                "name": "id",
                "type": "uint256"
            }
        ],
        "func": "function getAddressesProviderAddressById(uint256 id) external view override returns (address) {\n    return _idToAddressesProvider[id];\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolAddressesProviderRegistry",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolAddressesProviderRegistry\n  ",
        "@inheritdoc": "IPoolAddressesProviderRegistry",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isBorrowAllowed",
        "visibility": "public",
        "args": [],
        "func": "function isBorrowAllowed() public view override returns (bool) {\n    return _isUpAndGracePeriodPassed();\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPriceOracleSentinel",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPriceOracleSentinel\n  ",
        "@inheritdoc": "IPriceOracleSentinel",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isLiquidationAllowed",
        "visibility": "public",
        "args": [],
        "func": "function isLiquidationAllowed() public view override returns (bool) {\n    return _isUpAndGracePeriodPassed();\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPriceOracleSentinel",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPriceOracleSentinel\n  ",
        "@inheritdoc": "IPriceOracleSentinel",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setSequencerOracle",
        "visibility": "public",
        "args": [
            {
                "name": "newSequencerOracle",
                "type": "address"
            }
        ],
        "func": "function setSequencerOracle(address newSequencerOracle) public onlyPoolAdmin {\n    _sequencerOracle = ISequencerOracle(newSequencerOracle);\n    emit SequencerOracleUpdated(newSequencerOracle);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPriceOracleSentinel",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPriceOracleSentinel\n  ",
        "@inheritdoc": "IPriceOracleSentinel",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setGracePeriod",
        "visibility": "public",
        "args": [
            {
                "name": "newGracePeriod",
                "type": "uint256"
            }
        ],
        "func": "function setGracePeriod(uint256 newGracePeriod) public onlyRiskOrPoolAdmins {\n    _gracePeriod = newGracePeriod;\n    emit GracePeriodUpdated(newGracePeriod);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPriceOracleSentinel",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPriceOracleSentinel\n  ",
        "@inheritdoc": "IPriceOracleSentinel",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSequencerOracle",
        "visibility": "public",
        "args": [],
        "func": "function getSequencerOracle() public view returns (address) {\n    return address(_sequencerOracle);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPriceOracleSentinel",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPriceOracleSentinel\n  ",
        "@inheritdoc": "IPriceOracleSentinel",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getGracePeriod",
        "visibility": "public",
        "args": [],
        "func": "function getGracePeriod() public view returns (uint256) {\n    return _gracePeriod;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPriceOracleSentinel",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPriceOracleSentinel\n  ",
        "@inheritdoc": "IPriceOracleSentinel",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "admin",
        "visibility": "external",
        "args": [],
        "func": "function admin() external ifAdmin returns (address) {\n    return _admin;\n  }",
        "comments": [
            "/**",
            "   * @notice Return the admin address",
            "   * @return The address of the proxy admin.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Return the admin address\n   * @return The address of the proxy admin.\n   */\n",
        "@notice": "Return the admin address",
        "@return1": "The address of the proxy admin.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "implementation",
        "visibility": "external",
        "args": [],
        "func": "function implementation() external ifAdmin returns (address) {\n    return _implementation();\n  }",
        "comments": [
            "/**",
            "   * @notice Return the implementation address",
            "   * @return The address of the implementation.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Return the implementation address\n   * @return The address of the implementation.\n   */\n",
        "@notice": "Return the implementation address",
        "@return1": "The address of the implementation.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "upgradeTo",
        "visibility": "external",
        "args": [
            {
                "name": "newImplementation",
                "type": "address"
            }
        ],
        "func": "function upgradeTo(address newImplementation) external ifAdmin {\n    _upgradeTo(newImplementation);\n  }",
        "comments": [
            "/**",
            "   * @notice Upgrade the backing implementation of the proxy.",
            "   * @dev Only the admin can call this function.",
            "   * @param newImplementation The address of the new implementation.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Upgrade the backing implementation of the proxy.\n   * @dev Only the admin can call this function.\n   * @param newImplementation The address of the new implementation.\n   */\n",
        "@notice": "Upgrade the backing implementation of the proxy.",
        "@dev": "Only the admin can call this function.",
        "@param1": "newImplementation The address of the new implementation.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "upgradeToAndCall",
        "visibility": "external",
        "args": [
            {
                "name": "newImplementation",
                "type": "address"
            },
            {
                "name": "data",
                "type": "bytes calldata"
            }
        ],
        "func": "function upgradeToAndCall(address newImplementation, bytes calldata data)\n    external\n    payable\n    ifAdmin\n  {\n    _upgradeTo(newImplementation);\n    (bool success, ) = newImplementation.delegatecall(data);\n    require(success);\n  }",
        "comments": [
            "/**",
            "   * @notice Upgrade the backing implementation of the proxy and call a function",
            "   * on the new implementation.",
            "   * @dev This is useful to initialize the proxied contract.",
            "   * @param newImplementation The address of the new implementation.",
            "   * @param data Data to send as msg.data in the low level call.",
            "   * It should include the signature and the parameters of the function to be called, as described in",
            "   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Upgrade the backing implementation of the proxy and call a function\n   * on the new implementation.\n   * @dev This is useful to initialize the proxied contract.\n   * @param newImplementation The address of the new implementation.\n   * @param data Data to send as msg.data in the low level call.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   */\n",
        "@notice": "Upgrade the backing implementation of the proxy and call a function * on the new implementation.",
        "@dev": "This is useful to initialize the proxied contract.",
        "@param1": "newImplementation The address of the new implementation.",
        "@param2": "data Data to send as msg.data in the low level call. * It should include the signature and the parameters of the function to be called, as described in * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeBorrow",
        "visibility": "public",
        "args": [
            {
                "name": "DataTypes.ReserveData",
                "type": "mapping(address =>"
            }
        ],
        "func": "function executeBorrow(\n    mapping(address => DataTypes.ReserveData) storage reservesData,\n    mapping(uint256 => address) storage reservesList,\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\n    DataTypes.UserConfigurationMap storage userConfig,\n    DataTypes.ExecuteBorrowParams memory params\n  ) public {\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\n\n    reserve.updateState(reserveCache);\n\n    (\n      bool isolationModeActive,\n      address isolationModeCollateralAddress,\n      uint256 isolationModeDebtCeiling\n    ) = userConfig.getIsolationModeState(reservesData, reservesList);\n\n    ValidationLogic.validateBorrow(\n      reservesData,\n      reservesList,\n      eModeCategories,\n      DataTypes.ValidateBorrowParams({\n        reserveCache: reserveCache,\n        userConfig: userConfig,\n        asset: params.asset,\n        userAddress: params.onBehalfOf,\n        amount: params.amount,\n        interestRateMode: params.interestRateMode,\n        maxStableLoanPercent: params.maxStableRateBorrowSizePercent,\n        reservesCount: params.reservesCount,\n        oracle: params.oracle,\n        userEModeCategory: params.userEModeCategory,\n        priceOracleSentinel: params.priceOracleSentinel,\n        isolationModeActive: isolationModeActive,\n        isolationModeCollateralAddress: isolationModeCollateralAddress,\n        isolationModeDebtCeiling: isolationModeDebtCeiling\n      })\n    );\n\n    uint256 currentStableRate = 0;\n    bool isFirstBorrowing = false;\n\n    if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {\n      currentStableRate = reserve.currentStableBorrowRate;\n\n      (\n        isFirstBorrowing,\n        reserveCache.nextTotalStableDebt,\n        reserveCache.nextAvgStableBorrowRate\n      ) = IStableDebtToken(reserveCache.stableDebtTokenAddress).mint(\n        params.user,\n        params.onBehalfOf,\n        params.amount,\n        currentStableRate\n      );\n    } else {\n      (isFirstBorrowing, reserveCache.nextScaledVariableDebt) = IVariableDebtToken(\n        reserveCache.variableDebtTokenAddress\n      ).mint(params.user, params.onBehalfOf, params.amount, reserveCache.nextVariableBorrowIndex);\n    }\n\n    if (isFirstBorrowing) {\n      userConfig.setBorrowing(reserve.id, true);\n    }\n\n    if (isolationModeActive) {\n      uint256 nextIsolationModeTotalDebt = reservesData[isolationModeCollateralAddress]\n        .isolationModeTotalDebt += (params.amount /\n        10 **\n          (reserveCache.reserveConfiguration.getDecimals() -\n            ReserveConfiguration.DEBT_CEILING_DECIMALS)).toUint128();\n      emit IsolationModeTotalDebtUpdated(\n        isolationModeCollateralAddress,\n        nextIsolationModeTotalDebt\n      );\n    }\n\n    reserve.updateInterestRates(\n      reserveCache,\n      params.asset,\n      0,\n      params.releaseUnderlying ? params.amount : 0\n    );\n\n    if (params.releaseUnderlying) {\n      IAToken(reserveCache.aTokenAddress).transferUnderlyingTo(params.user, params.amount);\n    }\n\n    emit Borrow(\n      params.asset,\n      params.user,\n      params.onBehalfOf,\n      params.amount,\n      params.interestRateMode,\n      params.interestRateMode == DataTypes.InterestRateMode.STABLE\n        ? currentStableRate\n        : reserve.currentVariableBorrowRate,\n      params.referralCode\n    );\n  }",
        "comments": [
            "/**",
            "   * @notice Implements the borrow feature. Borrowing allows users that provided collateral to draw liquidity from the",
            "   * Fintoch protocol proportionally to their collateralization power. For isolated positions, it also increases the",
            "   * isolated debt.",
            "   * @dev  Emits the `Borrow()` event",
            "   * @param reservesData The state of all the reserves",
            "   * @param reservesList The addresses of all the active reserves",
            "   * @param eModeCategories The configuration of all the efficiency mode categories",
            "   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets",
            "   * @param params The additional parameters needed to execute the borrow function",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Implements the borrow feature. Borrowing allows users that provided collateral to draw liquidity from the\n   * Fintoch protocol proportionally to their collateralization power. For isolated positions, it also increases the\n   * isolated debt.\n   * @dev  Emits the `Borrow()` event\n   * @param reservesData The state of all the reserves\n   * @param reservesList The addresses of all the active reserves\n   * @param eModeCategories The configuration of all the efficiency mode categories\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\n   * @param params The additional parameters needed to execute the borrow function\n   */\n",
        "@notice": "Implements the borrow feature. Borrowing allows users that provided collateral to draw liquidity from the * Fintoch protocol proportionally to their collateralization power. For isolated positions, it also increases the * isolated debt.",
        "@dev": "Emits the `Borrow()` event",
        "@param1": "reservesData The state of all the reserves",
        "@param2": "reservesList The addresses of all the active reserves",
        "@param3": "eModeCategories The configuration of all the efficiency mode categories",
        "@param4": "userConfig The user configuration mapping that tracks the supplied/borrowed assets",
        "@param5": "params The additional parameters needed to execute the borrow function",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeRepay",
        "visibility": "external",
        "args": [
            {
                "name": "DataTypes.ReserveData",
                "type": "mapping(address =>"
            }
        ],
        "func": "function executeRepay(\n    mapping(address => DataTypes.ReserveData) storage reservesData,\n    mapping(uint256 => address) storage reservesList,\n    DataTypes.UserConfigurationMap storage userConfig,\n    DataTypes.ExecuteRepayParams memory params\n  ) external returns (uint256) {\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\n    reserve.updateState(reserveCache);\n\n    (uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(\n      params.onBehalfOf,\n      reserveCache\n    );\n\n    ValidationLogic.validateRepay(\n      reserveCache,\n      params.amount,\n      params.interestRateMode,\n      params.onBehalfOf,\n      stableDebt,\n      variableDebt\n    );\n\n    uint256 paybackAmount = params.interestRateMode == DataTypes.InterestRateMode.STABLE\n      ? stableDebt\n      : variableDebt;\n\n    // Allows a user to repay with aTokens without leaving dust from interest.\n    if (params.useATokens && params.amount == type(uint256).max) {\n      params.amount = IAToken(reserveCache.aTokenAddress).balanceOf(msg.sender);\n    }\n\n    if (params.amount < paybackAmount) {\n      paybackAmount = params.amount;\n    }\n\n    if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {\n      (reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = IStableDebtToken(\n        reserveCache.stableDebtTokenAddress\n      ).burn(params.onBehalfOf, paybackAmount);\n    } else {\n      reserveCache.nextScaledVariableDebt = IVariableDebtToken(\n        reserveCache.variableDebtTokenAddress\n      ).burn(params.onBehalfOf, paybackAmount, reserveCache.nextVariableBorrowIndex);\n    }\n\n    reserve.updateInterestRates(\n      reserveCache,\n      params.asset,\n      params.useATokens ? 0 : paybackAmount,\n      0\n    );\n\n    if (stableDebt + variableDebt - paybackAmount == 0) {\n      userConfig.setBorrowing(reserve.id, false);\n    }\n\n    IsolationModeLogic.updateIsolatedDebtIfIsolated(\n      reservesData,\n      reservesList,\n      userConfig,\n      reserveCache,\n      paybackAmount\n    );\n\n    if (params.useATokens) {\n      IAToken(reserveCache.aTokenAddress).burn(\n        msg.sender,\n        reserveCache.aTokenAddress,\n        paybackAmount,\n        reserveCache.nextLiquidityIndex\n      );\n    } else {\n      IERC20(params.asset).safeTransferFrom(msg.sender, reserveCache.aTokenAddress, paybackAmount);\n      IAToken(reserveCache.aTokenAddress).handleRepayment(msg.sender, paybackAmount);\n    }\n\n    emit Repay(params.asset, params.onBehalfOf, msg.sender, paybackAmount, params.useATokens);\n\n    return paybackAmount;\n  }",
        "comments": [
            "/**",
            "   * @notice Implements the repay feature. Repaying transfers the underlying back to the aToken and clears the",
            "   * equivalent amount of debt for the user by burning the corresponding debt token. For isolated positions, it also",
            "   * reduces the isolated debt.",
            "   * @dev  Emits the `Repay()` event",
            "   * @param reservesData The state of all the reserves",
            "   * @param reservesList The addresses of all the active reserves",
            "   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets",
            "   * @param params The additional parameters needed to execute the repay function",
            "   * @return The actual amount being repaid",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Implements the repay feature. Repaying transfers the underlying back to the aToken and clears the\n   * equivalent amount of debt for the user by burning the corresponding debt token. For isolated positions, it also\n   * reduces the isolated debt.\n   * @dev  Emits the `Repay()` event\n   * @param reservesData The state of all the reserves\n   * @param reservesList The addresses of all the active reserves\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\n   * @param params The additional parameters needed to execute the repay function\n   * @return The actual amount being repaid\n   */\n",
        "@notice": "Implements the repay feature. Repaying transfers the underlying back to the aToken and clears the * equivalent amount of debt for the user by burning the corresponding debt token. For isolated positions, it also * reduces the isolated debt.",
        "@dev": "Emits the `Repay()` event",
        "@param1": "reservesData The state of all the reserves",
        "@param2": "reservesList The addresses of all the active reserves",
        "@param3": "userConfig The user configuration mapping that tracks the supplied/borrowed assets",
        "@param4": "params The additional parameters needed to execute the repay function",
        "@return1": "The actual amount being repaid",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeRebalanceStableBorrowRate",
        "visibility": "external",
        "args": [
            {
                "name": "reserve",
                "type": "DataTypes.ReserveData storage"
            },
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function executeRebalanceStableBorrowRate(\n    DataTypes.ReserveData storage reserve,\n    address asset,\n    address user\n  ) external {\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\n    reserve.updateState(reserveCache);\n\n    ValidationLogic.validateRebalanceStableBorrowRate(reserve, reserveCache, asset);\n\n    IStableDebtToken stableDebtToken = IStableDebtToken(reserveCache.stableDebtTokenAddress);\n    uint256 stableDebt = IERC20(address(stableDebtToken)).balanceOf(user);\n\n    stableDebtToken.burn(user, stableDebt);\n\n    (, reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = stableDebtToken\n      .mint(user, user, stableDebt, reserve.currentStableBorrowRate);\n\n    reserve.updateInterestRates(reserveCache, asset, 0, 0);\n\n    emit RebalanceStableBorrowRate(asset, user);\n  }",
        "comments": [
            "/**",
            "   * @notice Implements the rebalance stable borrow rate feature. In case of liquidity crunches on the protocol, stable",
            "   * rate borrows might need to be rebalanced to bring back equilibrium between the borrow and supply APYs.",
            "   * @dev The rules that define if a position can be rebalanced are implemented in `ValidationLogic.validateRebalanceStableBorrowRate()`",
            "   * @dev Emits the `RebalanceStableBorrowRate()` event",
            "   * @param reserve The state of the reserve of the asset being repaid",
            "   * @param asset The asset of the position being rebalanced",
            "   * @param user The user being rebalanced",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Implements the rebalance stable borrow rate feature. In case of liquidity crunches on the protocol, stable\n   * rate borrows might need to be rebalanced to bring back equilibrium between the borrow and supply APYs.\n   * @dev The rules that define if a position can be rebalanced are implemented in `ValidationLogic.validateRebalanceStableBorrowRate()`\n   * @dev Emits the `RebalanceStableBorrowRate()` event\n   * @param reserve The state of the reserve of the asset being repaid\n   * @param asset The asset of the position being rebalanced\n   * @param user The user being rebalanced\n   */\n",
        "@notice": "Implements the rebalance stable borrow rate feature. In case of liquidity crunches on the protocol, stable * rate borrows might need to be rebalanced to bring back equilibrium between the borrow and supply APYs.",
        "@dev": "The rules that define if a position can be rebalanced are implemented in `ValidationLogic.validateRebalanceStableBorrowRate()` * Emits the `RebalanceStableBorrowRate()` event",
        "@param1": "reserve The state of the reserve of the asset being repaid",
        "@param2": "asset The asset of the position being rebalanced",
        "@param3": "user The user being rebalanced",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 1,
        "low_quality": 0
    },
    {
        "name": "executeSwapBorrowRateMode",
        "visibility": "external",
        "args": [
            {
                "name": "reserve",
                "type": "DataTypes.ReserveData storage"
            },
            {
                "name": "userConfig",
                "type": "DataTypes.UserConfigurationMap storage"
            },
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "interestRateMode",
                "type": "DataTypes.InterestRateMode"
            }
        ],
        "func": "function executeSwapBorrowRateMode(\n    DataTypes.ReserveData storage reserve,\n    DataTypes.UserConfigurationMap storage userConfig,\n    address asset,\n    DataTypes.InterestRateMode interestRateMode\n  ) external {\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\n\n    reserve.updateState(reserveCache);\n\n    (uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(\n      msg.sender,\n      reserveCache\n    );\n\n    ValidationLogic.validateSwapRateMode(\n      reserve,\n      reserveCache,\n      userConfig,\n      stableDebt,\n      variableDebt,\n      interestRateMode\n    );\n\n    if (interestRateMode == DataTypes.InterestRateMode.STABLE) {\n      (reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = IStableDebtToken(\n        reserveCache.stableDebtTokenAddress\n      ).burn(msg.sender, stableDebt);\n\n      (, reserveCache.nextScaledVariableDebt) = IVariableDebtToken(\n        reserveCache.variableDebtTokenAddress\n      ).mint(msg.sender, msg.sender, stableDebt, reserveCache.nextVariableBorrowIndex);\n    } else {\n      reserveCache.nextScaledVariableDebt = IVariableDebtToken(\n        reserveCache.variableDebtTokenAddress\n      ).burn(msg.sender, variableDebt, reserveCache.nextVariableBorrowIndex);\n\n      (, reserveCache.nextTotalStableDebt, reserveCache.nextAvgStableBorrowRate) = IStableDebtToken(\n        reserveCache.stableDebtTokenAddress\n      ).mint(msg.sender, msg.sender, variableDebt, reserve.currentStableBorrowRate);\n    }\n\n    reserve.updateInterestRates(reserveCache, asset, 0, 0);\n\n    emit SwapBorrowRateMode(asset, msg.sender, interestRateMode);\n  }",
        "comments": [
            "/**",
            "   * @notice Implements the swap borrow rate feature. Borrowers can swap from variable to stable positions at any time.",
            "   * @dev Emits the `Swap()` event",
            "   * @param reserve The of the reserve of the asset being repaid",
            "   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets",
            "   * @param asset The asset of the position being swapped",
            "   * @param interestRateMode The current interest rate mode of the position being swapped",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Implements the swap borrow rate feature. Borrowers can swap from variable to stable positions at any time.\n   * @dev Emits the `Swap()` event\n   * @param reserve The of the reserve of the asset being repaid\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\n   * @param asset The asset of the position being swapped\n   * @param interestRateMode The current interest rate mode of the position being swapped\n   */\n",
        "@notice": "Implements the swap borrow rate feature. Borrowers can swap from variable to stable positions at any time.",
        "@dev": "Emits the `Swap()` event",
        "@param1": "reserve The of the reserve of the asset being repaid",
        "@param2": "userConfig The user configuration mapping that tracks the supplied/borrowed assets",
        "@param3": "asset The asset of the position being swapped",
        "@param4": "interestRateMode The current interest rate mode of the position being swapped",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeMintUnbacked",
        "visibility": "external",
        "args": [
            {
                "name": "DataTypes.ReserveData",
                "type": "mapping(address =>"
            }
        ],
        "func": "function executeMintUnbacked(\n    mapping(address => DataTypes.ReserveData) storage reservesData,\n    mapping(uint256 => address) storage reservesList,\n    DataTypes.UserConfigurationMap storage userConfig,\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external {\n    DataTypes.ReserveData storage reserve = reservesData[asset];\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\n\n    reserve.updateState(reserveCache);\n\n    ValidationLogic.validateSupply(reserveCache, amount);\n\n    uint256 unbackedMintCap = reserveCache.reserveConfiguration.getUnbackedMintCap();\n    uint256 reserveDecimals = reserveCache.reserveConfiguration.getDecimals();\n\n    uint256 unbacked = reserve.unbacked += amount.toUint128();\n\n    require(unbacked <= unbackedMintCap * (10**reserveDecimals), Errors.UNBACKED_MINT_CAP_EXCEEDED);\n\n    reserve.updateInterestRates(reserveCache, asset, 0, 0);\n\n    bool isFirstSupply = IAToken(reserveCache.aTokenAddress).mint(\n      msg.sender,\n      onBehalfOf,\n      amount,\n      reserveCache.nextLiquidityIndex\n    );\n\n    if (isFirstSupply) {\n      if (\n        ValidationLogic.validateUseAsCollateral(\n          reservesData,\n          reservesList,\n          userConfig,\n          reserveCache.reserveConfiguration\n        )\n      ) {\n        userConfig.setUsingAsCollateral(reserve.id, true);\n        emit ReserveUsedAsCollateralEnabled(asset, onBehalfOf);\n      }\n    }\n\n    emit MintUnbacked(asset, msg.sender, onBehalfOf, amount, referralCode);\n  }",
        "comments": [
            "/**",
            "   * @notice Mint unbacked aTokens to a user and updates the unbacked for the reserve.",
            "   * @dev Essentially a supply without transferring the underlying.",
            "   * @dev Emits the `MintUnbacked` event",
            "   * @dev Emits the `ReserveUsedAsCollateralEnabled` if asset is set as collateral",
            "   * @param reservesData The state of all the reserves",
            "   * @param reservesList The addresses of all the active reserves",
            "   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets",
            "   * @param asset The address of the underlying asset to mint aTokens of",
            "   * @param amount The amount to mint",
            "   * @param onBehalfOf The address that will receive the aTokens",
            "   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.",
            "   *   0 if the action is executed directly by the user, without any middle-man",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Mint unbacked aTokens to a user and updates the unbacked for the reserve.\n   * @dev Essentially a supply without transferring the underlying.\n   * @dev Emits the `MintUnbacked` event\n   * @dev Emits the `ReserveUsedAsCollateralEnabled` if asset is set as collateral\n   * @param reservesData The state of all the reserves\n   * @param reservesList The addresses of all the active reserves\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\n   * @param asset The address of the underlying asset to mint aTokens of\n   * @param amount The amount to mint\n   * @param onBehalfOf The address that will receive the aTokens\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   **/\n",
        "@notice": "Mint unbacked aTokens to a user and updates the unbacked for the reserve.",
        "@dev": "Essentially a supply without transferring the underlying. * Emits the `MintUnbacked` event * Emits the `ReserveUsedAsCollateralEnabled` if asset is set as collateral",
        "@param1": "reservesData The state of all the reserves",
        "@param2": "reservesList The addresses of all the active reserves",
        "@param3": "userConfig The user configuration mapping that tracks the supplied/borrowed assets",
        "@param4": "asset The address of the underlying asset to mint aTokens of",
        "@param5": "amount The amount to mint",
        "@param6": "onBehalfOf The address that will receive the aTokens",
        "@param7": "referralCode Code used to register the integrator originating the operation, for potential rewards. * 0 if the action is executed directly by the user, without any middle-man",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeBackUnbacked",
        "visibility": "external",
        "args": [
            {
                "name": "reserve",
                "type": "DataTypes.ReserveData storage"
            },
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "fee",
                "type": "uint256"
            },
            {
                "name": "protocolFeeBps",
                "type": "uint256"
            }
        ],
        "func": "function executeBackUnbacked(\n    DataTypes.ReserveData storage reserve,\n    address asset,\n    uint256 amount,\n    uint256 fee,\n    uint256 protocolFeeBps\n  ) external {\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\n\n    reserve.updateState(reserveCache);\n\n    uint256 backingAmount = (amount < reserve.unbacked) ? amount : reserve.unbacked;\n\n    uint256 feeToProtocol = fee.percentMul(protocolFeeBps);\n    uint256 feeToLP = fee - feeToProtocol;\n    uint256 added = backingAmount + fee;\n\n    reserveCache.nextLiquidityIndex = reserve.cumulateToLiquidityIndex(\n      IERC20(reserveCache.aTokenAddress).totalSupply(),\n      feeToLP\n    );\n\n    reserve.accruedToTreasury += feeToProtocol.rayDiv(reserveCache.nextLiquidityIndex).toUint128();\n\n    reserve.unbacked -= backingAmount.toUint128();\n    reserve.updateInterestRates(reserveCache, asset, added, 0);\n\n    IERC20(asset).safeTransferFrom(msg.sender, reserveCache.aTokenAddress, added);\n\n    emit BackUnbacked(asset, msg.sender, backingAmount, fee);\n  }",
        "comments": [
            "/**",
            "   * @notice Back the current unbacked with `amount` and pay `fee`.",
            "   * @dev Emits the `BackUnbacked` event",
            "   * @param reserve The reserve to back unbacked for",
            "   * @param asset The address of the underlying asset to repay",
            "   * @param amount The amount to back",
            "   * @param fee The amount paid in fees",
            "   * @param protocolFeeBps The fraction of fees in basis points paid to the protocol",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Back the current unbacked with `amount` and pay `fee`.\n   * @dev Emits the `BackUnbacked` event\n   * @param reserve The reserve to back unbacked for\n   * @param asset The address of the underlying asset to repay\n   * @param amount The amount to back\n   * @param fee The amount paid in fees\n   * @param protocolFeeBps The fraction of fees in basis points paid to the protocol\n   **/\n",
        "@notice": "Back the current unbacked with `amount` and pay `fee`.",
        "@dev": "Emits the `BackUnbacked` event",
        "@param1": "reserve The reserve to back unbacked for",
        "@param2": "asset The address of the underlying asset to repay",
        "@param3": "amount The amount to back",
        "@param4": "fee The amount paid in fees",
        "@param5": "protocolFeeBps The fraction of fees in basis points paid to the protocol",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeInitReserve",
        "visibility": "public",
        "args": [
            {
                "name": "pool",
                "type": "IPool"
            },
            {
                "name": "input",
                "type": "ConfiguratorInputTypes.InitReserveInput calldata"
            }
        ],
        "func": "function executeInitReserve(IPool pool, ConfiguratorInputTypes.InitReserveInput calldata input)\n    public\n  {\n    address aTokenProxyAddress = _initTokenWithProxy(\n      input.aTokenImpl,\n      abi.encodeWithSelector(\n        IInitializableAToken.initialize.selector,\n        pool,\n        input.treasury,\n        input.underlyingAsset,\n        input.incentivesController,\n        input.underlyingAssetDecimals,\n        input.aTokenName,\n        input.aTokenSymbol,\n        input.params\n      )\n    );\n\n    address stableDebtTokenProxyAddress = _initTokenWithProxy(\n      input.stableDebtTokenImpl,\n      abi.encodeWithSelector(\n        IInitializableDebtToken.initialize.selector,\n        pool,\n        input.underlyingAsset,\n        input.incentivesController,\n        input.underlyingAssetDecimals,\n        input.stableDebtTokenName,\n        input.stableDebtTokenSymbol,\n        input.params\n      )\n    );\n\n    address variableDebtTokenProxyAddress = _initTokenWithProxy(\n      input.variableDebtTokenImpl,\n      abi.encodeWithSelector(\n        IInitializableDebtToken.initialize.selector,\n        pool,\n        input.underlyingAsset,\n        input.incentivesController,\n        input.underlyingAssetDecimals,\n        input.variableDebtTokenName,\n        input.variableDebtTokenSymbol,\n        input.params\n      )\n    );\n\n    pool.initReserve(\n      input.underlyingAsset,\n      aTokenProxyAddress,\n      stableDebtTokenProxyAddress,\n      variableDebtTokenProxyAddress,\n      input.interestRateStrategyAddress\n    );\n\n    DataTypes.ReserveConfigurationMap memory currentConfig = DataTypes.ReserveConfigurationMap(0);\n\n    currentConfig.setDecimals(input.underlyingAssetDecimals);\n\n    currentConfig.setActive(true);\n    currentConfig.setPaused(false);\n    currentConfig.setFrozen(false);\n\n    pool.setConfiguration(input.underlyingAsset, currentConfig);\n\n    emit ReserveInitialized(\n      input.underlyingAsset,\n      aTokenProxyAddress,\n      stableDebtTokenProxyAddress,\n      variableDebtTokenProxyAddress,\n      input.interestRateStrategyAddress\n    );\n  }",
        "comments": [
            "/**",
            "   * @notice Initialize a reserve by creating and initializing aToken, stable debt token and variable debt token",
            "   * @dev Emits the `ReserveInitialized` event",
            "   * @param pool The Pool in which the reserve will be initialized",
            "   * @param input The needed parameters for the initialization",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Initialize a reserve by creating and initializing aToken, stable debt token and variable debt token\n   * @dev Emits the `ReserveInitialized` event\n   * @param pool The Pool in which the reserve will be initialized\n   * @param input The needed parameters for the initialization\n   */\n",
        "@notice": "Initialize a reserve by creating and initializing aToken, stable debt token and variable debt token",
        "@dev": "Emits the `ReserveInitialized` event",
        "@param1": "pool The Pool in which the reserve will be initialized",
        "@param2": "input The needed parameters for the initialization",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeUpdateAToken",
        "visibility": "public",
        "args": [
            {
                "name": "cachedPool",
                "type": "IPool"
            },
            {
                "name": "input",
                "type": "ConfiguratorInputTypes.UpdateATokenInput calldata"
            }
        ],
        "func": "function executeUpdateAToken(\n    IPool cachedPool,\n    ConfiguratorInputTypes.UpdateATokenInput calldata input\n  ) public {\n    DataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);\n\n    (, , , uint256 decimals, , ) = cachedPool.getConfiguration(input.asset).getParams();\n\n    bytes memory encodedCall = abi.encodeWithSelector(\n      IInitializableAToken.initialize.selector,\n      cachedPool,\n      input.treasury,\n      input.asset,\n      input.incentivesController,\n      decimals,\n      input.name,\n      input.symbol,\n      input.params\n    );\n\n    _upgradeTokenImplementation(reserveData.aTokenAddress, input.implementation, encodedCall);\n\n    emit ATokenUpgraded(input.asset, reserveData.aTokenAddress, input.implementation);\n  }",
        "comments": [
            "/**",
            "   * @notice Updates the aToken implementation and initializes it",
            "   * @dev Emits the `ATokenUpgraded` event",
            "   * @param cachedPool The Pool containing the reserve with the aToken",
            "   * @param input The parameters needed for the initialize call",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Updates the aToken implementation and initializes it\n   * @dev Emits the `ATokenUpgraded` event\n   * @param cachedPool The Pool containing the reserve with the aToken\n   * @param input The parameters needed for the initialize call\n   */\n",
        "@notice": "Updates the aToken implementation and initializes it",
        "@dev": "Emits the `ATokenUpgraded` event",
        "@param1": "cachedPool The Pool containing the reserve with the aToken",
        "@param2": "input The parameters needed for the initialize call",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeUpdateStableDebtToken",
        "visibility": "public",
        "args": [
            {
                "name": "cachedPool",
                "type": "IPool"
            },
            {
                "name": "input",
                "type": "ConfiguratorInputTypes.UpdateDebtTokenInput calldata"
            }
        ],
        "func": "function executeUpdateStableDebtToken(\n    IPool cachedPool,\n    ConfiguratorInputTypes.UpdateDebtTokenInput calldata input\n  ) public {\n    DataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);\n\n    (, , , uint256 decimals, , ) = cachedPool.getConfiguration(input.asset).getParams();\n\n    bytes memory encodedCall = abi.encodeWithSelector(\n      IInitializableDebtToken.initialize.selector,\n      cachedPool,\n      input.asset,\n      input.incentivesController,\n      decimals,\n      input.name,\n      input.symbol,\n      input.params\n    );\n\n    _upgradeTokenImplementation(\n      reserveData.stableDebtTokenAddress,\n      input.implementation,\n      encodedCall\n    );\n\n    emit StableDebtTokenUpgraded(\n      input.asset,\n      reserveData.stableDebtTokenAddress,\n      input.implementation\n    );\n  }",
        "comments": [
            "/**",
            "   * @notice Updates the stable debt token implementation and initializes it",
            "   * @dev Emits the `StableDebtTokenUpgraded` event",
            "   * @param cachedPool The Pool containing the reserve with the stable debt token",
            "   * @param input The parameters needed for the initialize call",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Updates the stable debt token implementation and initializes it\n   * @dev Emits the `StableDebtTokenUpgraded` event\n   * @param cachedPool The Pool containing the reserve with the stable debt token\n   * @param input The parameters needed for the initialize call\n   */\n",
        "@notice": "Updates the stable debt token implementation and initializes it",
        "@dev": "Emits the `StableDebtTokenUpgraded` event",
        "@param1": "cachedPool The Pool containing the reserve with the stable debt token",
        "@param2": "input The parameters needed for the initialize call",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeUpdateVariableDebtToken",
        "visibility": "public",
        "args": [
            {
                "name": "cachedPool",
                "type": "IPool"
            },
            {
                "name": "input",
                "type": "ConfiguratorInputTypes.UpdateDebtTokenInput calldata"
            }
        ],
        "func": "function executeUpdateVariableDebtToken(\n    IPool cachedPool,\n    ConfiguratorInputTypes.UpdateDebtTokenInput calldata input\n  ) public {\n    DataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);\n\n    (, , , uint256 decimals, , ) = cachedPool.getConfiguration(input.asset).getParams();\n\n    bytes memory encodedCall = abi.encodeWithSelector(\n      IInitializableDebtToken.initialize.selector,\n      cachedPool,\n      input.asset,\n      input.incentivesController,\n      decimals,\n      input.name,\n      input.symbol,\n      input.params\n    );\n\n    _upgradeTokenImplementation(\n      reserveData.variableDebtTokenAddress,\n      input.implementation,\n      encodedCall\n    );\n\n    emit VariableDebtTokenUpgraded(\n      input.asset,\n      reserveData.variableDebtTokenAddress,\n      input.implementation\n    );\n  }",
        "comments": [
            "/**",
            "   * @notice Updates the variable debt token implementation and initializes it",
            "   * @dev Emits the `VariableDebtTokenUpgraded` event",
            "   * @param cachedPool The Pool containing the reserve with the variable debt token",
            "   * @param input The parameters needed for the initialize call",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Updates the variable debt token implementation and initializes it\n   * @dev Emits the `VariableDebtTokenUpgraded` event\n   * @param cachedPool The Pool containing the reserve with the variable debt token\n   * @param input The parameters needed for the initialize call\n   */\n",
        "@notice": "Updates the variable debt token implementation and initializes it",
        "@dev": "Emits the `VariableDebtTokenUpgraded` event",
        "@param1": "cachedPool The Pool containing the reserve with the variable debt token",
        "@param2": "input The parameters needed for the initialize call",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeSetUserEMode",
        "visibility": "external",
        "args": [
            {
                "name": "DataTypes.ReserveData",
                "type": "mapping(address =>"
            }
        ],
        "func": "function executeSetUserEMode(\n    mapping(address => DataTypes.ReserveData) storage reservesData,\n    mapping(uint256 => address) storage reservesList,\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\n    mapping(address => uint8) storage usersEModeCategory,\n    DataTypes.UserConfigurationMap storage userConfig,\n    DataTypes.ExecuteSetUserEModeParams memory params\n  ) external {\n    ValidationLogic.validateSetUserEMode(\n      reservesData,\n      reservesList,\n      eModeCategories,\n      userConfig,\n      params.reservesCount,\n      params.categoryId\n    );\n\n    uint8 prevCategoryId = usersEModeCategory[msg.sender];\n    usersEModeCategory[msg.sender] = params.categoryId;\n\n    if (prevCategoryId != 0) {\n      ValidationLogic.validateHealthFactor(\n        reservesData,\n        reservesList,\n        eModeCategories,\n        userConfig,\n        msg.sender,\n        params.categoryId,\n        params.reservesCount,\n        params.oracle\n      );\n    }\n    emit UserEModeSet(msg.sender, params.categoryId);\n  }",
        "comments": [
            "/**",
            "   * @notice Updates the user efficiency mode category",
            "   * @dev Will revert if user is borrowing non-compatible asset or change will drop HF < HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
            "   * @dev Emits the `UserEModeSet` event",
            "   * @param reservesData The state of all the reserves",
            "   * @param reservesList The addresses of all the active reserves",
            "   * @param eModeCategories The configuration of all the efficiency mode categories",
            "   * @param usersEModeCategory The state of all users efficiency mode category",
            "   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets",
            "   * @param params The additional parameters needed to execute the setUserEMode function",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Updates the user efficiency mode category\n   * @dev Will revert if user is borrowing non-compatible asset or change will drop HF < HEALTH_FACTOR_LIQUIDATION_THRESHOLD\n   * @dev Emits the `UserEModeSet` event\n   * @param reservesData The state of all the reserves\n   * @param reservesList The addresses of all the active reserves\n   * @param eModeCategories The configuration of all the efficiency mode categories\n   * @param usersEModeCategory The state of all users efficiency mode category\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\n   * @param params The additional parameters needed to execute the setUserEMode function\n   */\n",
        "@notice": "Updates the user efficiency mode category",
        "@dev": "Will revert if user is borrowing non-compatible asset or change will drop HF < HEALTH_FACTOR_LIQUIDATION_THRESHOLD * Emits the `UserEModeSet` event",
        "@param1": "reservesData The state of all the reserves",
        "@param2": "reservesList The addresses of all the active reserves",
        "@param3": "eModeCategories The configuration of all the efficiency mode categories",
        "@param4": "usersEModeCategory The state of all users efficiency mode category",
        "@param5": "userConfig The user configuration mapping that tracks the supplied/borrowed assets",
        "@param6": "params The additional parameters needed to execute the setUserEMode function",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeFlashLoan",
        "visibility": "external",
        "args": [
            {
                "name": "DataTypes.ReserveData",
                "type": "mapping(address =>"
            }
        ],
        "func": "function executeFlashLoan(\n    mapping(address => DataTypes.ReserveData) storage reservesData,\n    mapping(uint256 => address) storage reservesList,\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\n    DataTypes.UserConfigurationMap storage userConfig,\n    DataTypes.FlashloanParams memory params\n  ) external {\n    // The usual action flow (cache -> updateState -> validation -> changeState -> updateRates)\n    // is altered to (validation -> user payload -> cache -> updateState -> changeState -> updateRates) for flashloans.\n    // This is done to protect against reentrance and rate manipulation within the user specified payload.\n\n    ValidationLogic.validateFlashloan(reservesData, params.assets, params.amounts);\n\n    FlashLoanLocalVars memory vars;\n\n    vars.totalPremiums = new uint256[](params.assets.length);\n\n    vars.receiver = IFlashLoanReceiver(params.receiverAddress);\n    (vars.flashloanPremiumTotal, vars.flashloanPremiumToProtocol) = params.isAuthorizedFlashBorrower\n      ? (0, 0)\n      : (params.flashLoanPremiumTotal, params.flashLoanPremiumToProtocol);\n\n    for (vars.i = 0; vars.i < params.assets.length; vars.i++) {\n      vars.currentAmount = params.amounts[vars.i];\n      vars.totalPremiums[vars.i] = vars.currentAmount.percentMul(vars.flashloanPremiumTotal);\n      IAToken(reservesData[params.assets[vars.i]].aTokenAddress).transferUnderlyingTo(\n        params.receiverAddress,\n        vars.currentAmount\n      );\n    }\n\n    require(\n      vars.receiver.executeOperation(\n        params.assets,\n        params.amounts,\n        vars.totalPremiums,\n        msg.sender,\n        params.params\n      ),\n      Errors.INVALID_FLASHLOAN_EXECUTOR_RETURN\n    );\n\n    for (vars.i = 0; vars.i < params.assets.length; vars.i++) {\n      vars.currentAsset = params.assets[vars.i];\n      vars.currentAmount = params.amounts[vars.i];\n\n      if (\n        DataTypes.InterestRateMode(params.interestRateModes[vars.i]) ==\n        DataTypes.InterestRateMode.NONE\n      ) {\n        _handleFlashLoanRepayment(\n          reservesData[vars.currentAsset],\n          DataTypes.FlashLoanRepaymentParams({\n            asset: vars.currentAsset,\n            receiverAddress: params.receiverAddress,\n            amount: vars.currentAmount,\n            totalPremium: vars.totalPremiums[vars.i],\n            flashLoanPremiumToProtocol: vars.flashloanPremiumToProtocol,\n            referralCode: params.referralCode\n          })\n        );\n      } else {\n        // If the user chose to not return the funds, the system checks if there is enough collateral and\n        // eventually opens a debt position\n        BorrowLogic.executeBorrow(\n          reservesData,\n          reservesList,\n          eModeCategories,\n          userConfig,\n          DataTypes.ExecuteBorrowParams({\n            asset: vars.currentAsset,\n            user: msg.sender,\n            onBehalfOf: params.onBehalfOf,\n            amount: vars.currentAmount,\n            interestRateMode: DataTypes.InterestRateMode(params.interestRateModes[vars.i]),\n            referralCode: params.referralCode,\n            releaseUnderlying: false,\n            maxStableRateBorrowSizePercent: params.maxStableRateBorrowSizePercent,\n            reservesCount: params.reservesCount,\n            oracle: IPoolAddressesProvider(params.addressesProvider).getPriceOracle(),\n            userEModeCategory: params.userEModeCategory,\n            priceOracleSentinel: IPoolAddressesProvider(params.addressesProvider)\n              .getPriceOracleSentinel()\n          })\n        );\n        // no premium is paid when taking on the flashloan as debt\n        emit FlashLoan(\n          params.receiverAddress,\n          msg.sender,\n          vars.currentAsset,\n          vars.currentAmount,\n          DataTypes.InterestRateMode(params.interestRateModes[vars.i]),\n          0,\n          params.referralCode\n        );\n      }\n    }\n  }",
        "comments": [
            "/**",
            "   * @notice Implements the flashloan feature that allow users to access liquidity of the pool for one transaction",
            "   * as long as the amount taken plus fee is returned or debt is opened.",
            "   * @dev For authorized flashborrowers the fee is waived",
            "   * @dev At the end of the transaction the pool will pull amount borrowed + fee from the receiver,",
            "   * if the receiver have not approved the pool the transaction will revert.",
            "   * @dev Emits the `FlashLoan()` event",
            "   * @param reservesData The state of all the reserves",
            "   * @param reservesList The addresses of all the active reserves",
            "   * @param eModeCategories The configuration of all the efficiency mode categories",
            "   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets",
            "   * @param params The additional parameters needed to execute the flashloan function",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Implements the flashloan feature that allow users to access liquidity of the pool for one transaction\n   * as long as the amount taken plus fee is returned or debt is opened.\n   * @dev For authorized flashborrowers the fee is waived\n   * @dev At the end of the transaction the pool will pull amount borrowed + fee from the receiver,\n   * if the receiver have not approved the pool the transaction will revert.\n   * @dev Emits the `FlashLoan()` event\n   * @param reservesData The state of all the reserves\n   * @param reservesList The addresses of all the active reserves\n   * @param eModeCategories The configuration of all the efficiency mode categories\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\n   * @param params The additional parameters needed to execute the flashloan function\n   */\n",
        "@notice": "Implements the flashloan feature that allow users to access liquidity of the pool for one transaction * as long as the amount taken plus fee is returned or debt is opened.",
        "@dev": "For authorized flashborrowers the fee is waived * At the end of the transaction the pool will pull amount borrowed + fee from the receiver, * if the receiver have not approved the pool the transaction will revert. * Emits the `FlashLoan()` event",
        "@param1": "reservesData The state of all the reserves",
        "@param2": "reservesList The addresses of all the active reserves",
        "@param3": "eModeCategories The configuration of all the efficiency mode categories",
        "@param4": "userConfig The user configuration mapping that tracks the supplied/borrowed assets",
        "@param5": "params The additional parameters needed to execute the flashloan function",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 1,
        "low_quality": 0
    },
    {
        "name": "executeFlashLoanSimple",
        "visibility": "external",
        "args": [
            {
                "name": "reserve",
                "type": "DataTypes.ReserveData storage"
            },
            {
                "name": "params",
                "type": "DataTypes.FlashloanSimpleParams memory"
            }
        ],
        "func": "function executeFlashLoanSimple(\n    DataTypes.ReserveData storage reserve,\n    DataTypes.FlashloanSimpleParams memory params\n  ) external {\n    // The usual action flow (cache -> updateState -> validation -> changeState -> updateRates)\n    // is altered to (validation -> user payload -> cache -> updateState -> changeState -> updateRates) for flashloans.\n    // This is done to protect against reentrance and rate manipulation within the user specified payload.\n\n    ValidationLogic.validateFlashloanSimple(reserve);\n\n    IFlashLoanSimpleReceiver receiver = IFlashLoanSimpleReceiver(params.receiverAddress);\n    uint256 totalPremium = params.amount.percentMul(params.flashLoanPremiumTotal);\n    IAToken(reserve.aTokenAddress).transferUnderlyingTo(params.receiverAddress, params.amount);\n\n    require(\n      receiver.executeOperation(\n        params.asset,\n        params.amount,\n        totalPremium,\n        msg.sender,\n        params.params\n      ),\n      Errors.INVALID_FLASHLOAN_EXECUTOR_RETURN\n    );\n\n    _handleFlashLoanRepayment(\n      reserve,\n      DataTypes.FlashLoanRepaymentParams({\n        asset: params.asset,\n        receiverAddress: params.receiverAddress,\n        amount: params.amount,\n        totalPremium: totalPremium,\n        flashLoanPremiumToProtocol: params.flashLoanPremiumToProtocol,\n        referralCode: params.referralCode\n      })\n    );\n  }",
        "comments": [
            "/**",
            "   * @notice Implements the simple flashloan feature that allow users to access liquidity of ONE reserve for one",
            "   * transaction as long as the amount taken plus fee is returned.",
            "   * @dev Does not waive fee for approved flashborrowers nor allow taking on debt instead of repaying to save gas",
            "   * @dev At the end of the transaction the pool will pull amount borrowed + fee from the receiver,",
            "   * if the receiver have not approved the pool the transaction will revert.",
            "   * @dev Emits the `FlashLoan()` event",
            "   * @param reserve The state of the flashloaned reserve",
            "   * @param params The additional parameters needed to execute the simple flashloan function",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Implements the simple flashloan feature that allow users to access liquidity of ONE reserve for one\n   * transaction as long as the amount taken plus fee is returned.\n   * @dev Does not waive fee for approved flashborrowers nor allow taking on debt instead of repaying to save gas\n   * @dev At the end of the transaction the pool will pull amount borrowed + fee from the receiver,\n   * if the receiver have not approved the pool the transaction will revert.\n   * @dev Emits the `FlashLoan()` event\n   * @param reserve The state of the flashloaned reserve\n   * @param params The additional parameters needed to execute the simple flashloan function\n   */\n",
        "@notice": "Implements the simple flashloan feature that allow users to access liquidity of ONE reserve for one * transaction as long as the amount taken plus fee is returned.",
        "@dev": "Does not waive fee for approved flashborrowers nor allow taking on debt instead of repaying to save gas * At the end of the transaction the pool will pull amount borrowed + fee from the receiver, * if the receiver have not approved the pool the transaction will revert. * Emits the `FlashLoan()` event",
        "@param1": "reserve The state of the flashloaned reserve",
        "@param2": "params The additional parameters needed to execute the simple flashloan function",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 1,
        "low_quality": 0
    },
    {
        "name": "executeLiquidationCall",
        "visibility": "external",
        "args": [
            {
                "name": "DataTypes.ReserveData",
                "type": "mapping(address =>"
            }
        ],
        "func": "function executeLiquidationCall(\n    mapping(address => DataTypes.ReserveData) storage reservesData,\n    mapping(uint256 => address) storage reservesList,\n    mapping(address => DataTypes.UserConfigurationMap) storage usersConfig,\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\n    DataTypes.ExecuteLiquidationCallParams memory params\n  ) external {\n    LiquidationCallLocalVars memory vars;\n\n    DataTypes.ReserveData storage collateralReserve = reservesData[params.collateralAsset];\n    DataTypes.ReserveData storage debtReserve = reservesData[params.debtAsset];\n    DataTypes.UserConfigurationMap storage userConfig = usersConfig[params.user];\n    vars.debtReserveCache = debtReserve.cache();\n    debtReserve.updateState(vars.debtReserveCache);\n\n    (, , , , vars.healthFactor, ) = GenericLogic.calculateUserAccountData(\n      reservesData,\n      reservesList,\n      eModeCategories,\n      DataTypes.CalculateUserAccountDataParams({\n        userConfig: userConfig,\n        reservesCount: params.reservesCount,\n        user: params.user,\n        oracle: params.priceOracle,\n        userEModeCategory: params.userEModeCategory\n      })\n    );\n\n    (vars.userVariableDebt, vars.userTotalDebt, vars.actualDebtToLiquidate) = _calculateDebt(\n      vars.debtReserveCache,\n      params,\n      vars.healthFactor\n    );\n\n    ValidationLogic.validateLiquidationCall(\n      userConfig,\n      collateralReserve,\n      DataTypes.ValidateLiquidationCallParams({\n        debtReserveCache: vars.debtReserveCache,\n        totalDebt: vars.userTotalDebt,\n        healthFactor: vars.healthFactor,\n        priceOracleSentinel: params.priceOracleSentinel\n      })\n    );\n\n    (\n      vars.collateralAToken,\n      vars.collateralPriceSource,\n      vars.debtPriceSource,\n      vars.liquidationBonus\n    ) = _getConfigurationData(eModeCategories, collateralReserve, params);\n\n    vars.userCollateralBalance = vars.collateralAToken.balanceOf(params.user);\n\n    (\n      vars.actualCollateralToLiquidate,\n      vars.actualDebtToLiquidate,\n      vars.liquidationProtocolFeeAmount\n    ) = _calculateAvailableCollateralToLiquidate(\n      collateralReserve,\n      vars.debtReserveCache,\n      vars.collateralPriceSource,\n      vars.debtPriceSource,\n      vars.actualDebtToLiquidate,\n      vars.userCollateralBalance,\n      vars.liquidationBonus,\n      IPriceOracleGetter(params.priceOracle)\n    );\n\n    if (vars.userTotalDebt == vars.actualDebtToLiquidate) {\n      userConfig.setBorrowing(debtReserve.id, false);\n    }\n\n    _burnDebtTokens(params, vars);\n\n    debtReserve.updateInterestRates(\n      vars.debtReserveCache,\n      params.debtAsset,\n      vars.actualDebtToLiquidate,\n      0\n    );\n\n    IsolationModeLogic.updateIsolatedDebtIfIsolated(\n      reservesData,\n      reservesList,\n      userConfig,\n      vars.debtReserveCache,\n      vars.actualDebtToLiquidate\n    );\n\n    if (params.receiveAToken) {\n      _liquidateATokens(reservesData, reservesList, usersConfig, collateralReserve, params, vars);\n    } else {\n      _burnCollateralATokens(collateralReserve, params, vars);\n    }\n\n    // Transfer fee to treasury if it is non-zero\n    if (vars.liquidationProtocolFeeAmount != 0) {\n      vars.collateralAToken.transferOnLiquidation(\n        params.user,\n        vars.collateralAToken.RESERVE_TREASURY_ADDRESS(),\n        vars.liquidationProtocolFeeAmount\n      );\n    }\n\n    // If the collateral being liquidated is equal to the user balance,\n    // we set the currency as not being used as collateral anymore\n    if (vars.actualCollateralToLiquidate == vars.userCollateralBalance) {\n      userConfig.setUsingAsCollateral(collateralReserve.id, false);\n      emit ReserveUsedAsCollateralDisabled(params.collateralAsset, params.user);\n    }\n\n    // Transfers the debt asset being repaid to the aToken, where the liquidity is kept\n    IERC20(params.debtAsset).safeTransferFrom(\n      msg.sender,\n      vars.debtReserveCache.aTokenAddress,\n      vars.actualDebtToLiquidate\n    );\n\n    IAToken(vars.debtReserveCache.aTokenAddress).handleRepayment(\n      msg.sender,\n      vars.actualDebtToLiquidate\n    );\n\n    emit LiquidationCall(\n      params.collateralAsset,\n      params.debtAsset,\n      params.user,\n      vars.actualDebtToLiquidate,\n      vars.actualCollateralToLiquidate,\n      msg.sender,\n      params.receiveAToken\n    );\n  }",
        "comments": [
            "/**",
            "   * @notice Function to liquidate a position if its Health Factor drops below 1. The caller (liquidator)",
            "   * covers `debtToCover` amount of debt of the user getting liquidated, and receives",
            "   * a proportional amount of the `collateralAsset` plus a bonus to cover market risk",
            "   * @dev Emits the `LiquidationCall()` event",
            "   * @param reservesData The state of all the reserves",
            "   * @param reservesList The addresses of all the active reserves",
            "   * @param usersConfig The users configuration mapping that track the supplied/borrowed assets",
            "   * @param eModeCategories The configuration of all the efficiency mode categories",
            "   * @param params The additional parameters needed to execute the liquidation function",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Function to liquidate a position if its Health Factor drops below 1. The caller (liquidator)\n   * covers `debtToCover` amount of debt of the user getting liquidated, and receives\n   * a proportional amount of the `collateralAsset` plus a bonus to cover market risk\n   * @dev Emits the `LiquidationCall()` event\n   * @param reservesData The state of all the reserves\n   * @param reservesList The addresses of all the active reserves\n   * @param usersConfig The users configuration mapping that track the supplied/borrowed assets\n   * @param eModeCategories The configuration of all the efficiency mode categories\n   * @param params The additional parameters needed to execute the liquidation function\n   **/\n",
        "@notice": "Function to liquidate a position if its Health Factor drops below 1. The caller (liquidator) * covers `debtToCover` amount of debt of the user getting liquidated, and receives * a proportional amount of the `collateralAsset` plus a bonus to cover market risk",
        "@dev": "Emits the `LiquidationCall()` event",
        "@param1": "reservesData The state of all the reserves",
        "@param2": "reservesList The addresses of all the active reserves",
        "@param3": "usersConfig The users configuration mapping that track the supplied/borrowed assets",
        "@param4": "eModeCategories The configuration of all the efficiency mode categories",
        "@param5": "params The additional parameters needed to execute the liquidation function",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 1,
        "low_quality": 0
    },
    {
        "name": "executeInitReserve",
        "visibility": "external",
        "args": [
            {
                "name": "DataTypes.ReserveData",
                "type": "mapping(address =>"
            }
        ],
        "func": "function executeInitReserve(\n    mapping(address => DataTypes.ReserveData) storage reservesData,\n    mapping(uint256 => address) storage reservesList,\n    DataTypes.InitReserveParams memory params\n  ) external returns (bool) {\n    require(Address.isContract(params.asset), Errors.NOT_CONTRACT);\n    reservesData[params.asset].init(\n      params.aTokenAddress,\n      params.stableDebtAddress,\n      params.variableDebtAddress,\n      params.interestRateStrategyAddress\n    );\n\n    bool reserveAlreadyAdded = reservesData[params.asset].id != 0 ||\n      reservesList[0] == params.asset;\n    require(!reserveAlreadyAdded, Errors.RESERVE_ALREADY_ADDED);\n\n    for (uint16 i = 0; i < params.reservesCount; i++) {\n      if (reservesList[i] == address(0)) {\n        reservesData[params.asset].id = i;\n        reservesList[i] = params.asset;\n        return false;\n      }\n    }\n\n    require(params.reservesCount < params.maxNumberReserves, Errors.NO_MORE_RESERVES_ALLOWED);\n    reservesData[params.asset].id = params.reservesCount;\n    reservesList[params.reservesCount] = params.asset;\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @notice Initialize an asset reserve and add the reserve to the list of reserves",
            "   * @param reservesData The state of all the reserves",
            "   * @param reservesList The addresses of all the active reserves",
            "   * @param params Additional parameters needed for initiation",
            "   * @return true if appended, false if inserted at existing empty spot",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Initialize an asset reserve and add the reserve to the list of reserves\n   * @param reservesData The state of all the reserves\n   * @param reservesList The addresses of all the active reserves\n   * @param params Additional parameters needed for initiation\n   * @return true if appended, false if inserted at existing empty spot\n   **/\n",
        "@notice": "Initialize an asset reserve and add the reserve to the list of reserves",
        "@param1": "reservesData The state of all the reserves",
        "@param2": "reservesList The addresses of all the active reserves",
        "@param3": "params Additional parameters needed for initiation",
        "@return1": "true if appended, false if inserted at existing empty spot",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeRescueTokens",
        "visibility": "external",
        "args": [
            {
                "name": "token",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function executeRescueTokens(\n    address token,\n    address to,\n    uint256 amount\n  ) external {\n    IERC20(token).safeTransfer(to, amount);\n  }",
        "comments": [
            "/**",
            "   * @notice Rescue and transfer tokens locked in this contract",
            "   * @param token The address of the token",
            "   * @param to The address of the recipient",
            "   * @param amount The amount of token to transfer",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Rescue and transfer tokens locked in this contract\n   * @param token The address of the token\n   * @param to The address of the recipient\n   * @param amount The amount of token to transfer\n   */\n",
        "@notice": "Rescue and transfer tokens locked in this contract",
        "@param1": "token The address of the token",
        "@param2": "to The address of the recipient",
        "@param3": "amount The amount of token to transfer",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeMintToTreasury",
        "visibility": "external",
        "args": [
            {
                "name": "DataTypes.ReserveData",
                "type": "mapping(address =>"
            }
        ],
        "func": "function executeMintToTreasury(\n    mapping(address => DataTypes.ReserveData) storage reservesData,\n    address[] calldata assets\n  ) external {\n    for (uint256 i = 0; i < assets.length; i++) {\n      address assetAddress = assets[i];\n\n      DataTypes.ReserveData storage reserve = reservesData[assetAddress];\n\n      // this cover both inactive reserves and invalid reserves since the flag will be 0 for both\n      if (!reserve.configuration.getActive()) {\n        continue;\n      }\n\n      uint256 accruedToTreasury = reserve.accruedToTreasury;\n\n      if (accruedToTreasury != 0) {\n        reserve.accruedToTreasury = 0;\n        uint256 normalizedIncome = reserve.getNormalizedIncome();\n        uint256 amountToMint = accruedToTreasury.rayMul(normalizedIncome);\n        IAToken(reserve.aTokenAddress).mintToTreasury(amountToMint, normalizedIncome);\n\n        emit MintedToTreasury(assetAddress, amountToMint);\n      }\n    }\n  }",
        "comments": [
            "/**",
            "   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens",
            "   * @param reservesData The state of all the reserves",
            "   * @param assets The list of reserves for which the minting needs to be executed",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\n   * @param reservesData The state of all the reserves\n   * @param assets The list of reserves for which the minting needs to be executed\n   **/\n",
        "@notice": "Mints the assets accrued through the reserve factor to the treasury in the form of aTokens",
        "@param1": "reservesData The state of all the reserves",
        "@param2": "assets The list of reserves for which the minting needs to be executed",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeResetIsolationModeTotalDebt",
        "visibility": "external",
        "args": [
            {
                "name": "DataTypes.ReserveData",
                "type": "mapping(address =>"
            }
        ],
        "func": "function executeResetIsolationModeTotalDebt(\n    mapping(address => DataTypes.ReserveData) storage reservesData,\n    address asset\n  ) external {\n    require(reservesData[asset].configuration.getDebtCeiling() == 0, Errors.DEBT_CEILING_NOT_ZERO);\n    reservesData[asset].isolationModeTotalDebt = 0;\n    emit IsolationModeTotalDebtUpdated(asset, 0);\n  }",
        "comments": [
            "/**",
            "   * @notice Resets the isolation mode total debt of the given asset to zero",
            "   * @dev It requires the given asset has zero debt ceiling",
            "   * @param reservesData The state of all the reserves",
            "   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Resets the isolation mode total debt of the given asset to zero\n   * @dev It requires the given asset has zero debt ceiling\n   * @param reservesData The state of all the reserves\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\n   */\n",
        "@notice": "Resets the isolation mode total debt of the given asset to zero",
        "@dev": "It requires the given asset has zero debt ceiling",
        "@param1": "reservesData The state of all the reserves",
        "@param2": "asset The address of the underlying asset to reset the isolationModeTotalDebt",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeDropReserve",
        "visibility": "external",
        "args": [
            {
                "name": "DataTypes.ReserveData",
                "type": "mapping(address =>"
            }
        ],
        "func": "function executeDropReserve(\n    mapping(address => DataTypes.ReserveData) storage reservesData,\n    mapping(uint256 => address) storage reservesList,\n    address asset\n  ) external {\n    DataTypes.ReserveData storage reserve = reservesData[asset];\n    ValidationLogic.validateDropReserve(reservesList, reserve, asset);\n    reservesList[reservesData[asset].id] = address(0);\n    delete reservesData[asset];\n  }",
        "comments": [
            "/**",
            "   * @notice Drop a reserve",
            "   * @param reservesData The state of all the reserves",
            "   * @param reservesList The addresses of all the active reserves",
            "   * @param asset The address of the underlying asset of the reserve",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Drop a reserve\n   * @param reservesData The state of all the reserves\n   * @param reservesList The addresses of all the active reserves\n   * @param asset The address of the underlying asset of the reserve\n   **/\n",
        "@notice": "Drop a reserve",
        "@param1": "reservesData The state of all the reserves",
        "@param2": "reservesList The addresses of all the active reserves",
        "@param3": "asset The address of the underlying asset of the reserve",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeGetUserAccountData",
        "visibility": "external",
        "args": [
            {
                "name": "DataTypes.ReserveData",
                "type": "mapping(address =>"
            }
        ],
        "func": "function executeGetUserAccountData(\n    mapping(address => DataTypes.ReserveData) storage reservesData,\n    mapping(uint256 => address) storage reservesList,\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\n    DataTypes.CalculateUserAccountDataParams memory params\n  )\n    external\n    view\n    returns (\n      uint256 totalCollateralBase,\n      uint256 totalDebtBase,\n      uint256 availableBorrowsBase,\n      uint256 currentLiquidationThreshold,\n      uint256 ltv,\n      uint256 healthFactor\n    )\n  {\n    (\n      totalCollateralBase,\n      totalDebtBase,\n      ltv,\n      currentLiquidationThreshold,\n      healthFactor,\n\n    ) = GenericLogic.calculateUserAccountData(reservesData, reservesList, eModeCategories, params);\n\n    availableBorrowsBase = GenericLogic.calculateAvailableBorrows(\n      totalCollateralBase,\n      totalDebtBase,\n      ltv\n    );\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the user account data across all the reserves",
            "   * @param reservesData The state of all the reserves",
            "   * @param reservesList The addresses of all the active reserves",
            "   * @param eModeCategories The configuration of all the efficiency mode categories",
            "   * @param params Additional params needed for the calculation",
            "   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed",
            "   * @return totalDebtBase The total debt of the user in the base currency used by the price feed",
            "   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed",
            "   * @return currentLiquidationThreshold The liquidation threshold of the user",
            "   * @return ltv The loan to value of The user",
            "   * @return healthFactor The current health factor of the user",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the user account data across all the reserves\n   * @param reservesData The state of all the reserves\n   * @param reservesList The addresses of all the active reserves\n   * @param eModeCategories The configuration of all the efficiency mode categories\n   * @param params Additional params needed for the calculation\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\n   * @return currentLiquidationThreshold The liquidation threshold of the user\n   * @return ltv The loan to value of The user\n   * @return healthFactor The current health factor of the user\n   **/\n",
        "@notice": "Returns the user account data across all the reserves",
        "@param1": "reservesData The state of all the reserves",
        "@param2": "reservesList The addresses of all the active reserves",
        "@param3": "eModeCategories The configuration of all the efficiency mode categories",
        "@param4": "params Additional params needed for the calculation",
        "@return1": "totalCollateralBase The total collateral of the user in the base currency used by the price feed",
        "@return2": "totalDebtBase The total debt of the user in the base currency used by the price feed",
        "@return3": "availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed",
        "@return4": "currentLiquidationThreshold The liquidation threshold of the user",
        "@return5": "ltv The loan to value of The user",
        "@return6": "healthFactor The current health factor of the user",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeSupply",
        "visibility": "external",
        "args": [
            {
                "name": "DataTypes.ReserveData",
                "type": "mapping(address =>"
            }
        ],
        "func": "function executeSupply(\n    mapping(address => DataTypes.ReserveData) storage reservesData,\n    mapping(uint256 => address) storage reservesList,\n    DataTypes.UserConfigurationMap storage userConfig,\n    DataTypes.ExecuteSupplyParams memory params\n  ) external {\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\n\n    reserve.updateState(reserveCache);\n\n    ValidationLogic.validateSupply(reserveCache, params.amount);\n\n    reserve.updateInterestRates(reserveCache, params.asset, params.amount, 0);\n\n    IERC20(params.asset).safeTransferFrom(msg.sender, reserveCache.aTokenAddress, params.amount);\n\n    bool isFirstSupply = IAToken(reserveCache.aTokenAddress).mint(\n      msg.sender,\n      params.onBehalfOf,\n      params.amount,\n      reserveCache.nextLiquidityIndex\n    );\n\n    if (isFirstSupply) {\n      if (\n        ValidationLogic.validateUseAsCollateral(\n          reservesData,\n          reservesList,\n          userConfig,\n          reserveCache.reserveConfiguration\n        )\n      ) {\n        userConfig.setUsingAsCollateral(reserve.id, true);\n        emit ReserveUsedAsCollateralEnabled(params.asset, params.onBehalfOf);\n      }\n    }\n\n    emit Supply(params.asset, msg.sender, params.onBehalfOf, params.amount, params.referralCode);\n  }",
        "comments": [
            "/**",
            "   * @notice Implements the supply feature. Through `supply()`, users supply assets to the Fintoch protocol.",
            "   * @dev Emits the `Supply()` event.",
            "   * @dev In the first supply action, `ReserveUsedAsCollateralEnabled()` is emitted, if the asset can be enabled as",
            "   * collateral.",
            "   * @param reservesData The state of all the reserves",
            "   * @param reservesList The addresses of all the active reserves",
            "   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets",
            "   * @param params The additional parameters needed to execute the supply function",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Implements the supply feature. Through `supply()`, users supply assets to the Fintoch protocol.\n   * @dev Emits the `Supply()` event.\n   * @dev In the first supply action, `ReserveUsedAsCollateralEnabled()` is emitted, if the asset can be enabled as\n   * collateral.\n   * @param reservesData The state of all the reserves\n   * @param reservesList The addresses of all the active reserves\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\n   * @param params The additional parameters needed to execute the supply function\n   */\n",
        "@notice": "Implements the supply feature. Through `supply()`, users supply assets to the Fintoch protocol.",
        "@dev": "Emits the `Supply()` event. * In the first supply action, `ReserveUsedAsCollateralEnabled()` is emitted, if the asset can be enabled as * collateral.",
        "@param1": "reservesData The state of all the reserves",
        "@param2": "reservesList The addresses of all the active reserves",
        "@param3": "userConfig The user configuration mapping that tracks the supplied/borrowed assets",
        "@param4": "params The additional parameters needed to execute the supply function",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeWithdraw",
        "visibility": "external",
        "args": [
            {
                "name": "DataTypes.ReserveData",
                "type": "mapping(address =>"
            }
        ],
        "func": "function executeWithdraw(\n    mapping(address => DataTypes.ReserveData) storage reservesData,\n    mapping(uint256 => address) storage reservesList,\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\n    DataTypes.UserConfigurationMap storage userConfig,\n    DataTypes.ExecuteWithdrawParams memory params\n  ) external returns (uint256) {\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\n\n    reserve.updateState(reserveCache);\n\n    uint256 userBalance = IAToken(reserveCache.aTokenAddress).scaledBalanceOf(msg.sender).rayMul(\n      reserveCache.nextLiquidityIndex\n    );\n\n    uint256 amountToWithdraw = params.amount;\n\n    if (params.amount == type(uint256).max) {\n      amountToWithdraw = userBalance;\n    }\n\n    ValidationLogic.validateWithdraw(reserveCache, amountToWithdraw, userBalance);\n\n    reserve.updateInterestRates(reserveCache, params.asset, 0, amountToWithdraw);\n\n    IAToken(reserveCache.aTokenAddress).burn(\n      msg.sender,\n      params.to,\n      amountToWithdraw,\n      reserveCache.nextLiquidityIndex\n    );\n\n    if (userConfig.isUsingAsCollateral(reserve.id)) {\n      if (userConfig.isBorrowingAny()) {\n        ValidationLogic.validateHFAndLtv(\n          reservesData,\n          reservesList,\n          eModeCategories,\n          userConfig,\n          params.asset,\n          msg.sender,\n          params.reservesCount,\n          params.oracle,\n          params.userEModeCategory\n        );\n      }\n\n      if (amountToWithdraw == userBalance) {\n        userConfig.setUsingAsCollateral(reserve.id, false);\n        emit ReserveUsedAsCollateralDisabled(params.asset, msg.sender);\n      }\n    }\n\n    emit Withdraw(params.asset, msg.sender, params.to, amountToWithdraw);\n\n    return amountToWithdraw;\n  }",
        "comments": [
            "/**",
            "   * @notice Implements the withdraw feature. Through `withdraw()`, users redeem their aTokens for the underlying asset",
            "   * previously supplied in the Fintoch protocol.",
            "   * @dev Emits the `Withdraw()` event.",
            "   * @dev If the user withdraws everything, `ReserveUsedAsCollateralDisabled()` is emitted.",
            "   * @param reservesData The state of all the reserves",
            "   * @param reservesList The addresses of all the active reserves",
            "   * @param eModeCategories The configuration of all the efficiency mode categories",
            "   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets",
            "   * @param params The additional parameters needed to execute the withdraw function",
            "   * @return The actual amount withdrawn",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Implements the withdraw feature. Through `withdraw()`, users redeem their aTokens for the underlying asset\n   * previously supplied in the Fintoch protocol.\n   * @dev Emits the `Withdraw()` event.\n   * @dev If the user withdraws everything, `ReserveUsedAsCollateralDisabled()` is emitted.\n   * @param reservesData The state of all the reserves\n   * @param reservesList The addresses of all the active reserves\n   * @param eModeCategories The configuration of all the efficiency mode categories\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\n   * @param params The additional parameters needed to execute the withdraw function\n   * @return The actual amount withdrawn\n   */\n",
        "@notice": "Implements the withdraw feature. Through `withdraw()`, users redeem their aTokens for the underlying asset * previously supplied in the Fintoch protocol.",
        "@dev": "Emits the `Withdraw()` event. * If the user withdraws everything, `ReserveUsedAsCollateralDisabled()` is emitted.",
        "@param1": "reservesData The state of all the reserves",
        "@param2": "reservesList The addresses of all the active reserves",
        "@param3": "eModeCategories The configuration of all the efficiency mode categories",
        "@param4": "userConfig The user configuration mapping that tracks the supplied/borrowed assets",
        "@param5": "params The additional parameters needed to execute the withdraw function",
        "@return1": "The actual amount withdrawn",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeFinalizeTransfer",
        "visibility": "external",
        "args": [
            {
                "name": "DataTypes.ReserveData",
                "type": "mapping(address =>"
            }
        ],
        "func": "function executeFinalizeTransfer(\n    mapping(address => DataTypes.ReserveData) storage reservesData,\n    mapping(uint256 => address) storage reservesList,\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\n    mapping(address => DataTypes.UserConfigurationMap) storage usersConfig,\n    DataTypes.FinalizeTransferParams memory params\n  ) external {\n    DataTypes.ReserveData storage reserve = reservesData[params.asset];\n\n    ValidationLogic.validateTransfer(reserve);\n\n    uint256 reserveId = reserve.id;\n\n    if (params.from != params.to && params.amount != 0) {\n      DataTypes.UserConfigurationMap storage fromConfig = usersConfig[params.from];\n\n      if (fromConfig.isUsingAsCollateral(reserveId)) {\n        if (fromConfig.isBorrowingAny()) {\n          ValidationLogic.validateHFAndLtv(\n            reservesData,\n            reservesList,\n            eModeCategories,\n            usersConfig[params.from],\n            params.asset,\n            params.from,\n            params.reservesCount,\n            params.oracle,\n            params.fromEModeCategory\n          );\n        }\n        if (params.balanceFromBefore == params.amount) {\n          fromConfig.setUsingAsCollateral(reserveId, false);\n          emit ReserveUsedAsCollateralDisabled(params.asset, params.from);\n        }\n      }\n\n      if (params.balanceToBefore == 0) {\n        DataTypes.UserConfigurationMap storage toConfig = usersConfig[params.to];\n        if (\n          ValidationLogic.validateUseAsCollateral(\n            reservesData,\n            reservesList,\n            toConfig,\n            reserve.configuration\n          )\n        ) {\n          toConfig.setUsingAsCollateral(reserveId, true);\n          emit ReserveUsedAsCollateralEnabled(params.asset, params.to);\n        }\n      }\n    }\n  }",
        "comments": [
            "/**",
            "   * @notice Validates a transfer of aTokens. The sender is subjected to health factor validation to avoid",
            "   * collateralization constraints violation.",
            "   * @dev Emits the `ReserveUsedAsCollateralEnabled()` event for the `to` account, if the asset is being activated as",
            "   * collateral.",
            "   * @dev In case the `from` user transfers everything, `ReserveUsedAsCollateralDisabled()` is emitted for `from`.",
            "   * @param reservesData The state of all the reserves",
            "   * @param reservesList The addresses of all the active reserves",
            "   * @param eModeCategories The configuration of all the efficiency mode categories",
            "   * @param usersConfig The users configuration mapping that track the supplied/borrowed assets",
            "   * @param params The additional parameters needed to execute the finalizeTransfer function",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Validates a transfer of aTokens. The sender is subjected to health factor validation to avoid\n   * collateralization constraints violation.\n   * @dev Emits the `ReserveUsedAsCollateralEnabled()` event for the `to` account, if the asset is being activated as\n   * collateral.\n   * @dev In case the `from` user transfers everything, `ReserveUsedAsCollateralDisabled()` is emitted for `from`.\n   * @param reservesData The state of all the reserves\n   * @param reservesList The addresses of all the active reserves\n   * @param eModeCategories The configuration of all the efficiency mode categories\n   * @param usersConfig The users configuration mapping that track the supplied/borrowed assets\n   * @param params The additional parameters needed to execute the finalizeTransfer function\n   */\n",
        "@notice": "Validates a transfer of aTokens. The sender is subjected to health factor validation to avoid * collateralization constraints violation.",
        "@dev": "Emits the `ReserveUsedAsCollateralEnabled()` event for the `to` account, if the asset is being activated as * collateral. * In case the `from` user transfers everything, `ReserveUsedAsCollateralDisabled()` is emitted for `from`.",
        "@param1": "reservesData The state of all the reserves",
        "@param2": "reservesList The addresses of all the active reserves",
        "@param3": "eModeCategories The configuration of all the efficiency mode categories",
        "@param4": "usersConfig The users configuration mapping that track the supplied/borrowed assets",
        "@param5": "params The additional parameters needed to execute the finalizeTransfer function",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeUseReserveAsCollateral",
        "visibility": "external",
        "args": [
            {
                "name": "DataTypes.ReserveData",
                "type": "mapping(address =>"
            }
        ],
        "func": "function executeUseReserveAsCollateral(\n    mapping(address => DataTypes.ReserveData) storage reservesData,\n    mapping(uint256 => address) storage reservesList,\n    mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\n    DataTypes.UserConfigurationMap storage userConfig,\n    address asset,\n    bool useAsCollateral,\n    uint256 reservesCount,\n    address priceOracle,\n    uint8 userEModeCategory\n  ) external {\n    DataTypes.ReserveData storage reserve = reservesData[asset];\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\n\n    uint256 userBalance = IERC20(reserveCache.aTokenAddress).balanceOf(msg.sender);\n\n    ValidationLogic.validateSetUseReserveAsCollateral(reserveCache, userBalance);\n\n    if (useAsCollateral == userConfig.isUsingAsCollateral(reserve.id)) return;\n\n    if (useAsCollateral) {\n      require(\n        ValidationLogic.validateUseAsCollateral(reservesData, reservesList, userConfig, reserveCache.reserveConfiguration),\n        Errors.USER_IN_ISOLATION_MODE\n      );\n\n      userConfig.setUsingAsCollateral(reserve.id, true);\n      emit ReserveUsedAsCollateralEnabled(asset, msg.sender);\n    } else {\n      userConfig.setUsingAsCollateral(reserve.id, false);\n      ValidationLogic.validateHFAndLtv(\n        reservesData,\n        reservesList,\n        eModeCategories,\n        userConfig,\n        asset,\n        msg.sender,\n        reservesCount,\n        priceOracle,\n        userEModeCategory\n      );\n\n      emit ReserveUsedAsCollateralDisabled(asset, msg.sender);\n    }\n  }",
        "comments": [
            "/**",
            "   * @notice Executes the 'set as collateral' feature. A user can choose to activate or deactivate an asset as",
            "   * collateral at any point in time. Deactivating an asset as collateral is subjected to the usual health factor",
            "   * checks to ensure collateralization.",
            "   * @dev Emits the `ReserveUsedAsCollateralEnabled()` event if the asset can be activated as collateral.",
            "   * @dev In case the asset is being deactivated as collateral, `ReserveUsedAsCollateralDisabled()` is emitted.",
            "   * @param reservesData The state of all the reserves",
            "   * @param reservesList The addresses of all the active reserves",
            "   * @param eModeCategories The configuration of all the efficiency mode categories",
            "   * @param userConfig The users configuration mapping that track the supplied/borrowed assets",
            "   * @param asset The address of the asset being configured as collateral",
            "   * @param useAsCollateral True if the user wants to set the asset as collateral, false otherwise",
            "   * @param reservesCount The number of initialized reserves",
            "   * @param priceOracle The address of the price oracle",
            "   * @param userEModeCategory The eMode category chosen by the user",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Executes the 'set as collateral' feature. A user can choose to activate or deactivate an asset as\n   * collateral at any point in time. Deactivating an asset as collateral is subjected to the usual health factor\n   * checks to ensure collateralization.\n   * @dev Emits the `ReserveUsedAsCollateralEnabled()` event if the asset can be activated as collateral.\n   * @dev In case the asset is being deactivated as collateral, `ReserveUsedAsCollateralDisabled()` is emitted.\n   * @param reservesData The state of all the reserves\n   * @param reservesList The addresses of all the active reserves\n   * @param eModeCategories The configuration of all the efficiency mode categories\n   * @param userConfig The users configuration mapping that track the supplied/borrowed assets\n   * @param asset The address of the asset being configured as collateral\n   * @param useAsCollateral True if the user wants to set the asset as collateral, false otherwise\n   * @param reservesCount The number of initialized reserves\n   * @param priceOracle The address of the price oracle\n   * @param userEModeCategory The eMode category chosen by the user\n   */\n",
        "@notice": "Executes the 'set as collateral' feature. A user can choose to activate or deactivate an asset as * collateral at any point in time. Deactivating an asset as collateral is subjected to the usual health factor * checks to ensure collateralization.",
        "@dev": "Emits the `ReserveUsedAsCollateralEnabled()` event if the asset can be activated as collateral. * In case the asset is being deactivated as collateral, `ReserveUsedAsCollateralDisabled()` is emitted.",
        "@param1": "reservesData The state of all the reserves",
        "@param2": "reservesList The addresses of all the active reserves",
        "@param3": "eModeCategories The configuration of all the efficiency mode categories",
        "@param4": "userConfig The users configuration mapping that track the supplied/borrowed assets",
        "@param5": "asset The address of the asset being configured as collateral",
        "@param6": "useAsCollateral True if the user wants to set the asset as collateral, false otherwise",
        "@param7": "reservesCount The number of initialized reserves",
        "@param8": "priceOracle The address of the price oracle",
        "@param9": "userEModeCategory The eMode category chosen by the user",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getVariableRateSlope1",
        "visibility": "external",
        "args": [],
        "func": "function getVariableRateSlope1() external view returns (uint256) {\n    return _variableRateSlope1;\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the variable rate slope below optimal usage ratio",
            "   * @dev Its the variable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO",
            "   * @return The variable rate slope",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the variable rate slope below optimal usage ratio\n   * @dev Its the variable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO\n   * @return The variable rate slope\n   **/\n",
        "@notice": "Returns the variable rate slope below optimal usage ratio",
        "@dev": "Its the variable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO",
        "@return1": "The variable rate slope",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getVariableRateSlope2",
        "visibility": "external",
        "args": [],
        "func": "function getVariableRateSlope2() external view returns (uint256) {\n    return _variableRateSlope2;\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the variable rate slope above optimal usage ratio",
            "   * @dev Its the variable rate when usage ratio > OPTIMAL_USAGE_RATIO",
            "   * @return The variable rate slope",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the variable rate slope above optimal usage ratio\n   * @dev Its the variable rate when usage ratio > OPTIMAL_USAGE_RATIO\n   * @return The variable rate slope\n   **/\n",
        "@notice": "Returns the variable rate slope above optimal usage ratio",
        "@dev": "Its the variable rate when usage ratio > OPTIMAL_USAGE_RATIO",
        "@return1": "The variable rate slope",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getStableRateSlope1",
        "visibility": "external",
        "args": [],
        "func": "function getStableRateSlope1() external view returns (uint256) {\n    return _stableRateSlope1;\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the stable rate slope below optimal usage ratio",
            "   * @dev Its the stable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO",
            "   * @return The stable rate slope",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the stable rate slope below optimal usage ratio\n   * @dev Its the stable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO\n   * @return The stable rate slope\n   **/\n",
        "@notice": "Returns the stable rate slope below optimal usage ratio",
        "@dev": "Its the stable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO",
        "@return1": "The stable rate slope",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getStableRateSlope2",
        "visibility": "external",
        "args": [],
        "func": "function getStableRateSlope2() external view returns (uint256) {\n    return _stableRateSlope2;\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the stable rate slope above optimal usage ratio",
            "   * @dev Its the variable rate when usage ratio > OPTIMAL_USAGE_RATIO",
            "   * @return The stable rate slope",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the stable rate slope above optimal usage ratio\n   * @dev Its the variable rate when usage ratio > OPTIMAL_USAGE_RATIO\n   * @return The stable rate slope\n   **/\n",
        "@notice": "Returns the stable rate slope above optimal usage ratio",
        "@dev": "Its the variable rate when usage ratio > OPTIMAL_USAGE_RATIO",
        "@return1": "The stable rate slope",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getStableRateExcessOffset",
        "visibility": "external",
        "args": [],
        "func": "function getStableRateExcessOffset() external view returns (uint256) {\n    return _stableRateExcessOffset;\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the stable rate excess offset",
            "   * @dev An additional premium applied to the stable when stable debt > OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO",
            "   * @return The stable rate excess offset",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Returns the stable rate excess offset\n   * @dev An additional premium applied to the stable when stable debt > OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO\n   * @return The stable rate excess offset\n   */\n",
        "@notice": "Returns the stable rate excess offset",
        "@dev": "An additional premium applied to the stable when stable debt > OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO",
        "@return1": "The stable rate excess offset",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getBaseStableBorrowRate",
        "visibility": "public",
        "args": [],
        "func": "function getBaseStableBorrowRate() public view returns (uint256) {\n    return _variableRateSlope1 + _baseStableRateOffset;\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the base stable borrow rate",
            "   * @return The base stable borrow rate",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the base stable borrow rate\n   * @return The base stable borrow rate\n   **/\n",
        "@notice": "Returns the base stable borrow rate",
        "@return1": "The base stable borrow rate",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getBaseVariableBorrowRate",
        "visibility": "external",
        "args": [],
        "func": "function getBaseVariableBorrowRate() external view override returns (uint256) {\n    return _baseVariableBorrowRate;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IReserveInterestRateStrategy",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IReserveInterestRateStrategy\n  ",
        "@inheritdoc": "IReserveInterestRateStrategy",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getMaxVariableBorrowRate",
        "visibility": "external",
        "args": [],
        "func": "function getMaxVariableBorrowRate() external view override returns (uint256) {\n    return _baseVariableBorrowRate + _variableRateSlope1 + _variableRateSlope2;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IReserveInterestRateStrategy",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IReserveInterestRateStrategy\n  ",
        "@inheritdoc": "IReserveInterestRateStrategy",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "calculateInterestRates",
        "visibility": "external",
        "args": [
            {
                "name": "params",
                "type": "DataTypes.CalculateInterestRatesParams calldata"
            }
        ],
        "func": "function calculateInterestRates(DataTypes.CalculateInterestRatesParams calldata params)\n    external\n    view\n    override\n    returns (\n      uint256,\n      uint256,\n      uint256\n    )\n  {\n    CalcInterestRatesLocalVars memory vars;\n\n    vars.totalDebt = params.totalStableDebt + params.totalVariableDebt;\n\n    vars.currentLiquidityRate = 0;\n    vars.currentVariableBorrowRate = _baseVariableBorrowRate;\n    vars.currentStableBorrowRate = getBaseStableBorrowRate();\n\n    if (vars.totalDebt != 0) {\n      vars.stableToTotalDebtRatio = params.totalStableDebt.rayDiv(vars.totalDebt);\n      vars.availableLiquidity =\n        IERC20(params.reserve).balanceOf(params.aToken) +\n        params.liquidityAdded -\n        params.liquidityTaken;\n\n      vars.availableLiquidityPlusDebt = vars.availableLiquidity + vars.totalDebt;\n      vars.borrowUsageRatio = vars.totalDebt.rayDiv(vars.availableLiquidityPlusDebt);\n      vars.supplyUsageRatio = vars.totalDebt.rayDiv(\n        vars.availableLiquidityPlusDebt + params.unbacked\n      );\n    }\n\n    if (vars.borrowUsageRatio > OPTIMAL_USAGE_RATIO) {\n      uint256 excessBorrowUsageRatio = (vars.borrowUsageRatio - OPTIMAL_USAGE_RATIO).rayDiv(\n        MAX_EXCESS_USAGE_RATIO\n      );\n\n      vars.currentStableBorrowRate +=\n        _stableRateSlope1 +\n        _stableRateSlope2.rayMul(excessBorrowUsageRatio);\n\n      vars.currentVariableBorrowRate +=\n        _variableRateSlope1 +\n        _variableRateSlope2.rayMul(excessBorrowUsageRatio);\n    } else {\n      vars.currentStableBorrowRate += _stableRateSlope1.rayMul(vars.borrowUsageRatio).rayDiv(\n        OPTIMAL_USAGE_RATIO\n      );\n\n      vars.currentVariableBorrowRate += _variableRateSlope1.rayMul(vars.borrowUsageRatio).rayDiv(\n        OPTIMAL_USAGE_RATIO\n      );\n    }\n\n    if (vars.stableToTotalDebtRatio > OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO) {\n      uint256 excessStableDebtRatio = (vars.stableToTotalDebtRatio -\n        OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO).rayDiv(MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO);\n      vars.currentStableBorrowRate += _stableRateExcessOffset.rayMul(excessStableDebtRatio);\n    }\n\n    vars.currentLiquidityRate = _getOverallBorrowRate(\n      params.totalStableDebt,\n      params.totalVariableDebt,\n      vars.currentVariableBorrowRate,\n      params.averageStableBorrowRate\n    ).rayMul(vars.supplyUsageRatio).percentMul(\n        PercentageMath.PERCENTAGE_FACTOR - params.reserveFactor\n      );\n\n    return (\n      vars.currentLiquidityRate,\n      vars.currentStableBorrowRate,\n      vars.currentVariableBorrowRate\n    );\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IReserveInterestRateStrategy",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IReserveInterestRateStrategy\n  ",
        "@inheritdoc": "IReserveInterestRateStrategy",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOwners",
        "visibility": "public",
        "args": [],
        "func": "function getOwners() public view returns (address[] memory) {\n        return owners;\n    }",
        "comments": [
            "",
            "    // @dev Returns list of owners.",
            "    // @return List of owner addresses.",
            "    "
        ],
        "comt": "\n    // @dev Returns list of owners.\n    // @return List of owner addresses.\n    ",
        "@dev": "Returns list of owners.",
        "@return1": "List of owner addresses.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSpendNonce",
        "visibility": "public",
        "args": [],
        "func": "function getSpendNonce() public view returns (uint256) {\n        return spendNonce;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRequired",
        "visibility": "public",
        "args": [],
        "func": "function getRequired() public view returns (uint) {\n        return required;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "spend",
        "visibility": "external",
        "args": [
            {
                "name": "destination",
                "type": "address payable"
            },
            {
                "name": "value",
                "type": "uint256"
            },
            {
                "name": "vs",
                "type": "uint8[] memory"
            },
            {
                "name": "rs",
                "type": "bytes32[] memory"
            },
            {
                "name": "ss",
                "type": "bytes32[] memory"
            }
        ],
        "func": "function spend(address payable destination, uint256 value, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss) external {\n        require(destination != address(this), \"Not allow sending to yourself\");\n        require(address(this).balance >= value && value > 0, \"balance or spend value invalid\");\n        require(_validSignature(address(0x0), destination, value, vs, rs, ss), \"invalid signatures\");\n        spendNonce = spendNonce + 1;\n        //transfer will throw if fails\n        destination.transfer(value);\n        emit Spent(destination, value);\n    }",
        "comments": [
            "/**",
            "     * @param destination: the ether receiver address.",
            "   * @param value: the ether value, in wei.",
            "   * @param vs, rs, ss: the signatures",
            "   */",
            ""
        ],
        "comt": "/**\n     * @param destination: the ether receiver address.\n   * @param value: the ether value, in wei.\n   * @param vs, rs, ss: the signatures\n   */\n",
        "@param1": "destination: the ether receiver address.",
        "@param2": "value: the ether value, in wei.",
        "@param3": "vs, rs, ss: the signatures",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "spendERC20",
        "visibility": "external",
        "args": [
            {
                "name": "destination",
                "type": "address"
            },
            {
                "name": "erc20contract",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            },
            {
                "name": "vs",
                "type": "uint8[] memory"
            },
            {
                "name": "rs",
                "type": "bytes32[] memory"
            },
            {
                "name": "ss",
                "type": "bytes32[] memory"
            }
        ],
        "func": "function spendERC20(address destination, address erc20contract, uint256 value, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss) external {\n        require(destination != address(this), \"Not allow sending to yourself\");\n        //transfer erc20 token\n        //uint256 tokenValue = Erc20(erc20contract).balanceOf(address(this));\n        require(value > 0, \"Erc20 spend value invalid\");\n        require(_validSignature(erc20contract, destination, value, vs, rs, ss), \"invalid signatures\");\n        spendNonce = spendNonce + 1;\n        // transfer tokens from this contract to the destination address\n        Erc20(erc20contract).transfer(destination, value);\n        emit SpentERC20(erc20contract, destination, value);\n    }",
        "comments": [
            "/**",
            "     * @param erc20contract: the erc20 contract address.",
            "   * @param destination: the token receiver address.",
            "   * @param value: the token value, in token minimum unit.",
            "   * @param vs, rs, ss: the signatures",
            "   */",
            ""
        ],
        "comt": "/**\n     * @param erc20contract: the erc20 contract address.\n   * @param destination: the token receiver address.\n   * @param value: the token value, in token minimum unit.\n   * @param vs, rs, ss: the signatures\n   */\n",
        "@param1": "erc20contract: the erc20 contract address.",
        "@param2": "destination: the token receiver address.",
        "@param3": "value: the token value, in token minimum unit.",
        "@param4": "vs, rs, ss: the signatures",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "external",
        "args": [
            {
                "name": "provider",
                "type": "IPoolAddressesProvider"
            }
        ],
        "func": "function initialize(IPoolAddressesProvider provider) external virtual initializer {\n        require(provider == ADDRESSES_PROVIDER, Errors.INVALID_ADDRESSES_PROVIDER);\n        _maxStableRateBorrowSizePercent = 0.25e4;\n        _flashLoanPremiumTotal = 0.0009e4;\n        _flashLoanPremiumToProtocol = 0;\n    }",
        "comments": [
            "/**",
            "     * @notice Initializes the Pool.",
            "   * @dev Function is invoked by the proxy contract when the Pool contract is added to the",
            "   * PoolAddressesProvider of the market.",
            "   * @dev Caching the address of the PoolAddressesProvider in order to reduce gas consumption on subsequent operations",
            "   * @param provider The address of the PoolAddressesProvider",
            "   **/",
            ""
        ],
        "comt": "/**\n     * @notice Initializes the Pool.\n   * @dev Function is invoked by the proxy contract when the Pool contract is added to the\n   * PoolAddressesProvider of the market.\n   * @dev Caching the address of the PoolAddressesProvider in order to reduce gas consumption on subsequent operations\n   * @param provider The address of the PoolAddressesProvider\n   **/\n",
        "@notice": "Initializes the Pool.",
        "@dev": "Function is invoked by the proxy contract when the Pool contract is added to the * PoolAddressesProvider of the market. * Caching the address of the PoolAddressesProvider in order to reduce gas consumption on subsequent operations",
        "@param1": "provider The address of the PoolAddressesProvider",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mintUnbacked",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "onBehalfOf",
                "type": "address"
            },
            {
                "name": "referralCode",
                "type": "uint16"
            }
        ],
        "func": "function mintUnbacked(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external virtual override onlyBridge {\n        BridgeLogic.executeMintUnbacked(\n            _reserves,\n            _reservesList,\n            _usersConfig[onBehalfOf],\n            asset,\n            amount,\n            onBehalfOf,\n            referralCode\n        );\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "backUnbacked",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "fee",
                "type": "uint256"
            }
        ],
        "func": "function backUnbacked(\n        address asset,\n        uint256 amount,\n        uint256 fee\n    ) external virtual override onlyBridge {\n        BridgeLogic.executeBackUnbacked(_reserves[asset], asset, amount, fee, _bridgeProtocolFee);\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supply",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "onBehalfOf",
                "type": "address"
            },
            {
                "name": "referralCode",
                "type": "uint16"
            }
        ],
        "func": "function supply(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) public virtual override {\n        SupplyLogic.executeSupply(\n            _reserves,\n            _reservesList,\n            _usersConfig[onBehalfOf],\n            DataTypes.ExecuteSupplyParams({\n        asset: asset,\n        amount: amount,\n        onBehalfOf: onBehalfOf,\n        referralCode: referralCode\n        })\n        );\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supplyWithPermit",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "onBehalfOf",
                "type": "address"
            },
            {
                "name": "referralCode",
                "type": "uint16"
            },
            {
                "name": "deadline",
                "type": "uint256"
            },
            {
                "name": "permitV",
                "type": "uint8"
            },
            {
                "name": "permitR",
                "type": "bytes32"
            },
            {
                "name": "permitS",
                "type": "bytes32"
            }
        ],
        "func": "function supplyWithPermit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode,\n        uint256 deadline,\n        uint8 permitV,\n        bytes32 permitR,\n        bytes32 permitS\n    ) public virtual override {\n        IERC20WithPermit(asset).permit(\n            msg.sender,\n            address(this),\n            amount,\n            deadline,\n            permitV,\n            permitR,\n            permitS\n        );\n        SupplyLogic.executeSupply(\n            _reserves,\n            _reservesList,\n            _usersConfig[onBehalfOf],\n            DataTypes.ExecuteSupplyParams({\n        asset: asset,\n        amount: amount,\n        onBehalfOf: onBehalfOf,\n        referralCode: referralCode\n        })\n        );\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "to",
                "type": "address"
            }
        ],
        "func": "function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) public virtual override returns (uint256) {\n        return\n        SupplyLogic.executeWithdraw(\n            _reserves,\n            _reservesList,\n            _eModeCategories,\n            _usersConfig[msg.sender],\n            DataTypes.ExecuteWithdrawParams({\n        asset: asset,\n        amount: amount,\n        to: to,\n        reservesCount: _reservesCount,\n        oracle: ADDRESSES_PROVIDER.getPriceOracle(),\n        userEModeCategory: _usersEModeCategory[msg.sender]\n        })\n        );\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "borrow",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "interestRateMode",
                "type": "uint256"
            },
            {
                "name": "referralCode",
                "type": "uint16"
            },
            {
                "name": "onBehalfOf",
                "type": "address"
            }
        ],
        "func": "function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) public virtual override {\n        BorrowLogic.executeBorrow(\n            _reserves,\n            _reservesList,\n            _eModeCategories,\n            _usersConfig[onBehalfOf],\n            DataTypes.ExecuteBorrowParams({\n        asset: asset,\n        user: msg.sender,\n        onBehalfOf: onBehalfOf,\n        amount: amount,\n        interestRateMode: DataTypes.InterestRateMode(interestRateMode),\n        referralCode: referralCode,\n        releaseUnderlying: true,\n        maxStableRateBorrowSizePercent: _maxStableRateBorrowSizePercent,\n        reservesCount: _reservesCount,\n        oracle: ADDRESSES_PROVIDER.getPriceOracle(),\n        userEModeCategory: _usersEModeCategory[onBehalfOf],\n        priceOracleSentinel: ADDRESSES_PROVIDER.getPriceOracleSentinel()\n        })\n        );\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "repay",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "interestRateMode",
                "type": "uint256"
            },
            {
                "name": "onBehalfOf",
                "type": "address"
            }
        ],
        "func": "function repay(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        address onBehalfOf\n    ) public virtual override returns (uint256) {\n        return\n        BorrowLogic.executeRepay(\n            _reserves,\n            _reservesList,\n            _usersConfig[onBehalfOf],\n            DataTypes.ExecuteRepayParams({\n        asset: asset,\n        amount: amount,\n        interestRateMode: DataTypes.InterestRateMode(interestRateMode),\n        onBehalfOf: onBehalfOf,\n        useATokens: false\n        })\n        );\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "repayWithPermit",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "interestRateMode",
                "type": "uint256"
            },
            {
                "name": "onBehalfOf",
                "type": "address"
            },
            {
                "name": "deadline",
                "type": "uint256"
            },
            {
                "name": "permitV",
                "type": "uint8"
            },
            {
                "name": "permitR",
                "type": "bytes32"
            },
            {
                "name": "permitS",
                "type": "bytes32"
            }
        ],
        "func": "function repayWithPermit(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        address onBehalfOf,\n        uint256 deadline,\n        uint8 permitV,\n        bytes32 permitR,\n        bytes32 permitS\n    ) public virtual override returns (uint256) {\n        {\n            IERC20WithPermit(asset).permit(\n                msg.sender,\n                address(this),\n                amount,\n                deadline,\n                permitV,\n                permitR,\n                permitS\n            );\n        }\n        {\n            DataTypes.ExecuteRepayParams memory params = DataTypes.ExecuteRepayParams({\n            asset: asset,\n            amount: amount,\n            interestRateMode: DataTypes.InterestRateMode(interestRateMode),\n            onBehalfOf: onBehalfOf,\n            useATokens: false\n            });\n            return BorrowLogic.executeRepay(_reserves, _reservesList, _usersConfig[onBehalfOf], params);\n        }\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "repayWithATokens",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "interestRateMode",
                "type": "uint256"
            }
        ],
        "func": "function repayWithATokens(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode\n    ) public virtual override returns (uint256) {\n        return\n        BorrowLogic.executeRepay(\n            _reserves,\n            _reservesList,\n            _usersConfig[msg.sender],\n            DataTypes.ExecuteRepayParams({\n        asset: asset,\n        amount: amount,\n        interestRateMode: DataTypes.InterestRateMode(interestRateMode),\n        onBehalfOf: msg.sender,\n        useATokens: true\n        })\n        );\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "swapBorrowRateMode",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "interestRateMode",
                "type": "uint256"
            }
        ],
        "func": "function swapBorrowRateMode(address asset, uint256 interestRateMode) public virtual override {\n        BorrowLogic.executeSwapBorrowRateMode(\n            _reserves[asset],\n            _usersConfig[msg.sender],\n            asset,\n            DataTypes.InterestRateMode(interestRateMode)\n        );\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rebalanceStableBorrowRate",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function rebalanceStableBorrowRate(address asset, address user) public virtual override {\n        BorrowLogic.executeRebalanceStableBorrowRate(_reserves[asset], asset, user);\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setUserUseReserveAsCollateral",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "useAsCollateral",
                "type": "bool"
            }
        ],
        "func": "function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\n    public\n    virtual\n    override\n    {\n        SupplyLogic.executeUseReserveAsCollateral(\n            _reserves,\n            _reservesList,\n            _eModeCategories,\n            _usersConfig[msg.sender],\n            asset,\n            useAsCollateral,\n            _reservesCount,\n            ADDRESSES_PROVIDER.getPriceOracle(),\n            _usersEModeCategory[msg.sender]\n        );\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "liquidationCall",
        "visibility": "public",
        "args": [
            {
                "name": "collateralAsset",
                "type": "address"
            },
            {
                "name": "debtAsset",
                "type": "address"
            },
            {
                "name": "user",
                "type": "address"
            },
            {
                "name": "debtToCover",
                "type": "uint256"
            },
            {
                "name": "receiveAToken",
                "type": "bool"
            }
        ],
        "func": "function liquidationCall(\n        address collateralAsset,\n        address debtAsset,\n        address user,\n        uint256 debtToCover,\n        bool receiveAToken\n    ) public virtual override {\n        LiquidationLogic.executeLiquidationCall(\n            _reserves,\n            _reservesList,\n            _usersConfig,\n            _eModeCategories,\n            DataTypes.ExecuteLiquidationCallParams({\n        reservesCount: _reservesCount,\n        debtToCover: debtToCover,\n        collateralAsset: collateralAsset,\n        debtAsset: debtAsset,\n        user: user,\n        receiveAToken: receiveAToken,\n        priceOracle: ADDRESSES_PROVIDER.getPriceOracle(),\n        userEModeCategory: _usersEModeCategory[user],\n        priceOracleSentinel: ADDRESSES_PROVIDER.getPriceOracleSentinel()\n        })\n        );\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "flashLoan",
        "visibility": "public",
        "args": [
            {
                "name": "receiverAddress",
                "type": "address"
            },
            {
                "name": "assets",
                "type": "address[] calldata"
            },
            {
                "name": "amounts",
                "type": "uint256[] calldata"
            },
            {
                "name": "interestRateModes",
                "type": "uint256[] calldata"
            },
            {
                "name": "onBehalfOf",
                "type": "address"
            },
            {
                "name": "params",
                "type": "bytes calldata"
            },
            {
                "name": "referralCode",
                "type": "uint16"
            }
        ],
        "func": "function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata interestRateModes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) public virtual override {\n        DataTypes.FlashloanParams memory flashParams = DataTypes.FlashloanParams({\n        receiverAddress: receiverAddress,\n        assets: assets,\n        amounts: amounts,\n        interestRateModes: interestRateModes,\n        onBehalfOf: onBehalfOf,\n        params: params,\n        referralCode: referralCode,\n        flashLoanPremiumToProtocol: _flashLoanPremiumToProtocol,\n        flashLoanPremiumTotal: _flashLoanPremiumTotal,\n        maxStableRateBorrowSizePercent: _maxStableRateBorrowSizePercent,\n        reservesCount: _reservesCount,\n        addressesProvider: address(ADDRESSES_PROVIDER),\n        userEModeCategory: _usersEModeCategory[onBehalfOf],\n        isAuthorizedFlashBorrower: IACLManager(ADDRESSES_PROVIDER.getACLManager()).isFlashBorrower(\n                msg.sender\n            )\n        });\n\n        FlashLoanLogic.executeFlashLoan(\n            _reserves,\n            _reservesList,\n            _eModeCategories,\n            _usersConfig[onBehalfOf],\n            flashParams\n        );\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "flashLoanSimple",
        "visibility": "public",
        "args": [
            {
                "name": "receiverAddress",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "params",
                "type": "bytes calldata"
            },
            {
                "name": "referralCode",
                "type": "uint16"
            }
        ],
        "func": "function flashLoanSimple(\n        address receiverAddress,\n        address asset,\n        uint256 amount,\n        bytes calldata params,\n        uint16 referralCode\n    ) public virtual override {\n        DataTypes.FlashloanSimpleParams memory flashParams = DataTypes.FlashloanSimpleParams({\n        receiverAddress: receiverAddress,\n        asset: asset,\n        amount: amount,\n        params: params,\n        referralCode: referralCode,\n        flashLoanPremiumToProtocol: _flashLoanPremiumToProtocol,\n        flashLoanPremiumTotal: _flashLoanPremiumTotal\n        });\n        FlashLoanLogic.executeFlashLoanSimple(_reserves[asset], flashParams);\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mintToTreasury",
        "visibility": "external",
        "args": [
            {
                "name": "assets",
                "type": "address[] calldata"
            }
        ],
        "func": "function mintToTreasury(address[] calldata assets) external virtual override {\n        PoolLogic.executeMintToTreasury(_reserves, assets);\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReserveData",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getReserveData(address asset)\n    external\n    view\n    virtual\n    override\n    returns (DataTypes.ReserveData memory)\n    {\n        return _reserves[asset];\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUserAccountData",
        "visibility": "external",
        "args": [
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function getUserAccountData(address user)\n    external\n    view\n    virtual\n    override\n    returns (\n        uint256 totalCollateralBase,\n        uint256 totalDebtBase,\n        uint256 availableBorrowsBase,\n        uint256 currentLiquidationThreshold,\n        uint256 ltv,\n        uint256 healthFactor\n    )\n    {\n        return\n        PoolLogic.executeGetUserAccountData(\n            _reserves,\n            _reservesList,\n            _eModeCategories,\n            DataTypes.CalculateUserAccountDataParams({\n        userConfig: _usersConfig[user],\n        reservesCount: _reservesCount,\n        user: user,\n        oracle: ADDRESSES_PROVIDER.getPriceOracle(),\n        userEModeCategory: _usersEModeCategory[user]\n        })\n        );\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getConfiguration",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getConfiguration(address asset)\n    external\n    view\n    virtual\n    override\n    returns (DataTypes.ReserveConfigurationMap memory)\n    {\n        return _reserves[asset].configuration;\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUserConfiguration",
        "visibility": "external",
        "args": [
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function getUserConfiguration(address user)\n    external\n    view\n    virtual\n    override\n    returns (DataTypes.UserConfigurationMap memory)\n    {\n        return _usersConfig[user];\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReserveNormalizedIncome",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getReserveNormalizedIncome(address asset)\n    external\n    view\n    virtual\n    override\n    returns (uint256)\n    {\n        return _reserves[asset].getNormalizedIncome();\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReserveNormalizedVariableDebt",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function getReserveNormalizedVariableDebt(address asset)\n    external\n    view\n    virtual\n    override\n    returns (uint256)\n    {\n        return _reserves[asset].getNormalizedDebt();\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReservesList",
        "visibility": "external",
        "args": [],
        "func": "function getReservesList() external view virtual override returns (address[] memory) {\n        uint256 reservesListCount = _reservesCount;\n        uint256 droppedReservesCount = 0;\n        address[] memory reservesList = new address[](reservesListCount);\n\n        for (uint256 i = 0; i < reservesListCount; i++) {\n            if (_reservesList[i] != address(0)) {\n                reservesList[i - droppedReservesCount] = _reservesList[i];\n            } else {\n                droppedReservesCount++;\n            }\n        }\n\n        // Reduces the length of the reserves array by `droppedReservesCount`\n        assembly {\n            mstore(reservesList, sub(reservesListCount, droppedReservesCount))\n        }\n        return reservesList;\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReserveAddressById",
        "visibility": "external",
        "args": [
            {
                "name": "id",
                "type": "uint16"
            }
        ],
        "func": "function getReserveAddressById(uint16 id) external view returns (address) {\n        return _reservesList[id];\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "MAX_STABLE_RATE_BORROW_SIZE_PERCENT",
        "visibility": "public",
        "args": [],
        "func": "function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() public view virtual override returns (uint256) {\n        return _maxStableRateBorrowSizePercent;\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "BRIDGE_PROTOCOL_FEE",
        "visibility": "public",
        "args": [],
        "func": "function BRIDGE_PROTOCOL_FEE() public view virtual override returns (uint256) {\n        return _bridgeProtocolFee;\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "FLASHLOAN_PREMIUM_TOTAL",
        "visibility": "public",
        "args": [],
        "func": "function FLASHLOAN_PREMIUM_TOTAL() public view virtual override returns (uint128) {\n        return _flashLoanPremiumTotal;\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "FLASHLOAN_PREMIUM_TO_PROTOCOL",
        "visibility": "public",
        "args": [],
        "func": "function FLASHLOAN_PREMIUM_TO_PROTOCOL() public view virtual override returns (uint128) {\n        return _flashLoanPremiumToProtocol;\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "MAX_NUMBER_RESERVES",
        "visibility": "public",
        "args": [],
        "func": "function MAX_NUMBER_RESERVES() public view virtual override returns (uint16) {\n        return ReserveConfiguration.MAX_RESERVES_COUNT;\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "finalizeTransfer",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "balanceFromBefore",
                "type": "uint256"
            },
            {
                "name": "balanceToBefore",
                "type": "uint256"
            }
        ],
        "func": "function finalizeTransfer(\n        address asset,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 balanceFromBefore,\n        uint256 balanceToBefore\n    ) external virtual override {\n        require(msg.sender == _reserves[asset].aTokenAddress, Errors.CALLER_NOT_ATOKEN);\n        SupplyLogic.executeFinalizeTransfer(\n            _reserves,\n            _reservesList,\n            _eModeCategories,\n            _usersConfig,\n            DataTypes.FinalizeTransferParams({\n        asset: asset,\n        from: from,\n        to: to,\n        amount: amount,\n        balanceFromBefore: balanceFromBefore,\n        balanceToBefore: balanceToBefore,\n        reservesCount: _reservesCount,\n        oracle: ADDRESSES_PROVIDER.getPriceOracle(),\n        fromEModeCategory: _usersEModeCategory[from]\n        })\n        );\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initReserve",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "aTokenAddress",
                "type": "address"
            },
            {
                "name": "stableDebtAddress",
                "type": "address"
            },
            {
                "name": "variableDebtAddress",
                "type": "address"
            },
            {
                "name": "interestRateStrategyAddress",
                "type": "address"
            }
        ],
        "func": "function initReserve(\n        address asset,\n        address aTokenAddress,\n        address stableDebtAddress,\n        address variableDebtAddress,\n        address interestRateStrategyAddress\n    ) external virtual override onlyPoolConfigurator {\n        if (\n            PoolLogic.executeInitReserve(\n                _reserves,\n                _reservesList,\n                DataTypes.InitReserveParams({\n            asset: asset,\n            aTokenAddress: aTokenAddress,\n            stableDebtAddress: stableDebtAddress,\n            variableDebtAddress: variableDebtAddress,\n            interestRateStrategyAddress: interestRateStrategyAddress,\n            reservesCount: _reservesCount,\n            maxNumberReserves: MAX_NUMBER_RESERVES()\n            })\n            )\n        ) {\n            _reservesCount++;\n        }\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "dropReserve",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function dropReserve(address asset) external virtual override onlyPoolConfigurator {\n        PoolLogic.executeDropReserve(_reserves, _reservesList, asset);\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setReserveInterestRateStrategyAddress",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "rateStrategyAddress",
                "type": "address"
            }
        ],
        "func": "function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\n    external\n    virtual\n    override\n    onlyPoolConfigurator\n    {\n        require(asset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\n        require(_reserves[asset].id != 0 || _reservesList[0] == asset, Errors.ASSET_NOT_LISTED);\n        _reserves[asset].interestRateStrategyAddress = rateStrategyAddress;\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setConfiguration",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "configuration",
                "type": "DataTypes.ReserveConfigurationMap calldata"
            }
        ],
        "func": "function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\n    external\n    virtual\n    override\n    onlyPoolConfigurator\n    {\n        require(asset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\n        require(_reserves[asset].id != 0 || _reservesList[0] == asset, Errors.ASSET_NOT_LISTED);\n        _reserves[asset].configuration = configuration;\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateBridgeProtocolFee",
        "visibility": "external",
        "args": [
            {
                "name": "protocolFee",
                "type": "uint256"
            }
        ],
        "func": "function updateBridgeProtocolFee(uint256 protocolFee)\n    external\n    virtual\n    override\n    onlyPoolConfigurator\n    {\n        _bridgeProtocolFee = protocolFee;\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateFlashloanPremiums",
        "visibility": "external",
        "args": [
            {
                "name": "flashLoanPremiumTotal",
                "type": "uint128"
            },
            {
                "name": "flashLoanPremiumToProtocol",
                "type": "uint128"
            }
        ],
        "func": "function updateFlashloanPremiums(\n        uint128 flashLoanPremiumTotal,\n        uint128 flashLoanPremiumToProtocol\n    ) external virtual override onlyPoolConfigurator {\n        _flashLoanPremiumTotal = flashLoanPremiumTotal;\n        _flashLoanPremiumToProtocol = flashLoanPremiumToProtocol;\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "configureEModeCategory",
        "visibility": "external",
        "args": [
            {
                "name": "id",
                "type": "uint8"
            },
            {
                "name": "category",
                "type": "DataTypes.EModeCategory memory"
            }
        ],
        "func": "function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory category)\n    external\n    virtual\n    override\n    onlyPoolConfigurator\n    {\n        // category 0 is reserved for volatile heterogeneous assets and it's always disabled\n        require(id != 0, Errors.EMODE_CATEGORY_RESERVED);\n        _eModeCategories[id] = category;\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getEModeCategoryData",
        "visibility": "external",
        "args": [
            {
                "name": "id",
                "type": "uint8"
            }
        ],
        "func": "function getEModeCategoryData(uint8 id)\n    external\n    view\n    virtual\n    override\n    returns (DataTypes.EModeCategory memory)\n    {\n        return _eModeCategories[id];\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setUserEMode",
        "visibility": "external",
        "args": [
            {
                "name": "categoryId",
                "type": "uint8"
            }
        ],
        "func": "function setUserEMode(uint8 categoryId) external virtual override {\n        EModeLogic.executeSetUserEMode(\n            _reserves,\n            _reservesList,\n            _eModeCategories,\n            _usersEModeCategory,\n            _usersConfig[msg.sender],\n            DataTypes.ExecuteSetUserEModeParams({\n        reservesCount: _reservesCount,\n        oracle: ADDRESSES_PROVIDER.getPriceOracle(),\n        categoryId: categoryId\n        })\n        );\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUserEMode",
        "visibility": "external",
        "args": [
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function getUserEMode(address user) external view virtual override returns (uint256) {\n        return _usersEModeCategory[user];\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "resetIsolationModeTotalDebt",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function resetIsolationModeTotalDebt(address asset)\n    external\n    virtual\n    override\n    onlyPoolConfigurator\n    {\n        PoolLogic.executeResetIsolationModeTotalDebt(_reserves, asset);\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rescueTokens",
        "visibility": "external",
        "args": [
            {
                "name": "token",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function rescueTokens(\n        address token,\n        address to,\n        uint256 amount\n    ) external virtual override onlyPoolAdmin {\n        PoolLogic.executeRescueTokens(token, to, amount);\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    ",
        "@inheritdoc": "IPool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "onBehalfOf",
                "type": "address"
            },
            {
                "name": "referralCode",
                "type": "uint16"
            }
        ],
        "func": "function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external virtual override {\n        SupplyLogic.executeSupply(\n            _reserves,\n            _reservesList,\n            _usersConfig[onBehalfOf],\n            DataTypes.ExecuteSupplyParams({\n        asset: asset,\n        amount: amount,\n        onBehalfOf: onBehalfOf,\n        referralCode: referralCode\n        })\n        );\n    }",
        "comments": [
            "",
            "    /// @inheritdoc IPool",
            "    /// @dev Deprecated: maintained for compatibility purposes",
            "    "
        ],
        "comt": "\n    /// @inheritdoc IPool\n    /// @dev Deprecated: maintained for compatibility purposes\n    ",
        "@inheritdoc": "IPool",
        "@dev": "Deprecated: maintained for compatibility purposes",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supply",
        "visibility": "external",
        "args": [
            {
                "name": "args",
                "type": "bytes32"
            }
        ],
        "func": "function supply(bytes32 args) external override {\n    (address asset, uint256 amount, uint16 referralCode) = CalldataLogic.decodeSupplyParams(\n      _reservesList,\n      args\n    );\n\n    supply(asset, amount, msg.sender, referralCode);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IL2Pool",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IL2Pool\n  ",
        "@inheritdoc": "IL2Pool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supplyWithPermit",
        "visibility": "external",
        "args": [
            {
                "name": "args",
                "type": "bytes32"
            },
            {
                "name": "r",
                "type": "bytes32"
            },
            {
                "name": "s",
                "type": "bytes32"
            }
        ],
        "func": "function supplyWithPermit(\n    bytes32 args,\n    bytes32 r,\n    bytes32 s\n  ) external override {\n    (address asset, uint256 amount, uint16 referralCode, uint256 deadline, uint8 v) = CalldataLogic\n      .decodeSupplyWithPermitParams(_reservesList, args);\n\n    supplyWithPermit(asset, amount, msg.sender, referralCode, deadline, v, r, s);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IL2Pool",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IL2Pool\n  ",
        "@inheritdoc": "IL2Pool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "args",
                "type": "bytes32"
            }
        ],
        "func": "function withdraw(bytes32 args) external override {\n    (address asset, uint256 amount) = CalldataLogic.decodeWithdrawParams(_reservesList, args);\n\n    withdraw(asset, amount, msg.sender);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IL2Pool",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IL2Pool\n  ",
        "@inheritdoc": "IL2Pool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "borrow",
        "visibility": "external",
        "args": [
            {
                "name": "args",
                "type": "bytes32"
            }
        ],
        "func": "function borrow(bytes32 args) external override {\n    (address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode) = CalldataLogic\n      .decodeBorrowParams(_reservesList, args);\n\n    borrow(asset, amount, interestRateMode, referralCode, msg.sender);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IL2Pool",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IL2Pool\n  ",
        "@inheritdoc": "IL2Pool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "repay",
        "visibility": "external",
        "args": [
            {
                "name": "args",
                "type": "bytes32"
            }
        ],
        "func": "function repay(bytes32 args) external override returns (uint256) {\n    (address asset, uint256 amount, uint256 interestRateMode) = CalldataLogic.decodeRepayParams(\n      _reservesList,\n      args\n    );\n\n    return repay(asset, amount, interestRateMode, msg.sender);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IL2Pool",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IL2Pool\n  ",
        "@inheritdoc": "IL2Pool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "repayWithPermit",
        "visibility": "external",
        "args": [
            {
                "name": "args",
                "type": "bytes32"
            },
            {
                "name": "r",
                "type": "bytes32"
            },
            {
                "name": "s",
                "type": "bytes32"
            }
        ],
        "func": "function repayWithPermit(\n    bytes32 args,\n    bytes32 r,\n    bytes32 s\n  ) external override returns (uint256) {\n    (\n      address asset,\n      uint256 amount,\n      uint256 interestRateMode,\n      uint256 deadline,\n      uint8 v\n    ) = CalldataLogic.decodeRepayWithPermitParams(_reservesList, args);\n\n    return repayWithPermit(asset, amount, interestRateMode, msg.sender, deadline, v, r, s);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IL2Pool",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IL2Pool\n  ",
        "@inheritdoc": "IL2Pool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "repayWithATokens",
        "visibility": "external",
        "args": [
            {
                "name": "args",
                "type": "bytes32"
            }
        ],
        "func": "function repayWithATokens(bytes32 args) external override returns (uint256) {\n    (address asset, uint256 amount, uint256 interestRateMode) = CalldataLogic.decodeRepayParams(\n      _reservesList,\n      args\n    );\n\n    return repayWithATokens(asset, amount, interestRateMode);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IL2Pool",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IL2Pool\n  ",
        "@inheritdoc": "IL2Pool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "swapBorrowRateMode",
        "visibility": "external",
        "args": [
            {
                "name": "args",
                "type": "bytes32"
            }
        ],
        "func": "function swapBorrowRateMode(bytes32 args) external override {\n    (address asset, uint256 interestRateMode) = CalldataLogic.decodeSwapBorrowRateModeParams(\n      _reservesList,\n      args\n    );\n    swapBorrowRateMode(asset, interestRateMode);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IL2Pool",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IL2Pool\n  ",
        "@inheritdoc": "IL2Pool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rebalanceStableBorrowRate",
        "visibility": "external",
        "args": [
            {
                "name": "args",
                "type": "bytes32"
            }
        ],
        "func": "function rebalanceStableBorrowRate(bytes32 args) external override {\n    (address asset, address user) = CalldataLogic.decodeRebalanceStableBorrowRateParams(\n      _reservesList,\n      args\n    );\n    rebalanceStableBorrowRate(asset, user);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IL2Pool",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IL2Pool\n  ",
        "@inheritdoc": "IL2Pool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setUserUseReserveAsCollateral",
        "visibility": "external",
        "args": [
            {
                "name": "args",
                "type": "bytes32"
            }
        ],
        "func": "function setUserUseReserveAsCollateral(bytes32 args) external override {\n    (address asset, bool useAsCollateral) = CalldataLogic.decodeSetUserUseReserveAsCollateralParams(\n      _reservesList,\n      args\n    );\n    setUserUseReserveAsCollateral(asset, useAsCollateral);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IL2Pool",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IL2Pool\n  ",
        "@inheritdoc": "IL2Pool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "liquidationCall",
        "visibility": "external",
        "args": [
            {
                "name": "args1",
                "type": "bytes32"
            },
            {
                "name": "args2",
                "type": "bytes32"
            }
        ],
        "func": "function liquidationCall(bytes32 args1, bytes32 args2) external override {\n    (\n      address collateralAsset,\n      address debtAsset,\n      address user,\n      uint256 debtToCover,\n      bool receiveAToken\n    ) = CalldataLogic.decodeLiquidationCallParams(_reservesList, args1, args2);\n    liquidationCall(collateralAsset, debtAsset, user, debtToCover, receiveAToken);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IL2Pool",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IL2Pool\n  ",
        "@inheritdoc": "IL2Pool",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "provider",
                "type": "IPoolAddressesProvider"
            }
        ],
        "func": "function initialize(IPoolAddressesProvider provider) public initializer {\n    _addressesProvider = provider;\n    _pool = IPool(_addressesProvider.getPool());\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initReserves",
        "visibility": "external",
        "args": [
            {
                "name": "input",
                "type": "ConfiguratorInputTypes.InitReserveInput[] calldata"
            }
        ],
        "func": "function initReserves(ConfiguratorInputTypes.InitReserveInput[] calldata input)\n    external\n    override\n    onlyAssetListingOrPoolAdmins\n  {\n    IPool cachedPool = _pool;\n    for (uint256 i = 0; i < input.length; i++) {\n      ConfiguratorLogic.executeInitReserve(cachedPool, input[i]);\n    }\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "dropReserve",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function dropReserve(address asset) external override onlyPoolAdmin {\n    _pool.dropReserve(asset);\n    emit ReserveDropped(asset);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateAToken",
        "visibility": "external",
        "args": [
            {
                "name": "input",
                "type": "ConfiguratorInputTypes.UpdateATokenInput calldata"
            }
        ],
        "func": "function updateAToken(ConfiguratorInputTypes.UpdateATokenInput calldata input)\n    external\n    override\n    onlyPoolAdmin\n  {\n    ConfiguratorLogic.executeUpdateAToken(_pool, input);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateStableDebtToken",
        "visibility": "external",
        "args": [
            {
                "name": "input",
                "type": "ConfiguratorInputTypes.UpdateDebtTokenInput calldata"
            }
        ],
        "func": "function updateStableDebtToken(ConfiguratorInputTypes.UpdateDebtTokenInput calldata input)\n    external\n    override\n    onlyPoolAdmin\n  {\n    ConfiguratorLogic.executeUpdateStableDebtToken(_pool, input);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateVariableDebtToken",
        "visibility": "external",
        "args": [
            {
                "name": "input",
                "type": "ConfiguratorInputTypes.UpdateDebtTokenInput calldata"
            }
        ],
        "func": "function updateVariableDebtToken(ConfiguratorInputTypes.UpdateDebtTokenInput calldata input)\n    external\n    override\n    onlyPoolAdmin\n  {\n    ConfiguratorLogic.executeUpdateVariableDebtToken(_pool, input);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setReserveBorrowing",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "enabled",
                "type": "bool"
            }
        ],
        "func": "function setReserveBorrowing(address asset, bool enabled) external override onlyRiskOrPoolAdmins {\n    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);\n    if (!enabled) {\n      require(!currentConfig.getStableRateBorrowingEnabled(), Errors.STABLE_BORROWING_ENABLED);\n    }\n    currentConfig.setBorrowingEnabled(enabled);\n    _pool.setConfiguration(asset, currentConfig);\n    emit ReserveBorrowing(asset, enabled);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "configureReserveAsCollateral",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "ltv",
                "type": "uint256"
            },
            {
                "name": "liquidationThreshold",
                "type": "uint256"
            },
            {
                "name": "liquidationBonus",
                "type": "uint256"
            }
        ],
        "func": "function configureReserveAsCollateral(\n    address asset,\n    uint256 ltv,\n    uint256 liquidationThreshold,\n    uint256 liquidationBonus\n  ) external override onlyRiskOrPoolAdmins {\n    //validation of the parameters: the LTV can\n    //only be lower or equal than the liquidation threshold\n    //(otherwise a loan against the asset would cause instantaneous liquidation)\n    require(ltv <= liquidationThreshold, Errors.INVALID_RESERVE_PARAMS);\n\n    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);\n\n    if (liquidationThreshold != 0) {\n      //liquidation bonus must be bigger than 100.00%, otherwise the liquidator would receive less\n      //collateral than needed to cover the debt\n      require(liquidationBonus > PercentageMath.PERCENTAGE_FACTOR, Errors.INVALID_RESERVE_PARAMS);\n\n      //if threshold * bonus is less than PERCENTAGE_FACTOR, it's guaranteed that at the moment\n      //a loan is taken there is enough collateral available to cover the liquidation bonus\n      require(\n        liquidationThreshold.percentMul(liquidationBonus) <= PercentageMath.PERCENTAGE_FACTOR,\n        Errors.INVALID_RESERVE_PARAMS\n      );\n    } else {\n      require(liquidationBonus == 0, Errors.INVALID_RESERVE_PARAMS);\n      //if the liquidation threshold is being set to 0,\n      // the reserve is being disabled as collateral. To do so,\n      //we need to ensure no liquidity is supplied\n      _checkNoSuppliers(asset);\n    }\n\n    currentConfig.setLtv(ltv);\n    currentConfig.setLiquidationThreshold(liquidationThreshold);\n    currentConfig.setLiquidationBonus(liquidationBonus);\n\n    _pool.setConfiguration(asset, currentConfig);\n\n    emit CollateralConfigurationChanged(asset, ltv, liquidationThreshold, liquidationBonus);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setReserveStableRateBorrowing",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "enabled",
                "type": "bool"
            }
        ],
        "func": "function setReserveStableRateBorrowing(address asset, bool enabled)\n    external\n    override\n    onlyRiskOrPoolAdmins\n  {\n    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);\n    if (enabled) {\n      require(currentConfig.getBorrowingEnabled(), Errors.BORROWING_NOT_ENABLED);\n    }\n    currentConfig.setStableRateBorrowingEnabled(enabled);\n    _pool.setConfiguration(asset, currentConfig);\n    emit ReserveStableRateBorrowing(asset, enabled);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setReserveActive",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "active",
                "type": "bool"
            }
        ],
        "func": "function setReserveActive(address asset, bool active) external override onlyPoolAdmin {\n    if (!active) _checkNoSuppliers(asset);\n    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);\n    currentConfig.setActive(active);\n    _pool.setConfiguration(asset, currentConfig);\n    emit ReserveActive(asset, active);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setReserveFreeze",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "freeze",
                "type": "bool"
            }
        ],
        "func": "function setReserveFreeze(address asset, bool freeze) external override onlyRiskOrPoolAdmins {\n    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);\n    currentConfig.setFrozen(freeze);\n    _pool.setConfiguration(asset, currentConfig);\n    emit ReserveFrozen(asset, freeze);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setBorrowableInIsolation",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "borrowable",
                "type": "bool"
            }
        ],
        "func": "function setBorrowableInIsolation(address asset, bool borrowable)\n    external\n    override\n    onlyRiskOrPoolAdmins\n  {\n    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);\n    currentConfig.setBorrowableInIsolation(borrowable);\n    _pool.setConfiguration(asset, currentConfig);\n    emit BorrowableInIsolationChanged(asset, borrowable);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setReservePause",
        "visibility": "public",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "paused",
                "type": "bool"
            }
        ],
        "func": "function setReservePause(address asset, bool paused) public override onlyEmergencyOrPoolAdmin {\n    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);\n    currentConfig.setPaused(paused);\n    _pool.setConfiguration(asset, currentConfig);\n    emit ReservePaused(asset, paused);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setReserveFactor",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "newReserveFactor",
                "type": "uint256"
            }
        ],
        "func": "function setReserveFactor(address asset, uint256 newReserveFactor)\n    external\n    override\n    onlyRiskOrPoolAdmins\n  {\n    require(newReserveFactor <= PercentageMath.PERCENTAGE_FACTOR, Errors.INVALID_RESERVE_FACTOR);\n    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);\n    uint256 oldReserveFactor = currentConfig.getReserveFactor();\n    currentConfig.setReserveFactor(newReserveFactor);\n    _pool.setConfiguration(asset, currentConfig);\n    emit ReserveFactorChanged(asset, oldReserveFactor, newReserveFactor);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setDebtCeiling",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "newDebtCeiling",
                "type": "uint256"
            }
        ],
        "func": "function setDebtCeiling(address asset, uint256 newDebtCeiling)\n    external\n    override\n    onlyRiskOrPoolAdmins\n  {\n    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);\n\n    uint256 oldDebtCeiling = currentConfig.getDebtCeiling();\n    if (oldDebtCeiling == 0) {\n      _checkNoSuppliers(asset);\n    }\n    currentConfig.setDebtCeiling(newDebtCeiling);\n    _pool.setConfiguration(asset, currentConfig);\n\n    if (newDebtCeiling == 0) {\n      _pool.resetIsolationModeTotalDebt(asset);\n    }\n\n    emit DebtCeilingChanged(asset, oldDebtCeiling, newDebtCeiling);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setSiloedBorrowing",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "newSiloed",
                "type": "bool"
            }
        ],
        "func": "function setSiloedBorrowing(address asset, bool newSiloed)\n    external\n    override\n    onlyRiskOrPoolAdmins\n  {\n    if (newSiloed) {\n      _checkNoBorrowers(asset);\n    }\n    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);\n\n    bool oldSiloed = currentConfig.getSiloedBorrowing();\n\n    currentConfig.setSiloedBorrowing(newSiloed);\n\n    _pool.setConfiguration(asset, currentConfig);\n\n    emit SiloedBorrowingChanged(asset, oldSiloed, newSiloed);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setBorrowCap",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "newBorrowCap",
                "type": "uint256"
            }
        ],
        "func": "function setBorrowCap(address asset, uint256 newBorrowCap)\n    external\n    override\n    onlyRiskOrPoolAdmins\n  {\n    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);\n    uint256 oldBorrowCap = currentConfig.getBorrowCap();\n    currentConfig.setBorrowCap(newBorrowCap);\n    _pool.setConfiguration(asset, currentConfig);\n    emit BorrowCapChanged(asset, oldBorrowCap, newBorrowCap);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setSupplyCap",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "newSupplyCap",
                "type": "uint256"
            }
        ],
        "func": "function setSupplyCap(address asset, uint256 newSupplyCap)\n    external\n    override\n    onlyRiskOrPoolAdmins\n  {\n    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);\n    uint256 oldSupplyCap = currentConfig.getSupplyCap();\n    currentConfig.setSupplyCap(newSupplyCap);\n    _pool.setConfiguration(asset, currentConfig);\n    emit SupplyCapChanged(asset, oldSupplyCap, newSupplyCap);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setLiquidationProtocolFee",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "newFee",
                "type": "uint256"
            }
        ],
        "func": "function setLiquidationProtocolFee(address asset, uint256 newFee)\n    external\n    override\n    onlyRiskOrPoolAdmins\n  {\n    require(newFee <= PercentageMath.PERCENTAGE_FACTOR, Errors.INVALID_LIQUIDATION_PROTOCOL_FEE);\n    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);\n    uint256 oldFee = currentConfig.getLiquidationProtocolFee();\n    currentConfig.setLiquidationProtocolFee(newFee);\n    _pool.setConfiguration(asset, currentConfig);\n    emit LiquidationProtocolFeeChanged(asset, oldFee, newFee);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setEModeCategory",
        "visibility": "external",
        "args": [
            {
                "name": "categoryId",
                "type": "uint8"
            },
            {
                "name": "ltv",
                "type": "uint16"
            },
            {
                "name": "liquidationThreshold",
                "type": "uint16"
            },
            {
                "name": "liquidationBonus",
                "type": "uint16"
            },
            {
                "name": "oracle",
                "type": "address"
            },
            {
                "name": "label",
                "type": "string calldata"
            }
        ],
        "func": "function setEModeCategory(\n    uint8 categoryId,\n    uint16 ltv,\n    uint16 liquidationThreshold,\n    uint16 liquidationBonus,\n    address oracle,\n    string calldata label\n  ) external override onlyRiskOrPoolAdmins {\n    require(ltv != 0, Errors.INVALID_EMODE_CATEGORY_PARAMS);\n    require(liquidationThreshold != 0, Errors.INVALID_EMODE_CATEGORY_PARAMS);\n\n    // validation of the parameters: the LTV can\n    // only be lower or equal than the liquidation threshold\n    // (otherwise a loan against the asset would cause instantaneous liquidation)\n    require(ltv <= liquidationThreshold, Errors.INVALID_EMODE_CATEGORY_PARAMS);\n    require(\n      liquidationBonus > PercentageMath.PERCENTAGE_FACTOR,\n      Errors.INVALID_EMODE_CATEGORY_PARAMS\n    );\n\n    // if threshold * bonus is less than PERCENTAGE_FACTOR, it's guaranteed that at the moment\n    // a loan is taken there is enough collateral available to cover the liquidation bonus\n    require(\n      uint256(liquidationThreshold).percentMul(liquidationBonus) <=\n        PercentageMath.PERCENTAGE_FACTOR,\n      Errors.INVALID_EMODE_CATEGORY_PARAMS\n    );\n\n    address[] memory reserves = _pool.getReservesList();\n    for (uint256 i = 0; i < reserves.length; i++) {\n      DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(reserves[i]);\n      if (categoryId == currentConfig.getEModeCategory()) {\n        require(ltv > currentConfig.getLtv(), Errors.INVALID_EMODE_CATEGORY_PARAMS);\n        require(\n          liquidationThreshold > currentConfig.getLiquidationThreshold(),\n          Errors.INVALID_EMODE_CATEGORY_PARAMS\n        );\n      }\n    }\n\n    _pool.configureEModeCategory(\n      categoryId,\n      DataTypes.EModeCategory({\n        ltv: ltv,\n        liquidationThreshold: liquidationThreshold,\n        liquidationBonus: liquidationBonus,\n        priceSource: oracle,\n        label: label\n      })\n    );\n    emit EModeCategoryAdded(categoryId, ltv, liquidationThreshold, liquidationBonus, oracle, label);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAssetEModeCategory",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "newCategoryId",
                "type": "uint8"
            }
        ],
        "func": "function setAssetEModeCategory(address asset, uint8 newCategoryId)\n    external\n    override\n    onlyRiskOrPoolAdmins\n  {\n    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);\n\n    if (newCategoryId != 0) {\n      DataTypes.EModeCategory memory categoryData = _pool.getEModeCategoryData(newCategoryId);\n      require(\n        categoryData.liquidationThreshold > currentConfig.getLiquidationThreshold(),\n        Errors.INVALID_EMODE_CATEGORY_ASSIGNMENT\n      );\n    }\n    uint256 oldCategoryId = currentConfig.getEModeCategory();\n    currentConfig.setEModeCategory(newCategoryId);\n    _pool.setConfiguration(asset, currentConfig);\n    emit EModeAssetCategoryChanged(asset, uint8(oldCategoryId), newCategoryId);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setUnbackedMintCap",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "newUnbackedMintCap",
                "type": "uint256"
            }
        ],
        "func": "function setUnbackedMintCap(address asset, uint256 newUnbackedMintCap)\n    external\n    override\n    onlyRiskOrPoolAdmins\n  {\n    DataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(asset);\n    uint256 oldUnbackedMintCap = currentConfig.getUnbackedMintCap();\n    currentConfig.setUnbackedMintCap(newUnbackedMintCap);\n    _pool.setConfiguration(asset, currentConfig);\n    emit UnbackedMintCapChanged(asset, oldUnbackedMintCap, newUnbackedMintCap);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setReserveInterestRateStrategyAddress",
        "visibility": "external",
        "args": [
            {
                "name": "asset",
                "type": "address"
            },
            {
                "name": "newRateStrategyAddress",
                "type": "address"
            }
        ],
        "func": "function setReserveInterestRateStrategyAddress(address asset, address newRateStrategyAddress)\n    external\n    override\n    onlyRiskOrPoolAdmins\n  {\n    DataTypes.ReserveData memory reserve = _pool.getReserveData(asset);\n    address oldRateStrategyAddress = reserve.interestRateStrategyAddress;\n    _pool.setReserveInterestRateStrategyAddress(asset, newRateStrategyAddress);\n    emit ReserveInterestRateStrategyChanged(asset, oldRateStrategyAddress, newRateStrategyAddress);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPoolPause",
        "visibility": "external",
        "args": [
            {
                "name": "paused",
                "type": "bool"
            }
        ],
        "func": "function setPoolPause(bool paused) external override onlyEmergencyAdmin {\n    address[] memory reserves = _pool.getReservesList();\n\n    for (uint256 i = 0; i < reserves.length; i++) {\n      if (reserves[i] != address(0)) {\n        setReservePause(reserves[i], paused);\n      }\n    }\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateBridgeProtocolFee",
        "visibility": "external",
        "args": [
            {
                "name": "newBridgeProtocolFee",
                "type": "uint256"
            }
        ],
        "func": "function updateBridgeProtocolFee(uint256 newBridgeProtocolFee) external override onlyPoolAdmin {\n    require(\n      newBridgeProtocolFee <= PercentageMath.PERCENTAGE_FACTOR,\n      Errors.BRIDGE_PROTOCOL_FEE_INVALID\n    );\n    uint256 oldBridgeProtocolFee = _pool.BRIDGE_PROTOCOL_FEE();\n    _pool.updateBridgeProtocolFee(newBridgeProtocolFee);\n    emit BridgeProtocolFeeUpdated(oldBridgeProtocolFee, newBridgeProtocolFee);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateFlashloanPremiumTotal",
        "visibility": "external",
        "args": [
            {
                "name": "newFlashloanPremiumTotal",
                "type": "uint128"
            }
        ],
        "func": "function updateFlashloanPremiumTotal(uint128 newFlashloanPremiumTotal)\n    external\n    override\n    onlyPoolAdmin\n  {\n    require(\n      newFlashloanPremiumTotal <= PercentageMath.PERCENTAGE_FACTOR,\n      Errors.FLASHLOAN_PREMIUM_INVALID\n    );\n    uint128 oldFlashloanPremiumTotal = _pool.FLASHLOAN_PREMIUM_TOTAL();\n    _pool.updateFlashloanPremiums(newFlashloanPremiumTotal, _pool.FLASHLOAN_PREMIUM_TO_PROTOCOL());\n    emit FlashloanPremiumTotalUpdated(oldFlashloanPremiumTotal, newFlashloanPremiumTotal);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateFlashloanPremiumToProtocol",
        "visibility": "external",
        "args": [
            {
                "name": "newFlashloanPremiumToProtocol",
                "type": "uint128"
            }
        ],
        "func": "function updateFlashloanPremiumToProtocol(uint128 newFlashloanPremiumToProtocol)\n    external\n    override\n    onlyPoolAdmin\n  {\n    require(\n      newFlashloanPremiumToProtocol <= PercentageMath.PERCENTAGE_FACTOR,\n      Errors.FLASHLOAN_PREMIUM_INVALID\n    );\n    uint128 oldFlashloanPremiumToProtocol = _pool.FLASHLOAN_PREMIUM_TO_PROTOCOL();\n    _pool.updateFlashloanPremiums(_pool.FLASHLOAN_PREMIUM_TOTAL(), newFlashloanPremiumToProtocol);\n    emit FlashloanPremiumToProtocolUpdated(\n      oldFlashloanPremiumToProtocol,\n      newFlashloanPremiumToProtocol\n    );\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IPoolConfigurator",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IPoolConfigurator\n  ",
        "@inheritdoc": "IPoolConfigurator",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "external",
        "args": [
            {
                "name": "initializingPool",
                "type": "IPool"
            },
            {
                "name": "treasury",
                "type": "address"
            },
            {
                "name": "underlyingAsset",
                "type": "address"
            },
            {
                "name": "incentivesController",
                "type": "IFintochIncentivesController"
            },
            {
                "name": "aTokenDecimals",
                "type": "uint8"
            },
            {
                "name": "aTokenName",
                "type": "string calldata"
            },
            {
                "name": "aTokenSymbol",
                "type": "string calldata"
            },
            {
                "name": "params",
                "type": "bytes calldata"
            }
        ],
        "func": "function initialize(\n    IPool initializingPool,\n    address treasury,\n    address underlyingAsset,\n    IFintochIncentivesController incentivesController,\n    uint8 aTokenDecimals,\n    string calldata aTokenName,\n    string calldata aTokenSymbol,\n    bytes calldata params\n  ) external override initializer {\n    require(initializingPool == POOL, Errors.POOL_ADDRESSES_DO_NOT_MATCH);\n    _setName(aTokenName);\n    _setSymbol(aTokenSymbol);\n    _setDecimals(aTokenDecimals);\n\n    _treasury = treasury;\n    _underlyingAsset = underlyingAsset;\n    _incentivesController = incentivesController;\n\n    _domainSeparator = _calculateDomainSeparator();\n\n    emit Initialized(\n      underlyingAsset,\n      address(POOL),\n      treasury,\n      address(incentivesController),\n      aTokenDecimals,\n      aTokenName,\n      aTokenSymbol,\n      params\n    );\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IInitializableAToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IInitializableAToken\n  ",
        "@inheritdoc": "IInitializableAToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "external",
        "args": [
            {
                "name": "caller",
                "type": "address"
            },
            {
                "name": "onBehalfOf",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "index",
                "type": "uint256"
            }
        ],
        "func": "function mint(\n    address caller,\n    address onBehalfOf,\n    uint256 amount,\n    uint256 index\n  ) external virtual override onlyPool returns (bool) {\n    return _mintScaled(caller, onBehalfOf, amount, index);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IAToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IAToken\n  ",
        "@inheritdoc": "IAToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "external",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "receiverOfUnderlying",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "index",
                "type": "uint256"
            }
        ],
        "func": "function burn(\n    address from,\n    address receiverOfUnderlying,\n    uint256 amount,\n    uint256 index\n  ) external virtual override onlyPool {\n    _burnScaled(from, receiverOfUnderlying, amount, index);\n    if (receiverOfUnderlying != address(this)) {\n      IERC20(_underlyingAsset).safeTransfer(receiverOfUnderlying, amount);\n    }\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IAToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IAToken\n  ",
        "@inheritdoc": "IAToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mintToTreasury",
        "visibility": "external",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "index",
                "type": "uint256"
            }
        ],
        "func": "function mintToTreasury(uint256 amount, uint256 index) external override onlyPool {\n    if (amount == 0) {\n      return;\n    }\n    _mintScaled(address(POOL), _treasury, amount, index);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IAToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IAToken\n  ",
        "@inheritdoc": "IAToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferOnLiquidation",
        "visibility": "external",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function transferOnLiquidation(\n    address from,\n    address to,\n    uint256 value\n  ) external override onlyPool {\n    // Being a normal transfer, the Transfer() and BalanceTransfer() are emitted\n    // so no need to emit a specific event here\n    _transfer(from, to, value, false);\n\n    emit Transfer(from, to, value);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IAToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IAToken\n  ",
        "@inheritdoc": "IAToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address user)\n    public\n    view\n    virtual\n    override(IncentivizedERC20, IERC20)\n    returns (uint256)\n  {\n    return super.balanceOf(user).rayMul(POOL.getReserveNormalizedIncome(_underlyingAsset));\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20\n  ",
        "@inheritdoc": "IERC20",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view virtual override(IncentivizedERC20, IERC20) returns (uint256) {\n    uint256 currentSupplyScaled = super.totalSupply();\n\n    if (currentSupplyScaled == 0) {\n      return 0;\n    }\n\n    return currentSupplyScaled.rayMul(POOL.getReserveNormalizedIncome(_underlyingAsset));\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20\n  ",
        "@inheritdoc": "IERC20",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "RESERVE_TREASURY_ADDRESS",
        "visibility": "external",
        "args": [],
        "func": "function RESERVE_TREASURY_ADDRESS() external view override returns (address) {\n    return _treasury;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IAToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IAToken\n  ",
        "@inheritdoc": "IAToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "UNDERLYING_ASSET_ADDRESS",
        "visibility": "external",
        "args": [],
        "func": "function UNDERLYING_ASSET_ADDRESS() external view override returns (address) {\n    return _underlyingAsset;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IAToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IAToken\n  ",
        "@inheritdoc": "IAToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferUnderlyingTo",
        "visibility": "external",
        "args": [
            {
                "name": "target",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transferUnderlyingTo(address target, uint256 amount) external virtual override onlyPool {\n    IERC20(_underlyingAsset).safeTransfer(target, amount);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IAToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IAToken\n  ",
        "@inheritdoc": "IAToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "handleRepayment",
        "visibility": "external",
        "args": [
            {
                "name": "user",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function handleRepayment(address user, uint256 amount) external virtual override onlyPool {\n    // Intentionally left blank\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IAToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IAToken\n  ",
        "@inheritdoc": "IAToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "permit",
        "visibility": "external",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            },
            {
                "name": "deadline",
                "type": "uint256"
            },
            {
                "name": "v",
                "type": "uint8"
            },
            {
                "name": "r",
                "type": "bytes32"
            },
            {
                "name": "s",
                "type": "bytes32"
            }
        ],
        "func": "function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external override {\n    require(owner != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\n    //solium-disable-next-line\n    require(block.timestamp <= deadline, Errors.INVALID_EXPIRATION);\n    uint256 currentValidNonce = _nonces[owner];\n    bytes32 digest = keccak256(\n      abi.encodePacked(\n        '\\x19\\x01',\n        DOMAIN_SEPARATOR(),\n        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\n      )\n    );\n    require(owner == ecrecover(digest, v, r, s), Errors.INVALID_SIGNATURE);\n    _nonces[owner] = currentValidNonce + 1;\n    _approve(owner, spender, value);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IAToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IAToken\n  ",
        "@inheritdoc": "IAToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "DOMAIN_SEPARATOR",
        "visibility": "public",
        "args": [],
        "func": "function DOMAIN_SEPARATOR() public view override(IAToken, EIP712Base) returns (bytes32) {\n    return super.DOMAIN_SEPARATOR();\n  }",
        "comments": [
            "/**",
            "   * @dev Overrides the base function to fully implement IAToken",
            "   * @dev see `IncentivizedERC20.DOMAIN_SEPARATOR()` for more detailed documentation",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Overrides the base function to fully implement IAToken\n   * @dev see `IncentivizedERC20.DOMAIN_SEPARATOR()` for more detailed documentation\n   */\n",
        "@dev": "Overrides the base function to fully implement IAToken * see `IncentivizedERC20.DOMAIN_SEPARATOR()` for more detailed documentation",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "nonces",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function nonces(address owner) public view override(IAToken, EIP712Base) returns (uint256) {\n    return super.nonces(owner);\n  }",
        "comments": [
            "/**",
            "   * @dev Overrides the base function to fully implement IAToken",
            "   * @dev see `IncentivizedERC20.nonces()` for more detailed documentation",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Overrides the base function to fully implement IAToken\n   * @dev see `IncentivizedERC20.nonces()` for more detailed documentation\n   */\n",
        "@dev": "Overrides the base function to fully implement IAToken * see `IncentivizedERC20.nonces()` for more detailed documentation",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rescueTokens",
        "visibility": "external",
        "args": [
            {
                "name": "token",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function rescueTokens(\n    address token,\n    address to,\n    uint256 amount\n  ) external override onlyPoolAdmin {\n    require(token != _underlyingAsset, Errors.UNDERLYING_CANNOT_BE_RESCUED);\n    IERC20(token).safeTransfer(to, amount);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IAToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IAToken\n  ",
        "@inheritdoc": "IAToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "delegateUnderlyingTo",
        "visibility": "external",
        "args": [
            {
                "name": "delegatee",
                "type": "address"
            }
        ],
        "func": "function delegateUnderlyingTo(address delegatee) external onlyPoolAdmin {\n    IDelegationToken(_underlyingAsset).delegate(delegatee);\n    emit DelegateUnderlyingTo(delegatee);\n  }",
        "comments": [
            "/**",
            "   * @notice Delegates voting power of the underlying asset to a `delegatee` address",
            "   * @param delegatee The address that will receive the delegation",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Delegates voting power of the underlying asset to a `delegatee` address\n   * @param delegatee The address that will receive the delegation\n   **/\n",
        "@notice": "Delegates voting power of the underlying asset to a `delegatee` address",
        "@param1": "delegatee The address that will receive the delegation",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "external",
        "args": [
            {
                "name": "initializingPool",
                "type": "IPool"
            },
            {
                "name": "underlyingAsset",
                "type": "address"
            },
            {
                "name": "incentivesController",
                "type": "IFintochIncentivesController"
            },
            {
                "name": "debtTokenDecimals",
                "type": "uint8"
            },
            {
                "name": "debtTokenName",
                "type": "string memory"
            },
            {
                "name": "debtTokenSymbol",
                "type": "string memory"
            },
            {
                "name": "params",
                "type": "bytes calldata"
            }
        ],
        "func": "function initialize(\n    IPool initializingPool,\n    address underlyingAsset,\n    IFintochIncentivesController incentivesController,\n    uint8 debtTokenDecimals,\n    string memory debtTokenName,\n    string memory debtTokenSymbol,\n    bytes calldata params\n  ) external override initializer {\n    require(initializingPool == POOL, Errors.POOL_ADDRESSES_DO_NOT_MATCH);\n    _setName(debtTokenName);\n    _setSymbol(debtTokenSymbol);\n    _setDecimals(debtTokenDecimals);\n\n    _underlyingAsset = underlyingAsset;\n    _incentivesController = incentivesController;\n\n    _domainSeparator = _calculateDomainSeparator();\n\n    emit Initialized(\n      underlyingAsset,\n      address(POOL),\n      address(incentivesController),\n      debtTokenDecimals,\n      debtTokenName,\n      debtTokenSymbol,\n      params\n    );\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IInitializableDebtToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IInitializableDebtToken\n  ",
        "@inheritdoc": "IInitializableDebtToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAverageStableRate",
        "visibility": "external",
        "args": [],
        "func": "function getAverageStableRate() external view virtual override returns (uint256) {\n    return _avgStableRate;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IStableDebtToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IStableDebtToken\n  ",
        "@inheritdoc": "IStableDebtToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUserLastUpdated",
        "visibility": "external",
        "args": [
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function getUserLastUpdated(address user) external view virtual override returns (uint40) {\n    return _timestamps[user];\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IStableDebtToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IStableDebtToken\n  ",
        "@inheritdoc": "IStableDebtToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUserStableRate",
        "visibility": "external",
        "args": [
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function getUserStableRate(address user) external view virtual override returns (uint256) {\n    return _userState[user].additionalData;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IStableDebtToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IStableDebtToken\n  ",
        "@inheritdoc": "IStableDebtToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address account) public view virtual override returns (uint256) {\n    uint256 accountBalance = super.balanceOf(account);\n    uint256 stableRate = _userState[account].additionalData;\n    if (accountBalance == 0) {\n      return 0;\n    }\n    uint256 cumulatedInterest = MathUtils.calculateCompoundedInterest(\n      stableRate,\n      _timestamps[account]\n    );\n    return accountBalance.rayMul(cumulatedInterest);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20\n  ",
        "@inheritdoc": "IERC20",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "external",
        "args": [
            {
                "name": "user",
                "type": "address"
            },
            {
                "name": "onBehalfOf",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "rate",
                "type": "uint256"
            }
        ],
        "func": "function mint(\n    address user,\n    address onBehalfOf,\n    uint256 amount,\n    uint256 rate\n  )\n    external\n    virtual\n    override\n    onlyPool\n    returns (\n      bool,\n      uint256,\n      uint256\n    )\n  {\n    MintLocalVars memory vars;\n\n    if (user != onBehalfOf) {\n      _decreaseBorrowAllowance(onBehalfOf, user, amount);\n    }\n\n    (, uint256 currentBalance, uint256 balanceIncrease) = _calculateBalanceIncrease(onBehalfOf);\n\n    vars.previousSupply = totalSupply();\n    vars.currentAvgStableRate = _avgStableRate;\n    vars.nextSupply = _totalSupply = vars.previousSupply + amount;\n\n    vars.amountInRay = amount.wadToRay();\n\n    vars.currentStableRate = _userState[onBehalfOf].additionalData;\n    vars.nextStableRate = (vars.currentStableRate.rayMul(currentBalance.wadToRay()) +\n      vars.amountInRay.rayMul(rate)).rayDiv((currentBalance + amount).wadToRay());\n\n    _userState[onBehalfOf].additionalData = vars.nextStableRate.toUint128();\n\n    //solium-disable-next-line\n    _totalSupplyTimestamp = _timestamps[onBehalfOf] = uint40(block.timestamp);\n\n    // Calculates the updated average stable rate\n    vars.currentAvgStableRate = _avgStableRate = (\n      (vars.currentAvgStableRate.rayMul(vars.previousSupply.wadToRay()) +\n        rate.rayMul(vars.amountInRay)).rayDiv(vars.nextSupply.wadToRay())\n    ).toUint128();\n\n    uint256 amountToMint = amount + balanceIncrease;\n    _mint(onBehalfOf, amountToMint, vars.previousSupply);\n\n    emit Transfer(address(0), onBehalfOf, amountToMint);\n    emit Mint(\n      user,\n      onBehalfOf,\n      amountToMint,\n      currentBalance,\n      balanceIncrease,\n      vars.nextStableRate,\n      vars.currentAvgStableRate,\n      vars.nextSupply\n    );\n\n    return (currentBalance == 0, vars.nextSupply, vars.currentAvgStableRate);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IStableDebtToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IStableDebtToken\n  ",
        "@inheritdoc": "IStableDebtToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "external",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function burn(address from, uint256 amount)\n    external\n    virtual\n    override\n    onlyPool\n    returns (uint256, uint256)\n  {\n    (, uint256 currentBalance, uint256 balanceIncrease) = _calculateBalanceIncrease(from);\n\n    uint256 previousSupply = totalSupply();\n    uint256 nextAvgStableRate = 0;\n    uint256 nextSupply = 0;\n    uint256 userStableRate = _userState[from].additionalData;\n\n    // Since the total supply and each single user debt accrue separately,\n    // there might be accumulation errors so that the last borrower repaying\n    // might actually try to repay more than the available debt supply.\n    // In this case we simply set the total supply and the avg stable rate to 0\n    if (previousSupply <= amount) {\n      _avgStableRate = 0;\n      _totalSupply = 0;\n    } else {\n      nextSupply = _totalSupply = previousSupply - amount;\n      uint256 firstTerm = uint256(_avgStableRate).rayMul(previousSupply.wadToRay());\n      uint256 secondTerm = userStableRate.rayMul(amount.wadToRay());\n\n      // For the same reason described above, when the last user is repaying it might\n      // happen that user rate * user balance > avg rate * total supply. In that case,\n      // we simply set the avg rate to 0\n      if (secondTerm >= firstTerm) {\n        nextAvgStableRate = _totalSupply = _avgStableRate = 0;\n      } else {\n        nextAvgStableRate = _avgStableRate = (\n          (firstTerm - secondTerm).rayDiv(nextSupply.wadToRay())\n        ).toUint128();\n      }\n    }\n\n    if (amount == currentBalance) {\n      _userState[from].additionalData = 0;\n      _timestamps[from] = 0;\n    } else {\n      //solium-disable-next-line\n      _timestamps[from] = uint40(block.timestamp);\n    }\n    //solium-disable-next-line\n    _totalSupplyTimestamp = uint40(block.timestamp);\n\n    if (balanceIncrease > amount) {\n      uint256 amountToMint = balanceIncrease - amount;\n      _mint(from, amountToMint, previousSupply);\n      emit Transfer(address(0), from, amountToMint);\n      emit Mint(\n        from,\n        from,\n        amountToMint,\n        currentBalance,\n        balanceIncrease,\n        userStableRate,\n        nextAvgStableRate,\n        nextSupply\n      );\n    } else {\n      uint256 amountToBurn = amount - balanceIncrease;\n      _burn(from, amountToBurn, previousSupply);\n      emit Transfer(from, address(0), amountToBurn);\n      emit Burn(from, amountToBurn, currentBalance, balanceIncrease, nextAvgStableRate, nextSupply);\n    }\n\n    return (nextSupply, nextAvgStableRate);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IStableDebtToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IStableDebtToken\n  ",
        "@inheritdoc": "IStableDebtToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSupplyData",
        "visibility": "external",
        "args": [],
        "func": "function getSupplyData()\n    external\n    view\n    override\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint40\n    )\n  {\n    uint256 avgRate = _avgStableRate;\n    return (super.totalSupply(), _calcTotalSupply(avgRate), avgRate, _totalSupplyTimestamp);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IStableDebtToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IStableDebtToken\n  ",
        "@inheritdoc": "IStableDebtToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getTotalSupplyAndAvgRate",
        "visibility": "external",
        "args": [],
        "func": "function getTotalSupplyAndAvgRate() external view override returns (uint256, uint256) {\n    uint256 avgRate = _avgStableRate;\n    return (_calcTotalSupply(avgRate), avgRate);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IStableDebtToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IStableDebtToken\n  ",
        "@inheritdoc": "IStableDebtToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view virtual override returns (uint256) {\n    return _calcTotalSupply(_avgStableRate);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20\n  ",
        "@inheritdoc": "IERC20",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getTotalSupplyLastUpdated",
        "visibility": "external",
        "args": [],
        "func": "function getTotalSupplyLastUpdated() external view override returns (uint40) {\n    return _totalSupplyTimestamp;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IStableDebtToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IStableDebtToken\n  ",
        "@inheritdoc": "IStableDebtToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "principalBalanceOf",
        "visibility": "external",
        "args": [
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function principalBalanceOf(address user) external view virtual override returns (uint256) {\n    return super.balanceOf(user);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IStableDebtToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IStableDebtToken\n  ",
        "@inheritdoc": "IStableDebtToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "UNDERLYING_ASSET_ADDRESS",
        "visibility": "external",
        "args": [],
        "func": "function UNDERLYING_ASSET_ADDRESS() external view override returns (address) {\n    return _underlyingAsset;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IStableDebtToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IStableDebtToken\n  ",
        "@inheritdoc": "IStableDebtToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "uint256",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address, uint256) external virtual override returns (bool) {\n    revert(Errors.OPERATION_NOT_SUPPORTED);\n  }",
        "comments": [
            "/**",
            "   * @dev Being non transferrable, the debt token does not implement any of the",
            "   * standard ERC20 functions for transfer and allowance.",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @dev Being non transferrable, the debt token does not implement any of the\n   * standard ERC20 functions for transfer and allowance.\n   **/\n",
        "@dev": "Being non transferrable, the debt token does not implement any of the * standard ERC20 functions for transfer and allowance.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "address",
                "type": "address"
            }
        ],
        "func": "function allowance(address, address) external view virtual override returns (uint256) {\n    revert(Errors.OPERATION_NOT_SUPPORTED);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "uint256",
                "type": "uint256"
            }
        ],
        "func": "function approve(address, uint256) external virtual override returns (bool) {\n    revert(Errors.OPERATION_NOT_SUPPORTED);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "uint256",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n    address,\n    address,\n    uint256\n  ) external virtual override returns (bool) {\n    revert(Errors.OPERATION_NOT_SUPPORTED);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "uint256",
                "type": "uint256"
            }
        ],
        "func": "function increaseAllowance(address, uint256) external virtual override returns (bool) {\n    revert(Errors.OPERATION_NOT_SUPPORTED);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "uint256",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(address, uint256) external virtual override returns (bool) {\n    revert(Errors.OPERATION_NOT_SUPPORTED);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "external",
        "args": [
            {
                "name": "initializingPool",
                "type": "IPool"
            },
            {
                "name": "underlyingAsset",
                "type": "address"
            },
            {
                "name": "incentivesController",
                "type": "IFintochIncentivesController"
            },
            {
                "name": "debtTokenDecimals",
                "type": "uint8"
            },
            {
                "name": "debtTokenName",
                "type": "string memory"
            },
            {
                "name": "debtTokenSymbol",
                "type": "string memory"
            },
            {
                "name": "params",
                "type": "bytes calldata"
            }
        ],
        "func": "function initialize(\n    IPool initializingPool,\n    address underlyingAsset,\n    IFintochIncentivesController incentivesController,\n    uint8 debtTokenDecimals,\n    string memory debtTokenName,\n    string memory debtTokenSymbol,\n    bytes calldata params\n  ) external override initializer {\n    require(initializingPool == POOL, Errors.POOL_ADDRESSES_DO_NOT_MATCH);\n    _setName(debtTokenName);\n    _setSymbol(debtTokenSymbol);\n    _setDecimals(debtTokenDecimals);\n\n    _underlyingAsset = underlyingAsset;\n    _incentivesController = incentivesController;\n\n    _domainSeparator = _calculateDomainSeparator();\n\n    emit Initialized(\n      underlyingAsset,\n      address(POOL),\n      address(incentivesController),\n      debtTokenDecimals,\n      debtTokenName,\n      debtTokenSymbol,\n      params\n    );\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IInitializableDebtToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IInitializableDebtToken\n  ",
        "@inheritdoc": "IInitializableDebtToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address user) public view virtual override returns (uint256) {\n    uint256 scaledBalance = super.balanceOf(user);\n\n    if (scaledBalance == 0) {\n      return 0;\n    }\n\n    return scaledBalance.rayMul(POOL.getReserveNormalizedVariableDebt(_underlyingAsset));\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20\n  ",
        "@inheritdoc": "IERC20",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "external",
        "args": [
            {
                "name": "user",
                "type": "address"
            },
            {
                "name": "onBehalfOf",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "index",
                "type": "uint256"
            }
        ],
        "func": "function mint(\n    address user,\n    address onBehalfOf,\n    uint256 amount,\n    uint256 index\n  ) external virtual override onlyPool returns (bool, uint256) {\n    if (user != onBehalfOf) {\n      _decreaseBorrowAllowance(onBehalfOf, user, amount);\n    }\n    return (_mintScaled(user, onBehalfOf, amount, index), scaledTotalSupply());\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IVariableDebtToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IVariableDebtToken\n  ",
        "@inheritdoc": "IVariableDebtToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "external",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "index",
                "type": "uint256"
            }
        ],
        "func": "function burn(\n    address from,\n    uint256 amount,\n    uint256 index\n  ) external virtual override onlyPool returns (uint256) {\n    _burnScaled(from, address(0), amount, index);\n    return scaledTotalSupply();\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IVariableDebtToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IVariableDebtToken\n  ",
        "@inheritdoc": "IVariableDebtToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view virtual override returns (uint256) {\n    return super.totalSupply().rayMul(POOL.getReserveNormalizedVariableDebt(_underlyingAsset));\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20\n  ",
        "@inheritdoc": "IERC20",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "uint256",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address, uint256) external virtual override returns (bool) {\n    revert(Errors.OPERATION_NOT_SUPPORTED);\n  }",
        "comments": [
            "/**",
            "   * @dev Being non transferrable, the debt token does not implement any of the",
            "   * standard ERC20 functions for transfer and allowance.",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @dev Being non transferrable, the debt token does not implement any of the\n   * standard ERC20 functions for transfer and allowance.\n   **/\n",
        "@dev": "Being non transferrable, the debt token does not implement any of the * standard ERC20 functions for transfer and allowance.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "address",
                "type": "address"
            }
        ],
        "func": "function allowance(address, address) external view virtual override returns (uint256) {\n    revert(Errors.OPERATION_NOT_SUPPORTED);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "uint256",
                "type": "uint256"
            }
        ],
        "func": "function approve(address, uint256) external virtual override returns (bool) {\n    revert(Errors.OPERATION_NOT_SUPPORTED);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "uint256",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n    address,\n    address,\n    uint256\n  ) external virtual override returns (bool) {\n    revert(Errors.OPERATION_NOT_SUPPORTED);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "uint256",
                "type": "uint256"
            }
        ],
        "func": "function increaseAllowance(address, uint256) external virtual override returns (bool) {\n    revert(Errors.OPERATION_NOT_SUPPORTED);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "external",
        "args": [
            {
                "name": "address",
                "type": "address"
            },
            {
                "name": "uint256",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(address, uint256) external virtual override returns (bool) {\n    revert(Errors.OPERATION_NOT_SUPPORTED);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "UNDERLYING_ASSET_ADDRESS",
        "visibility": "external",
        "args": [],
        "func": "function UNDERLYING_ASSET_ADDRESS() external view override returns (address) {\n    return _underlyingAsset;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IVariableDebtToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IVariableDebtToken\n  ",
        "@inheritdoc": "IVariableDebtToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approveDelegation",
        "visibility": "external",
        "args": [
            {
                "name": "delegatee",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function approveDelegation(address delegatee, uint256 amount) external override {\n    _approveDelegation(_msgSender(), delegatee, amount);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc ICreditDelegationToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc ICreditDelegationToken\n  ",
        "@inheritdoc": "ICreditDelegationToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "delegationWithSig",
        "visibility": "external",
        "args": [
            {
                "name": "delegator",
                "type": "address"
            },
            {
                "name": "delegatee",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            },
            {
                "name": "deadline",
                "type": "uint256"
            },
            {
                "name": "v",
                "type": "uint8"
            },
            {
                "name": "r",
                "type": "bytes32"
            },
            {
                "name": "s",
                "type": "bytes32"
            }
        ],
        "func": "function delegationWithSig(\n    address delegator,\n    address delegatee,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external {\n    require(delegator != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\n    //solium-disable-next-line\n    require(block.timestamp <= deadline, Errors.INVALID_EXPIRATION);\n    uint256 currentValidNonce = _nonces[delegator];\n    bytes32 digest = keccak256(\n      abi.encodePacked(\n        '\\x19\\x01',\n        DOMAIN_SEPARATOR(),\n        keccak256(\n          abi.encode(DELEGATION_WITH_SIG_TYPEHASH, delegatee, value, currentValidNonce, deadline)\n        )\n      )\n    );\n    require(delegator == ecrecover(digest, v, r, s), Errors.INVALID_SIGNATURE);\n    _nonces[delegator] = currentValidNonce + 1;\n    _approveDelegation(delegator, delegatee, value);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc ICreditDelegationToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc ICreditDelegationToken\n  ",
        "@inheritdoc": "ICreditDelegationToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "borrowAllowance",
        "visibility": "external",
        "args": [
            {
                "name": "fromUser",
                "type": "address"
            },
            {
                "name": "toUser",
                "type": "address"
            }
        ],
        "func": "function borrowAllowance(address fromUser, address toUser)\n    external\n    view\n    override\n    returns (uint256)\n  {\n    return _borrowAllowances[fromUser][toUser];\n  }",
        "comments": [
            "",
            "  /// @inheritdoc ICreditDelegationToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc ICreditDelegationToken\n  ",
        "@inheritdoc": "ICreditDelegationToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "DOMAIN_SEPARATOR",
        "visibility": "public",
        "args": [],
        "func": "function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n    if (block.chainid == _chainId) {\n      return _domainSeparator;\n    }\n    return _calculateDomainSeparator();\n  }",
        "comments": [
            "/**",
            "   * @notice Get the domain separator for the token",
            "   * @dev Return cached value if chainId matches cache, otherwise recomputes separator",
            "   * @return The domain separator of the token at current chain",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Get the domain separator for the token\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\n   * @return The domain separator of the token at current chain\n   */\n",
        "@notice": "Get the domain separator for the token",
        "@dev": "Return cached value if chainId matches cache, otherwise recomputes separator",
        "@return1": "The domain separator of the token at current chain",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "nonces",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function nonces(address owner) public view virtual returns (uint256) {\n    return _nonces[owner];\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the nonce value for address specified as parameter",
            "   * @param owner The address for which the nonce is being returned",
            "   * @return The nonce value for the input address`",
            "   */",
            ""
        ],
        "comt": "/**\n   * @notice Returns the nonce value for address specified as parameter\n   * @param owner The address for which the nonce is being returned\n   * @return The nonce value for the input address`\n   */\n",
        "@notice": "Returns the nonce value for address specified as parameter",
        "@param1": "owner The address for which the nonce is being returned",
        "@return1": "The nonce value for the input address`",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "name",
        "visibility": "public",
        "args": [],
        "func": "function name() public view override returns (string memory) {\n    return _name;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20Detailed",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20Detailed\n  ",
        "@inheritdoc": "IERC20Detailed",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "external",
        "args": [],
        "func": "function symbol() external view override returns (string memory) {\n    return _symbol;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20Detailed",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20Detailed\n  ",
        "@inheritdoc": "IERC20Detailed",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decimals",
        "visibility": "external",
        "args": [],
        "func": "function decimals() external view override returns (uint8) {\n    return _decimals;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20Detailed",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20Detailed\n  ",
        "@inheritdoc": "IERC20Detailed",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view virtual override returns (uint256) {\n    return _totalSupply;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20\n  ",
        "@inheritdoc": "IERC20",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address account) public view virtual override returns (uint256) {\n    return _userState[account].balance;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20\n  ",
        "@inheritdoc": "IERC20",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getIncentivesController",
        "visibility": "external",
        "args": [],
        "func": "function getIncentivesController() external view virtual returns (IFintochIncentivesController) {\n    return _incentivesController;\n  }",
        "comments": [
            "/**",
            "   * @notice Returns the address of the Incentives Controller contract",
            "   * @return The address of the Incentives Controller",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Returns the address of the Incentives Controller contract\n   * @return The address of the Incentives Controller\n   **/\n",
        "@notice": "Returns the address of the Incentives Controller contract",
        "@return1": "The address of the Incentives Controller",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setIncentivesController",
        "visibility": "external",
        "args": [
            {
                "name": "controller",
                "type": "IFintochIncentivesController"
            }
        ],
        "func": "function setIncentivesController(IFintochIncentivesController controller) external onlyPoolAdmin {\n    _incentivesController = controller;\n  }",
        "comments": [
            "/**",
            "   * @notice Sets a new Incentives Controller",
            "   * @param controller the new Incentives controller",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Sets a new Incentives Controller\n   * @param controller the new Incentives controller\n   **/\n",
        "@notice": "Sets a new Incentives Controller",
        "@param1": "controller the new Incentives controller",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "external",
        "args": [
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\n    uint128 castAmount = amount.toUint128();\n    _transfer(_msgSender(), recipient, castAmount);\n    return true;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20\n  ",
        "@inheritdoc": "IERC20",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "external",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address owner, address spender)\n    external\n    view\n    virtual\n    override\n    returns (uint256)\n  {\n    return _allowances[owner][spender];\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20\n  ",
        "@inheritdoc": "IERC20",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "external",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function approve(address spender, uint256 amount) external virtual override returns (bool) {\n    _approve(_msgSender(), spender, amount);\n    return true;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20\n  ",
        "@inheritdoc": "IERC20",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "external",
        "args": [
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n  ) external virtual override returns (bool) {\n    uint128 castAmount = amount.toUint128();\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - castAmount);\n    _transfer(sender, recipient, castAmount);\n    return true;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IERC20",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IERC20\n  ",
        "@inheritdoc": "IERC20",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "external",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @notice Increases the allowance of spender to spend _msgSender() tokens",
            "   * @param spender The user allowed to spend on behalf of _msgSender()",
            "   * @param addedValue The amount being added to the allowance",
            "   * @return `true`",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Increases the allowance of spender to spend _msgSender() tokens\n   * @param spender The user allowed to spend on behalf of _msgSender()\n   * @param addedValue The amount being added to the allowance\n   * @return `true`\n   **/\n",
        "@notice": "Increases the allowance of spender to spend _msgSender() tokens",
        "@param1": "spender The user allowed to spend on behalf of _msgSender()",
        "@param2": "addedValue The amount being added to the allowance",
        "@return1": "`true`",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "external",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(address spender, uint256 subtractedValue)\n    external\n    virtual\n    returns (bool)\n  {\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @notice Decreases the allowance of spender to spend _msgSender() tokens",
            "   * @param spender The user allowed to spend on behalf of _msgSender()",
            "   * @param subtractedValue The amount being subtracted to the allowance",
            "   * @return `true`",
            "   **/",
            ""
        ],
        "comt": "/**\n   * @notice Decreases the allowance of spender to spend _msgSender() tokens\n   * @param spender The user allowed to spend on behalf of _msgSender()\n   * @param subtractedValue The amount being subtracted to the allowance\n   * @return `true`\n   **/\n",
        "@notice": "Decreases the allowance of spender to spend _msgSender() tokens",
        "@param1": "spender The user allowed to spend on behalf of _msgSender()",
        "@param2": "subtractedValue The amount being subtracted to the allowance",
        "@return1": "`true`",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "scaledBalanceOf",
        "visibility": "external",
        "args": [
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function scaledBalanceOf(address user) external view override returns (uint256) {\n    return super.balanceOf(user);\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IScaledBalanceToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IScaledBalanceToken\n  ",
        "@inheritdoc": "IScaledBalanceToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getScaledUserBalanceAndSupply",
        "visibility": "external",
        "args": [
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function getScaledUserBalanceAndSupply(address user)\n    external\n    view\n    override\n    returns (uint256, uint256)\n  {\n    return (super.balanceOf(user), super.totalSupply());\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IScaledBalanceToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IScaledBalanceToken\n  ",
        "@inheritdoc": "IScaledBalanceToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "scaledTotalSupply",
        "visibility": "public",
        "args": [],
        "func": "function scaledTotalSupply() public view virtual override returns (uint256) {\n    return super.totalSupply();\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IScaledBalanceToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IScaledBalanceToken\n  ",
        "@inheritdoc": "IScaledBalanceToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPreviousIndex",
        "visibility": "external",
        "args": [
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function getPreviousIndex(address user) external view virtual override returns (uint256) {\n    return _userState[user].additionalData;\n  }",
        "comments": [
            "",
            "  /// @inheritdoc IScaledBalanceToken",
            "  "
        ],
        "comt": "\n  /// @inheritdoc IScaledBalanceToken\n  ",
        "@inheritdoc": "IScaledBalanceToken",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]