[
    {
        "transactions": 399,
        "function_num": 12
    },
    {
        "name": "setMinter",
        "visibility": "external",
        "args": [
            {
                "name": "minter_",
                "type": "address"
            }
        ],
        "func": "function setMinter(address minter_) external {\n  require(msg.sender == minter, \"Erp::setMinter: only the minter can change the minter address\");\n  emit MinterChanged(minter, minter_);\n  minter = minter_;\n }",
        "comments": [
            "/**",
            "  * @notice Change the minter address",
            "  * @param minter_ The address of the new minter",
            "  */",
            ""
        ],
        "comt": "/**\n  * @notice Change the minter address\n  * @param minter_ The address of the new minter\n  */\n",
        "@notice": "Change the minter address",
        "@param1": "minter_ The address of the new minter",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "external",
        "args": [
            {
                "name": "dst",
                "type": "address"
            },
            {
                "name": "rawAmount",
                "type": "uint256"
            }
        ],
        "func": "function mint(address dst, uint256 rawAmount) external {\n  require(msg.sender == minter, \"Erp::mint: only the minter can mint\");\n  require(block.timestamp >= mintingAllowedAfter, \"Erp::mint: minting not allowed yet\");\n  require(dst != address(0), \"Erp::mint: cannot transfer to the zero address\");\n\n  // record the mint\n  mintingAllowedAfter = SafeMath.add(block.timestamp, minimumTimeBetweenMints);\n\n  // mint the amount\n  uint96 amount = safe96(rawAmount, \"Erp::mint: amount exceeds 96 bits\");\n  require(amount <= SafeMath.div(SafeMath.mul(totalSupply, mintCap), 100), \"Erp::mint: exceeded mint cap\");\n  totalSupply = safe96(SafeMath.add(totalSupply, amount), \"Erp::mint: totalSupply exceeds 96 bits\");\n\n  // transfer the amount to the recipient\n  balances[dst] = add96(balances[dst], amount, \"Erp::mint: transfer amount overflows\");\n  emit Transfer(address(0), dst, amount);\n\n  // move delegates\n  _moveDelegates(address(0), delegates[dst], amount);\n }",
        "comments": [
            "/**",
            "  * @notice Mint new tokens",
            "  * @param dst The address of the destination account",
            "  * @param rawAmount The number of tokens to be minted",
            "  */",
            ""
        ],
        "comt": "/**\n  * @notice Mint new tokens\n  * @param dst The address of the destination account\n  * @param rawAmount The number of tokens to be minted\n  */\n",
        "@notice": "Mint new tokens",
        "@param1": "dst The address of the destination account",
        "@param2": "rawAmount The number of tokens to be minted",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address account, address spender) external view returns (uint256) {\n  return allowances[account][spender];\n }",
        "comments": [
            "/**",
            "  * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`",
            "  * @param account The address of the account holding the funds",
            "  * @param spender The address of the account spending the funds",
            "  * @return The number of tokens approved",
            "  */",
            ""
        ],
        "comt": "/**\n  * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n  * @param account The address of the account holding the funds\n  * @param spender The address of the account spending the funds\n  * @return The number of tokens approved\n  */\n",
        "@notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`",
        "@param1": "account The address of the account holding the funds",
        "@param2": "spender The address of the account spending the funds",
        "@return1": "The number of tokens approved",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "external",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "rawAmount",
                "type": "uint256"
            }
        ],
        "func": "function approve(address spender, uint256 rawAmount) external returns (bool) {\n  uint96 amount;\n  if (rawAmount == uint256(-1)) {\n   amount = uint96(-1);\n  } else {\n   amount = safe96(rawAmount, \"Erp::approve: amount exceeds 96 bits\");\n  }\n\n  allowances[msg.sender][spender] = amount;\n\n  emit Approval(msg.sender, spender, amount);\n  return true;\n }",
        "comments": [
            "/**",
            "  * @notice Approve `spender` to transfer up to `amount` from `src`",
            "  * @dev This will overwrite the approval amount for `spender`",
            "  *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
            "  * @param spender The address of the account which may transfer tokens",
            "  * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)",
            "  * @return Whether or not the approval succeeded",
            "  */",
            ""
        ],
        "comt": "/**\n  * @notice Approve `spender` to transfer up to `amount` from `src`\n  * @dev This will overwrite the approval amount for `spender`\n  *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n  * @param spender The address of the account which may transfer tokens\n  * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n  * @return Whether or not the approval succeeded\n  */\n",
        "@notice": "Approve `spender` to transfer up to `amount` from `src`",
        "@dev": "This will overwrite the approval amount for `spender` * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "@param1": "spender The address of the account which may transfer tokens",
        "@param2": "rawAmount The number of tokens that are approved (2^256-1 means infinite)",
        "@return1": "Whether or not the approval succeeded",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "permit",
        "visibility": "external",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "rawAmount",
                "type": "uint256"
            },
            {
                "name": "deadline",
                "type": "uint256"
            },
            {
                "name": "v",
                "type": "uint8"
            },
            {
                "name": "r",
                "type": "bytes32"
            },
            {
                "name": "s",
                "type": "bytes32"
            }
        ],
        "func": "function permit(\n  address owner,\n  address spender,\n  uint256 rawAmount,\n  uint256 deadline,\n  uint8 v,\n  bytes32 r,\n  bytes32 s\n ) external {\n  uint96 amount;\n  if (rawAmount == uint256(-1)) {\n   amount = uint96(-1);\n  } else {\n   amount = safe96(rawAmount, \"Erp::permit: amount exceeds 96 bits\");\n  }\n\n  bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n  bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));\n  bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n  address signatory = ecrecover(digest, v, r, s);\n  require(signatory != address(0), \"Erp::permit: invalid signature\");\n  require(signatory == owner, \"Erp::permit: unauthorized\");\n  require(now <= deadline, \"Erp::permit: signature expired\");\n\n  allowances[owner][spender] = amount;\n\n  emit Approval(owner, spender, amount);\n }",
        "comments": [
            "/**",
            "  * @notice Triggers an approval from owner to spends",
            "  * @param owner The address to approve from",
            "  * @param spender The address to be approved",
            "  * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)",
            "  * @param deadline The time at which to expire the signature",
            "  * @param v The recovery byte of the signature",
            "  * @param r Half of the ECDSA signature pair",
            "  * @param s Half of the ECDSA signature pair",
            "  */",
            ""
        ],
        "comt": "/**\n  * @notice Triggers an approval from owner to spends\n  * @param owner The address to approve from\n  * @param spender The address to be approved\n  * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n  * @param deadline The time at which to expire the signature\n  * @param v The recovery byte of the signature\n  * @param r Half of the ECDSA signature pair\n  * @param s Half of the ECDSA signature pair\n  */\n",
        "@notice": "Triggers an approval from owner to spends",
        "@param1": "owner The address to approve from",
        "@param2": "spender The address to be approved",
        "@param3": "rawAmount The number of tokens that are approved (2^256-1 means infinite)",
        "@param4": "deadline The time at which to expire the signature",
        "@param5": "v The recovery byte of the signature",
        "@param6": "r Half of the ECDSA signature pair",
        "@param7": "s Half of the ECDSA signature pair",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address account) external view returns (uint256) {\n  return balances[account];\n }",
        "comments": [
            "/**",
            "  * @notice Get the number of tokens held by the `account`",
            "  * @param account The address of the account to get the balance of",
            "  * @return The number of tokens held",
            "  */",
            ""
        ],
        "comt": "/**\n  * @notice Get the number of tokens held by the `account`\n  * @param account The address of the account to get the balance of\n  * @return The number of tokens held\n  */\n",
        "@notice": "Get the number of tokens held by the `account`",
        "@param1": "account The address of the account to get the balance of",
        "@return1": "The number of tokens held",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "external",
        "args": [
            {
                "name": "dst",
                "type": "address"
            },
            {
                "name": "rawAmount",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address dst, uint256 rawAmount) external returns (bool) {\n  uint96 amount = safe96(rawAmount, \"Erp::transfer: amount exceeds 96 bits\");\n  _transferTokens(msg.sender, dst, amount);\n  return true;\n }",
        "comments": [
            "/**",
            "  * @notice Transfer `amount` tokens from `msg.sender` to `dst`",
            "  * @param dst The address of the destination account",
            "  * @param rawAmount The number of tokens to transfer",
            "  * @return Whether or not the transfer succeeded",
            "  */",
            ""
        ],
        "comt": "/**\n  * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n  * @param dst The address of the destination account\n  * @param rawAmount The number of tokens to transfer\n  * @return Whether or not the transfer succeeded\n  */\n",
        "@notice": "Transfer `amount` tokens from `msg.sender` to `dst`",
        "@param1": "dst The address of the destination account",
        "@param2": "rawAmount The number of tokens to transfer",
        "@return1": "Whether or not the transfer succeeded",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "external",
        "args": [
            {
                "name": "src",
                "type": "address"
            },
            {
                "name": "dst",
                "type": "address"
            },
            {
                "name": "rawAmount",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n  address src,\n  address dst,\n  uint256 rawAmount\n ) external returns (bool) {\n  address spender = msg.sender;\n  uint96 spenderAllowance = allowances[src][spender];\n  uint96 amount = safe96(rawAmount, \"Erp::approve: amount exceeds 96 bits\");\n\n  if (spender != src && spenderAllowance != uint96(-1)) {\n   uint96 newAllowance = sub96(spenderAllowance, amount, \"Erp::transferFrom: transfer amount exceeds spender allowance\");\n   allowances[src][spender] = newAllowance;\n\n   emit Approval(src, spender, newAllowance);\n  }\n\n  _transferTokens(src, dst, amount);\n  return true;\n }",
        "comments": [
            "/**",
            "  * @notice Transfer `amount` tokens from `src` to `dst`",
            "  * @param src The address of the source account",
            "  * @param dst The address of the destination account",
            "  * @param rawAmount The number of tokens to transfer",
            "  * @return Whether or not the transfer succeeded",
            "  */",
            ""
        ],
        "comt": "/**\n  * @notice Transfer `amount` tokens from `src` to `dst`\n  * @param src The address of the source account\n  * @param dst The address of the destination account\n  * @param rawAmount The number of tokens to transfer\n  * @return Whether or not the transfer succeeded\n  */\n",
        "@notice": "Transfer `amount` tokens from `src` to `dst`",
        "@param1": "src The address of the source account",
        "@param2": "dst The address of the destination account",
        "@param3": "rawAmount The number of tokens to transfer",
        "@return1": "Whether or not the transfer succeeded",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "delegate",
        "visibility": "public",
        "args": [
            {
                "name": "delegatee",
                "type": "address"
            }
        ],
        "func": "function delegate(address delegatee) public {\n  return _delegate(msg.sender, delegatee);\n }",
        "comments": [
            "/**",
            "  * @notice Delegate votes from `msg.sender` to `delegatee`",
            "  * @param delegatee The address to delegate votes to",
            "  */",
            ""
        ],
        "comt": "/**\n  * @notice Delegate votes from `msg.sender` to `delegatee`\n  * @param delegatee The address to delegate votes to\n  */\n",
        "@notice": "Delegate votes from `msg.sender` to `delegatee`",
        "@param1": "delegatee The address to delegate votes to",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "delegateBySig",
        "visibility": "public",
        "args": [
            {
                "name": "delegatee",
                "type": "address"
            },
            {
                "name": "nonce",
                "type": "uint256"
            },
            {
                "name": "expiry",
                "type": "uint256"
            },
            {
                "name": "v",
                "type": "uint8"
            },
            {
                "name": "r",
                "type": "bytes32"
            },
            {
                "name": "s",
                "type": "bytes32"
            }
        ],
        "func": "function delegateBySig(\n  address delegatee,\n  uint256 nonce,\n  uint256 expiry,\n  uint8 v,\n  bytes32 r,\n  bytes32 s\n ) public {\n  bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n  bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n  bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n  address signatory = ecrecover(digest, v, r, s);\n  require(signatory != address(0), \"Erp::delegateBySig: invalid signature\");\n  require(nonce == nonces[signatory]++, \"Erp::delegateBySig: invalid nonce\");\n  require(now <= expiry, \"Erp::delegateBySig: signature expired\");\n  return _delegate(signatory, delegatee);\n }",
        "comments": [
            "/**",
            "  * @notice Delegates votes from signatory to `delegatee`",
            "  * @param delegatee The address to delegate votes to",
            "  * @param nonce The contract state required to match the signature",
            "  * @param expiry The time at which to expire the signature",
            "  * @param v The recovery byte of the signature",
            "  * @param r Half of the ECDSA signature pair",
            "  * @param s Half of the ECDSA signature pair",
            "  */",
            ""
        ],
        "comt": "/**\n  * @notice Delegates votes from signatory to `delegatee`\n  * @param delegatee The address to delegate votes to\n  * @param nonce The contract state required to match the signature\n  * @param expiry The time at which to expire the signature\n  * @param v The recovery byte of the signature\n  * @param r Half of the ECDSA signature pair\n  * @param s Half of the ECDSA signature pair\n  */\n",
        "@notice": "Delegates votes from signatory to `delegatee`",
        "@param1": "delegatee The address to delegate votes to",
        "@param2": "nonce The contract state required to match the signature",
        "@param3": "expiry The time at which to expire the signature",
        "@param4": "v The recovery byte of the signature",
        "@param5": "r Half of the ECDSA signature pair",
        "@param6": "s Half of the ECDSA signature pair",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getCurrentVotes",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function getCurrentVotes(address account) external view returns (uint96) {\n  uint32 nCheckpoints = numCheckpoints[account];\n  return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n }",
        "comments": [
            "/**",
            "  * @notice Gets the current votes balance for `account`",
            "  * @param account The address to get votes balance",
            "  * @return The number of current votes for `account`",
            "  */",
            ""
        ],
        "comt": "/**\n  * @notice Gets the current votes balance for `account`\n  * @param account The address to get votes balance\n  * @return The number of current votes for `account`\n  */\n",
        "@notice": "Gets the current votes balance for `account`",
        "@param1": "account The address to get votes balance",
        "@return1": "The number of current votes for `account`",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPriorVotes",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "blockNumber",
                "type": "uint256"
            }
        ],
        "func": "function getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\n  require(blockNumber < block.number, \"Erp::getPriorVotes: not yet determined\");\n\n  uint32 nCheckpoints = numCheckpoints[account];\n  if (nCheckpoints == 0) {\n   return 0;\n  }\n\n  // First check most recent balance\n  if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n   return checkpoints[account][nCheckpoints - 1].votes;\n  }\n\n  // Next check implicit zero balance\n  if (checkpoints[account][0].fromBlock > blockNumber) {\n   return 0;\n  }\n\n  uint32 lower = 0;\n  uint32 upper = nCheckpoints - 1;\n  while (upper > lower) {\n   uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n   Checkpoint memory cp = checkpoints[account][center];\n   if (cp.fromBlock == blockNumber) {\n    return cp.votes;\n   } else if (cp.fromBlock < blockNumber) {\n    lower = center;\n   } else {\n    upper = center - 1;\n   }\n  }\n  return checkpoints[account][lower].votes;\n }",
        "comments": [
            "/**",
            "  * @notice Determine the prior number of votes for an account as of a block number",
            "  * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.",
            "  * @param account The address of the account to check",
            "  * @param blockNumber The block number to get the vote balance at",
            "  * @return The number of votes the account had as of the given block",
            "  */",
            ""
        ],
        "comt": "/**\n  * @notice Determine the prior number of votes for an account as of a block number\n  * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n  * @param account The address of the account to check\n  * @param blockNumber The block number to get the vote balance at\n  * @return The number of votes the account had as of the given block\n  */\n",
        "@notice": "Determine the prior number of votes for an account as of a block number",
        "@dev": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "@param1": "account The address of the account to check",
        "@param2": "blockNumber The block number to get the vote balance at",
        "@return1": "The number of votes the account had as of the given block",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]