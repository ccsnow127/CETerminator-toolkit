[
    {
        "transactions": 2954,
        "function_num": 378
    },
    {
        "name": "setOwner",
        "visibility": "public",
        "args": [
            {
                "name": "owner_",
                "type": "address"
            }
        ],
        "func": "function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAuthority",
        "visibility": "public",
        "args": [
            {
                "name": "authority_",
                "type": "DSAuthority"
            }
        ],
        "func": "function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "canCall",
        "visibility": "public",
        "args": [
            {
                "name": "src_",
                "type": "address"
            },
            {
                "name": "dst_",
                "type": "address"
            },
            {
                "name": "sig",
                "type": "bytes4"
            }
        ],
        "func": "function canCall(\n        address src_, address dst_, bytes4 sig\n    ) public view override returns (bool) {\n        bytes32 src = bytes32(bytes20(src_));\n        bytes32 dst = bytes32(bytes20(dst_));\n\n        return acl[src][dst][sig]\n            || acl[src][dst][ANY]\n            || acl[src][ANY][sig]\n            || acl[src][ANY][ANY]\n            || acl[ANY][dst][sig]\n            || acl[ANY][dst][ANY]\n            || acl[ANY][ANY][sig]\n            || acl[ANY][ANY][ANY];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "permit",
        "visibility": "public",
        "args": [
            {
                "name": "src",
                "type": "bytes32"
            },
            {
                "name": "dst",
                "type": "bytes32"
            },
            {
                "name": "sig",
                "type": "bytes32"
            }
        ],
        "func": "function permit(bytes32 src, bytes32 dst, bytes32 sig) public auth {\n        acl[src][dst][sig] = true;\n        emit LogPermit(src, dst, sig);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "forbid",
        "visibility": "public",
        "args": [
            {
                "name": "src",
                "type": "bytes32"
            },
            {
                "name": "dst",
                "type": "bytes32"
            },
            {
                "name": "sig",
                "type": "bytes32"
            }
        ],
        "func": "function forbid(bytes32 src, bytes32 dst, bytes32 sig) public auth {\n        acl[src][dst][sig] = false;\n        emit LogForbid(src, dst, sig);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "permit",
        "visibility": "public",
        "args": [
            {
                "name": "src",
                "type": "address"
            },
            {
                "name": "dst",
                "type": "address"
            },
            {
                "name": "sig",
                "type": "bytes32"
            }
        ],
        "func": "function permit(address src, address dst, bytes32 sig) public {\n        permit(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "forbid",
        "visibility": "public",
        "args": [
            {
                "name": "src",
                "type": "address"
            },
            {
                "name": "dst",
                "type": "address"
            },
            {
                "name": "sig",
                "type": "bytes32"
            }
        ],
        "func": "function forbid(address src, address dst, bytes32 sig) public {\n        forbid(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "newGuard",
        "visibility": "public",
        "args": [],
        "func": "function newGuard() public returns (DSGuard guard) {\n        guard = new DSGuard();\n        guard.setOwner(msg.sender);\n        isGuard[address(guard)] = true;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "public",
        "args": [
            {
                "name": "_amount",
                "type": "uint"
            }
        ],
        "func": "function burn(uint _amount) public {\n        _burn(msg.sender, _amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burnFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view override returns (uint256) {\n        return totalSupply_;\n    }",
        "comments": [
            "/**",
            "     * @dev Total number of tokens in existence",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Total number of tokens in existence\n     */\n",
        "@dev": "Total number of tokens in existence",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address _owner) public view override returns (uint256) {\n        return balances[_owner];\n    }",
        "comments": [
            "/**",
            "     * @dev Gets the balance of the specified address.",
            "     * @param _owner The address to query the the balance of.",
            "     * @return An uint256 representing the amount owned by the passed address.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n",
        "@dev": "Gets the balance of the specified address.",
        "@param1": "_owner The address to query the the balance of.",
        "@return1": "An uint256 representing the amount owned by the passed address.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            },
            {
                "name": "_spender",
                "type": "address"
            }
        ],
        "func": "function allowance(\n        address _owner,\n        address _spender\n    )\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }",
        "comments": [
            "/**",
            "     * @dev Function to check the amount of tokens that an owner allowed to a spender.",
            "     * @param _owner address The address which owns the funds.",
            "     * @param _spender address The address which will spend the funds.",
            "     * @return A uint256 specifying the amount of tokens still available for the spender.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n",
        "@dev": "Function to check the amount of tokens that an owner allowed to a spender.",
        "@param1": "_owner address The address which owns the funds.",
        "@param2": "_spender address The address which will spend the funds.",
        "@return1": "A uint256 specifying the amount of tokens still available for the spender.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address _to, uint256 _value) public virtual override returns (bool) {\n        require(_value <= balances[msg.sender]);\n        require(_to != address(0));\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }",
        "comments": [
            "/**",
            "    * @dev Transfer token for a specified address",
            "    * @param _to The address to transfer to.",
            "    * @param _value The amount to be transferred.",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n",
        "@dev": "Transfer token for a specified address",
        "@param1": "_to The address to transfer to.",
        "@param2": "_value The amount to be transferred.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function approve(address _spender, uint256 _value) public virtual override returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }",
        "comments": [
            "/**",
            "    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.",
            "    * Beware that changing an allowance with this method brings the risk that someone may use both the old",
            "    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this",
            "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:",
            "    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
            "    * @param _spender The address which will spend the funds.",
            "        * @param _value The amount of tokens to be spent.",
            "        */",
            ""
        ],
        "comt": "/**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n        * @param _value The amount of tokens to be spent.\n        */\n",
        "@dev": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. * Beware that changing an allowance with this method brings the risk that someone may use both the old * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "@param1": "_spender The address which will spend the funds.",
        "@param2": "_value The amount of tokens to be spent.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(_to != address(0));\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Approval(_from, msg.sender, allowed[_from][msg.sender]);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }",
        "comments": [
            "/**",
            "    * @dev Transfer tokens from one address to another",
            "    * @param _from address The address which you want to send tokens from",
            "    * @param _to address The address which you want to transfer to",
            "    * @param _value uint256 the amount of tokens to be transferred",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n",
        "@dev": "Transfer tokens from one address to another",
        "@param1": "_from address The address which you want to send tokens from",
        "@param2": "_to address The address which you want to transfer to",
        "@param3": "_value uint256 the amount of tokens to be transferred",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseApproval",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n        public\n        virtual\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }",
        "comments": [
            "/**",
            "    * @dev Increase the amount of tokens that an owner allowed to a spender.",
            "    * approve should be called when allowed[_spender] == 0. To increment",
            "    * allowed value is better to use this function to avoid 2 calls (and wait until",
            "    * the first transaction is mined)",
            "    * From MonolithDAO Token.sol",
            "    * @param _spender The address which will spend the funds.",
            "    * @param _addedValue The amount of tokens to increase the allowance by.",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n",
        "@dev": "Increase the amount of tokens that an owner allowed to a spender. * approve should be called when allowed[_spender] == 0. To increment * allowed value is better to use this function to avoid 2 calls (and wait until * the first transaction is mined) * From MonolithDAO Token.sol",
        "@param1": "_spender The address which will spend the funds.",
        "@param2": "_addedValue The amount of tokens to increase the allowance by.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseApproval",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n        public\n        virtual\n        returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Decrease the amount of tokens that an owner allowed to a spender.",
            "     * approve should be called when allowed[_spender] == 0. To decrement",
            "     * allowed value is better to use this function to avoid 2 calls (and wait until",
            "     * the first transaction is mined)",
            "     * From MonolithDAO Token.sol",
            "     * @param _spender The address which will spend the funds.",
            "     * @param _subtractedValue The amount of tokens to decrease the allowance by.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n",
        "@dev": "Decrease the amount of tokens that an owner allowed to a spender. * approve should be called when allowed[_spender] == 0. To decrement * allowed value is better to use this function to avoid 2 calls (and wait until * the first transaction is mined) * From MonolithDAO Token.sol",
        "@param1": "_spender The address which will spend the funds.",
        "@param2": "_subtractedValue The amount of tokens to decrease the allowance by.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "public",
        "args": [],
        "func": "function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "public",
        "args": [
            {
                "name": "wad",
                "type": "uint"
            }
        ],
        "func": "function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view returns (uint) {\n        return address(this).balance;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "guy",
                "type": "address"
            },
            {
                "name": "wad",
                "type": "uint"
            }
        ],
        "func": "function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "dst",
                "type": "address"
            },
            {
                "name": "wad",
                "type": "uint"
            }
        ],
        "func": "function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "src",
                "type": "address"
            },
            {
                "name": "dst",
                "type": "address"
            },
            {
                "name": "wad",
                "type": "uint"
            }
        ],
        "func": "function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setRegistry",
        "visibility": "external",
        "args": [
            {
                "name": "_registry",
                "type": "address"
            }
        ],
        "func": "function setRegistry(address _registry)\n        external\n        onlyMTC\n    {\n        _setRegistry(_registry);\n    }",
        "comments": [
            "",
            "    /// @dev only callable by MTC",
            "    "
        ],
        "comt": "\n    /// @dev only callable by MTC\n    ",
        "@dev": "only callable by MTC",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAmguPrice",
        "visibility": "external",
        "args": [
            {
                "name": "_price",
                "type": "uint"
            }
        ],
        "func": "function setAmguPrice(uint _price)\n        external\n        onlyMGM\n    {\n        amguPrice = _price;\n        emit SetAmguPrice(_price);\n    }",
        "comments": [
            "",
            "    /// @dev set price of AMGU in MLN (base units)",
            "    /// @dev only callable by MGM",
            "    "
        ],
        "comt": "\n    /// @dev set price of AMGU in MLN (base units)\n    /// @dev only callable by MGM\n    ",
        "@dev": "set price of AMGU in MLN (base units) * only callable by MGM",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAmguPrice",
        "visibility": "public",
        "args": [],
        "func": "function getAmguPrice() public view returns (uint) { return amguPrice; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "premiumPercent",
        "visibility": "public",
        "args": [],
        "func": "function premiumPercent() public view returns (uint) {\n        if (liquidEther < 1 ether) {\n            return 0;\n        } else if (liquidEther >= 1 ether && liquidEther < 5 ether) {\n            return 5;\n        } else if (liquidEther >= 5 ether && liquidEther < 10 ether) {\n            return 10;\n        } else if (liquidEther >= 10 ether) {\n            return 15;\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "payAmguInEther",
        "visibility": "external",
        "args": [],
        "func": "function payAmguInEther() external payable {\n        require(\n            registry.isFundFactory(msg.sender) ||\n            registry.isFund(msg.sender),\n            \"Sender must be a fund or the factory\"\n        );\n        uint mlnPerAmgu = getAmguPrice();\n        uint ethPerMln;\n        (ethPerMln,) = priceSource().getPrice(address(mlnToken()));\n        uint amguConsumed;\n        if (mlnPerAmgu > 0 && ethPerMln > 0) {\n            amguConsumed = (mul(msg.value, 10 ** uint(MLN_DECIMALS))) / (mul(ethPerMln, mlnPerAmgu));\n        } else {\n            amguConsumed = 0;\n        }\n        totalEtherConsumed = add(totalEtherConsumed, msg.value);\n        totalAmguConsumed = add(totalAmguConsumed, amguConsumed);\n        frozenEther = add(frozenEther, msg.value);\n        emit AmguPaid(amguConsumed);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "thaw",
        "visibility": "external",
        "args": [],
        "func": "function thaw() external {\n        require(\n            block.timestamp >= add(lastThaw, thawingDelay),\n            \"Thawing delay has not passed\"\n        );\n        require(frozenEther > 0, \"No frozen ether to thaw\");\n        lastThaw = block.timestamp;\n        liquidEther = add(liquidEther, frozenEther);\n        emit Thaw(frozenEther);\n        frozenEther = 0;\n    }",
        "comments": [
            "",
            "    /// @notice Move frozen ether to liquid pool after delay",
            "    /// @dev Delay only restarts when this function is called",
            "    "
        ],
        "comt": "\n    /// @notice Move frozen ether to liquid pool after delay\n    /// @dev Delay only restarts when this function is called\n    ",
        "@notice": "Move frozen ether to liquid pool after delay",
        "@dev": "Delay only restarts when this function is called",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "enginePrice",
        "visibility": "public",
        "args": [],
        "func": "function enginePrice() public view returns (uint) {\n        uint ethPerMln;\n        (ethPerMln, ) = priceSource().getPrice(address(mlnToken()));\n        uint premium = (mul(ethPerMln, premiumPercent()) / 100);\n        return add(ethPerMln, premium);\n    }",
        "comments": [
            "",
            "    /// @return ETH per MLN including premium",
            "    "
        ],
        "comt": "\n    /// @return ETH per MLN including premium\n    ",
        "@return1": "ETH per MLN including premium",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "ethPayoutForMlnAmount",
        "visibility": "public",
        "args": [
            {
                "name": "mlnAmount",
                "type": "uint"
            }
        ],
        "func": "function ethPayoutForMlnAmount(uint mlnAmount) public view returns (uint) {\n        return mul(mlnAmount, enginePrice()) / 10 ** uint(MLN_DECIMALS);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "sellAndBurnMln",
        "visibility": "external",
        "args": [
            {
                "name": "mlnAmount",
                "type": "uint"
            }
        ],
        "func": "function sellAndBurnMln(uint mlnAmount) external {\n        require(registry.isFund(msg.sender), \"Only funds can use the engine\");\n        require(\n            mlnToken().transferFrom(msg.sender, address(this), mlnAmount),\n            \"MLN transferFrom failed\"\n        );\n        uint ethToSend = ethPayoutForMlnAmount(mlnAmount);\n        require(ethToSend > 0, \"No ether to pay out\");\n        require(liquidEther >= ethToSend, \"Not enough liquid ether to send\");\n        liquidEther = sub(liquidEther, ethToSend);\n        totalMlnBurned = add(totalMlnBurned, mlnAmount);\n        msg.sender.transfer(ethToSend);\n        mlnToken().burn(mlnAmount);\n        emit Burn(mlnAmount);\n    }",
        "comments": [
            "",
            "    /// @notice MLN must be approved first",
            "    "
        ],
        "comt": "\n    /// @notice MLN must be approved first\n    ",
        "@notice": "MLN must be approved first",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mlnToken",
        "visibility": "public",
        "args": [],
        "func": "function mlnToken()\n        public\n        view\n        returns (BurnableToken)\n    {\n        return BurnableToken(registry.mlnToken());\n    }",
        "comments": [
            "",
            "    /// @dev Get MLN from the registry",
            "    "
        ],
        "comt": "\n    /// @dev Get MLN from the registry\n    ",
        "@dev": "Get MLN from the registry",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "priceSource",
        "visibility": "public",
        "args": [],
        "func": "function priceSource()\n        public\n        view\n        returns (IPriceSource)\n    {\n        return IPriceSource(registry.priceSource());\n    }",
        "comments": [
            "",
            "    /// @dev Get PriceSource from the registry",
            "    "
        ],
        "comt": "\n    /// @dev Get PriceSource from the registry\n    ",
        "@dev": "Get PriceSource from the registry",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "takeOrder ",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes memory"
            }
        ],
        "func": "function takeOrder (\n        address targetExchange,\n        address[8] memory orderAddresses,\n        uint[8] memory orderValues,\n        bytes[4] memory orderData,\n        bytes32 identifier,\n        bytes memory signature\n    ) public override onlyManager notShutDown {\n        Hub hub = getHub();\n\n        address wethAddress = orderAddresses[2];\n        address mlnAddress = orderAddresses[3];\n        uint minEthToReceive = orderValues[0];\n        uint mlnQuantity = orderValues[1];\n\n        require(\n            wethAddress == Registry(hub.registry()).nativeAsset(),\n            \"maker asset doesnt match nativeAsset on registry\"\n        );\n        require(\n            orderValues[1] == orderValues[6],\n            \"fillTakerQuantity must equal takerAssetQuantity\"\n        );\n\n        approveAsset(mlnAddress, targetExchange, mlnQuantity, \"takerAsset\");\n\n        uint ethToReceive = Engine(targetExchange).ethPayoutForMlnAmount(mlnQuantity);\n\n        require(\n            ethToReceive >= minEthToReceive,\n            \"Expected ETH to receive is less than takerQuantity (minEthToReceive)\"\n        );\n\n        Engine(targetExchange).sellAndBurnMln(mlnQuantity);\n        WETH(payable(wethAddress)).deposit.value(ethToReceive)();\n        safeTransfer(wethAddress, address(Vault(hub.vault())), ethToReceive);\n\n        getAccounting().addAssetToOwnedAssets(wethAddress);\n        getAccounting().updateOwnedAssets();\n        getTrading().orderUpdateHook(\n            targetExchange,\n            bytes32(0),\n            Trading.UpdateType.take,\n            [payable(wethAddress), payable(mlnAddress)],\n            [ethToReceive, mlnQuantity, mlnQuantity]\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "makeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "_targetExchange",
                "type": "address"
            },
            {
                "name": "_orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "_orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "_orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "_identifier",
                "type": "bytes32"
            },
            {
                "name": "_signature",
                "type": "bytes memory"
            }
        ],
        "func": "function makeOrder(\n        address _targetExchange,\n        address[8] memory _orderAddresses,\n        uint[8] memory _orderValues,\n        bytes[4] memory _orderData,\n        bytes32 _identifier,\n        bytes memory _signature\n    )\n        public\n        override\n        onlyManager\n        notShutDown\n        orderAddressesMatchOrderData(_orderAddresses, _orderData)\n    {\n        ensureCanMakeOrder(_orderAddresses[2]);\n\n        IZeroExV2.Order memory order = constructOrderStruct(_orderAddresses, _orderValues, _orderData);\n        bytes memory wrappedMakerAssetData = _orderData[0];\n        bytes memory takerAssetData = _orderData[1];\n        address makerAsset = _orderAddresses[2];\n        address takerAsset = getAssetAddress(takerAssetData);\n\n        // Order parameter checks\n        getTrading().updateAndGetQuantityBeingTraded(makerAsset);\n        ensureNotInOpenMakeOrder(makerAsset);\n\n        wrapMakerAsset(_targetExchange, makerAsset, wrappedMakerAssetData, order.makerAssetAmount, order.expirationTimeSeconds);\n\n        IZeroExV2.OrderInfo memory orderInfo = IZeroExV2(_targetExchange).getOrderInfo(order);\n        IZeroExV2(_targetExchange).preSign(orderInfo.orderHash, address(this), _signature);\n\n        require(\n            IZeroExV2(_targetExchange).isValidSignature(\n                orderInfo.orderHash,\n                address(this),\n                _signature\n            ),\n            \"INVALID_ORDER_SIGNATURE\"\n        );\n\n        updateStateMakeOrder(_targetExchange, order);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "cancelOrder",
        "visibility": "public",
        "args": [
            {
                "name": "_targetExchange",
                "type": "address"
            },
            {
                "name": "_orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "_orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "_orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "_identifier",
                "type": "bytes32"
            },
            {
                "name": "_signature",
                "type": "bytes memory"
            }
        ],
        "func": "function cancelOrder(\n        address _targetExchange,\n        address[8] memory _orderAddresses,\n        uint[8] memory _orderValues,\n        bytes[4] memory _orderData,\n        bytes32 _identifier,\n        bytes memory _signature\n    )\n        public\n        override\n        orderAddressesMatchOrderData(_orderAddresses, _orderData)\n    {\n        IZeroExV2.Order memory order = getTrading().getZeroExV2OrderDetails(_identifier);\n        ensureCancelPermitted(_targetExchange, _orderAddresses[2], _identifier);\n        IZeroExV2(_targetExchange).cancelOrder(order);\n\n        updateStateCancelOrder(_targetExchange, order);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdrawTokens",
        "visibility": "public",
        "args": [
            {
                "name": "_targetExchange",
                "type": "address"
            },
            {
                "name": "_orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "_orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "_orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "_identifier",
                "type": "bytes32"
            },
            {
                "name": "_signature",
                "type": "bytes memory"
            }
        ],
        "func": "function withdrawTokens(\n        address _targetExchange,\n        address[8] memory _orderAddresses,\n        uint[8] memory _orderValues,\n        bytes[4] memory _orderData,\n        bytes32 _identifier,\n        bytes memory _signature\n    )\n        public\n    {\n        Hub hub = getHub();\n        address nativeAsset = Accounting(hub.accounting()).NATIVE_ASSET();\n\n        for (uint i = 0; i < _orderAddresses.length; i++) {\n            if (_orderAddresses[i] == address(0)) continue;\n            address wrappedToken = getWrapperToken(_orderAddresses[i]);\n            uint balance = IWrapperLock(wrappedToken).balanceOf(address(this));\n            require(balance > 0, \"Insufficient balance\");\n            IWrapperLock(wrappedToken).withdraw(balance, 0, bytes32(0), bytes32(0), 0);\n            if (_orderAddresses[i] == nativeAsset) {\n                WETH(payable(nativeAsset)).deposit.value(balance)();\n            }\n            getTrading().removeOpenMakeOrder(_targetExchange, _orderAddresses[i]);\n            getTrading().returnAssetToVault(_orderAddresses[i]);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOrder",
        "visibility": "public",
        "args": [
            {
                "name": "_targetExchange",
                "type": "address"
            },
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_makerAsset",
                "type": "address"
            }
        ],
        "func": "function getOrder(address _targetExchange, uint256 _id, address _makerAsset)\n        public\n        view\n        override\n        returns (address, address, uint256, uint256)\n    {\n        uint orderId;\n        uint orderIndex;\n        address takerAsset;\n        uint makerQuantity;\n        uint takerQuantity;\n        (orderId, , orderIndex) = Trading(msg.sender).getOpenOrderInfo(_targetExchange, _makerAsset);\n        (, takerAsset, makerQuantity, takerQuantity) = Trading(msg.sender).getOrderDetails(orderIndex);\n\n        // Check if order has been completely filled\n        uint takerAssetFilledAmount = IZeroExV2(_targetExchange).filled(bytes32(orderId));\n        if (sub(takerQuantity, takerAssetFilledAmount) == 0) {\n            return (_makerAsset, takerAsset, 0, 0);\n        }\n\n        // Check if tokens have been withdrawn (cancelled order may still need to be accounted if there is balance)\n        uint balance = IWrapperLock(getWrapperTokenFromAdapterContext(_makerAsset)).balanceOf(msg.sender);\n        if (balance == 0) {\n            return (_makerAsset, takerAsset, 0, 0);\n        }\n        return (_makerAsset, takerAsset, makerQuantity, sub(takerQuantity, takerAssetFilledAmount));\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "makeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes memory"
            }
        ],
        "func": "function makeOrder(\n        address targetExchange,\n        address[8] memory orderAddresses,\n        uint[8] memory orderValues,\n        bytes[4] memory orderData,\n        bytes32 identifier,\n        bytes memory signature\n    ) public virtual { revert(\"Unimplemented\"); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "takeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes memory"
            }
        ],
        "func": "function takeOrder(\n        address targetExchange,\n        address[8] memory orderAddresses,\n        uint[8] memory orderValues,\n        bytes[4] memory orderData,\n        bytes32 identifier,\n        bytes memory signature\n    ) public virtual { revert(\"Unimplemented\"); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "cancelOrder",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes memory"
            }
        ],
        "func": "function cancelOrder(\n        address targetExchange,\n        address[8] memory orderAddresses,\n        uint[8] memory orderValues,\n        bytes[4] memory orderData,\n        bytes32 identifier,\n        bytes memory signature\n    ) public virtual { revert(\"Unimplemented\"); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOrder",
        "visibility": "public",
        "args": [
            {
                "name": "onExchange",
                "type": "address"
            },
            {
                "name": "id",
                "type": "uint"
            },
            {
                "name": "makerAsset",
                "type": "address"
            }
        ],
        "func": "function getOrder(\n        address onExchange,\n        uint id,\n        address makerAsset\n    ) public view virtual returns (\n        address,\n        address,\n        uint,\n        uint\n    ) { revert(\"Unimplemented\"); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "takeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes memory"
            }
        ],
        "func": "function takeOrder(\n        address targetExchange,\n        address[8] memory orderAddresses,\n        uint[8] memory orderValues,\n        bytes[4] memory orderData,\n        bytes32 identifier,\n        bytes memory signature\n    ) public override onlyManager notShutDown {\n        Hub hub = getHub();\n\n        require(\n            orderValues[1] == orderValues[6],\n            \"fillTakerQuantity must equal takerAssetQuantity\"\n        );\n\n        address makerAsset = orderAddresses[2];\n        address takerAsset = orderAddresses[3];\n        uint makerAssetAmount = orderValues[0];\n        uint takerAssetAmount = orderValues[1];\n\n        uint minRate = calcMinRate(\n            takerAsset,\n            makerAsset,\n            takerAssetAmount,\n            makerAssetAmount\n        );\n\n        uint actualReceiveAmount = dispatchSwap(\n            targetExchange, takerAsset, takerAssetAmount, makerAsset, minRate\n        );\n        require(\n            actualReceiveAmount >= makerAssetAmount,\n            \"Received less than expected from Kyber swap\"\n        );\n\n        getAccounting().addAssetToOwnedAssets(makerAsset);\n        getAccounting().updateOwnedAssets();\n        uint256 timesMakerAssetUsedAsFee = getTrading().openMakeOrdersUsingAssetAsFee(makerAsset);\n        if (\n            !getTrading().isInOpenMakeOrder(makerAsset) &&\n            timesMakerAssetUsedAsFee == 0\n        ) {\n            getTrading().returnAssetToVault(makerAsset);\n        }\n        getTrading().orderUpdateHook(\n            targetExchange,\n            bytes32(0),\n            Trading.UpdateType.take,\n            [payable(makerAsset), payable(takerAsset)],\n            [actualReceiveAmount, takerAssetAmount, takerAssetAmount]\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUnsortedOfferIds",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "sellAsset",
                "type": "address"
            },
            {
                "name": "buyAsset",
                "type": "address"
            }
        ],
        "func": "function getUnsortedOfferIds(\n        address targetExchange,\n        address sellAsset,\n        address buyAsset\n    )\n    public\n    view\n    returns (uint[] memory)\n    {\n        IOasisDex market = IOasisDex(targetExchange);\n        uint[] memory ids = new uint[](1000);\n        uint count = 0;\n\n        // Iterate over all unsorted offers up to 1000 iterations.\n        uint id = market.getFirstUnsortedOffer();\n        for (uint i = 0; i < 1000; i++) {\n            if (id == 0) {\n                break;\n            }\n\n            if (market.isActive(id)) {\n                address sellGem;\n                address buyGem;\n                (, sellGem, , buyGem) = market.getOffer(id);\n\n                if (sellGem == sellAsset && buyGem == buyAsset) {\n                    ids[count++] = id;\n                }\n            }\n\n            // Get the next offer and repeat.\n            id = market.getNextUnsortedOffer(id);\n        }\n\n        // Create a new array of offers with the correct size.\n        uint[] memory copy = new uint[](count);\n        for (uint i = 0; i < count; i++) {\n            copy[i] = ids[i];\n        }\n\n        return copy;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSortedOfferIds",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "sellAsset",
                "type": "address"
            },
            {
                "name": "buyAsset",
                "type": "address"
            }
        ],
        "func": "function getSortedOfferIds(\n        address targetExchange,\n        address sellAsset,\n        address buyAsset\n    )\n    public\n    view\n    returns(uint[] memory)\n    {\n        IOasisDex market = IOasisDex(targetExchange);\n        uint[] memory ids = new uint[](1000);\n        uint count = 0;\n\n        // Iterate over all sorted offers.\n        uint id = market.getBestOffer(sellAsset, buyAsset);\n        for (uint i = 0; i < 1000 ; i++ ) {\n            if (id == 0) {\n                break;\n            }\n\n            if (market.isActive(id)) {\n                ids[count++] = id;\n            }\n\n            // Get the next offer and repeat.\n            id = market.getWorseOffer(id);\n        }\n\n        // Create a new array of offers with the correct size.\n        uint[] memory copy = new uint[](count);\n        for (uint i = 0; i < count; i++) {\n            copy[i] = ids[i];\n        }\n\n        return copy;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOrders",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "sellAsset",
                "type": "address"
            },
            {
                "name": "buyAsset",
                "type": "address"
            }
        ],
        "func": "function getOrders(\n        address targetExchange,\n        address sellAsset,\n        address buyAsset\n    )\n    public\n    view\n    returns (uint[] memory, uint[] memory, uint[] memory) {\n        IOasisDex market = IOasisDex(targetExchange);\n        uint[] memory sIds = getSortedOfferIds(targetExchange, sellAsset, buyAsset);\n        uint[] memory uIds = getUnsortedOfferIds(targetExchange, sellAsset, buyAsset);\n        uint[] memory ids = new uint[](uIds.length + sIds.length);\n        uint[] memory sellQtys = new uint[](ids.length);\n        uint[] memory buyQtys = new uint[](ids.length);\n\n        for (uint i = 0; i < sIds.length; i++) {\n            ids[i] = sIds[i];\n        }\n\n        for (uint i = 0; i < uIds.length; i++) {\n            ids[i + sIds.length] = uIds[i];\n        }\n\n        for (uint i = 0; i < ids.length; i++) {\n            uint sellQty;\n            uint buyQty;\n            (sellQty, , buyQty,) = market.getOffer(ids[i]);\n            sellQtys[i] = sellQty;\n            buyQtys[i] = buyQty;\n        }\n\n        return (ids, sellQtys, buyQtys);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "makeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes memory"
            }
        ],
        "func": "function makeOrder(\n        address targetExchange,\n        address[8] memory orderAddresses,\n        uint[8] memory orderValues,\n        bytes[4] memory orderData,\n        bytes32 identifier,\n        bytes memory signature\n    ) public override onlyManager notShutDown {\n        ensureCanMakeOrder(orderAddresses[2]);\n        address makerAsset = orderAddresses[2];\n        address takerAsset = orderAddresses[3];\n        uint256 makerQuantity = orderValues[0];\n        uint256 takerQuantity = orderValues[1];\n\n        // Order parameter checks\n        getTrading().updateAndGetQuantityBeingTraded(makerAsset);\n        ensureNotInOpenMakeOrder(makerAsset);\n\n        approveAsset(makerAsset, targetExchange, makerQuantity, \"makerAsset\");\n\n        uint256 orderId = IOasisDex(targetExchange).offer(makerQuantity, makerAsset, takerQuantity, takerAsset);\n\n        // defines success in MatchingMarket\n        require(orderId != 0, \"Order ID should not be zero\");\n\n        getAccounting().addAssetToOwnedAssets(takerAsset);\n        getTrading().orderUpdateHook(\n            targetExchange,\n            bytes32(orderId),\n            Trading.UpdateType.make,\n            [payable(makerAsset), payable(takerAsset)],\n            [makerQuantity, takerQuantity, uint256(0)]\n        );\n        getTrading().addOpenMakeOrder(\n            targetExchange,\n            makerAsset,\n            takerAsset,\n            address(0),\n            orderId,\n            orderValues[4]\n        );\n        emit OrderCreated(orderId);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "takeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes memory"
            }
        ],
        "func": "function takeOrder(\n        address targetExchange,\n        address[8] memory orderAddresses,\n        uint[8] memory orderValues,\n        bytes[4] memory orderData,\n        bytes32 identifier,\n        bytes memory signature\n    ) public override onlyManager notShutDown {\n        Hub hub = getHub();\n        uint256 fillTakerQuantity = orderValues[6];\n        uint256 maxMakerQuantity;\n        address makerAsset;\n        uint256 maxTakerQuantity;\n        address takerAsset;\n        (\n            maxMakerQuantity,\n            makerAsset,\n            maxTakerQuantity,\n            takerAsset\n        ) = IOasisDex(targetExchange).getOffer(uint256(identifier));\n        uint256 fillMakerQuantity = mul(fillTakerQuantity, maxMakerQuantity) / maxTakerQuantity;\n\n        require(\n            makerAsset == orderAddresses[2] && takerAsset == orderAddresses[3],\n            \"Maker and taker assets do not match the order addresses\"\n        );\n        require(\n            makerAsset != takerAsset,\n            \"Maker and taker assets cannot be the same\"\n        );\n        require(fillMakerQuantity <= maxMakerQuantity, \"Maker amount to fill above max\");\n        require(fillTakerQuantity <= maxTakerQuantity, \"Taker amount to fill above max\");\n\n        approveAsset(takerAsset, targetExchange, fillTakerQuantity, \"takerAsset\");\n\n        require(\n            IOasisDex(targetExchange).buy(uint256(identifier), fillMakerQuantity),\n            \"Buy on matching market failed\"\n        );\n\n        getAccounting().addAssetToOwnedAssets(makerAsset);\n        getAccounting().updateOwnedAssets();\n        uint256 timesMakerAssetUsedAsFee = getTrading().openMakeOrdersUsingAssetAsFee(makerAsset);\n        if (\n            !getTrading().isInOpenMakeOrder(makerAsset) &&\n            timesMakerAssetUsedAsFee == 0\n        ) {\n            getTrading().returnAssetToVault(makerAsset);\n        }\n        getTrading().orderUpdateHook(\n            targetExchange,\n            bytes32(identifier),\n            Trading.UpdateType.take,\n            [payable(makerAsset), payable(takerAsset)],\n            [maxMakerQuantity, maxTakerQuantity, fillTakerQuantity]\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "cancelOrder",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes memory"
            }
        ],
        "func": "function cancelOrder(\n        address targetExchange,\n        address[8] memory orderAddresses,\n        uint[8] memory orderValues,\n        bytes[4] memory orderData,\n        bytes32 identifier,\n        bytes memory signature\n    ) public override {\n        require(uint256(identifier) != 0, \"ID cannot be zero\");\n        address makerAsset;\n        (, makerAsset, ,) = IOasisDex(targetExchange).getOffer(uint256(identifier));\n        ensureCancelPermitted(targetExchange, makerAsset, identifier);\n\n        require(\n            address(makerAsset) == orderAddresses[2],\n            \"Retrieved and passed assets do not match\"\n        );\n\n        getTrading().removeOpenMakeOrder(targetExchange, makerAsset);\n        IOasisDex(targetExchange).cancel(uint256(identifier));\n        uint256 timesMakerAssetUsedAsFee = getTrading().openMakeOrdersUsingAssetAsFee(makerAsset);\n        if (timesMakerAssetUsedAsFee == 0) {\n            getTrading().returnAssetToVault(makerAsset);\n        }\n        getAccounting().updateOwnedAssets();\n        getTrading().orderUpdateHook(\n            targetExchange,\n            bytes32(identifier),\n            Trading.UpdateType.cancel,\n            [address(0), address(0)],\n            [uint256(0), uint256(0), uint256(0)]\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOrder",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "id",
                "type": "uint256"
            },
            {
                "name": "makerAsset",
                "type": "address"
            }
        ],
        "func": "function getOrder(address targetExchange, uint256 id, address makerAsset)\n        public\n        view\n        override\n        returns (address, address, uint256, uint256)\n    {\n        uint256 sellQuantity;\n        address sellAsset;\n        uint256 buyQuantity;\n        address buyAsset;\n        (\n            sellQuantity,\n            sellAsset,\n            buyQuantity,\n            buyAsset\n        ) = IOasisDex(targetExchange).getOffer(id);\n        return (\n            sellAsset,\n            buyAsset,\n            sellQuantity,\n            buyQuantity\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "takeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "_targetExchange",
                "type": "address"
            },
            {
                "name": "_orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "_orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "_orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "_identifier",
                "type": "bytes32"
            },
            {
                "name": "_signature",
                "type": "bytes memory"
            }
        ],
        "func": "function takeOrder(\n        address _targetExchange,\n        address[8] memory _orderAddresses,\n        uint[8] memory _orderValues,\n        bytes[4] memory _orderData,\n        bytes32 _identifier,\n        bytes memory _signature\n    )\n        public\n        override\n        onlyManager\n        notShutDown\n    {\n        Hub hub = getHub();\n\n        require(\n            _orderValues[1] == _orderValues[6],\n            \"Taker asset amount must equal taker asset fill amount\"\n        );\n\n        address makerAsset = _orderAddresses[2];\n        address takerAsset = _orderAddresses[3];\n        uint makerAssetAmount = _orderValues[0];\n        uint takerAssetAmount = _orderValues[1];\n\n        uint actualReceiveAmount = dispatchSwap(\n            _targetExchange, takerAsset, takerAssetAmount, makerAsset, makerAssetAmount\n        );\n        require(\n            actualReceiveAmount >= makerAssetAmount,\n            \"Received less than expected from Uniswap exchange\"\n        );\n\n        updateStateTakeOrder(\n            _targetExchange,\n            makerAsset,\n            takerAsset,\n            takerAssetAmount,\n            actualReceiveAmount\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "makeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes memory"
            }
        ],
        "func": "function makeOrder(\n        address targetExchange,\n        address[8] memory orderAddresses,\n        uint[8] memory orderValues,\n        bytes[4] memory orderData,\n        bytes32 identifier,\n        bytes memory signature\n    )\n        public\n        override\n        onlyManager\n        notShutDown\n        orderAddressesMatchOrderData(orderAddresses, orderData)\n    {\n        ensureCanMakeOrder(orderAddresses[2]);\n\n        IZeroExV2.Order memory order = constructOrderStruct(orderAddresses, orderValues, orderData);\n        address makerAsset = getAssetAddress(orderData[0]);\n        address takerAsset = getAssetAddress(orderData[1]);\n\n        // Order parameter checks\n        getTrading().updateAndGetQuantityBeingTraded(makerAsset);\n        ensureNotInOpenMakeOrder(makerAsset);\n\n        approveAssetsMakeOrder(targetExchange, order);\n\n        IZeroExV2.OrderInfo memory orderInfo = IZeroExV2(targetExchange).getOrderInfo(order);\n        IZeroExV2(targetExchange).preSign(orderInfo.orderHash, address(this), signature);\n\n        require(\n            IZeroExV2(targetExchange).isValidSignature(\n                orderInfo.orderHash,\n                address(this),\n                signature\n            ),\n            \"INVALID_ORDER_SIGNATURE\"\n        );\n\n        updateStateMakeOrder(targetExchange, order);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "takeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes memory"
            }
        ],
        "func": "function takeOrder(\n        address targetExchange,\n        address[8] memory orderAddresses,\n        uint[8] memory orderValues,\n        bytes[4] memory orderData,\n        bytes32 identifier,\n        bytes memory signature\n    )\n        public\n        override\n        onlyManager\n        notShutDown\n        orderAddressesMatchOrderData(orderAddresses, orderData)\n    {\n        IZeroExV2.Order memory order = constructOrderStruct(orderAddresses, orderValues, orderData);\n\n        uint fillTakerQuantity = orderValues[6];\n\n        approveAssetsTakeOrder(targetExchange, order);\n\n        uint takerAssetFilledAmount = executeFill(targetExchange, order, fillTakerQuantity, signature);\n        require(\n            takerAssetFilledAmount == fillTakerQuantity,\n            \"Filled amount does not match desired fill amount\"\n        );\n\n        updateStateTakeOrder(targetExchange, order, fillTakerQuantity);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "cancelOrder",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes memory"
            }
        ],
        "func": "function cancelOrder(\n        address targetExchange,\n        address[8] memory orderAddresses,\n        uint[8] memory orderValues,\n        bytes[4] memory orderData,\n        bytes32 identifier,\n        bytes memory signature\n    )\n        public\n        override\n        orderAddressesMatchOrderData(orderAddresses, orderData)\n    {\n        IZeroExV2.Order memory order = getTrading().getZeroExV2OrderDetails(identifier);\n        ensureCancelPermitted(targetExchange, orderAddresses[2], identifier);\n\n        if (order.expirationTimeSeconds > block.timestamp) {\n            IZeroExV2(targetExchange).cancelOrder(order);\n        }\n\n        revokeApproveAssetsCancelOrder(targetExchange, order);\n\n        updateStateCancelOrder(targetExchange, order);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOrder",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "id",
                "type": "uint256"
            },
            {
                "name": "makerAsset",
                "type": "address"
            }
        ],
        "func": "function getOrder(address targetExchange, uint256 id, address makerAsset)\n        public\n        view\n        override\n        returns (address, address, uint256, uint256)\n    {\n        uint orderId;\n        uint orderIndex;\n        address takerAsset;\n        uint makerQuantity;\n        uint takerQuantity;\n        (orderId, , orderIndex) = Trading(msg.sender).getOpenOrderInfo(targetExchange, makerAsset);\n        (, takerAsset, makerQuantity, takerQuantity) = Trading(msg.sender).getOrderDetails(orderIndex);\n        uint takerAssetFilledAmount = IZeroExV2(targetExchange).filled(bytes32(orderId));\n        uint makerAssetFilledAmount = mul(takerAssetFilledAmount, makerQuantity) / takerQuantity;\n        if (IZeroExV2(targetExchange).cancelled(bytes32(orderId)) || sub(takerQuantity, takerAssetFilledAmount) == 0) {\n            return (makerAsset, takerAsset, 0, 0);\n        }\n        return (\n            makerAsset,\n            takerAsset,\n            sub(makerQuantity, makerAssetFilledAmount),\n            sub(takerQuantity, takerAssetFilledAmount)\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "makeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "_targetExchange",
                "type": "address"
            },
            {
                "name": "_orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "_orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "_orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "_identifier",
                "type": "bytes32"
            },
            {
                "name": "_signature",
                "type": "bytes memory"
            }
        ],
        "func": "function makeOrder(\n        address _targetExchange,\n        address[8] memory _orderAddresses,\n        uint[8] memory _orderValues,\n        bytes[4] memory _orderData,\n        bytes32 _identifier,\n        bytes memory _signature\n    )\n        public\n        override\n        onlyManager\n        notShutDown\n        orderAddressesMatchOrderData(_orderAddresses, _orderValues, _orderData)\n    {\n        ensureCanMakeOrder(_orderAddresses[2]);\n\n        IZeroExV3.Order memory order = constructOrderStruct(_orderAddresses, _orderValues, _orderData);\n        address makerAsset = getAssetAddress(_orderData[0]);\n        address takerAsset = getAssetAddress(_orderData[1]);\n\n        // Order parameter checks\n        getTrading().updateAndGetQuantityBeingTraded(makerAsset);\n        ensureNotInOpenMakeOrder(makerAsset);\n\n        approveAssetsMakeOrder(_targetExchange, order);\n\n        IZeroExV3.OrderInfo memory orderInfo = IZeroExV3(_targetExchange).getOrderInfo(order);\n        IZeroExV3(_targetExchange).preSign(orderInfo.orderHash);\n\n        require(\n            IZeroExV3(_targetExchange).isValidOrderSignature(order, _signature),\n            \"INVALID_ORDER_SIGNATURE\"\n        );\n\n        updateStateMakeOrder(_targetExchange, order);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "takeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "_targetExchange",
                "type": "address"
            },
            {
                "name": "_orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "_orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "_orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "_identifier",
                "type": "bytes32"
            },
            {
                "name": "_signature",
                "type": "bytes memory"
            }
        ],
        "func": "function takeOrder(\n        address _targetExchange,\n        address[8] memory _orderAddresses,\n        uint[8] memory _orderValues,\n        bytes[4] memory _orderData,\n        bytes32 _identifier,\n        bytes memory _signature\n    )\n        public\n        override\n        onlyManager\n        notShutDown\n        orderAddressesMatchOrderData(_orderAddresses, _orderValues, _orderData)\n    {\n        IZeroExV3.Order memory order = constructOrderStruct(_orderAddresses, _orderValues, _orderData);\n        require(IZeroExV3(_targetExchange).isValidOrderSignature(order, _signature), \"Order _signature is invalid\");\n\n        uint256 fillTakerQuantity = _orderValues[6];\n\n        approveAssetsTakeOrder(_targetExchange, order);\n\n        uint256 takerAssetFilledAmount = executeFill(_targetExchange, order, fillTakerQuantity, _signature);\n        require(\n            takerAssetFilledAmount == fillTakerQuantity,\n            \"Filled amount does not match desired fill amount\"\n        );\n\n        updateStateTakeOrder(_targetExchange, order, fillTakerQuantity);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "cancelOrder",
        "visibility": "public",
        "args": [
            {
                "name": "_targetExchange",
                "type": "address"
            },
            {
                "name": "_orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "_orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "_orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "_identifier",
                "type": "bytes32"
            },
            {
                "name": "_signature",
                "type": "bytes memory"
            }
        ],
        "func": "function cancelOrder(\n        address _targetExchange,\n        address[8] memory _orderAddresses,\n        uint[8] memory _orderValues,\n        bytes[4] memory _orderData,\n        bytes32 _identifier,\n        bytes memory _signature\n    )\n        public\n        override\n        orderAddressesMatchOrderData(_orderAddresses, _orderValues, _orderData)\n    {\n        IZeroExV3.Order memory order = getTrading().getZeroExV3OrderDetails(_identifier);\n        ensureCancelPermitted(_targetExchange, getAssetAddress(order.makerAssetData), _identifier);\n        if (order.expirationTimeSeconds > block.timestamp) {\n            IZeroExV3(_targetExchange).cancelOrder(order);\n        }\n\n        revokeApproveAssetsCancelOrder(_targetExchange, order);\n\n        updateStateCancelOrder(_targetExchange, order);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOrder",
        "visibility": "public",
        "args": [
            {
                "name": "_targetExchange",
                "type": "address"
            },
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_makerAsset",
                "type": "address"
            }
        ],
        "func": "function getOrder(address _targetExchange, uint256 _id, address _makerAsset)\n        public\n        view\n        override\n        returns (address, address, uint256, uint256)\n    {\n        uint orderId;\n        uint orderIndex;\n        address takerAsset;\n        uint makerQuantity;\n        uint takerQuantity;\n        (orderId, , orderIndex) = Trading(msg.sender).getOpenOrderInfo(_targetExchange, _makerAsset);\n        (, takerAsset, makerQuantity, takerQuantity) = Trading(msg.sender).getOrderDetails(orderIndex);\n        uint takerAssetFilledAmount = IZeroExV3(_targetExchange).filled(bytes32(orderId));\n        uint makerAssetFilledAmount = mul(takerAssetFilledAmount, makerQuantity) / takerQuantity;\n        if (IZeroExV3(_targetExchange).cancelled(bytes32(orderId)) || sub(takerQuantity, takerAssetFilledAmount) == 0) {\n            return (_makerAsset, takerAsset, 0, 0);\n        }\n        return (\n            _makerAsset,\n            takerAsset,\n            sub(makerQuantity, makerAssetFilledAmount),\n            sub(takerQuantity, takerAssetFilledAmount)\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isInstance",
        "visibility": "public",
        "args": [
            {
                "name": "_child",
                "type": "address"
            }
        ],
        "func": "function isInstance(address _child) public view returns (bool) {\n        return childExists[_child];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "beginSetup",
        "visibility": "public",
        "args": [
            {
                "name": "_name",
                "type": "string memory"
            },
            {
                "name": "_fees",
                "type": "address[] memory"
            },
            {
                "name": "_feeRates",
                "type": "uint[] memory"
            },
            {
                "name": "_feePeriods",
                "type": "uint[] memory"
            },
            {
                "name": "_exchanges",
                "type": "address[] memory"
            },
            {
                "name": "_adapters",
                "type": "address[] memory"
            },
            {
                "name": "_denominationAsset",
                "type": "address"
            },
            {
                "name": "_defaultInvestmentAssets",
                "type": "address[] memory"
            }
        ],
        "func": "function beginSetup(\n        string memory _name,\n        address[] memory _fees,\n        uint[] memory _feeRates,\n        uint[] memory _feePeriods,\n        address[] memory _exchanges,\n        address[] memory _adapters,\n        address _denominationAsset,\n        address[] memory _defaultInvestmentAssets\n    )\n        public\n    {\n        ensureComponentNotSet(managersToHubs[msg.sender]);\n        associatedRegistry.reserveFundName(\n            msg.sender,\n            _name\n        );\n        require(\n            associatedRegistry.assetIsRegistered(_denominationAsset),\n            \"Denomination asset must be registered\"\n        );\n\n        managersToHubs[msg.sender] = address(new Hub(msg.sender, _name));\n        managersToSettings[msg.sender] = Settings(\n            _name,\n            _exchanges,\n            _adapters,\n            _denominationAsset,\n            _defaultInvestmentAssets,\n            _fees,\n            _feeRates,\n            _feePeriods\n        );\n        managersToRoutes[msg.sender].registry = address(associatedRegistry);\n        managersToRoutes[msg.sender].version = address(version);\n        managersToRoutes[msg.sender].engine = engine();\n        managersToRoutes[msg.sender].mlnToken = mlnToken();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createAccountingFor",
        "visibility": "external",
        "args": [
            {
                "name": "_manager",
                "type": "address"
            }
        ],
        "func": "function createAccountingFor(address _manager) external amguPayable(false) payable { _createAccountingFor(_manager); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createAccounting",
        "visibility": "external",
        "args": [],
        "func": "function createAccounting() external amguPayable(false) payable { _createAccountingFor(msg.sender); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createFeeManagerFor",
        "visibility": "external",
        "args": [
            {
                "name": "_manager",
                "type": "address"
            }
        ],
        "func": "function createFeeManagerFor(address _manager) external amguPayable(false) payable { _createFeeManagerFor(_manager); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createFeeManager",
        "visibility": "external",
        "args": [],
        "func": "function createFeeManager() external amguPayable(false) payable { _createFeeManagerFor(msg.sender); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createParticipationFor",
        "visibility": "external",
        "args": [
            {
                "name": "_manager",
                "type": "address"
            }
        ],
        "func": "function createParticipationFor(address _manager) external amguPayable(false) payable { _createParticipationFor(_manager); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createParticipation",
        "visibility": "external",
        "args": [],
        "func": "function createParticipation() external amguPayable(false) payable { _createParticipationFor(msg.sender); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createPolicyManagerFor",
        "visibility": "external",
        "args": [
            {
                "name": "_manager",
                "type": "address"
            }
        ],
        "func": "function createPolicyManagerFor(address _manager) external amguPayable(false) payable { _createPolicyManagerFor(_manager); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createPolicyManager",
        "visibility": "external",
        "args": [],
        "func": "function createPolicyManager() external amguPayable(false) payable { _createPolicyManagerFor(msg.sender); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createSharesFor",
        "visibility": "external",
        "args": [
            {
                "name": "_manager",
                "type": "address"
            }
        ],
        "func": "function createSharesFor(address _manager) external amguPayable(false) payable { _createSharesFor(_manager); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createShares",
        "visibility": "external",
        "args": [],
        "func": "function createShares() external amguPayable(false) payable { _createSharesFor(msg.sender); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createTradingFor",
        "visibility": "external",
        "args": [
            {
                "name": "_manager",
                "type": "address"
            }
        ],
        "func": "function createTradingFor(address _manager) external amguPayable(false) payable { _createTradingFor(_manager); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createTrading",
        "visibility": "external",
        "args": [],
        "func": "function createTrading() external amguPayable(false) payable { _createTradingFor(msg.sender); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createVaultFor",
        "visibility": "external",
        "args": [
            {
                "name": "_manager",
                "type": "address"
            }
        ],
        "func": "function createVaultFor(address _manager) external amguPayable(false) payable { _createVaultFor(_manager); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createVault",
        "visibility": "external",
        "args": [],
        "func": "function createVault() external amguPayable(false) payable { _createVaultFor(msg.sender); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "completeSetupFor",
        "visibility": "external",
        "args": [
            {
                "name": "_manager",
                "type": "address"
            }
        ],
        "func": "function completeSetupFor(address _manager) external amguPayable(false) payable { _completeSetupFor(_manager); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "completeSetup",
        "visibility": "external",
        "args": [],
        "func": "function completeSetup() external amguPayable(false) payable { _completeSetupFor(msg.sender); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getFundById",
        "visibility": "external",
        "args": [
            {
                "name": "withId",
                "type": "uint"
            }
        ],
        "func": "function getFundById(uint withId) external view returns (address) { return funds[withId]; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getLastFundId",
        "visibility": "external",
        "args": [],
        "func": "function getLastFundId() external view returns (uint) { return funds.length - 1; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mlnToken",
        "visibility": "public",
        "args": [],
        "func": "function mlnToken() public view override returns (address) {\n        return address(associatedRegistry.mlnToken());\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "engine",
        "visibility": "public",
        "args": [],
        "func": "function engine() public view override returns (address) {\n        return address(associatedRegistry.engine());\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "priceSource",
        "visibility": "public",
        "args": [],
        "func": "function priceSource() public view override returns (address) {\n        return address(associatedRegistry.priceSource());\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registry",
        "visibility": "public",
        "args": [],
        "func": "function registry() public view override returns (address) { return address(associatedRegistry); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getExchangesInfo",
        "visibility": "public",
        "args": [
            {
                "name": "user",
                "type": "address"
            }
        ],
        "func": "function getExchangesInfo(address user) public view returns (address[] memory) {\n        return (managersToSettings[user].exchanges);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOwnedAssetsLength",
        "visibility": "external",
        "args": [],
        "func": "function getOwnedAssetsLength() external view returns (uint256) {\n        return ownedAssets.length;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOwnedAssets",
        "visibility": "external",
        "args": [],
        "func": "function getOwnedAssets() external view returns (address[] memory) {\n        return ownedAssets;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "assetHoldings",
        "visibility": "public",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function assetHoldings(address _asset) public returns (uint256) {\n        return add(\n            uint256(ERC20WithFields(_asset).balanceOf(routes.vault)),\n            ITrading(routes.trading).updateAndGetQuantityBeingTraded(_asset)\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getFundHoldings",
        "visibility": "external",
        "args": [],
        "func": "function getFundHoldings() external returns (uint[] memory, address[] memory) {\n        uint[] memory _quantities = new uint[](ownedAssets.length);\n        address[] memory _assets = new address[](ownedAssets.length);\n        for (uint i = 0; i < ownedAssets.length; i++) {\n            address ofAsset = ownedAssets[i];\n            // assetHoldings formatting: mul(exchangeHoldings, 10 ** assetDecimal)\n            uint quantityHeld = assetHoldings(ofAsset);\n            _assets[i] = ofAsset;\n            _quantities[i] = quantityHeld;\n        }\n        return (_quantities, _assets);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "calcAssetGAV",
        "visibility": "external",
        "args": [
            {
                "name": "_queryAsset",
                "type": "address"
            }
        ],
        "func": "function calcAssetGAV(address _queryAsset) external returns (uint) {\n        uint queryAssetQuantityHeld = assetHoldings(_queryAsset);\n        return IPriceSource(priceSource()).convertQuantity(\n            queryAssetQuantityHeld, _queryAsset, DENOMINATION_ASSET\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "calcGav",
        "visibility": "public",
        "args": [],
        "func": "function calcGav() public returns (uint gav) {\n        for (uint i = 0; i < ownedAssets.length; ++i) {\n            address asset = ownedAssets[i];\n            // assetHoldings formatting: mul(exchangeHoldings, 10 ** assetDecimals)\n            uint quantityHeld = assetHoldings(asset);\n            // Dont bother with the calculations if the balance of the asset is 0\n            if (quantityHeld == 0) {\n                continue;\n            }\n            // gav as sum of mul(assetHoldings, assetPrice) with formatting: mul(mul(exchangeHoldings, exchangePrice), 10 ** shareDecimals)\n            gav = add(\n                gav,\n                IPriceSource(priceSource()).convertQuantity(\n                    quantityHeld, asset, DENOMINATION_ASSET\n                )\n            );\n        }\n        return gav;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "calcNav",
        "visibility": "public",
        "args": [
            {
                "name": "gav",
                "type": "uint"
            },
            {
                "name": "unclaimedFeesInDenominationAsset",
                "type": "uint"
            }
        ],
        "func": "function calcNav(uint gav, uint unclaimedFeesInDenominationAsset) public pure returns (uint) {\n        return sub(gav, unclaimedFeesInDenominationAsset);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "valuePerShare",
        "visibility": "public",
        "args": [
            {
                "name": "totalValue",
                "type": "uint"
            },
            {
                "name": "numShares",
                "type": "uint"
            }
        ],
        "func": "function valuePerShare(uint totalValue, uint numShares) public pure returns (uint) {\n        require(numShares > 0, \"No shares to calculate value for\");\n        return (totalValue * 10 ** uint(SHARES_DECIMALS)) / numShares;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "performCalculations",
        "visibility": "public",
        "args": [],
        "func": "function performCalculations()\n        public\n        returns (\n            uint gav,\n            uint feesInDenominationAsset,  // unclaimed amount\n            uint feesInShares,             // unclaimed amount\n            uint nav,\n            uint sharePrice,\n            uint gavPerShareNetManagementFee\n        )\n    {\n        gav = calcGav();\n        uint totalSupply = Shares(routes.shares).totalSupply();\n        feesInShares = FeeManager(routes.feeManager).totalFeeAmount();\n        feesInDenominationAsset = (totalSupply == 0) ?\n            0 :\n            mul(feesInShares, gav) / add(totalSupply, feesInShares);\n        nav = calcNav(gav, feesInDenominationAsset);\n\n        // The total share supply including the value of feesInDenominationAsset, measured in shares of this fund\n        uint totalSupplyAccountingForFees = add(totalSupply, feesInShares);\n        sharePrice = (totalSupply > 0) ?\n            valuePerShare(gav, totalSupplyAccountingForFees) :\n            DEFAULT_SHARE_PRICE;\n        gavPerShareNetManagementFee = (totalSupply > 0) ?\n            valuePerShare(gav, add(totalSupply, FeeManager(routes.feeManager).managementFeeAmount())) :\n            DEFAULT_SHARE_PRICE;\n        return (gav, feesInDenominationAsset, feesInShares, nav, sharePrice, gavPerShareNetManagementFee);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "calcGavPerShareNetManagementFee",
        "visibility": "public",
        "args": [],
        "func": "function calcGavPerShareNetManagementFee()\n        public\n        returns (uint gavPerShareNetManagementFee)\n    {\n        (,,,,,gavPerShareNetManagementFee) = performCalculations();\n        return gavPerShareNetManagementFee;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getShareCostInAsset",
        "visibility": "external",
        "args": [
            {
                "name": "_numShares",
                "type": "uint"
            },
            {
                "name": "_altAsset",
                "type": "address"
            }
        ],
        "func": "function getShareCostInAsset(uint _numShares, address _altAsset)\n        external\n        returns (uint)\n    {\n        uint denominationAssetQuantity = mul(\n            _numShares,\n            calcGavPerShareNetManagementFee()\n        ) / 10 ** uint(SHARES_DECIMALS);\n        return IPriceSource(priceSource()).convertQuantity(\n            denominationAssetQuantity, DENOMINATION_ASSET, _altAsset\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "triggerRewardAllFees",
        "visibility": "external",
        "args": [],
        "func": "function triggerRewardAllFees()\n        external\n        amguPayable(false)\n        payable\n    {\n        updateOwnedAssets();\n        uint256 gav;\n        uint256 feesInDenomination;\n        uint256 feesInShares;\n        uint256 nav;\n        (gav, feesInDenomination, feesInShares, nav,,) = performCalculations();\n        uint256 totalSupply = Shares(routes.shares).totalSupply();\n        FeeManager(routes.feeManager).rewardAllFees();\n        atLastAllocation = Calculations({\n            gav: gav,\n            nav: nav,\n            allocatedFees: feesInDenomination,\n            totalSupply: totalSupply,\n            timestamp: block.timestamp\n        });\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateOwnedAssets",
        "visibility": "public",
        "args": [],
        "func": "function updateOwnedAssets() public {\n        for (uint i = 0; i < ownedAssets.length; i++) {\n            address asset = ownedAssets[i];\n            if (\n                assetHoldings(asset) == 0 &&\n                !(asset == address(DENOMINATION_ASSET)) &&\n                ITrading(routes.trading).getOpenMakeOrdersAgainstAsset(asset) == 0\n            ) {\n                _removeFromOwnedAssets(asset);\n            }\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addAssetToOwnedAssets",
        "visibility": "external",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function addAssetToOwnedAssets(address _asset) external auth {\n        _addAssetToOwnedAssets(_asset);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "removeFromOwnedAssets",
        "visibility": "external",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function removeFromOwnedAssets(address _asset) external auth {\n        _removeFromOwnedAssets(_asset);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "engine",
        "visibility": "public",
        "args": [],
        "func": "function engine() public view override(AmguConsumer, Spoke) returns (address) { return Spoke.engine(); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mlnToken",
        "visibility": "public",
        "args": [],
        "func": "function mlnToken() public view override(AmguConsumer, Spoke) returns (address) { return Spoke.mlnToken(); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "priceSource",
        "visibility": "public",
        "args": [],
        "func": "function priceSource() public view override(AmguConsumer, Spoke) returns (address) { return Spoke.priceSource(); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registry",
        "visibility": "public",
        "args": [],
        "func": "function registry() public view override(AmguConsumer, Spoke) returns (address) { return Spoke.registry(); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createInstance",
        "visibility": "external",
        "args": [
            {
                "name": "_hub",
                "type": "address"
            },
            {
                "name": "_denominationAsset",
                "type": "address"
            },
            {
                "name": "_nativeAsset",
                "type": "address"
            }
        ],
        "func": "function createInstance(address _hub, address _denominationAsset, address _nativeAsset) external returns (address) {\n        address accounting = address(new Accounting(_hub, _denominationAsset, _nativeAsset));\n        childExists[accounting] = true;\n        emit NewInstance(_hub, accounting, _denominationAsset, _nativeAsset);\n        return accounting;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalFeeAmount",
        "visibility": "external",
        "args": [],
        "func": "function totalFeeAmount() external returns (uint total) {\n        for (uint i = 0; i < fees.length; i++) {\n            total = add(total, fees[i].feeAmount());\n        }\n        return total;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rewardAllFees",
        "visibility": "public",
        "args": [],
        "func": "function rewardAllFees() public auth { _rewardAllFees(); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rewardManagementFee",
        "visibility": "public",
        "args": [],
        "func": "function rewardManagementFee() public {\n        if (fees.length >= 1) _rewardFee(fees[0]);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "managementFeeAmount",
        "visibility": "external",
        "args": [],
        "func": "function managementFeeAmount() external returns (uint) {\n        if (fees.length < 1) return 0;\n        return fees[0].feeAmount();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "performanceFeeAmount",
        "visibility": "external",
        "args": [],
        "func": "function performanceFeeAmount() external returns (uint) {\n        if (fees.length < 2) return 0;\n        return fees[1].feeAmount();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createInstance",
        "visibility": "public",
        "args": [
            {
                "name": "_hub",
                "type": "address"
            },
            {
                "name": "_denominationAsset",
                "type": "address"
            },
            {
                "name": "_fees",
                "type": "address[] memory"
            },
            {
                "name": "_feeRates",
                "type": "uint[] memory"
            },
            {
                "name": "_feePeriods",
                "type": "uint[] memory"
            },
            {
                "name": "_registry",
                "type": "address"
            }
        ],
        "func": "function createInstance(\n        address _hub,\n        address _denominationAsset,\n        address[] memory _fees,\n        uint[] memory _feeRates,\n        uint[] memory _feePeriods,\n        address _registry\n    ) public returns (address) {\n        address feeManager = address(\n            new FeeManager(_hub, _denominationAsset, _fees, _feeRates, _feePeriods, _registry)\n        );\n        childExists[feeManager] = true;\n        emit NewInstance(_hub, feeManager);\n        return feeManager;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "feeAmount",
        "visibility": "external",
        "args": [],
        "func": "function feeAmount() external view returns (uint feeInShares) {\n        Hub hub = FeeManager(msg.sender).hub();\n        Shares shares = Shares(hub.shares());\n        if (shares.totalSupply() == 0 || managementFeeRate[msg.sender] == 0) {\n            feeInShares = 0;\n        } else {\n            uint timePassed = sub(block.timestamp, lastPayoutTime[msg.sender]);\n            uint preDilutionFeeShares = mul(mul(shares.totalSupply(), managementFeeRate[msg.sender]) / DIVISOR, timePassed) / 365 days;\n            feeInShares =\n                mul(preDilutionFeeShares, shares.totalSupply()) /\n                sub(shares.totalSupply(), preDilutionFeeShares);\n        }\n        return feeInShares;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initializeForUser",
        "visibility": "external",
        "args": [
            {
                "name": "feeRate",
                "type": "uint"
            },
            {
                "name": "feePeriod",
                "type": "uint"
            },
            {
                "name": "denominationAsset",
                "type": "address"
            }
        ],
        "func": "function initializeForUser(uint feeRate, uint feePeriod, address denominationAsset) external {\n        require(lastPayoutTime[msg.sender] == 0);\n        managementFeeRate[msg.sender] = feeRate;\n        lastPayoutTime[msg.sender] = block.timestamp;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateState",
        "visibility": "external",
        "args": [],
        "func": "function updateState() external {\n        lastPayoutTime[msg.sender] = block.timestamp;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "identifier",
        "visibility": "external",
        "args": [],
        "func": "function identifier() external pure returns (uint) {\n        return 0;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initializeForUser",
        "visibility": "external",
        "args": [
            {
                "name": "feeRate",
                "type": "uint"
            },
            {
                "name": "feePeriod",
                "type": "uint"
            },
            {
                "name": "denominationAsset",
                "type": "address"
            }
        ],
        "func": "function initializeForUser(uint feeRate, uint feePeriod, address denominationAsset) external {\n        require(lastPayoutTime[msg.sender] == 0, \"Already initialized\");\n        performanceFeeRate[msg.sender] = feeRate;\n        performanceFeePeriod[msg.sender] = feePeriod;\n        highWaterMark[msg.sender] = 10 ** uint(ERC20WithFields(denominationAsset).decimals());\n        lastPayoutTime[msg.sender] = block.timestamp;\n        initializeTime[msg.sender] = block.timestamp;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "feeAmount",
        "visibility": "external",
        "args": [],
        "func": "function feeAmount() external returns (uint feeInShares) {\n        Hub hub = FeeManager(msg.sender).hub();\n        Accounting accounting = Accounting(hub.accounting());\n        Shares shares = Shares(hub.shares());\n        uint gav = accounting.calcGav();\n        uint gavPerShare = shares.totalSupply() > 0 ?\n            accounting.valuePerShare(gav, shares.totalSupply())\n            : accounting.DEFAULT_SHARE_PRICE();\n        if (\n            gavPerShare > highWaterMark[msg.sender] &&\n            shares.totalSupply() != 0 &&\n            gav != 0\n        ) {\n            uint sharePriceGain = sub(gavPerShare, highWaterMark[msg.sender]);\n            uint totalGain = mul(sharePriceGain, shares.totalSupply()) / DIVISOR;\n            uint feeInAsset = mul(totalGain, performanceFeeRate[msg.sender]) / DIVISOR;\n            uint preDilutionFee = mul(shares.totalSupply(), feeInAsset) / gav;\n            feeInShares =\n                mul(preDilutionFee, shares.totalSupply()) /\n                sub(shares.totalSupply(), preDilutionFee);\n        }\n        else {\n            feeInShares = 0;\n        }\n        return feeInShares;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "canUpdate",
        "visibility": "public",
        "args": [
            {
                "name": "_who",
                "type": "address"
            }
        ],
        "func": "function canUpdate(address _who) public view returns (bool) {\n        uint timeSinceInit = sub(\n            block.timestamp,\n            initializeTime[_who]\n        );\n        uint secondsSinceLastPeriod = timeSinceInit % performanceFeePeriod[_who];\n        uint lastPeriodEnd = sub(block.timestamp, secondsSinceLastPeriod);\n        return (\n            secondsSinceLastPeriod <= REDEEM_WINDOW &&\n            lastPayoutTime[_who] < lastPeriodEnd\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateState",
        "visibility": "external",
        "args": [],
        "func": "function updateState() external {\n        require(lastPayoutTime[msg.sender] != 0, \"Not initialized\");\n        require(\n            canUpdate(msg.sender),\n            \"Not within a update window or already updated this period\"\n        );\n        Hub hub = FeeManager(msg.sender).hub();\n        Accounting accounting = Accounting(hub.accounting());\n        Shares shares = Shares(hub.shares());\n        uint gav = accounting.calcGav();\n        uint currentGavPerShare = accounting.valuePerShare(gav, shares.totalSupply());\n        require(\n            currentGavPerShare > highWaterMark[msg.sender],\n            \"Current share price does not pass high water mark\"\n        );\n        lastPayoutTime[msg.sender] = block.timestamp;\n        highWaterMark[msg.sender] = currentGavPerShare;\n        emit HighWaterMarkUpdate(msg.sender, currentGavPerShare);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "identifier",
        "visibility": "external",
        "args": [],
        "func": "function identifier() external pure returns (uint) {\n        return 1;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "shutDownFund",
        "visibility": "external",
        "args": [],
        "func": "function shutDownFund() external {\n        require(msg.sender == routes.version);\n        isShutDown = true;\n        emit FundShutDown();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initializeAndSetPermissions",
        "visibility": "external",
        "args": [
            {
                "name": "_spokes",
                "type": "address[11] calldata"
            }
        ],
        "func": "function initializeAndSetPermissions(address[11] calldata _spokes) external onlyCreator {\n        require(!fundInitialized, \"Fund is already initialized\");\n        for (uint i = 0; i < _spokes.length; i++) {\n            isSpoke[_spokes[i]] = true;\n        }\n        routes.accounting = _spokes[0];\n        routes.feeManager = _spokes[1];\n        routes.participation = _spokes[2];\n        routes.policyManager = _spokes[3];\n        routes.shares = _spokes[4];\n        routes.trading = _spokes[5];\n        routes.vault = _spokes[6];\n        routes.registry = _spokes[7];\n        routes.version = _spokes[8];\n        routes.engine = _spokes[9];\n        routes.mlnToken = _spokes[10];\n\n        Spoke(routes.accounting).initialize(_spokes);\n        Spoke(routes.feeManager).initialize(_spokes);\n        Spoke(routes.participation).initialize(_spokes);\n        Spoke(routes.policyManager).initialize(_spokes);\n        Spoke(routes.shares).initialize(_spokes);\n        Spoke(routes.trading).initialize(_spokes);\n        Spoke(routes.vault).initialize(_spokes);\n\n        permit(routes.participation, routes.vault, bytes4(keccak256('withdraw(address,uint256)')));\n        permit(routes.trading, routes.vault, bytes4(keccak256('withdraw(address,uint256)')));\n        permit(routes.participation, routes.shares, bytes4(keccak256('createFor(address,uint256)')));\n        permit(routes.participation, routes.shares, bytes4(keccak256('destroyFor(address,uint256)')));\n        permit(routes.feeManager, routes.shares, bytes4(keccak256('createFor(address,uint256)')));\n        permit(routes.participation, routes.accounting, bytes4(keccak256('addAssetToOwnedAssets(address)')));\n        permit(routes.trading, routes.accounting, bytes4(keccak256('addAssetToOwnedAssets(address)')));\n        permit(routes.trading, routes.accounting, bytes4(keccak256('removeFromOwnedAssets(address)')));\n        permit(routes.accounting, routes.feeManager, bytes4(keccak256('rewardAllFees()')));\n        permit(manager, routes.policyManager, bytes4(keccak256('register(bytes4,address)')));\n        permit(manager, routes.policyManager, bytes4(keccak256('batchRegister(bytes4[],address[])')));\n        permit(manager, routes.participation, bytes4(keccak256('enableInvestment(address[])')));\n        permit(manager, routes.participation, bytes4(keccak256('disableInvestment(address[])')));\n        permit(manager, routes.trading, bytes4(keccak256('addExchange(address,address)')));\n        fundInitialized = true;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "vault",
        "visibility": "external",
        "args": [],
        "func": "function vault() external view returns (address) { return routes.vault; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "accounting",
        "visibility": "external",
        "args": [],
        "func": "function accounting() external view returns (address) { return routes.accounting; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "priceSource",
        "visibility": "external",
        "args": [],
        "func": "function priceSource() external view returns (address) { return Registry(routes.registry).priceSource(); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "participation",
        "visibility": "external",
        "args": [],
        "func": "function participation() external view returns (address) { return routes.participation; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "trading",
        "visibility": "external",
        "args": [],
        "func": "function trading() external view returns (address) { return routes.trading; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "shares",
        "visibility": "external",
        "args": [],
        "func": "function shares() external view returns (address) { return routes.shares; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registry",
        "visibility": "external",
        "args": [],
        "func": "function registry() external view returns (address) { return routes.registry; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "version",
        "visibility": "external",
        "args": [],
        "func": "function version() external view returns (address) { return routes.version; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "policyManager",
        "visibility": "external",
        "args": [],
        "func": "function policyManager() external view returns (address) { return routes.policyManager; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "external",
        "args": [
            {
                "name": "_spokes",
                "type": "address[11] calldata"
            }
        ],
        "func": "function initialize(address[11] calldata _spokes) external auth {\n        require(msg.sender == address(hub));\n        require(!initialized, \"Already initialized\");\n        routes = Hub.Routes(\n            _spokes[0],\n            _spokes[1],\n            _spokes[2],\n            _spokes[3],\n            _spokes[4],\n            _spokes[5],\n            _spokes[6],\n            _spokes[7],\n            _spokes[8],\n            _spokes[9],\n            _spokes[10]\n        );\n        initialized = true;\n        setOwner(address(0));\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "engine",
        "visibility": "public",
        "args": [],
        "func": "function engine() public view virtual returns (address) { return routes.engine; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mlnToken",
        "visibility": "public",
        "args": [],
        "func": "function mlnToken() public view virtual returns (address) { return routes.mlnToken; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "priceSource",
        "visibility": "public",
        "args": [],
        "func": "function priceSource() public view virtual returns (address) { return hub.priceSource(); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "version",
        "visibility": "public",
        "args": [],
        "func": "function version() public view virtual returns (address) { return routes.version; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registry",
        "visibility": "public",
        "args": [],
        "func": "function registry() public view virtual returns (address) { return routes.registry; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "enableInvestment",
        "visibility": "external",
        "args": [
            {
                "name": "_assets",
                "type": "address[] calldata"
            }
        ],
        "func": "function enableInvestment(address[] calldata _assets) external auth {\n        _enableInvestment(_assets);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "disableInvestment",
        "visibility": "external",
        "args": [
            {
                "name": "_assets",
                "type": "address[] calldata"
            }
        ],
        "func": "function disableInvestment(address[] calldata _assets) external auth {\n        for (uint i = 0; i < _assets.length; i++) {\n            investAllowed[_assets[i]] = false;\n        }\n        emit DisableInvestment(_assets);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasRequest",
        "visibility": "public",
        "args": [
            {
                "name": "_who",
                "type": "address"
            }
        ],
        "func": "function hasRequest(address _who) public view returns (bool) {\n        return requests[_who].timestamp > 0;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasExpiredRequest",
        "visibility": "public",
        "args": [
            {
                "name": "_who",
                "type": "address"
            }
        ],
        "func": "function hasExpiredRequest(address _who) public view returns (bool) {\n        return block.timestamp > add(requests[_who].timestamp, REQUEST_LIFESPAN);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasValidRequest",
        "visibility": "public",
        "args": [
            {
                "name": "_who",
                "type": "address"
            }
        ],
        "func": "function hasValidRequest(address _who) public view returns (bool) {\n        IPriceSource priceSource = IPriceSource(priceSource());\n        bool delayRespectedOrNoShares = requests[_who].timestamp < priceSource.getLastUpdate() ||\n            Shares(routes.shares).totalSupply() == 0;\n\n        return hasRequest(_who) &&\n            delayRespectedOrNoShares &&\n            !hasExpiredRequest(_who) &&\n            requests[_who].investmentAmount > 0 &&\n            requests[_who].requestedShares > 0;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "requestInvestment",
        "visibility": "external",
        "args": [
            {
                "name": "requestedShares",
                "type": "uint"
            },
            {
                "name": "investmentAmount",
                "type": "uint"
            },
            {
                "name": "investmentAsset",
                "type": "address"
            }
        ],
        "func": "function requestInvestment(\n        uint requestedShares,\n        uint investmentAmount,\n        address investmentAsset\n    )\n        external\n        notShutDown\n        payable\n        amguPayable(true)\n        onlyInitialized\n    {\n        PolicyManager(routes.policyManager).preValidate(\n            msg.sig,\n            [msg.sender, address(0), address(0), investmentAsset, address(0)],\n            [uint(0), uint(0), uint(0)],\n            bytes32(0)\n        );\n        require(\n            investAllowed[investmentAsset],\n            \"Investment not allowed in this asset\"\n        );\n        safeTransferFrom(\n            investmentAsset, msg.sender, address(this), investmentAmount\n        );\n        require(\n            requests[msg.sender].timestamp == 0,\n            \"Only one request can exist at a time\"\n        );\n        requests[msg.sender] = Request({\n            investmentAsset: investmentAsset,\n            investmentAmount: investmentAmount,\n            requestedShares: requestedShares,\n            timestamp: block.timestamp\n        });\n        PolicyManager(routes.policyManager).postValidate(\n            msg.sig,\n            [msg.sender, address(0), address(0), investmentAsset, address(0)],\n            [uint(0), uint(0), uint(0)],\n            bytes32(0)\n        );\n\n        emit InvestmentRequest(\n            msg.sender,\n            investmentAsset,\n            requestedShares,\n            investmentAmount\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "cancelRequest",
        "visibility": "external",
        "args": [],
        "func": "function cancelRequest() external payable amguPayable(false) {\n        _cancelRequestFor(msg.sender);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "cancelRequestFor",
        "visibility": "external",
        "args": [
            {
                "name": "requestOwner",
                "type": "address"
            }
        ],
        "func": "function cancelRequestFor(address requestOwner)\n        external\n        payable\n        amguPayable(false)\n    {\n        _cancelRequestFor(requestOwner);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeRequestFor",
        "visibility": "external",
        "args": [
            {
                "name": "requestOwner",
                "type": "address"
            }
        ],
        "func": "function executeRequestFor(address requestOwner)\n        external\n        notShutDown\n        amguPayable(false)\n        payable\n    {\n        Request memory request = requests[requestOwner];\n        require(\n            hasValidRequest(requestOwner),\n            \"No valid request for this address\"\n        );\n\n        FeeManager(routes.feeManager).rewardManagementFee();\n\n        uint totalShareCostInInvestmentAsset = Accounting(routes.accounting)\n            .getShareCostInAsset(\n                request.requestedShares,\n                request.investmentAsset\n            );\n\n        require(\n            totalShareCostInInvestmentAsset <= request.investmentAmount,\n            \"Invested amount too low\"\n        );\n        // send necessary amount of investmentAsset to vault\n        safeTransfer(\n            request.investmentAsset,\n            routes.vault,\n            totalShareCostInInvestmentAsset\n        );\n\n        uint investmentAssetChange = sub(\n            request.investmentAmount,\n            totalShareCostInInvestmentAsset\n        );\n\n        // return investmentAsset change to request owner\n        if (investmentAssetChange > 0) {\n            safeTransfer(\n                request.investmentAsset,\n                requestOwner,\n                investmentAssetChange\n            );\n        }\n\n        msg.sender.transfer(Registry(routes.registry).incentive());\n\n        Shares(routes.shares).createFor(requestOwner, request.requestedShares);\n        Accounting(routes.accounting).addAssetToOwnedAssets(request.investmentAsset);\n\n        if (!hasInvested[requestOwner]) {\n            hasInvested[requestOwner] = true;\n            historicalInvestors.push(requestOwner);\n        }\n\n        emit RequestExecution(\n            requestOwner,\n            msg.sender,\n            request.investmentAsset,\n            request.investmentAmount,\n            request.requestedShares\n        );\n        delete requests[requestOwner];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOwedPerformanceFees",
        "visibility": "public",
        "args": [
            {
                "name": "shareQuantity",
                "type": "uint"
            }
        ],
        "func": "function getOwedPerformanceFees(uint shareQuantity)\n        public\n        returns (uint remainingShareQuantity)\n    {\n        Shares shares = Shares(routes.shares);\n\n        uint totalPerformanceFee = FeeManager(routes.feeManager).performanceFeeAmount();\n        // The denominator is augmented because performanceFeeAmount() accounts for inflation\n        // Since shares are directly transferred, we don't need to account for inflation in this case\n        uint performanceFeePortion = mul(\n            totalPerformanceFee,\n            shareQuantity\n        ) / add(shares.totalSupply(), totalPerformanceFee);\n        return performanceFeePortion;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "redeem",
        "visibility": "external",
        "args": [],
        "func": "function redeem() external {\n        uint ownedShares = Shares(routes.shares).balanceOf(msg.sender);\n        redeemQuantity(ownedShares);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "redeemQuantity",
        "visibility": "public",
        "args": [
            {
                "name": "shareQuantity",
                "type": "uint"
            }
        ],
        "func": "function redeemQuantity(uint shareQuantity) public {\n        address[] memory assetList;\n        assetList = Accounting(routes.accounting).getOwnedAssets();\n        redeemWithConstraints(shareQuantity, assetList);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "redeemWithConstraints",
        "visibility": "public",
        "args": [
            {
                "name": "shareQuantity",
                "type": "uint"
            },
            {
                "name": "requestedAssets",
                "type": "address[] memory"
            }
        ],
        "func": "function redeemWithConstraints(uint shareQuantity, address[] memory requestedAssets) public {\n        Shares shares = Shares(routes.shares);\n        require(\n            shares.balanceOf(msg.sender) >= shareQuantity &&\n            shares.balanceOf(msg.sender) > 0,\n            \"Sender does not have enough shares to fulfill request\"\n        );\n\n        uint owedPerformanceFees = 0;\n        if (\n            IPriceSource(priceSource()).hasValidPrices(requestedAssets) &&\n            msg.sender != hub.manager()\n        ) {\n            FeeManager(routes.feeManager).rewardManagementFee();\n            owedPerformanceFees = getOwedPerformanceFees(shareQuantity);\n            shares.destroyFor(msg.sender, owedPerformanceFees);\n            shares.createFor(hub.manager(), owedPerformanceFees);\n        }\n        uint remainingShareQuantity = sub(shareQuantity, owedPerformanceFees);\n\n        address ofAsset;\n        uint[] memory ownershipQuantities = new uint[](requestedAssets.length);\n        address[] memory redeemedAssets = new address[](requestedAssets.length);\n        // Check whether enough assets held by fund\n        Accounting accounting = Accounting(routes.accounting);\n        for (uint i = 0; i < requestedAssets.length; ++i) {\n            ofAsset = requestedAssets[i];\n            require(\n                accounting.isInAssetList(ofAsset),\n                \"Requested asset not in asset list\"\n            );\n            for (uint j = 0; j < redeemedAssets.length; j++) {\n                require(\n                    ofAsset != redeemedAssets[j],\n                    \"Asset can only be redeemed once\"\n                );\n            }\n            redeemedAssets[i] = ofAsset;\n            uint quantityHeld = accounting.assetHoldings(ofAsset);\n            if (quantityHeld == 0) continue;\n\n            // participant's ownership percentage of asset holdings\n            ownershipQuantities[i] = mul(quantityHeld, remainingShareQuantity) / shares.totalSupply();\n        }\n\n        shares.destroyFor(msg.sender, remainingShareQuantity);\n\n        // Transfer owned assets\n        for (uint k = 0; k < requestedAssets.length; ++k) {\n            ofAsset = requestedAssets[k];\n            if (ownershipQuantities[k] == 0) {\n                continue;\n            } else {\n                Vault(routes.vault).withdraw(ofAsset, ownershipQuantities[k]);\n                safeTransfer(ofAsset, msg.sender, ownershipQuantities[k]);\n            }\n        }\n        emit Redemption(\n            msg.sender,\n            requestedAssets,\n            ownershipQuantities,\n            remainingShareQuantity\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getHistoricalInvestors",
        "visibility": "external",
        "args": [],
        "func": "function getHistoricalInvestors() external view returns (address[] memory) {\n        return historicalInvestors;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "engine",
        "visibility": "public",
        "args": [],
        "func": "function engine() public view override(AmguConsumer, Spoke) returns (address) { return Spoke.engine(); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mlnToken",
        "visibility": "public",
        "args": [],
        "func": "function mlnToken() public view override(AmguConsumer, Spoke) returns (address) { return Spoke.mlnToken(); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "priceSource",
        "visibility": "public",
        "args": [],
        "func": "function priceSource() public view override(AmguConsumer, Spoke) returns (address) { return Spoke.priceSource(); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registry",
        "visibility": "public",
        "args": [],
        "func": "function registry() public view override(AmguConsumer, Spoke) returns (address) { return Spoke.registry(); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createInstance",
        "visibility": "external",
        "args": [
            {
                "name": "_hub",
                "type": "address"
            },
            {
                "name": "_defaultAssets",
                "type": "address[] calldata"
            },
            {
                "name": "_registry",
                "type": "address"
            }
        ],
        "func": "function createInstance(address _hub, address[] calldata _defaultAssets, address _registry)\n        external\n        returns (address)\n    {\n        address participation = address(\n            new Participation(_hub, _defaultAssets, _registry)\n        );\n        childExists[participation] = true;\n        emit NewInstance(_hub, participation, _defaultAssets, _registry);\n        return participation;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isMember",
        "visibility": "public",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function isMember(address _asset) public view returns (bool) {\n        return list[_asset];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getMemberCount",
        "visibility": "external",
        "args": [],
        "func": "function getMemberCount() external view returns (uint) {\n        return mirror.length;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getMembers",
        "visibility": "external",
        "args": [],
        "func": "function getMembers() external view returns (address[] memory) { return mirror; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addToWhitelist",
        "visibility": "public",
        "args": [
            {
                "name": "_who",
                "type": "address"
            }
        ],
        "func": "function addToWhitelist(address _who) public auth {\n        whitelisted[_who] = true;\n        emit ListAddition(_who);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "removeFromWhitelist",
        "visibility": "public",
        "args": [
            {
                "name": "_who",
                "type": "address"
            }
        ],
        "func": "function removeFromWhitelist(address _who) public auth {\n        whitelisted[_who] = false;\n        emit ListRemoval(_who);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "batchAddToWhitelist",
        "visibility": "public",
        "args": [
            {
                "name": "_members",
                "type": "address[] memory"
            }
        ],
        "func": "function batchAddToWhitelist(address[] memory _members) public auth {\n        for (uint i = 0; i < _members.length; i++) {\n            addToWhitelist(_members[i]);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "batchRemoveFromWhitelist",
        "visibility": "public",
        "args": [
            {
                "name": "_members",
                "type": "address[] memory"
            }
        ],
        "func": "function batchRemoveFromWhitelist(address[] memory _members) public auth {\n        for (uint i = 0; i < _members.length; i++) {\n            removeFromWhitelist(_members[i]);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rule",
        "visibility": "external",
        "args": [
            {
                "name": "sig",
                "type": "bytes4"
            },
            {
                "name": "addresses",
                "type": "address[5] calldata"
            },
            {
                "name": "values",
                "type": "uint[3] calldata"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            }
        ],
        "func": "function rule(bytes4 sig, address[5] calldata addresses, uint[3] calldata values, bytes32 identifier) external returns (bool) {\n        return whitelisted[addresses[0]];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "position",
        "visibility": "external",
        "args": [],
        "func": "function position() external pure returns (Applied) { return Applied.pre; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "identifier",
        "visibility": "external",
        "args": [],
        "func": "function identifier() external pure returns (string memory) { return 'UserWhitelist'; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "register",
        "visibility": "public",
        "args": [
            {
                "name": "sig",
                "type": "bytes4"
            },
            {
                "name": "_policy",
                "type": "address"
            }
        ],
        "func": "function register(bytes4 sig, address _policy) public auth {\n        IPolicy.Applied position = IPolicy(_policy).position();\n        if (position == IPolicy.Applied.pre) {\n            policies[sig].pre.push(IPolicy(_policy));\n        } else if (position == IPolicy.Applied.post) {\n            policies[sig].post.push(IPolicy(_policy));\n        } else {\n            revert(\"Only pre and post allowed\");\n        }\n        emit Registration(sig, position, _policy);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "batchRegister",
        "visibility": "public",
        "args": [
            {
                "name": "sig",
                "type": "bytes4[] memory"
            },
            {
                "name": "_policies",
                "type": "address[] memory"
            }
        ],
        "func": "function batchRegister(bytes4[] memory sig, address[] memory _policies) public auth {\n        require(sig.length == _policies.length, \"Arrays lengths unequal\");\n        for (uint i = 0; i < sig.length; i++) {\n            register(sig[i], _policies[i]);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPoliciesBySig",
        "visibility": "public",
        "args": [
            {
                "name": "sig",
                "type": "bytes4"
            }
        ],
        "func": "function getPoliciesBySig(bytes4 sig) public view returns (address[] memory, address[] memory) {\n        return (PoliciesToAddresses(policies[sig].pre), PoliciesToAddresses(policies[sig].post));\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "preValidate",
        "visibility": "public",
        "args": [
            {
                "name": "sig",
                "type": "bytes4"
            },
            {
                "name": "addresses",
                "type": "address[5] memory"
            },
            {
                "name": "values",
                "type": "uint[3] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            }
        ],
        "func": "function preValidate(bytes4 sig, address[5] memory addresses, uint[3] memory values, bytes32 identifier) public {\n        validate(policies[sig].pre, sig, addresses, values, identifier);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "postValidate",
        "visibility": "public",
        "args": [
            {
                "name": "sig",
                "type": "bytes4"
            },
            {
                "name": "addresses",
                "type": "address[5] memory"
            },
            {
                "name": "values",
                "type": "uint[3] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            }
        ],
        "func": "function postValidate(bytes4 sig, address[5] memory addresses, uint[3] memory values, bytes32 identifier) public {\n        validate(policies[sig].post, sig, addresses, values, identifier);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createInstance",
        "visibility": "external",
        "args": [
            {
                "name": "_hub",
                "type": "address"
            }
        ],
        "func": "function createInstance(address _hub) external returns (address) {\n        address policyManager = address(new PolicyManager(_hub));\n        childExists[policyManager] = true;\n        emit NewInstance(_hub, policyManager);\n        return policyManager;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addToBlacklist",
        "visibility": "external",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function addToBlacklist(address _asset) external auth {\n        require(!isMember(_asset), \"Asset already in blacklist\");\n        list[_asset] = true;\n        mirror.push(_asset);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rule",
        "visibility": "external",
        "args": [
            {
                "name": "sig",
                "type": "bytes4"
            },
            {
                "name": "addresses",
                "type": "address[5] calldata"
            },
            {
                "name": "values",
                "type": "uint[3] calldata"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            }
        ],
        "func": "function rule(bytes4 sig, address[5] calldata addresses, uint[3] calldata values, bytes32 identifier) external returns (bool) {\n        address incomingToken = (sig == TAKE_ORDER) ? addresses[2] : addresses[3];\n        return !isMember(incomingToken);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "position",
        "visibility": "external",
        "args": [],
        "func": "function position() external pure returns (Applied) { return Applied.pre; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "identifier",
        "visibility": "external",
        "args": [],
        "func": "function identifier() external pure returns (string memory) { return 'AssetBlacklist'; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "removeFromWhitelist",
        "visibility": "external",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function removeFromWhitelist(address _asset) external auth {\n        require(isMember(_asset), \"Asset not in whitelist\");\n        delete list[_asset];\n        uint i = getAssetIndex(_asset);\n        for (i; i < mirror.length-1; i++){\n            mirror[i] = mirror[i+1];\n        }\n        mirror.pop();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAssetIndex",
        "visibility": "public",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function getAssetIndex(address _asset) public view returns (uint) {\n        for (uint i = 0; i < mirror.length; i++) {\n            if (mirror[i] == _asset) { return i; }\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rule",
        "visibility": "external",
        "args": [
            {
                "name": "sig",
                "type": "bytes4"
            },
            {
                "name": "addresses",
                "type": "address[5] calldata"
            },
            {
                "name": "values",
                "type": "uint[3] calldata"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            }
        ],
        "func": "function rule(bytes4 sig, address[5] calldata addresses, uint[3] calldata values, bytes32 identifier) external returns (bool) {\n        address incomingToken = (sig == TAKE_ORDER) ? addresses[2] : addresses[3];\n        return isMember(incomingToken);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "position",
        "visibility": "external",
        "args": [],
        "func": "function position() external pure returns (Applied) { return Applied.pre; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "identifier",
        "visibility": "external",
        "args": [],
        "func": "function identifier() external pure returns (string memory) { return 'AssetWhitelist'; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rule",
        "visibility": "external",
        "args": [
            {
                "name": "sig",
                "type": "bytes4"
            },
            {
                "name": "addresses",
                "type": "address[5] calldata"
            },
            {
                "name": "values",
                "type": "uint[3] calldata"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            }
        ],
        "func": "function rule(bytes4 sig, address[5] calldata addresses, uint[3] calldata values, bytes32 identifier)\n        external\n        returns (bool)\n    {\n        Accounting accounting = Accounting(Hub(Trading(msg.sender).hub()).accounting());\n        address denominationAsset = accounting.DENOMINATION_ASSET();\n        // Max concentration is only checked for non-quote assets\n        address takerToken = (sig == TAKE_ORDER) ? addresses[2] : addresses[3];\n        if (denominationAsset == takerToken) { return true; }\n\n        uint concentration;\n        uint totalGav = accounting.calcGav();\n        if (sig == MAKE_ORDER) {\n            IPriceSource priceSource = IPriceSource(Hub(Trading(msg.sender).hub()).priceSource());\n            address makerToken = addresses[2];\n            uint makerQuantiyBeingTraded = values[0];\n            uint takerQuantityBeingTraded = values[1];\n\n            uint takerTokenGavBeingTraded = priceSource.convertQuantity(\n                takerQuantityBeingTraded, takerToken, denominationAsset\n            );\n\n            uint makerTokenGavBeingTraded;\n            if (makerToken == denominationAsset) {\n                makerTokenGavBeingTraded = makerQuantiyBeingTraded;\n            }\n            else {\n                makerTokenGavBeingTraded = priceSource.convertQuantity(\n                    makerQuantiyBeingTraded, makerToken, denominationAsset\n                );\n            }\n            concentration = _calcConcentration(\n                add(accounting.calcAssetGAV(takerToken), takerTokenGavBeingTraded),\n                add(takerTokenGavBeingTraded, sub(totalGav, makerTokenGavBeingTraded))\n            );\n        }\n        else {\n            concentration = _calcConcentration(\n                accounting.calcAssetGAV(takerToken),\n                totalGav\n            );\n        }\n        return concentration <= maxConcentration;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "position",
        "visibility": "external",
        "args": [],
        "func": "function position() external pure returns (Applied) { return Applied.post; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "identifier",
        "visibility": "external",
        "args": [],
        "func": "function identifier() external pure returns (string memory) { return 'MaxConcentration'; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rule",
        "visibility": "external",
        "args": [
            {
                "name": "sig",
                "type": "bytes4"
            },
            {
                "name": "addresses",
                "type": "address[5] calldata"
            },
            {
                "name": "values",
                "type": "uint[3] calldata"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            }
        ],
        "func": "function rule(bytes4 sig, address[5] calldata addresses, uint[3] calldata values, bytes32 identifier)\n        external\n        returns (bool)\n    {\n        Accounting accounting = Accounting(Hub(Trading(msg.sender).hub()).accounting());\n        address denominationAsset = accounting.DENOMINATION_ASSET();\n        // Always allow a trade INTO the quote asset\n        address incomingToken = (sig == TAKE_ORDER) ? addresses[2] : addresses[3];\n        if (denominationAsset == incomingToken) { return true; }\n        return accounting.getOwnedAssetsLength() <= maxPositions;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "position",
        "visibility": "external",
        "args": [],
        "func": "function position() external pure returns (Applied) { return Applied.post; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "identifier",
        "visibility": "external",
        "args": [],
        "func": "function identifier() external pure returns (string memory) { return 'MaxPositions'; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "takeGenericOrder",
        "visibility": "public",
        "args": [
            {
                "name": "_makerAsset",
                "type": "address"
            },
            {
                "name": "_takerAsset",
                "type": "address"
            },
            {
                "name": "_values",
                "type": "uint256[3] memory"
            }
        ],
        "func": "function takeGenericOrder(\n        address _makerAsset,\n        address _takerAsset,\n        uint256[3] memory _values\n    ) public view returns (bool) {\n        uint256 fillTakerQuantity = _values[2];\n        uint256 fillMakerQuantity = mul(fillTakerQuantity, _values[0]) / _values[1];\n        return checkPriceToleranceTakeOrder(\n            _makerAsset, _takerAsset, fillMakerQuantity, fillTakerQuantity\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "takeOasisDex",
        "visibility": "public",
        "args": [
            {
                "name": "_exchange",
                "type": "address"
            },
            {
                "name": "_identifier",
                "type": "bytes32"
            },
            {
                "name": "_fillTakerQuantity",
                "type": "uint256"
            }
        ],
        "func": "function takeOasisDex(\n        address _exchange,\n        bytes32 _identifier,\n        uint256 _fillTakerQuantity\n    ) public view returns (bool) {\n        uint256 maxMakerQuantity;\n        address makerAsset;\n        uint256 maxTakerQuantity;\n        address takerAsset;\n        (\n            maxMakerQuantity,\n            makerAsset,\n            maxTakerQuantity,\n            takerAsset\n        ) = IOasisDex(_exchange).getOffer(uint256(_identifier));\n\n        uint256 fillMakerQuantity = mul(_fillTakerQuantity, maxMakerQuantity) / maxTakerQuantity;\n        return checkPriceToleranceTakeOrder(\n            makerAsset, takerAsset, fillMakerQuantity, _fillTakerQuantity\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "takeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "_addresses",
                "type": "address[5] memory"
            },
            {
                "name": "_values",
                "type": "uint256[3] memory"
            },
            {
                "name": "_identifier",
                "type": "bytes32"
            }
        ],
        "func": "function takeOrder(\n        address[5] memory _addresses,\n        uint256[3] memory _values,\n        bytes32 _identifier\n    ) public view returns (bool) {\n        if (_identifier == 0x0) {\n            return takeGenericOrder(_addresses[2], _addresses[3], _values);\n        } else {\n            return takeOasisDex(_addresses[4], _identifier, _values[2]);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "makeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "_addresses",
                "type": "address[5] memory"
            },
            {
                "name": "_values",
                "type": "uint256[3] memory"
            },
            {
                "name": "_identifier",
                "type": "bytes32"
            }
        ],
        "func": "function makeOrder(\n        address[5] memory _addresses,\n        uint256[3] memory _values,\n        bytes32 _identifier\n    ) public view returns (bool) {\n        IPriceSource pricefeed = IPriceSource(Hub(Trading(msg.sender).hub()).priceSource());\n\n        uint256 ratio;\n        (ratio,) = IPriceSource(pricefeed).getReferencePriceInfo(_addresses[2], _addresses[3]);\n        uint256 value = IPriceSource(pricefeed).getOrderPriceInfo(_addresses[2], _values[0], _values[1]);\n\n        int res = signedSafeSub(int(ratio), int(value));\n        if (res < 0) {\n            return true;\n        } else {\n            return wdiv(uint256(res), ratio) <= tolerance;\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rule",
        "visibility": "external",
        "args": [
            {
                "name": "_sig",
                "type": "bytes4"
            },
            {
                "name": "_addresses",
                "type": "address[5] calldata"
            },
            {
                "name": "_values",
                "type": "uint256[3] calldata"
            },
            {
                "name": "_identifier",
                "type": "bytes32"
            }
        ],
        "func": "function rule(\n        bytes4 _sig,\n        address[5] calldata _addresses,\n        uint256[3] calldata _values,\n        bytes32 _identifier\n    ) external returns (bool) {\n        if (_sig == MAKE_ORDER) {\n            return makeOrder(_addresses, _values, _identifier);\n        } else if (_sig == TAKE_ORDER) {\n            return takeOrder(_addresses, _values, _identifier);\n        }\n        revert(\"Signature was neither MakeOrder nor TakeOrder\");\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "position",
        "visibility": "external",
        "args": [],
        "func": "function position() external pure returns (Applied) { return Applied.pre; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "identifier",
        "visibility": "external",
        "args": [],
        "func": "function identifier() external pure returns (string memory) { return 'PriceTolerance'; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createFor",
        "visibility": "public",
        "args": [
            {
                "name": "who",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint"
            }
        ],
        "func": "function createFor(address who, uint amount) public auth {\n        _mint(who, amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "destroyFor",
        "visibility": "public",
        "args": [
            {
                "name": "who",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint"
            }
        ],
        "func": "function destroyFor(address who, uint amount) public auth {\n        _burn(who, amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint"
            }
        ],
        "func": "function transfer(address to, uint amount) public override returns (bool) {\n        revert(\"Unimplemented\");\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint"
            }
        ],
        "func": "function transferFrom(\n        address from,\n        address to,\n        uint amount\n    )\n        public\n        override\n        returns (bool)\n    {\n        revert(\"Unimplemented\");\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint"
            }
        ],
        "func": "function approve(address spender, uint amount) public override returns (bool) {\n        revert(\"Unimplemented\");\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseApproval",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint"
            }
        ],
        "func": "function increaseApproval(\n        address spender,\n        uint amount\n    )\n        public\n        override\n        returns (bool)\n    {\n        revert(\"Unimplemented\");\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseApproval",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint"
            }
        ],
        "func": "function decreaseApproval(\n        address spender,\n        uint amount\n    )\n        public\n        override\n        returns (bool)\n    {\n        revert(\"Unimplemented\");\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createInstance",
        "visibility": "external",
        "args": [
            {
                "name": "_hub",
                "type": "address"
            }
        ],
        "func": "function createInstance(address _hub) external returns (address) {\n        address shares = address(new Shares(_hub));\n        childExists[shares] = true;\n        emit NewInstance(_hub, shares);\n        return shares;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addExchange",
        "visibility": "external",
        "args": [
            {
                "name": "_exchange",
                "type": "address"
            },
            {
                "name": "_adapter",
                "type": "address"
            }
        ],
        "func": "function addExchange(address _exchange, address _adapter) external auth {\n        _addExchange(_exchange, _adapter);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "callOnExchange",
        "visibility": "public",
        "args": [
            {
                "name": "exchangeIndex",
                "type": "uint"
            },
            {
                "name": "methodSignature",
                "type": "string memory"
            },
            {
                "name": "orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes memory"
            }
        ],
        "func": "function callOnExchange(\n        uint exchangeIndex,\n        string memory methodSignature,\n        address[8] memory orderAddresses,\n        uint[8] memory orderValues,\n        bytes[4] memory orderData,\n        bytes32 identifier,\n        bytes memory signature\n    )\n        public\n        onlyInitialized\n    {\n        bytes4 methodSelector = bytes4(keccak256(bytes(methodSignature)));\n        require(\n            Registry(routes.registry).adapterMethodIsAllowed(\n                exchanges[exchangeIndex].adapter,\n                methodSelector\n            ),\n            \"Adapter method not allowed\"\n        );\n        PolicyManager(routes.policyManager).preValidate(methodSelector, [orderAddresses[0], orderAddresses[1], orderAddresses[2], orderAddresses[3], exchanges[exchangeIndex].exchange], [orderValues[0], orderValues[1], orderValues[6]], identifier);\n        if (\n            methodSelector == MAKE_ORDER ||\n            methodSelector == TAKE_ORDER\n        ) {\n            require(Registry(routes.registry).assetIsRegistered(\n                orderAddresses[2]), 'Maker asset not registered'\n            );\n            require(Registry(routes.registry).assetIsRegistered(\n                orderAddresses[3]), 'Taker asset not registered'\n            );\n            if (orderAddresses[6] != address(0) && methodSelector == MAKE_ORDER) {\n                require(\n                    Registry(routes.registry).assetIsRegistered(orderAddresses[6]),\n                    'Maker fee asset not registered'\n                );\n            }\n            if (orderAddresses[7] != address(0) && methodSelector == TAKE_ORDER) {\n                require(\n                    Registry(routes.registry).assetIsRegistered(orderAddresses[7]),\n                    'Taker fee asset not registered'\n                );\n            }\n        }\n        (bool success, bytes memory returnData) = exchanges[exchangeIndex].adapter.delegatecall(\n            abi.encodeWithSignature(\n                methodSignature,\n                exchanges[exchangeIndex].exchange,\n                orderAddresses,\n                orderValues,\n                orderData,\n                identifier,\n                signature\n            )\n        );\n        require(success, string(returnData));\n        PolicyManager(routes.policyManager).postValidate(methodSelector, [orderAddresses[0], orderAddresses[1], orderAddresses[2], orderAddresses[3], exchanges[exchangeIndex].exchange], [orderValues[0], orderValues[1], orderValues[6]], identifier);\n        emit ExchangeMethodCall(\n            exchanges[exchangeIndex].exchange,\n            methodSignature,\n            orderAddresses,\n            orderValues,\n            orderData,\n            identifier,\n            signature\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addOpenMakeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "ofExchange",
                "type": "address"
            },
            {
                "name": "sellAsset",
                "type": "address"
            },
            {
                "name": "buyAsset",
                "type": "address"
            },
            {
                "name": "feeAsset",
                "type": "address"
            },
            {
                "name": "orderId",
                "type": "uint"
            },
            {
                "name": "expirationTime",
                "type": "uint"
            }
        ],
        "func": "function addOpenMakeOrder(\n        address ofExchange,\n        address sellAsset,\n        address buyAsset,\n        address feeAsset,\n        uint orderId,\n        uint expirationTime\n    ) public delegateInternal {\n        require(!isInOpenMakeOrder[sellAsset], \"Asset already in open order\");\n        require(orders.length > 0, \"No orders in array\");\n\n        // If expirationTime is 0, actualExpirationTime is set to ORDER_LIFESPAN from now\n        uint actualExpirationTime = (expirationTime == 0) ? add(block.timestamp, ORDER_LIFESPAN) : expirationTime;\n\n        require(\n            actualExpirationTime <= add(block.timestamp, ORDER_LIFESPAN) &&\n            actualExpirationTime > block.timestamp,\n            \"Expiry time greater than max order lifespan or has already passed\"\n        );\n        isInOpenMakeOrder[sellAsset] = true;\n        makerAssetCooldown[sellAsset] = add(actualExpirationTime, MAKE_ORDER_COOLDOWN);\n        openMakeOrdersAgainstAsset[buyAsset] = add(openMakeOrdersAgainstAsset[buyAsset], 1);\n        if (feeAsset != address(0)) {\n            openMakeOrdersUsingAssetAsFee[feeAsset] = add(openMakeOrdersUsingAssetAsFee[feeAsset], 1);\n        }\n        exchangesToOpenMakeOrders[ofExchange][sellAsset].id = orderId;\n        exchangesToOpenMakeOrders[ofExchange][sellAsset].expiresAt = actualExpirationTime;\n        exchangesToOpenMakeOrders[ofExchange][sellAsset].orderIndex = sub(orders.length, 1);\n        exchangesToOpenMakeOrders[ofExchange][sellAsset].buyAsset = buyAsset;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "removeOpenMakeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "exchange",
                "type": "address"
            },
            {
                "name": "sellAsset",
                "type": "address"
            }
        ],
        "func": "function removeOpenMakeOrder(\n        address exchange,\n        address sellAsset\n    ) public delegateInternal {\n        _removeOpenMakeOrder(exchange, sellAsset);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addZeroExV2OrderData",
        "visibility": "public",
        "args": [
            {
                "name": "orderId",
                "type": "bytes32"
            },
            {
                "name": "zeroExOrderData",
                "type": "IZeroExV2.Order memory"
            }
        ],
        "func": "function addZeroExV2OrderData(\n        bytes32 orderId,\n        IZeroExV2.Order memory zeroExOrderData\n    ) public delegateInternal {\n        orderIdToZeroExV2Order[orderId] = zeroExOrderData;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addZeroExV3OrderData",
        "visibility": "public",
        "args": [
            {
                "name": "orderId",
                "type": "bytes32"
            },
            {
                "name": "zeroExOrderData",
                "type": "IZeroExV3.Order memory"
            }
        ],
        "func": "function addZeroExV3OrderData(\n        bytes32 orderId,\n        IZeroExV3.Order memory zeroExOrderData\n    ) public delegateInternal {\n        orderIdToZeroExV3Order[orderId] = zeroExOrderData;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "orderUpdateHook",
        "visibility": "public",
        "args": [
            {
                "name": "ofExchange",
                "type": "address"
            },
            {
                "name": "orderId",
                "type": "bytes32"
            },
            {
                "name": "updateType",
                "type": "UpdateType"
            },
            {
                "name": "orderAddresses",
                "type": "address payable[2] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[3] memory"
            }
        ],
        "func": "function orderUpdateHook(\n        address ofExchange,\n        bytes32 orderId,\n        UpdateType updateType,\n        address payable[2] memory orderAddresses,\n        uint[3] memory orderValues\n    ) public delegateInternal {\n        // only save make/take\n        if (updateType == UpdateType.make || updateType == UpdateType.take) {\n            orders.push(Order({\n                exchangeAddress: ofExchange,\n                orderId: orderId,\n                updateType: updateType,\n                makerAsset: orderAddresses[0],\n                takerAsset: orderAddresses[1],\n                makerQuantity: orderValues[0],\n                takerQuantity: orderValues[1],\n                timestamp: block.timestamp,\n                fillTakerQuantity: orderValues[2]\n            }));\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateAndGetQuantityBeingTraded",
        "visibility": "external",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function updateAndGetQuantityBeingTraded(address _asset) external returns (uint) {\n        uint quantityHere = IERC20(_asset).balanceOf(address(this));\n        return add(updateAndGetQuantityHeldInExchange(_asset), quantityHere);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateAndGetQuantityHeldInExchange",
        "visibility": "public",
        "args": [
            {
                "name": "ofAsset",
                "type": "address"
            }
        ],
        "func": "function updateAndGetQuantityHeldInExchange(address ofAsset) public returns (uint) {\n        uint totalSellQuantity; // quantity in custody across exchanges\n        uint totalSellQuantityInApprove; // quantity of asset in approve (allowance) but not custody of exchange\n        for (uint i; i < exchanges.length; i++) {\n            uint256 orderId = exchangesToOpenMakeOrders[exchanges[i].exchange][ofAsset].id;\n            if (orderId == 0) {\n                continue;\n            }\n            address sellAsset;\n            uint remainingSellQuantity;\n            (sellAsset, , remainingSellQuantity, ) =\n                ExchangeAdapter(exchanges[i].adapter)\n                .getOrder(\n                    exchanges[i].exchange,\n                    orderId,\n                    ofAsset\n                );\n            if (remainingSellQuantity == 0) {    // remove id if remaining sell quantity zero (closed)\n                _removeOpenMakeOrder(exchanges[i].exchange, ofAsset);\n            }\n            totalSellQuantity = add(totalSellQuantity, remainingSellQuantity);\n            if (!exchanges[i].takesCustody) {\n                totalSellQuantityInApprove += remainingSellQuantity;\n            }\n        }\n        if (totalSellQuantity == 0) {\n            isInOpenMakeOrder[ofAsset] = false;\n        }\n        return sub(totalSellQuantity, totalSellQuantityInApprove); // Since quantity in approve is not actually in custody\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "returnBatchToVault",
        "visibility": "external",
        "args": [
            {
                "name": "_tokens",
                "type": "address[] calldata"
            }
        ],
        "func": "function returnBatchToVault(address[] calldata _tokens) external {\n        for (uint i = 0; i < _tokens.length; i++) {\n            returnAssetToVault(_tokens[i]);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "returnAssetToVault",
        "visibility": "public",
        "args": [
            {
                "name": "_token",
                "type": "address"
            }
        ],
        "func": "function returnAssetToVault(address _token) public {\n        require(\n            msg.sender == address(this) ||\n            msg.sender == hub.manager() ||\n            hub.isShutDown()            ||\n            (!isInOpenMakeOrder[_token] && openMakeOrdersUsingAssetAsFee[_token] == 0),\n            \"returnAssetToVault: No return condition was met\"\n        );\n        safeTransfer(_token, routes.vault, IERC20(_token).balanceOf(address(this)));\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getExchangeInfo",
        "visibility": "public",
        "args": [],
        "func": "function getExchangeInfo() public view returns (address[] memory, address[] memory, bool[] memory) {\n        address[] memory ofExchanges = new address[](exchanges.length);\n        address[] memory ofAdapters = new address[](exchanges.length);\n        bool[] memory takesCustody = new bool[](exchanges.length);\n        for (uint i = 0; i < exchanges.length; i++) {\n            ofExchanges[i] = exchanges[i].exchange;\n            ofAdapters[i] = exchanges[i].adapter;\n            takesCustody[i] = exchanges[i].takesCustody;\n        }\n        return (ofExchanges, ofAdapters, takesCustody);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOpenOrderInfo",
        "visibility": "public",
        "args": [
            {
                "name": "ofExchange",
                "type": "address"
            },
            {
                "name": "ofAsset",
                "type": "address"
            }
        ],
        "func": "function getOpenOrderInfo(address ofExchange, address ofAsset) public view returns (uint, uint, uint) {\n        OpenMakeOrder memory order = exchangesToOpenMakeOrders[ofExchange][ofAsset];\n        return (order.id, order.expiresAt, order.orderIndex);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isOrderExpired",
        "visibility": "public",
        "args": [
            {
                "name": "exchange",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "address"
            }
        ],
        "func": "function isOrderExpired(address exchange, address asset) public view returns(bool) {\n        return (\n            exchangesToOpenMakeOrders[exchange][asset].expiresAt <= block.timestamp &&\n            exchangesToOpenMakeOrders[exchange][asset].expiresAt > 0\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOrderDetails",
        "visibility": "public",
        "args": [
            {
                "name": "orderIndex",
                "type": "uint"
            }
        ],
        "func": "function getOrderDetails(uint orderIndex) public view returns (address, address, uint, uint) {\n        Order memory order = orders[orderIndex];\n        return (order.makerAsset, order.takerAsset, order.makerQuantity, order.takerQuantity);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getZeroExV2OrderDetails",
        "visibility": "public",
        "args": [
            {
                "name": "orderId",
                "type": "bytes32"
            }
        ],
        "func": "function getZeroExV2OrderDetails(bytes32 orderId) public view returns (IZeroExV2.Order memory) {\n        return orderIdToZeroExV2Order[orderId];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getZeroExV3OrderDetails",
        "visibility": "public",
        "args": [
            {
                "name": "orderId",
                "type": "bytes32"
            }
        ],
        "func": "function getZeroExV3OrderDetails(bytes32 orderId) public view returns (IZeroExV3.Order memory) {\n        return orderIdToZeroExV3Order[orderId];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOpenMakeOrdersAgainstAsset",
        "visibility": "external",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function getOpenMakeOrdersAgainstAsset(address _asset) external view returns (uint256) {\n        return openMakeOrdersAgainstAsset[_asset];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createInstance",
        "visibility": "public",
        "args": [
            {
                "name": "_hub",
                "type": "address"
            },
            {
                "name": "_exchanges",
                "type": "address[] memory"
            },
            {
                "name": "_adapters",
                "type": "address[] memory"
            },
            {
                "name": "_registry",
                "type": "address"
            }
        ],
        "func": "function createInstance(\n        address _hub,\n        address[] memory _exchanges,\n        address[] memory _adapters,\n        address _registry\n    ) public returns (address) {\n        address trading = address(new Trading(_hub, _exchanges, _adapters, _registry));\n        childExists[trading] = true;\n        emit NewInstance(\n            _hub,\n            trading,\n            _exchanges,\n            _adapters,\n            _registry\n        );\n        return trading;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "token",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint"
            }
        ],
        "func": "function withdraw(address token, uint amount) external auth {\n        safeTransfer(token, msg.sender, amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createInstance",
        "visibility": "external",
        "args": [
            {
                "name": "_hub",
                "type": "address"
            }
        ],
        "func": "function createInstance(address _hub) external returns (address) {\n        address vault = address(new Vault(_hub));\n        childExists[vault] = true;\n        emit NewInstance(_hub, vault);\n        return vault;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "update",
        "visibility": "external",
        "args": [],
        "func": "function update() external {\n        require(\n            msg.sender == REGISTRY.owner() || msg.sender == UPDATER,\n            \"Only registry owner or updater can call\"\n        );\n        address[] memory assets = REGISTRY.getRegisteredAssets();\n        uint[] memory newPrices = new uint[](assets.length);\n        for (uint i; i < assets.length; i++) {\n            bool isValid;\n            uint price;\n            if (assets[i] == QUOTE_ASSET) {\n                isValid = true;\n                price = 1 ether;\n            } else {\n                (isValid, price) = getKyberPrice(assets[i], QUOTE_ASSET);\n            }\n            newPrices[i] = isValid ? price : 0;\n            prices[assets[i]] = newPrices[i];\n        }\n        lastUpdate = block.timestamp;\n        emit PriceUpdate(assets, newPrices);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setUpdater",
        "visibility": "external",
        "args": [
            {
                "name": "_updater",
                "type": "address"
            }
        ],
        "func": "function setUpdater(address _updater) external {\n        require(msg.sender == REGISTRY.owner(), \"Only registry owner can set\");\n        UPDATER = _updater;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMaxSpread",
        "visibility": "external",
        "args": [
            {
                "name": "_maxSpread",
                "type": "uint"
            }
        ],
        "func": "function setMaxSpread(uint _maxSpread) external {\n        require(msg.sender == REGISTRY.owner(), \"Only registry owner can set\");\n        MAX_SPREAD = _maxSpread;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getQuoteAsset",
        "visibility": "public",
        "args": [],
        "func": "function getQuoteAsset() public view returns (address) { return QUOTE_ASSET; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPrice",
        "visibility": "public",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function getPrice(address _asset)\n        public\n        view\n        returns (uint price, uint timestamp)\n    {\n        (price, ) =  getReferencePriceInfo(_asset, QUOTE_ASSET);\n        timestamp = now;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPrices",
        "visibility": "public",
        "args": [
            {
                "name": "_assets",
                "type": "address[] memory"
            }
        ],
        "func": "function getPrices(address[] memory _assets)\n        public\n        view\n        returns (uint256[] memory, uint256[] memory)\n    {\n        uint[] memory newPrices = new uint[](_assets.length);\n        uint[] memory timestamps = new uint[](_assets.length);\n        for (uint i; i < _assets.length; i++) {\n            (newPrices[i], timestamps[i]) = getPrice(_assets[i]);\n        }\n        return (newPrices, timestamps);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasValidPrice",
        "visibility": "public",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function hasValidPrice(address _asset)\n        public\n        view\n        returns (bool)\n    {\n        bool isRegistered = REGISTRY.assetIsRegistered(_asset);\n        bool isFresh = block.timestamp < add(lastUpdate, VALIDITY_INTERVAL);\n        return prices[_asset] != 0 && isRegistered && isFresh;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasValidPrices",
        "visibility": "public",
        "args": [
            {
                "name": "_assets",
                "type": "address[] memory"
            }
        ],
        "func": "function hasValidPrices(address[] memory _assets)\n        public\n        view\n        returns (bool)\n    {\n        for (uint i; i < _assets.length; i++) {\n            if (!hasValidPrice(_assets[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReferencePriceInfo",
        "visibility": "public",
        "args": [
            {
                "name": "_baseAsset",
                "type": "address"
            },
            {
                "name": "_quoteAsset",
                "type": "address"
            }
        ],
        "func": "function getReferencePriceInfo(address _baseAsset, address _quoteAsset)\n        public\n        view\n        returns (uint referencePrice, uint decimals)\n    {\n        bool isValid;\n        (\n            isValid,\n            referencePrice,\n            decimals\n        ) = getRawReferencePriceInfo(_baseAsset, _quoteAsset);\n        require(isValid, \"Price is not valid\");\n        return (referencePrice, decimals);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRawReferencePriceInfo",
        "visibility": "public",
        "args": [
            {
                "name": "_baseAsset",
                "type": "address"
            },
            {
                "name": "_quoteAsset",
                "type": "address"
            }
        ],
        "func": "function getRawReferencePriceInfo(address _baseAsset, address _quoteAsset)\n        public\n        view\n        returns (bool isValid, uint256 referencePrice, uint256 decimals)\n    {\n        isValid = hasValidPrice(_baseAsset) && hasValidPrice(_quoteAsset);\n        uint256 quoteDecimals = ERC20WithFields(_quoteAsset).decimals();\n\n        if (prices[_quoteAsset] == 0) {\n            return (false, 0, 0);  // return early and avoid revert\n        }\n\n        referencePrice = mul(\n            prices[_baseAsset],\n            10 ** uint(quoteDecimals)\n        ) / prices[_quoteAsset];\n\n        return (isValid, referencePrice, quoteDecimals);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPriceInfo",
        "visibility": "public",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function getPriceInfo(address _asset)\n        public\n        view\n        returns (uint256 price, uint256 assetDecimals)\n    {\n        return getReferencePriceInfo(_asset, QUOTE_ASSET);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getInvertedPriceInfo",
        "visibility": "public",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function getInvertedPriceInfo(address _asset)\n        public\n        view\n        returns (uint256 invertedPrice, uint256 assetDecimals)\n    {\n        return getReferencePriceInfo(QUOTE_ASSET, _asset);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getKyberMaskAsset",
        "visibility": "public",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function getKyberMaskAsset(address _asset) public view returns (address) {\n        if (_asset == REGISTRY.nativeAsset()) {\n            return KYBER_ETH_TOKEN;\n        }\n        return _asset;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getKyberPrice",
        "visibility": "public",
        "args": [
            {
                "name": "_baseAsset",
                "type": "address"
            },
            {
                "name": "_quoteAsset",
                "type": "address"
            }
        ],
        "func": "function getKyberPrice(address _baseAsset, address _quoteAsset)\n        public\n        view\n        returns (bool, uint)\n    {\n        uint bidRate;\n        uint bidRateOfReversePair;\n        (bidRate,) = IKyberNetworkProxy(KYBER_NETWORK_PROXY).getExpectedRate(\n            getKyberMaskAsset(_baseAsset),\n            getKyberMaskAsset(_quoteAsset),\n            REGISTRY.getReserveMin(_baseAsset)\n        );\n        (bidRateOfReversePair,) = IKyberNetworkProxy(KYBER_NETWORK_PROXY).getExpectedRate(\n            getKyberMaskAsset(_quoteAsset),\n            getKyberMaskAsset(_baseAsset),\n            REGISTRY.getReserveMin(_quoteAsset)\n        );\n\n        if (bidRate == 0 || bidRateOfReversePair == 0) {\n            return (false, 0);  // return early and avoid revert\n        }\n\n        uint askRate = 10 ** (KYBER_PRECISION * 2) / bidRateOfReversePair;\n        /**\n          Average the bid/ask prices:\n          avgPriceFromKyber = (bidRate + askRate) / 2\n          kyberPrice = (avgPriceFromKyber * 10^quoteDecimals) / 10^kyberPrecision\n          or, rearranged:\n          kyberPrice = ((bidRate + askRate) * 10^quoteDecimals) / 2 * 10^kyberPrecision\n        */\n        uint kyberPrice = mul(\n            add(bidRate, askRate),\n            10 ** uint(ERC20WithFields(_quoteAsset).decimals()) // use original quote decimals (not defined on mask)\n        ) / mul(2, 10 ** uint(KYBER_PRECISION));\n\n        // Find the \"quoted spread\", to inform caller whether it is below maximum\n        uint spreadFromKyber;\n        if (bidRate > askRate) {\n            spreadFromKyber = 0; // crossed market condition\n        } else {\n            spreadFromKyber = mul(\n                sub(askRate, bidRate),\n                10 ** uint(KYBER_PRECISION)\n            ) / askRate;\n        }\n\n        return (\n            spreadFromKyber <= MAX_SPREAD && bidRate != 0 && askRate != 0,\n            kyberPrice\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOrderPriceInfo",
        "visibility": "public",
        "args": [
            {
                "name": "sellAsset",
                "type": "address"
            },
            {
                "name": "sellQuantity",
                "type": "uint"
            },
            {
                "name": "buyQuantity",
                "type": "uint"
            }
        ],
        "func": "function getOrderPriceInfo(\n        address sellAsset,\n        uint sellQuantity,\n        uint buyQuantity\n    )\n        public\n        view\n        returns (uint orderPrice)\n    {\n        // TODO: decimals\n        return mul(buyQuantity, 10 ** uint(ERC20WithFields(sellAsset).decimals())) / sellQuantity;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "existsPriceOnAssetPair",
        "visibility": "public",
        "args": [
            {
                "name": "sellAsset",
                "type": "address"
            },
            {
                "name": "buyAsset",
                "type": "address"
            }
        ],
        "func": "function existsPriceOnAssetPair(address sellAsset, address buyAsset)\n        public\n        view\n        returns (bool)\n    {\n        return\n            hasValidPrice(sellAsset) && // Is tradable asset (TODO cleaner) and datafeed delivering data\n            hasValidPrice(buyAsset);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "convertQuantity",
        "visibility": "public",
        "args": [
            {
                "name": "fromAssetQuantity",
                "type": "uint"
            },
            {
                "name": "fromAsset",
                "type": "address"
            },
            {
                "name": "toAsset",
                "type": "address"
            }
        ],
        "func": "function convertQuantity(\n        uint fromAssetQuantity,\n        address fromAsset,\n        address toAsset\n    )\n        public\n        view\n        returns (uint)\n    {\n        uint fromAssetPrice;\n        (fromAssetPrice,) = getReferencePriceInfo(fromAsset, toAsset);\n        uint fromAssetDecimals = ERC20WithFields(fromAsset).decimals();\n        return mul(\n            fromAssetQuantity,\n            fromAssetPrice\n        ) / (10 ** uint(fromAssetDecimals));\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getLastUpdate",
        "visibility": "public",
        "args": [],
        "func": "function getLastUpdate() public view returns (uint) { return lastUpdate; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isValidFundName",
        "visibility": "public",
        "args": [
            {
                "name": "_name",
                "type": "string memory"
            }
        ],
        "func": "function isValidFundName(string memory _name) public pure returns (bool) {\n        bytes memory b = bytes(_name);\n        if (b.length > MAX_FUND_NAME_BYTES) return false;\n        for (uint i; i < b.length; i++){\n            bytes1 char = b[i];\n            if(\n                !(char >= 0x30 && char <= 0x39) && // 9-0\n                !(char >= 0x41 && char <= 0x5A) && // A-Z\n                !(char >= 0x61 && char <= 0x7A) && // a-z\n                !(char == 0x20 || char == 0x2D) && // space, dash\n                !(char == 0x2E || char == 0x5F) && // period, underscore\n                !(char == 0x2A) // *\n            ) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "canUseFundName",
        "visibility": "public",
        "args": [
            {
                "name": "_user",
                "type": "address"
            },
            {
                "name": "_name",
                "type": "string memory"
            }
        ],
        "func": "function canUseFundName(address _user, string memory _name) public view returns (bool) {\n        bytes32 nameHash = keccak256(bytes(_name));\n        return (\n            isValidFundName(_name) &&\n            (\n                fundNameHashToOwner[nameHash] == address(0) ||\n                fundNameHashToOwner[nameHash] == _user\n            )\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "reserveFundName",
        "visibility": "external",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            },
            {
                "name": "_name",
                "type": "string calldata"
            }
        ],
        "func": "function reserveFundName(address _owner, string calldata _name)\n        external\n        onlyVersion\n    {\n        require(canUseFundName(_owner, _name), \"Fund name cannot be used\");\n        fundNameHashToOwner[keccak256(bytes(_name))] = _owner;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registerFund",
        "visibility": "external",
        "args": [
            {
                "name": "_fund",
                "type": "address"
            },
            {
                "name": "_owner",
                "type": "address"
            },
            {
                "name": "_name",
                "type": "string calldata"
            }
        ],
        "func": "function registerFund(address _fund, address _owner, string calldata _name)\n        external\n        onlyVersion\n    {\n        require(canUseFundName(_owner, _name), \"Fund name cannot be used\");\n        fundsToVersions[_fund] = msg.sender;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registerAsset",
        "visibility": "external",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            },
            {
                "name": "_name",
                "type": "string calldata"
            },
            {
                "name": "_symbol",
                "type": "string calldata"
            },
            {
                "name": "_url",
                "type": "string calldata"
            },
            {
                "name": "_reserveMin",
                "type": "uint"
            },
            {
                "name": "_standards",
                "type": "uint[] calldata"
            },
            {
                "name": "_sigs",
                "type": "bytes4[] calldata"
            }
        ],
        "func": "function registerAsset(\n        address _asset,\n        string calldata _name,\n        string calldata _symbol,\n        string calldata _url,\n        uint _reserveMin,\n        uint[] calldata _standards,\n        bytes4[] calldata _sigs\n    ) external auth {\n        require(registeredAssets.length < MAX_REGISTERED_ENTITIES);\n        require(!assetInformation[_asset].exists);\n        assetInformation[_asset].exists = true;\n        registeredAssets.push(_asset);\n        updateAsset(\n            _asset,\n            _name,\n            _symbol,\n            _url,\n            _reserveMin,\n            _standards,\n            _sigs\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registerExchangeAdapter",
        "visibility": "external",
        "args": [
            {
                "name": "_exchange",
                "type": "address"
            },
            {
                "name": "_adapter",
                "type": "address"
            },
            {
                "name": "_takesCustody",
                "type": "bool"
            },
            {
                "name": "_sigs",
                "type": "bytes4[] calldata"
            }
        ],
        "func": "function registerExchangeAdapter(\n        address _exchange,\n        address _adapter,\n        bool _takesCustody,\n        bytes4[] calldata _sigs\n    ) external auth {\n        require(!exchangeInformation[_adapter].exists, \"Adapter already exists\");\n        exchangeInformation[_adapter].exists = true;\n        require(registeredExchangeAdapters.length < MAX_REGISTERED_ENTITIES, \"Exchange limit reached\");\n        registeredExchangeAdapters.push(_adapter);\n        updateExchangeAdapter(\n            _exchange,\n            _adapter,\n            _takesCustody,\n            _sigs\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registerVersion",
        "visibility": "external",
        "args": [
            {
                "name": "_version",
                "type": "address"
            },
            {
                "name": "_name",
                "type": "bytes32"
            }
        ],
        "func": "function registerVersion(\n        address _version,\n        bytes32 _name\n    ) external auth {\n        require(!versionInformation[_version].exists, \"Version already exists\");\n        require(!versionNameExists[_name], \"Version name already exists\");\n        versionInformation[_version].exists = true;\n        versionNameExists[_name] = true;\n        versionInformation[_version].name = _name;\n        registeredVersions.push(_version);\n        emit VersionRegistration(_version);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setIncentive",
        "visibility": "external",
        "args": [
            {
                "name": "_weiAmount",
                "type": "uint"
            }
        ],
        "func": "function setIncentive(uint _weiAmount) external auth {\n        incentive = _weiAmount;\n        emit IncentiveChange(_weiAmount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPriceSource",
        "visibility": "external",
        "args": [
            {
                "name": "_priceSource",
                "type": "address"
            }
        ],
        "func": "function setPriceSource(address _priceSource) external auth {\n        priceSource = _priceSource;\n        emit PriceSourceChange(_priceSource);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMlnToken",
        "visibility": "external",
        "args": [
            {
                "name": "_mlnToken",
                "type": "address"
            }
        ],
        "func": "function setMlnToken(address _mlnToken) external auth {\n        mlnToken = _mlnToken;\n        emit MlnTokenChange(_mlnToken);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setNativeAsset",
        "visibility": "external",
        "args": [
            {
                "name": "_nativeAsset",
                "type": "address"
            }
        ],
        "func": "function setNativeAsset(address _nativeAsset) external auth {\n        nativeAsset = _nativeAsset;\n        emit NativeAssetChange(_nativeAsset);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setEngine",
        "visibility": "external",
        "args": [
            {
                "name": "_engine",
                "type": "address"
            }
        ],
        "func": "function setEngine(address _engine) external auth {\n        engine = _engine;\n        emit EngineChange(_engine);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMGM",
        "visibility": "external",
        "args": [
            {
                "name": "_MGM",
                "type": "address"
            }
        ],
        "func": "function setMGM(address _MGM) external auth {\n        MGM = _MGM;\n        emit MGMChange(_MGM);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setEthfinexWrapperRegistry",
        "visibility": "external",
        "args": [
            {
                "name": "_registry",
                "type": "address"
            }
        ],
        "func": "function setEthfinexWrapperRegistry(address _registry) external auth {\n        ethfinexWrapperRegistry = _registry;\n        emit EfxWrapperRegistryChange(_registry);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateAsset",
        "visibility": "public",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            },
            {
                "name": "_name",
                "type": "string memory"
            },
            {
                "name": "_symbol",
                "type": "string memory"
            },
            {
                "name": "_url",
                "type": "string memory"
            },
            {
                "name": "_reserveMin",
                "type": "uint"
            },
            {
                "name": "_standards",
                "type": "uint[] memory"
            },
            {
                "name": "_sigs",
                "type": "bytes4[] memory"
            }
        ],
        "func": "function updateAsset(\n        address _asset,\n        string memory _name,\n        string memory _symbol,\n        string memory _url,\n        uint _reserveMin,\n        uint[] memory _standards,\n        bytes4[] memory _sigs\n    ) public auth {\n        require(assetInformation[_asset].exists);\n        Asset storage asset = assetInformation[_asset];\n        asset.name = _name;\n        asset.symbol = _symbol;\n        asset.decimals = ERC20WithFields(_asset).decimals();\n        asset.url = _url;\n        asset.reserveMin = _reserveMin;\n        asset.standards = _standards;\n        asset.sigs = _sigs;\n        emit AssetUpsert(\n            _asset,\n            _name,\n            _symbol,\n            asset.decimals,\n            _url,\n            _reserveMin,\n            _standards,\n            _sigs\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateExchangeAdapter",
        "visibility": "public",
        "args": [
            {
                "name": "_exchange",
                "type": "address"
            },
            {
                "name": "_adapter",
                "type": "address"
            },
            {
                "name": "_takesCustody",
                "type": "bool"
            },
            {
                "name": "_sigs",
                "type": "bytes4[] memory"
            }
        ],
        "func": "function updateExchangeAdapter(\n        address _exchange,\n        address _adapter,\n        bool _takesCustody,\n        bytes4[] memory _sigs\n    ) public auth {\n        require(exchangeInformation[_adapter].exists, \"Exchange with adapter doesn't exist\");\n        Exchange storage exchange = exchangeInformation[_adapter];\n        exchange.exchangeAddress = _exchange;\n        exchange.takesCustody = _takesCustody;\n        exchange.sigs = _sigs;\n        emit ExchangeAdapterUpsert(\n            _exchange,\n            _adapter,\n            _takesCustody,\n            _sigs\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "removeAsset",
        "visibility": "external",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            },
            {
                "name": "_assetIndex",
                "type": "uint"
            }
        ],
        "func": "function removeAsset(\n        address _asset,\n        uint _assetIndex\n    ) external auth {\n        require(assetInformation[_asset].exists);\n        require(registeredAssets[_assetIndex] == _asset);\n        delete assetInformation[_asset];\n        delete registeredAssets[_assetIndex];\n        for (uint i = _assetIndex; i < registeredAssets.length-1; i++) {\n            registeredAssets[i] = registeredAssets[i+1];\n        }\n        registeredAssets.pop();\n        emit AssetRemoval(_asset);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "removeExchangeAdapter",
        "visibility": "external",
        "args": [
            {
                "name": "_adapter",
                "type": "address"
            },
            {
                "name": "_adapterIndex",
                "type": "uint"
            }
        ],
        "func": "function removeExchangeAdapter(\n        address _adapter,\n        uint _adapterIndex\n    ) external auth {\n        require(exchangeInformation[_adapter].exists, \"Exchange with adapter doesn't exist\");\n        require(registeredExchangeAdapters[_adapterIndex] == _adapter, \"Incorrect adapter index\");\n        delete exchangeInformation[_adapter];\n        delete registeredExchangeAdapters[_adapterIndex];\n        for (uint i = _adapterIndex; i < registeredExchangeAdapters.length-1; i++) {\n            registeredExchangeAdapters[i] = registeredExchangeAdapters[i+1];\n        }\n        registeredExchangeAdapters.pop();\n        emit ExchangeAdapterRemoval(_adapter);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registerFees",
        "visibility": "external",
        "args": [
            {
                "name": "_fees",
                "type": "address[] calldata"
            }
        ],
        "func": "function registerFees(address[] calldata _fees) external auth {\n        for (uint i; i < _fees.length; i++) {\n            isFeeRegistered[_fees[i]] = true;\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deregisterFees",
        "visibility": "external",
        "args": [
            {
                "name": "_fees",
                "type": "address[] calldata"
            }
        ],
        "func": "function deregisterFees(address[] calldata _fees) external auth {\n        for (uint i; i < _fees.length; i++) {\n            delete isFeeRegistered[_fees[i]];\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getName",
        "visibility": "external",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function getName(address _asset) external view returns (string memory) {\n        return assetInformation[_asset].name;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSymbol",
        "visibility": "external",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function getSymbol(address _asset) external view returns (string memory) {\n        return assetInformation[_asset].symbol;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getDecimals",
        "visibility": "external",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function getDecimals(address _asset) external view returns (uint) {\n        return assetInformation[_asset].decimals;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReserveMin",
        "visibility": "external",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function getReserveMin(address _asset) external view returns (uint) {\n        return assetInformation[_asset].reserveMin;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "assetIsRegistered",
        "visibility": "external",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function assetIsRegistered(address _asset) external view returns (bool) {\n        return assetInformation[_asset].exists;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRegisteredAssets",
        "visibility": "external",
        "args": [],
        "func": "function getRegisteredAssets() external view returns (address[] memory) {\n        return registeredAssets;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "assetMethodIsAllowed",
        "visibility": "external",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            },
            {
                "name": "_sig",
                "type": "bytes4"
            }
        ],
        "func": "function assetMethodIsAllowed(address _asset, bytes4 _sig)\n        external\n        view\n        returns (bool)\n    {\n        bytes4[] memory signatures = assetInformation[_asset].sigs;\n        for (uint i = 0; i < signatures.length; i++) {\n            if (signatures[i] == _sig) {\n                return true;\n            }\n        }\n        return false;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "exchangeAdapterIsRegistered",
        "visibility": "external",
        "args": [
            {
                "name": "_adapter",
                "type": "address"
            }
        ],
        "func": "function exchangeAdapterIsRegistered(address _adapter) external view returns (bool) {\n        return exchangeInformation[_adapter].exists;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRegisteredExchangeAdapters",
        "visibility": "external",
        "args": [],
        "func": "function getRegisteredExchangeAdapters() external view returns (address[] memory) {\n        return registeredExchangeAdapters;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getExchangeInformation",
        "visibility": "public",
        "args": [
            {
                "name": "_adapter",
                "type": "address"
            }
        ],
        "func": "function getExchangeInformation(address _adapter)\n        public\n        view\n        returns (address, bool)\n    {\n        Exchange memory exchange = exchangeInformation[_adapter];\n        return (\n            exchange.exchangeAddress,\n            exchange.takesCustody\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "exchangeForAdapter",
        "visibility": "external",
        "args": [
            {
                "name": "_adapter",
                "type": "address"
            }
        ],
        "func": "function exchangeForAdapter(address _adapter) external view returns (address) {\n        Exchange memory exchange = exchangeInformation[_adapter];\n        return exchange.exchangeAddress;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAdapterFunctionSignatures",
        "visibility": "public",
        "args": [
            {
                "name": "_adapter",
                "type": "address"
            }
        ],
        "func": "function getAdapterFunctionSignatures(address _adapter)\n        public\n        view\n        returns (bytes4[] memory)\n    {\n        return exchangeInformation[_adapter].sigs;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "adapterMethodIsAllowed",
        "visibility": "external",
        "args": [
            {
                "name": "_adapter",
                "type": "address"
            },
            {
                "name": "_sig",
                "type": "bytes4"
            }
        ],
        "func": "function adapterMethodIsAllowed(\n        address _adapter, bytes4 _sig\n    )\n        external\n        view\n        returns (bool)\n    {\n        bytes4[] memory signatures = exchangeInformation[_adapter].sigs;\n        for (uint i = 0; i < signatures.length; i++) {\n            if (signatures[i] == _sig) {\n                return true;\n            }\n        }\n        return false;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRegisteredVersions",
        "visibility": "external",
        "args": [],
        "func": "function getRegisteredVersions() external view returns (address[] memory) {\n        return registeredVersions;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isFund",
        "visibility": "external",
        "args": [
            {
                "name": "_who",
                "type": "address"
            }
        ],
        "func": "function isFund(address _who) external view returns (bool) {\n        if (fundsToVersions[_who] != address(0)) {\n            return true; // directly from a hub\n        } else {\n            Hub hub = Hub(Spoke(_who).hub());\n            require(\n                hub.isSpoke(_who),\n                \"Call from either a spoke or hub\"\n            );\n            return fundsToVersions[address(hub)] != address(0);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isFundFactory",
        "visibility": "external",
        "args": [
            {
                "name": "_who",
                "type": "address"
            }
        ],
        "func": "function isFundFactory(address _who) external view returns (bool) {\n        return versionInformation[_who].exists;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "shutDownFund",
        "visibility": "external",
        "args": [
            {
                "name": "_hub",
                "type": "address"
            }
        ],
        "func": "function shutDownFund(address _hub) external {\n        require(\n            managersToHubs[msg.sender] == _hub,\n            \"Conditions not met for fund shutdown\"\n        );\n        Hub(_hub).shutDownFund();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rule",
        "visibility": "external",
        "args": [
            {
                "name": "sig",
                "type": "bytes4"
            },
            {
                "name": "addresses",
                "type": "address[5] calldata"
            },
            {
                "name": "values",
                "type": "uint[3] calldata"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            }
        ],
        "func": "function rule(bytes4 sig, address[5] calldata addresses, uint[3] calldata values, bytes32 identifier) external returns (bool) {\n        return allowed;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "position",
        "visibility": "external",
        "args": [],
        "func": "function position() external pure returns (Applied) { return Applied.pre; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "identifier",
        "visibility": "external",
        "args": [],
        "func": "function identifier() external pure returns (string memory) { return \"TruePolicy\"; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "identifier",
        "visibility": "external",
        "args": [],
        "func": "function identifier() external pure returns (string memory) { return \"FalsePolicy\"; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "startReverting",
        "visibility": "public",
        "args": [],
        "func": "function startReverting() public {\n        isReverting = true;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address _to, uint256 _value) public override returns (bool) {\n        require(!isReverting, \"I'm afraid I can't do that, Dave\");\n        super.transfer(_to, _value);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        override\n        returns (bool)\n    {\n        require(!isReverting, \"I'm afraid I can't do that, Dave\");\n        super.transferFrom(_from, _to, _value);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setOwnedAssets",
        "visibility": "public",
        "args": [
            {
                "name": "_assets",
                "type": "address[] memory"
            }
        ],
        "func": "function setOwnedAssets(address[] memory _assets) public { ownedAssets = _assets; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOwnedAssetsLength",
        "visibility": "public",
        "args": [],
        "func": "function getOwnedAssetsLength() public view returns (uint) { return ownedAssets.length; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setGav",
        "visibility": "public",
        "args": [
            {
                "name": "_gav",
                "type": "uint"
            }
        ],
        "func": "function setGav(uint _gav) public { gav = _gav; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setNav",
        "visibility": "public",
        "args": [
            {
                "name": "_nav",
                "type": "uint"
            }
        ],
        "func": "function setNav(uint _nav) public { nav = _nav; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAssetGAV",
        "visibility": "public",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            },
            {
                "name": "_amt",
                "type": "uint"
            }
        ],
        "func": "function setAssetGAV(address _asset, uint _amt) public { assetGav[_asset] = _amt; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFundHoldings",
        "visibility": "public",
        "args": [
            {
                "name": "_amounts",
                "type": "uint[] memory"
            },
            {
                "name": "_assets",
                "type": "address[] memory"
            }
        ],
        "func": "function setFundHoldings(uint[] memory _amounts, address[] memory _assets) public {\n        for (uint i = 0; i < _assets.length; i++) {\n            held[_assets[i]] = _amounts[i];\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getFundHoldings",
        "visibility": "public",
        "args": [],
        "func": "function getFundHoldings() public view returns (uint[] memory, address[] memory) {\n        uint[] memory _quantities = new uint[](ownedAssets.length);\n        address[] memory _assets = new address[](ownedAssets.length);\n        for (uint i = 0; i < ownedAssets.length; i++) {\n            address ofAsset = ownedAssets[i];\n            // holdings formatting: mul(exchangeHoldings, 10 ** assetDecimal)\n            uint quantityHeld = held[ofAsset];\n\n            if (quantityHeld != 0) {\n                _assets[i] = ofAsset;\n                _quantities[i] = quantityHeld;\n            }\n        }\n        return (_quantities, _assets);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "calcGav",
        "visibility": "public",
        "args": [],
        "func": "function calcGav() public view returns (uint) { return gav; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "calcNav",
        "visibility": "public",
        "args": [],
        "func": "function calcNav() public view returns (uint) { return nav; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "calcAssetGAV",
        "visibility": "public",
        "args": [
            {
                "name": "_a",
                "type": "address"
            }
        ],
        "func": "function calcAssetGAV(address _a) public view returns (uint) { return assetGav[_a]; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "valuePerShare",
        "visibility": "public",
        "args": [
            {
                "name": "totalValue",
                "type": "uint"
            },
            {
                "name": "numShares",
                "type": "uint"
            }
        ],
        "func": "function valuePerShare(uint totalValue, uint numShares) public view returns (uint) {\n        return mockValuePerShare;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "performCalculations",
        "visibility": "public",
        "args": [],
        "func": "function performCalculations() public view returns (uint, uint, uint, uint, uint) {\n        return (gav, unclaimedFees, 0, nav, mockValuePerShare);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "makeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes memory"
            }
        ],
        "func": "function makeOrder(\n        address targetExchange,\n        address[8] memory orderAddresses,\n        uint[8] memory orderValues,\n        bytes[4] memory orderData,\n        bytes32 identifier,\n        bytes memory signature\n    ) public override {\n        address makerAsset = orderAddresses[2];\n        address takerAsset = orderAddresses[3];\n        uint makerQuantity = orderValues[0];\n        uint takerQuantity = orderValues[1];\n\n        approveAsset(makerAsset, targetExchange, makerQuantity, \"makerAsset\");\n\n        getTrading().orderUpdateHook(\n            targetExchange,\n            identifier,\n            Trading.UpdateType.make,\n            [payable(makerAsset), payable(takerAsset)],\n            [makerQuantity, takerQuantity, uint(0)]\n        );\n        getTrading().addOpenMakeOrder(targetExchange, makerAsset, takerAsset, address(0), uint(identifier), 0);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "takeOrder",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes memory"
            }
        ],
        "func": "function takeOrder(\n        address targetExchange,\n        address[8] memory orderAddresses,\n        uint[8] memory orderValues,\n        bytes[4] memory orderData,\n        bytes32 identifier,\n        bytes memory signature\n    ) public override {\n        address makerAsset = orderAddresses[2];\n        address takerAsset = orderAddresses[3];\n        uint makerQuantity = orderValues[0];\n        uint takerQuantity = orderValues[1];\n        uint fillTakerQuantity = orderValues[6];\n\n        approveAsset(takerAsset, targetExchange, fillTakerQuantity, \"takerAsset\");\n\n        getTrading().orderUpdateHook(\n            targetExchange,\n            bytes32(identifier),\n            Trading.UpdateType.take,\n            [payable(makerAsset), payable(takerAsset)],\n            [makerQuantity, takerQuantity, fillTakerQuantity]\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "cancelOrder",
        "visibility": "public",
        "args": [
            {
                "name": "targetExchange",
                "type": "address"
            },
            {
                "name": "orderAddresses",
                "type": "address[8] memory"
            },
            {
                "name": "orderValues",
                "type": "uint[8] memory"
            },
            {
                "name": "orderData",
                "type": "bytes[4] memory"
            },
            {
                "name": "identifier",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes memory"
            }
        ],
        "func": "function cancelOrder(\n        address targetExchange,\n        address[8] memory orderAddresses,\n        uint[8] memory orderValues,\n        bytes[4] memory orderData,\n        bytes32 identifier,\n        bytes memory signature\n    ) public override {\n        address makerAsset = orderAddresses[2];\n        uint makerQuantity = orderValues[0];\n\n        revokeApproveAsset(makerAsset, targetExchange, makerQuantity, \"makerAsset\");\n\n        getTrading().removeOpenMakeOrder(targetExchange, makerAsset);\n        getTrading().orderUpdateHook(\n            targetExchange,\n            bytes32(identifier),\n            Trading.UpdateType.cancel,\n            [address(0), address(0)],\n            [uint(0), uint(0), uint(0)]\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFeeAmount",
        "visibility": "public",
        "args": [
            {
                "name": "amount",
                "type": "uint"
            }
        ],
        "func": "function setFeeAmount(uint amount) public {\n        fee = amount;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "feeAmount",
        "visibility": "external",
        "args": [],
        "func": "function feeAmount() external returns (uint feeInShares) {\n        return fee;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initializeForUser",
        "visibility": "external",
        "args": [
            {
                "name": "feeRate",
                "type": "uint"
            },
            {
                "name": "feePeriod",
                "type": "uint"
            },
            {
                "name": "denominationAsset",
                "type": "address"
            }
        ],
        "func": "function initializeForUser(uint feeRate, uint feePeriod, address denominationAsset) external {\n        fee = 0;\n        FEE_RATE = feeRate;\n        FEE_PERIOD = feePeriod;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateState",
        "visibility": "external",
        "args": [],
        "func": "function updateState() external {\n        fee = 0;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "identifier",
        "visibility": "external",
        "args": [],
        "func": "function identifier() external view returns (uint) {\n        return feeNumber;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setTotalFeeAmount",
        "visibility": "public",
        "args": [
            {
                "name": "_amt",
                "type": "uint"
            }
        ],
        "func": "function setTotalFeeAmount(uint _amt) public { totalFees = _amt; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPerformanceFeeAmount",
        "visibility": "public",
        "args": [
            {
                "name": "_amt",
                "type": "uint"
            }
        ],
        "func": "function setPerformanceFeeAmount(uint _amt) public { performanceFees = _amt; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rewardManagementFee",
        "visibility": "public",
        "args": [],
        "func": "function rewardManagementFee() public { return; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "performanceFeeAmount",
        "visibility": "external",
        "args": [],
        "func": "function performanceFeeAmount() external returns (uint) { return performanceFees; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalFeeAmount",
        "visibility": "external",
        "args": [],
        "func": "function totalFeeAmount() external returns (uint) { return totalFees; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "engine",
        "visibility": "public",
        "args": [],
        "func": "function engine() public view override(AmguConsumer, Spoke) returns (address) { return routes.engine; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mlnToken",
        "visibility": "public",
        "args": [],
        "func": "function mlnToken() public view override(AmguConsumer, Spoke) returns (address) { return routes.mlnToken; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "priceSource",
        "visibility": "public",
        "args": [],
        "func": "function priceSource() public view override(AmguConsumer, Spoke) returns (address) { return hub.priceSource(); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registry",
        "visibility": "public",
        "args": [],
        "func": "function registry() public view override(AmguConsumer, Spoke) returns (address) { return routes.registry; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setManager",
        "visibility": "public",
        "args": [
            {
                "name": "_manager",
                "type": "address"
            }
        ],
        "func": "function setManager(address _manager) public { manager = _manager; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setName",
        "visibility": "public",
        "args": [
            {
                "name": "_name",
                "type": "string memory"
            }
        ],
        "func": "function setName(string memory _name) public { name = _name; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "shutDownFund",
        "visibility": "public",
        "args": [],
        "func": "function shutDownFund() public { isShutDown = true; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setShutDownState",
        "visibility": "public",
        "args": [
            {
                "name": "_state",
                "type": "bool"
            }
        ],
        "func": "function setShutDownState(bool _state) public { isShutDown = _state; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setSpokes",
        "visibility": "public",
        "args": [
            {
                "name": "_spokes",
                "type": "address[11] memory"
            }
        ],
        "func": "function setSpokes(address[11] memory _spokes) public {\n        routes.accounting = _spokes[0];\n        routes.feeManager = _spokes[1];\n        routes.participation = _spokes[2];\n        routes.policyManager = _spokes[3];\n        routes.shares = _spokes[4];\n        routes.trading = _spokes[5];\n        routes.vault = _spokes[6];\n        routes.registry = _spokes[7];\n        routes.version = _spokes[8];\n        routes.engine = _spokes[9];\n        routes.mlnAddress = _spokes[10];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setRouting",
        "visibility": "public",
        "args": [],
        "func": "function setRouting() public {\n        address[11] memory spokes = [\n            routes.accounting, routes.feeManager, routes.participation,\n            routes.policyManager, routes.shares, routes.trading,\n            routes.vault, routes.registry, routes.version,\n            routes.engine, routes.mlnAddress\n        ];\n        Spoke(routes.accounting).initialize(spokes);\n        Spoke(routes.feeManager).initialize(spokes);\n        Spoke(routes.participation).initialize(spokes);\n        Spoke(routes.policyManager).initialize(spokes);\n        Spoke(routes.shares).initialize(spokes);\n        Spoke(routes.trading).initialize(spokes);\n        Spoke(routes.vault).initialize(spokes);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPermissions",
        "visibility": "public",
        "args": [],
        "func": "function setPermissions() public {\n        permit(routes.participation, routes.vault, bytes4(keccak256('withdraw(address,uint256)')));\n        permit(routes.trading, routes.vault, bytes4(keccak256('withdraw(address,uint256)')));\n        permit(routes.participation, routes.shares, bytes4(keccak256('createFor(address,uint256)')));\n        permit(routes.participation, routes.shares, bytes4(keccak256('destroyFor(address,uint256)')));\n        permit(routes.feeManager, routes.shares, bytes4(keccak256('createFor(address,uint256)')));\n        permit(routes.participation, routes.accounting, bytes4(keccak256('addAssetToOwnedAssets(address)')));\n        permit(routes.participation, routes.accounting, bytes4(keccak256('removeFromOwnedAssets(address)')));\n        permit(routes.trading, routes.accounting, bytes4(keccak256('addAssetToOwnedAssets(address)')));\n        permit(routes.trading, routes.accounting, bytes4(keccak256('removeFromOwnedAssets(address)')));\n        permit(routes.accounting, routes.feeManager, bytes4(keccak256('rewardAllFees()')));\n        permit(manager, routes.feeManager, bytes4(keccak256('register(address)')));\n        permit(manager, routes.feeManager, bytes4(keccak256('batchRegister(address[])')));\n        permit(manager, routes.policyManager, bytes4(keccak256('register(bytes4,address)')));\n        permit(manager, routes.policyManager, bytes4(keccak256('batchRegister(bytes4[],address[])')));\n        permit(manager, routes.participation, bytes4(keccak256('enableInvestment(address[])')));\n        permit(manager, routes.participation, bytes4(keccak256('disableInvestment(address[])')));\n        permit(bytes32(bytes20(msg.sender)), ANY, ANY);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "permitSomething",
        "visibility": "public",
        "args": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_sig",
                "type": "bytes4"
            }
        ],
        "func": "function permitSomething(address _from, address _to, bytes4 _sig) public {\n        permit(\n            bytes32(bytes20(_from)),\n            bytes32(bytes20(_to)),\n            _sig\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initializeSpoke",
        "visibility": "public",
        "args": [
            {
                "name": "_spoke",
                "type": "address"
            }
        ],
        "func": "function initializeSpoke(address _spoke) public {\n        address[11] memory spokes = [\n            routes.accounting, routes.feeManager, routes.participation,\n            routes.policyManager, routes.shares, routes.trading,\n            routes.vault, routes.registry, routes.version,\n            routes.engine, routes.mlnAddress\n        ];\n        Spoke(_spoke).initialize(spokes);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "vault",
        "visibility": "public",
        "args": [],
        "func": "function vault() public view returns (address) { return routes.vault; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "accounting",
        "visibility": "public",
        "args": [],
        "func": "function accounting() public view returns (address) { return routes.accounting; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "priceSource",
        "visibility": "public",
        "args": [],
        "func": "function priceSource() public view returns (address) { return Registry(routes.registry).priceSource(); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "participation",
        "visibility": "public",
        "args": [],
        "func": "function participation() public view returns (address) { return routes.participation; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "trading",
        "visibility": "public",
        "args": [],
        "func": "function trading() public view returns (address) { return routes.trading; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "shares",
        "visibility": "public",
        "args": [],
        "func": "function shares() public view returns (address) { return routes.shares; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "policyManager",
        "visibility": "public",
        "args": [],
        "func": "function policyManager() public view returns (address) { return routes.policyManager; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registry",
        "visibility": "public",
        "args": [],
        "func": "function registry() public view returns (address) { return routes.registry; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "register",
        "visibility": "public",
        "args": [
            {
                "name": "_addr",
                "type": "address"
            }
        ],
        "func": "function register(address _addr) public {\n        registered[_addr] = true;\n        assets.push(_addr);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "remove",
        "visibility": "public",
        "args": [
            {
                "name": "_addr",
                "type": "address"
            }
        ],
        "func": "function remove(address _addr) public {\n        delete registered[_addr];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "assetIsRegistered",
        "visibility": "public",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function assetIsRegistered(address _asset) public view returns (bool) {\n        return alwaysRegistered || registered[_asset];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "exchangeAdapterIsRegistered",
        "visibility": "public",
        "args": [
            {
                "name": "_adapter",
                "type": "address"
            }
        ],
        "func": "function exchangeAdapterIsRegistered(address _adapter) public view returns (bool) {\n        return alwaysRegistered || registered[_adapter];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registerExchangeAdapter",
        "visibility": "public",
        "args": [
            {
                "name": "_exchange",
                "type": "address"
            },
            {
                "name": "_adapter",
                "type": "address"
            }
        ],
        "func": "function registerExchangeAdapter(\n        address _exchange,\n        address _adapter\n    ) public {\n        exchangeForAdapter[_adapter] = _exchange;\n        takesCustodyForAdapter[_adapter] = true;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "adapterMethodIsAllowed",
        "visibility": "public",
        "args": [
            {
                "name": "_adapter",
                "type": "address"
            },
            {
                "name": "_sig",
                "type": "bytes4"
            }
        ],
        "func": "function adapterMethodIsAllowed(\n        address _adapter,\n        bytes4 _sig\n    ) public view returns (bool) { return methodAllowed; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPriceSource",
        "visibility": "public",
        "args": [
            {
                "name": "_a",
                "type": "address"
            }
        ],
        "func": "function setPriceSource(address _a) public { priceSource = _a; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMlnToken",
        "visibility": "public",
        "args": [
            {
                "name": "_a",
                "type": "address"
            }
        ],
        "func": "function setMlnToken(address _a) public { mlnToken = _a; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setNativeAsset",
        "visibility": "public",
        "args": [
            {
                "name": "_a",
                "type": "address"
            }
        ],
        "func": "function setNativeAsset(address _a) public { nativeAsset = _a; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setEngine",
        "visibility": "public",
        "args": [
            {
                "name": "_a",
                "type": "address"
            }
        ],
        "func": "function setEngine(address _a) public { engine = _a; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFundFactory",
        "visibility": "public",
        "args": [
            {
                "name": "_a",
                "type": "address"
            }
        ],
        "func": "function setFundFactory(address _a) public { fundFactory = _a; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setIsFund",
        "visibility": "public",
        "args": [
            {
                "name": "_who",
                "type": "address"
            }
        ],
        "func": "function setIsFund(address _who) public { fundExists[_who] = true; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isFund",
        "visibility": "public",
        "args": [
            {
                "name": "_who",
                "type": "address"
            }
        ],
        "func": "function isFund(address _who) public view returns (bool) { return fundExists[_who]; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isFundFactory",
        "visibility": "public",
        "args": [
            {
                "name": "_who",
                "type": "address"
            }
        ],
        "func": "function isFundFactory(address _who) public view returns (bool) {\n        return _who == fundFactory;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRegisteredAssets",
        "visibility": "public",
        "args": [],
        "func": "function getRegisteredAssets() public view returns (address[] memory) { return assets; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReserveMin",
        "visibility": "public",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function getReserveMin(address _asset) public view returns (uint) { return 0; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isFeeRegistered",
        "visibility": "public",
        "args": [
            {
                "name": "_fee",
                "type": "address"
            }
        ],
        "func": "function isFeeRegistered(address _fee) public view returns (bool) {\n        return alwaysRegistered;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getExchangeInformation",
        "visibility": "public",
        "args": [
            {
                "name": "_adapter",
                "type": "address"
            }
        ],
        "func": "function getExchangeInformation(address _adapter)\n        public\n        view\n        returns (address, bool)\n    {\n        return (\n            exchangeForAdapter[_adapter],\n            takesCustodyForAdapter[_adapter]\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createFor",
        "visibility": "public",
        "args": [
            {
                "name": "who",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint"
            }
        ],
        "func": "function createFor(address who, uint amount) public {\n        _mint(who, amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "destroyFor",
        "visibility": "public",
        "args": [
            {
                "name": "who",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint"
            }
        ],
        "func": "function destroyFor(address who, uint amount) public {\n        _burn(who, amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setBalanceFor",
        "visibility": "public",
        "args": [
            {
                "name": "who",
                "type": "address"
            },
            {
                "name": "newBalance",
                "type": "uint"
            }
        ],
        "func": "function setBalanceFor(address who, uint newBalance) public {\n        uint currentBalance = balances[who];\n        if (currentBalance > newBalance) {\n            destroyFor(who, currentBalance.sub(newBalance));\n        } else if (balances[who] < newBalance) {\n            createFor(who, newBalance.sub(currentBalance));\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAmguPrice",
        "visibility": "public",
        "args": [
            {
                "name": "_price",
                "type": "uint"
            }
        ],
        "func": "function setAmguPrice(uint _price) public { amguPrice = _price; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "securityShutDown",
        "visibility": "external",
        "args": [],
        "func": "function securityShutDown() external { isShutDown = true; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "shutDownFund",
        "visibility": "external",
        "args": [
            {
                "name": "_hub",
                "type": "address"
            }
        ],
        "func": "function shutDownFund(address _hub) external { Hub(_hub).shutDownFund(); }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getShutDownStatus",
        "visibility": "external",
        "args": [],
        "func": "function getShutDownStatus() external view returns (bool) {return isShutDown;}",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAmguPrice",
        "visibility": "public",
        "args": [],
        "func": "function getAmguPrice() public view returns (uint) { return amguPrice; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "canCall",
        "visibility": "public",
        "args": [
            {
                "name": "src",
                "type": "address"
            },
            {
                "name": "dst",
                "type": "address"
            },
            {
                "name": "sig",
                "type": "bytes4"
            }
        ],
        "func": "function canCall(address src, address dst, bytes4 sig)\n        public\n        view\n        override\n        returns (bool)\n    {\n        return true;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "bequeath",
        "visibility": "public",
        "args": [
            {
                "name": "_heir",
                "type": "address payable"
            }
        ],
        "func": "function bequeath(address payable _heir) public {\n        selfdestruct(_heir);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "update",
        "visibility": "external",
        "args": [
            {
                "name": "_assets",
                "type": "address[] calldata"
            },
            {
                "name": "_prices",
                "type": "uint[] calldata"
            }
        ],
        "func": "function update(address[] calldata _assets, uint[] calldata _prices) external {\n        require(_assets.length == _prices.length, \"Array lengths unequal\");\n        updateId++;\n        for (uint i = 0; i < _assets.length; ++i) {\n            assetsToPrices[_assets[i]] = Data({\n                timestamp: block.timestamp,\n                price: _prices[i]\n            });\n        }\n        lastUpdate = block.timestamp;\n        emit PriceUpdate(_assets, _prices);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPrice",
        "visibility": "public",
        "args": [
            {
                "name": "ofAsset",
                "type": "address"
            }
        ],
        "func": "function getPrice(address ofAsset)\n        public\n        view\n        returns (uint price, uint timestamp)\n    {\n        Data storage data = assetsToPrices[ofAsset];\n        return (data.price, data.timestamp);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPrices",
        "visibility": "public",
        "args": [
            {
                "name": "ofAssets",
                "type": "address[] memory"
            }
        ],
        "func": "function getPrices(address[] memory ofAssets)\n        public\n        view\n        returns (uint[] memory, uint[] memory)\n    {\n        uint[] memory prices = new uint[](ofAssets.length);\n        uint[] memory timestamps = new uint[](ofAssets.length);\n        for (uint i; i < ofAssets.length; i++) {\n            uint price;\n            uint timestamp;\n            (price, timestamp) = getPrice(ofAssets[i]);\n            prices[i] = price;\n            timestamps[i] = timestamp;\n        }\n        return (prices, timestamps);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPriceInfo",
        "visibility": "public",
        "args": [
            {
                "name": "ofAsset",
                "type": "address"
            }
        ],
        "func": "function getPriceInfo(address ofAsset)\n        public\n        view\n        returns (uint price, uint assetDecimals)\n    {\n        (price, ) = getPrice(ofAsset);\n        assetDecimals = assetsToDecimals[ofAsset];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getInvertedPriceInfo",
        "visibility": "public",
        "args": [
            {
                "name": "ofAsset",
                "type": "address"
            }
        ],
        "func": "function getInvertedPriceInfo(address ofAsset)\n        public\n        view\n        returns (uint invertedPrice, uint assetDecimals)\n    {\n        uint inputPrice;\n        // inputPrice quoted in QUOTE_ASSET and multiplied by 10 ** assetDecimal\n        (inputPrice, assetDecimals) = getPriceInfo(ofAsset);\n\n        // outputPrice based in QUOTE_ASSET and multiplied by 10 ** quoteDecimal\n        uint quoteDecimals = assetsToDecimals[QUOTE_ASSET];\n\n        return (\n            mul(\n                10 ** uint(quoteDecimals),\n                10 ** uint(assetDecimals)\n            ) / inputPrice,\n            quoteDecimals\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setNeverValid",
        "visibility": "public",
        "args": [
            {
                "name": "_state",
                "type": "bool"
            }
        ],
        "func": "function setNeverValid(bool _state) public {\n        neverValid = _state;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setIsRecent",
        "visibility": "public",
        "args": [
            {
                "name": "_state",
                "type": "bool"
            }
        ],
        "func": "function setIsRecent(bool _state) public {\n        mockIsRecent = _state;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setDecimals",
        "visibility": "public",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            },
            {
                "name": "_decimal",
                "type": "uint"
            }
        ],
        "func": "function setDecimals(address _asset, uint _decimal) public {\n        assetsToDecimals[_asset] = _decimal;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "batchSetDecimals",
        "visibility": "public",
        "args": [
            {
                "name": "_assets",
                "type": "address[] memory"
            },
            {
                "name": "_decimals",
                "type": "uint[] memory"
            }
        ],
        "func": "function batchSetDecimals(address[] memory _assets, uint[] memory _decimals) public {\n        require(_assets.length == _decimals.length, \"Array lengths unequal\");\n        for (uint i = 0; i < _assets.length; i++) {\n            setDecimals(_assets[i], _decimals[i]);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReferencePriceInfo",
        "visibility": "public",
        "args": [
            {
                "name": "ofBase",
                "type": "address"
            },
            {
                "name": "ofQuote",
                "type": "address"
            }
        ],
        "func": "function getReferencePriceInfo(address ofBase, address ofQuote)\n        public\n        view\n        returns (uint referencePrice, uint decimal)\n    {\n        uint quoteDecimals = assetsToDecimals[ofQuote];\n\n        bool bothValid = hasValidPrice(ofBase) && hasValidPrice(ofQuote);\n        require(bothValid, \"Price not valid\");\n        // Price of 1 unit for the pair of same asset\n        if (ofBase == ofQuote) {\n            return (10 ** uint(quoteDecimals), quoteDecimals);\n        }\n\n        referencePrice = mul(\n            assetsToPrices[ofBase].price,\n            10 ** uint(quoteDecimals)\n        ) / assetsToPrices[ofQuote].price;\n\n        return (referencePrice, quoteDecimals);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getOrderPriceInfo",
        "visibility": "public",
        "args": [
            {
                "name": "sellAsset",
                "type": "address"
            },
            {
                "name": "sellQuantity",
                "type": "uint"
            },
            {
                "name": "buyQuantity",
                "type": "uint"
            }
        ],
        "func": "function getOrderPriceInfo(\n        address sellAsset,\n        uint sellQuantity,\n        uint buyQuantity\n    )\n        public\n        view\n        returns (uint orderPrice)\n    {\n        return mul(buyQuantity, 10 ** uint(assetsToDecimals[sellAsset])) / sellQuantity;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasValidPrice",
        "visibility": "public",
        "args": [
            {
                "name": "_asset",
                "type": "address"
            }
        ],
        "func": "function hasValidPrice(address _asset)\n        public\n        view\n        returns (bool isValid)\n    {\n        uint price;\n        (price, ) = getPrice(_asset);\n\n        return !neverValid && price != 0;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasValidPrices",
        "visibility": "public",
        "args": [
            {
                "name": "_assets",
                "type": "address[] memory"
            }
        ],
        "func": "function hasValidPrices(address[] memory _assets)\n        public\n        view\n        returns (bool)\n    {\n        for (uint i; i < _assets.length; i++) {\n            if (!hasValidPrice(_assets[i])) {\n                return false;\n            }\n        }\n        return true;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "existsPriceOnAssetPair",
        "visibility": "public",
        "args": [
            {
                "name": "sellAsset",
                "type": "address"
            },
            {
                "name": "buyAsset",
                "type": "address"
            }
        ],
        "func": "function existsPriceOnAssetPair(address sellAsset, address buyAsset)\n        public\n        view\n        returns (bool isExistent)\n    {\n        return\n            hasValidPrice(sellAsset) &&\n            hasValidPrice(buyAsset);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getLastUpdateId",
        "visibility": "public",
        "args": [],
        "func": "function getLastUpdateId() public view returns (uint) { return updateId; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getQuoteAsset",
        "visibility": "public",
        "args": [],
        "func": "function getQuoteAsset() public view returns (address) { return QUOTE_ASSET; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "convertQuantity",
        "visibility": "public",
        "args": [
            {
                "name": "fromAssetQuantity",
                "type": "uint"
            },
            {
                "name": "fromAsset",
                "type": "address"
            },
            {
                "name": "toAsset",
                "type": "address"
            }
        ],
        "func": "function convertQuantity(\n        uint fromAssetQuantity,\n        address fromAsset,\n        address toAsset\n    )\n        public\n        view\n        returns (uint)\n    {\n        uint fromAssetPrice;\n        (fromAssetPrice,) = getReferencePriceInfo(fromAsset, toAsset);\n        uint fromAssetDecimals = ERC20WithFields(fromAsset).decimals();\n        return mul(\n            fromAssetQuantity,\n            fromAssetPrice\n        ) / (10 ** uint(fromAssetDecimals));\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getLastUpdate",
        "visibility": "public",
        "args": [],
        "func": "function getLastUpdate() public view returns (uint) { return lastUpdate; }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]