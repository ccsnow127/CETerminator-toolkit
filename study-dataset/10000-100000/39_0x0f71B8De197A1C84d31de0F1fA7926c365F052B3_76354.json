[
    {
        "transactions": 76354,
        "function_num": 39
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address _to, uint256 _value) public timeAllowed returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }",
        "comments": [
            "/**",
            "  * @dev transfer token for a specified address",
            "  * @param _to The address to transfer to.",
            "  * @param _value The amount to be transferred.",
            "  */",
            ""
        ],
        "comt": "/**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n",
        "@dev": "transfer token for a specified address",
        "@param1": "_to The address to transfer to.",
        "@param2": "_value The amount to be transferred.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }",
        "comments": [
            "/**",
            "  * @dev Gets the balance of the specified address.",
            "  * @param _owner The address to query the the balance of. ",
            "  * @return An uint256 representing the amount owned by the passed address.",
            "  */",
            ""
        ],
        "comt": "/**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n",
        "@dev": "Gets the balance of the specified address.",
        "@param1": "_owner The address to query the the balance of.",
        "@return1": "An uint256 representing the amount owned by the passed address.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "checkReleaseAt",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "func": "function checkReleaseAt(address _owner) public constant returns (uint256 date) {\n    return releaseTime[_owner];\n  }",
        "comments": [
            "",
            "  // release time of freezed account",
            "  "
        ],
        "comt": "\n  // release time of freezed account\n  ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(mintingFinished);\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Transfer tokens from one address to another",
            "   * @param _from address The address which you want to send tokens from",
            "   * @param _to address The address which you want to transfer to",
            "   * @param _value uint256 the amount of tokens to be transferred",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n",
        "@dev": "Transfer tokens from one address to another",
        "@param1": "_from address The address which you want to send tokens from",
        "@param2": "_to address The address which you want to transfer to",
        "@param3": "_value uint256 the amount of tokens to be transferred",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.",
            "   *",
            "   * Beware that changing an allowance with this method brings the risk that someone may use both the old",
            "   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this",
            "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:",
            "   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
            "   * @param _spender The address which will spend the funds.",
            "   * @param _value The amount of tokens to be spent.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n",
        "@dev": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. * * Beware that changing an allowance with this method brings the risk that someone may use both the old * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "@param1": "_spender The address which will spend the funds.",
        "@param2": "_value The amount of tokens to be spent.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            },
            {
                "name": "_spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }",
        "comments": [
            "/**",
            "   * @dev Function to check the amount of tokens that an owner allowed to a spender.",
            "   * @param _owner address The address which owns the funds.",
            "   * @param _spender address The address which will spend the funds.",
            "   * @return A uint256 specifying the amount of tokens still available for the spender.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n",
        "@dev": "Function to check the amount of tokens that an owner allowed to a spender.",
        "@param1": "_owner address The address which owns the funds.",
        "@param2": "_spender address The address which will spend the funds.",
        "@return1": "A uint256 specifying the amount of tokens still available for the spender.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseApproval",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_addedValue",
                "type": "uint"
            }
        ],
        "func": "function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Increase the amount of tokens that an owner allowed to a spender.",
            "   *",
            "   * approve should be called when allowed[_spender] == 0. To increment",
            "   * allowed value is better to use this function to avoid 2 calls (and wait until",
            "   * the first transaction is mined)",
            "   * From MonolithDAO Token.sol",
            "   * @param _spender The address which will spend the funds.",
            "   * @param _addedValue The amount of tokens to increase the allowance by.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n",
        "@dev": "Increase the amount of tokens that an owner allowed to a spender. * * approve should be called when allowed[_spender] == 0. To increment * allowed value is better to use this function to avoid 2 calls (and wait until * the first transaction is mined) * From MonolithDAO Token.sol",
        "@param1": "_spender The address which will spend the funds.",
        "@param2": "_addedValue The amount of tokens to increase the allowance by.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseApproval",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_subtractedValue",
                "type": "uint"
            }
        ],
        "func": "function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Decrease the amount of tokens that an owner allowed to a spender.",
            "   *",
            "   * approve should be called when allowed[_spender] == 0. To decrement",
            "   * allowed value is better to use this function to avoid 2 calls (and wait until",
            "   * the first transaction is mined)",
            "   * From MonolithDAO Token.sol",
            "   * @param _spender The address which will spend the funds.",
            "   * @param _subtractedValue The amount of tokens to decrease the allowance by.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n",
        "@dev": "Decrease the amount of tokens that an owner allowed to a spender. * * approve should be called when allowed[_spender] == 0. To decrement * allowed value is better to use this function to avoid 2 calls (and wait until * the first transaction is mined) * From MonolithDAO Token.sol",
        "@param1": "_spender The address which will spend the funds.",
        "@param2": "_subtractedValue The amount of tokens to decrease the allowance by.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "Ownable",
        "visibility": "public",
        "args": [],
        "func": "function Ownable() public {\n    owner = msg.sender;\n  }",
        "comments": [
            "/**",
            "   * @dev The Ownable constructor sets the original `owner` of the contract to the sender",
            "   * account.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n",
        "@dev": "The Ownable constructor sets the original `owner` of the contract to the sender * account.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferOwnership",
        "visibility": "public",
        "args": [
            {
                "name": "newOwner",
                "type": "address"
            }
        ],
        "func": "function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    owner = newOwner;\n  }",
        "comments": [
            "/**",
            "   * @dev Allows the current owner to transfer control of the contract to a newOwner.",
            "   * @param newOwner The address to transfer ownership to.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n",
        "@dev": "Allows the current owner to transfer control of the contract to a newOwner.",
        "@param1": "newOwner The address to transfer ownership to.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "ArconaToken",
        "visibility": "public",
        "args": [
            {
                "name": "_startSale",
                "type": "uint256"
            },
            {
                "name": "_finishSale",
                "type": "uint256"
            },
            {
                "name": "_multisig",
                "type": "address"
            },
            {
                "name": "_restricted",
                "type": "address"
            },
            {
                "name": "_registerbot",
                "type": "address"
            },
            {
                "name": "_certbot",
                "type": "address"
            },
            {
                "name": "_release6m",
                "type": "address"
            },
            {
                "name": "_release12m",
                "type": "address"
            },
            {
                "name": "_release18m",
                "type": "address"
            }
        ],
        "func": "function ArconaToken(uint256 _startSale,uint256 _finishSale,address _multisig,address _restricted,address _registerbot,address _certbot, address _release6m, address _release12m, address _release18m) public  {\n        multisig = _multisig;\n        restricted = _restricted;\n        registerbot = _registerbot;\n        certbot = _certbot;\n        release6m = _release6m;\n        release12m = _release12m;\n        release18m = _release18m;\n        startSale = _startSale;\n        finishSale = _finishSale;\n    }",
        "comments": [
            "// ETH Course in USD",
            "",
            "    // constructor",
            "    "
        ],
        "comt": "// ETH Course in USD\n\n    // constructor\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "changefirst24Percent",
        "visibility": "public",
        "args": [
            {
                "name": "_percent",
                "type": "uint"
            }
        ],
        "func": "function changefirst24Percent(uint _percent) public onlyOwner {\n        first24Percent = _percent;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "changeCourse",
        "visibility": "public",
        "args": [
            {
                "name": "_usd",
                "type": "uint"
            }
        ],
        "func": "function changeCourse(uint _usd) public onlyOwner {\n        rateUSD = _usd;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "changeMultisig",
        "visibility": "public",
        "args": [
            {
                "name": "_new",
                "type": "address"
            }
        ],
        "func": "function changeMultisig(address _new) public onlyOwner {\n        multisig = _new;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "changeRegisterBot",
        "visibility": "public",
        "args": [
            {
                "name": "_new",
                "type": "address"
            }
        ],
        "func": "function changeRegisterBot(address _new) public onlyOwner {\n        registerbot = _new;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "changeCertBot",
        "visibility": "public",
        "args": [
            {
                "name": "_new",
                "type": "address"
            }
        ],
        "func": "function changeCertBot(address _new) public onlyOwner {\n        certbot = _new;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "changeRestricted",
        "visibility": "public",
        "args": [
            {
                "name": "_new",
                "type": "address"
            }
        ],
        "func": "function changeRestricted(address _new) public onlyOwner {\n        if (isFinished) {\n            changeReleaseAccount(restricted,_new);\n        }\n        restricted = _new;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "proceedKYC",
        "visibility": "public",
        "args": [
            {
                "name": "_customer",
                "type": "address"
            }
        ],
        "func": "function proceedKYC(address _customer) public {\n        require(msg.sender == registerbot || msg.sender == owner);\n        require(_customer != address(0));\n       releaseAccount(_customer);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "changeRelease6m",
        "visibility": "public",
        "args": [
            {
                "name": "_new",
                "type": "address"
            }
        ],
        "func": "function changeRelease6m(address _new) public onlyOwner {\n        if (isFinished) {\n            changeReleaseAccount(release6m,_new);\n        }\n        release6m = _new;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "changeRelease12m",
        "visibility": "public",
        "args": [
            {
                "name": "_new",
                "type": "address"
            }
        ],
        "func": "function changeRelease12m(address _new) public onlyOwner {\n        if (isFinished) {\n            changeReleaseAccount(release12m,_new);\n        }\n        release12m = _new;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "changeRelease18m",
        "visibility": "public",
        "args": [
            {
                "name": "_new",
                "type": "address"
            }
        ],
        "func": "function changeRelease18m(address _new) public onlyOwner {\n        if (isFinished) {\n            changeReleaseAccount(release18m,_new);\n        }\n        release18m = _new;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addCertificate",
        "visibility": "public",
        "args": [
            {
                "name": "_id",
                "type": "string"
            },
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "func": "function addCertificate(string _id,  address _owner) public {\n        require(msg.sender == certbot || msg.sender == owner);\n        require(certificate[_id] == address(0));\n        if (_owner != address(0)) {\n            certificate[_id] = _owner;\n        } else {\n            certificate[_id] = owner;\n        }    \n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "editCertificate",
        "visibility": "public",
        "args": [
            {
                "name": "_id",
                "type": "string"
            },
            {
                "name": "_newowner",
                "type": "address"
            }
        ],
        "func": "function editCertificate(string _id,  address _newowner) public {\n        require(certificate[_id] != address(0));\n        require(msg.sender == certificate[_id] || msg.sender == certbot || msg.sender == owner );\n        certificate[_id] = _newowner;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "checkCertificate",
        "visibility": "public",
        "args": [
            {
                "name": "_id",
                "type": "string"
            }
        ],
        "func": "function checkCertificate(string _id) public view returns (address) {\n        return certificate[_id];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deleteCertificate",
        "visibility": "public",
        "args": [
            {
                "name": "_id",
                "type": "string"
            }
        ],
        "func": "function deleteCertificate(string _id) public  {\n        require(msg.sender == certbot || msg.sender == owner);\n        delete certificate[_id];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registerCustomer",
        "visibility": "public",
        "args": [
            {
                "name": "_customer",
                "type": "address"
            },
            {
                "name": "_referral",
                "type": "address"
            }
        ],
        "func": "function registerCustomer(address _customer, address _referral) public {\n        require(msg.sender == registerbot || msg.sender == owner);\n        require(_customer != address(0));\n        registered[_customer] = true;\n        if (_referral != address(0) && _referral != _customer) {\n            referral[_customer] = _referral;\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "checkCustomer",
        "visibility": "public",
        "args": [
            {
                "name": "_customer",
                "type": "address"
            }
        ],
        "func": "function checkCustomer(address _customer) public view returns (bool, address) {\n        return ( registered[_customer], referral[_customer]);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "importCustomer",
        "visibility": "public",
        "args": [
            {
                "name": "_customer",
                "type": "address"
            },
            {
                "name": "_referral",
                "type": "address"
            },
            {
                "name": "_tokenAmount",
                "type": "uint"
            }
        ],
        "func": "function importCustomer(address _customer, address _referral, uint _tokenAmount) public {\n        require(msg.sender == registerbot || msg.sender == owner);\n        require(_customer != address(0));\n        require(now < startSale); // before ICO starts\n        registered[_customer] = true;\n        if (_referral != address(0) && _referral != _customer) {\n            referral[_customer] = _referral;\n        }\n        mint(_customer, _tokenAmount, now + 99 * 1 years); // till KYC is completed\n    }",
        "comments": [
            "",
            "    // import preICO customers from 0x516130856e743090af9d7fd95d6fc94c8743a4e1",
            "    "
        ],
        "comt": "\n    // import preICO customers from 0x516130856e743090af9d7fd95d6fc94c8743a4e1\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deleteCustomer",
        "visibility": "public",
        "args": [
            {
                "name": "_customer",
                "type": "address"
            }
        ],
        "func": "function deleteCustomer(address _customer) public {\n        require(msg.sender == registerbot || msg.sender == owner);\n        require(_customer!= address(0));\n        delete registered[_customer];\n        delete referral[_customer];\n        // Drain tokens\n        unMint(_customer);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "globalPause",
        "visibility": "public",
        "args": [
            {
                "name": "_state",
                "type": "bool"
            }
        ],
        "func": "function globalPause(bool _state) public onlyOwner {\n        isGlobalPause = _state;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "changeRateSale",
        "visibility": "public",
        "args": [
            {
                "name": "_tokenAmount",
                "type": "uint"
            }
        ],
        "func": "function changeRateSale(uint _tokenAmount) public onlyOwner {\n        require(isGlobalPause || (now > startSale && now < finishSale));\n        rateSale = _tokenAmount;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "changeStartSale",
        "visibility": "public",
        "args": [
            {
                "name": "_ts",
                "type": "uint256"
            }
        ],
        "func": "function changeStartSale(uint256 _ts) public onlyOwner {\n        startSale = _ts;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "changeMinTokenSale",
        "visibility": "public",
        "args": [
            {
                "name": "_ts",
                "type": "uint256"
            }
        ],
        "func": "function changeMinTokenSale(uint256 _ts) public onlyOwner {\n        minTokenSale = _ts;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "changeFinishSale",
        "visibility": "public",
        "args": [
            {
                "name": "_ts",
                "type": "uint256"
            }
        ],
        "func": "function changeFinishSale(uint256 _ts) public onlyOwner {\n        finishSale = _ts;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAuction",
        "visibility": "public",
        "args": [
            {
                "name": "_startAuction",
                "type": "uint256"
            },
            {
                "name": "_finishAuction",
                "type": "uint256"
            },
            {
                "name": "_auctionPercent",
                "type": "uint256"
            }
        ],
        "func": "function setAuction(uint256 _startAuction, uint256 _finishAuction, uint256 _auctionPercent) public onlyOwner {\n        require(_startAuction < _finishAuction);\n        require(_auctionPercent > 0);\n        require(_startAuction > startSale);\n        require(_finishAuction <= finishSale);\n        finishAuction = _finishAuction;\n        startAuction = _startAuction;\n        auctionPercent = _auctionPercent;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "finishMinting",
        "visibility": "public",
        "args": [],
        "func": "function finishMinting() public onlyOwner {\n        require(!isFinished);\n        isFinished=true;\n        uint issuedTokenSupply = totalSupply;\n        // 40% restricted + 60% issuedTokenSupply = 100%\n        uint restrictedTokens = issuedTokenSupply.mul(restrictedPercent).div(100 - restrictedPercent);\n        issuedTokenSupply = issuedTokenSupply.add(restrictedTokens);\n        // 13% - 11% for any purpose and 2% bounty\n        mint(restricted, issuedTokenSupply.mul(13).div(100), now);\n        // 27% - freezed founds to team & adwisers\n        mint(release6m, issuedTokenSupply.mul(85).div(1000), now + 180 * 1 days); // 8.5 %\n        mint(release12m, issuedTokenSupply.mul(85).div(1000), now + 365 * 1 days); // 8.5 %\n        mint(release18m, issuedTokenSupply.mul(10).div(100), now + 545 * 1 days); // 10 %\n        mintingFinished=true;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "foreignBuyTest",
        "visibility": "public",
        "args": [
            {
                "name": "_weiAmount",
                "type": "uint256"
            },
            {
                "name": "_rate",
                "type": "uint256"
            }
        ],
        "func": "function foreignBuyTest(uint256 _weiAmount, uint256 _rate) public pure returns (uint tokenAmount) {\n        require(_weiAmount > 0);\n        require(_rate > 0);\n        return _rate.mul(_weiAmount).div(1 ether);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "foreignBuy",
        "visibility": "public",
        "args": [
            {
                "name": "_holder",
                "type": "address"
            },
            {
                "name": "_weiAmount",
                "type": "uint256"
            },
            {
                "name": "_rate",
                "type": "uint256"
            }
        ],
        "func": "function foreignBuy(address _holder, uint256 _weiAmount, uint256 _rate) public {\n        require(msg.sender == registerbot || msg.sender == owner);\n        require(_weiAmount > 0);\n        require(_rate > 0);\n        registered[_holder] = true;\n        uint tokens = _rate.mul(_weiAmount).div(1 ether);\n        mint(_holder, tokens, now + 99 * 1 years); // till KYC is completed\n        totalWeiSale = totalWeiSale.add(_weiAmount);\n    }",
        "comments": [
            "    ",
            "    // BTC external payments",
            "    "
        ],
        "comt": "    \n    // BTC external payments\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createTokens",
        "visibility": "public",
        "args": [],
        "func": "function createTokens() public isRegistered anySaleIsOn isUnderHardCap payable {\n        uint tokens = rateSale.mul(msg.value).div(1 ether);\n        require(tokens >= minTokenSale); // min 10 tokens\n        multisig.transfer(msg.value);\n        uint percent = 0;\n        uint bonusTokens = 0;\n        uint finishBonus = startSale + (bonusPeriod * 1 days);\n        if ( now < finishBonus ) {\n            if ( now <= startSale + 1 days ) {\n                percent = first24Percent;   // 1st day: 50% (for registered whitelist only)\n           } else {        // 25% total:\n               percent = (finishBonus - now).div(1 days); // last 15days -1% every day\n               if ( percent >= 15 ) {  //  first 5days, -1% every 12h\n                  percent = 27 - (now - startSale).div(1 hours).div(12);\n               } else {\n                  percent = percent.add(1);\n               }    \n          }\n        } else {\n            if ( now >= startAuction && now < finishAuction ) {\n                percent = auctionPercent;\n            }\n        }\n        if ( percent > 0 ) {\n            bonusTokens = tokens.mul(percent).div(100);\n            tokens = tokens.add(bonusTokens);\n        }\n\n        totalWeiSale = totalWeiSale.add(msg.value);\n        mint(msg.sender, tokens, now + 99 * 1 years); // till KYC is completed\n\n        if ( referral[msg.sender] != address(0) ) {\n            uint refererTokens = tokens.mul(refererPercent).div(1000);\n            mint(referral[msg.sender], refererTokens, now + 99 * 1 years);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]