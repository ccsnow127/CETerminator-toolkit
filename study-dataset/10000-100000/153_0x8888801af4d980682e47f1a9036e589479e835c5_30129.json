[
    {
        "transactions": 30129,
        "function_num": 153
    },
    {
        "name": "deposit",
        "visibility": "external",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "maturationTimestamp",
                "type": "uint256"
            }
        ],
        "func": "function deposit(uint256 amount, uint256 maturationTimestamp)\n        external\n        nonReentrant\n    {\n        _deposit(amount, maturationTimestamp);\n    }",
        "comments": [
            "/**",
            "        Public actions",
            "     */",
            ""
        ],
        "comt": "/**\n        Public actions\n     */\n",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "depositID",
                "type": "uint256"
            },
            {
                "name": "fundingID",
                "type": "uint256"
            }
        ],
        "func": "function withdraw(uint256 depositID, uint256 fundingID)\n        external\n        nonReentrant\n    {\n        _withdraw(depositID, fundingID, false);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "earlyWithdraw",
        "visibility": "external",
        "args": [
            {
                "name": "depositID",
                "type": "uint256"
            },
            {
                "name": "fundingID",
                "type": "uint256"
            }
        ],
        "func": "function earlyWithdraw(uint256 depositID, uint256 fundingID)\n        external\n        nonReentrant\n    {\n        _withdraw(depositID, fundingID, true);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "multiDeposit",
        "visibility": "external",
        "args": [
            {
                "name": "amountList",
                "type": "uint256[] calldata"
            },
            {
                "name": "maturationTimestampList",
                "type": "uint256[] calldata"
            }
        ],
        "func": "function multiDeposit(\n        uint256[] calldata amountList,\n        uint256[] calldata maturationTimestampList\n    ) external nonReentrant {\n        require(\n            amountList.length == maturationTimestampList.length,\n            \"DInterest: List lengths unequal\"\n        );\n        for (uint256 i = 0; i < amountList.length; i = i.add(1)) {\n            _deposit(amountList[i], maturationTimestampList[i]);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "multiWithdraw",
        "visibility": "external",
        "args": [
            {
                "name": "depositIDList",
                "type": "uint256[] calldata"
            },
            {
                "name": "fundingIDList",
                "type": "uint256[] calldata"
            }
        ],
        "func": "function multiWithdraw(\n        uint256[] calldata depositIDList,\n        uint256[] calldata fundingIDList\n    ) external nonReentrant {\n        require(\n            depositIDList.length == fundingIDList.length,\n            \"DInterest: List lengths unequal\"\n        );\n        for (uint256 i = 0; i < depositIDList.length; i = i.add(1)) {\n            _withdraw(depositIDList[i], fundingIDList[i], false);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "multiEarlyWithdraw",
        "visibility": "external",
        "args": [
            {
                "name": "depositIDList",
                "type": "uint256[] calldata"
            },
            {
                "name": "fundingIDList",
                "type": "uint256[] calldata"
            }
        ],
        "func": "function multiEarlyWithdraw(\n        uint256[] calldata depositIDList,\n        uint256[] calldata fundingIDList\n    ) external nonReentrant {\n        require(\n            depositIDList.length == fundingIDList.length,\n            \"DInterest: List lengths unequal\"\n        );\n        for (uint256 i = 0; i < depositIDList.length; i = i.add(1)) {\n            _withdraw(depositIDList[i], fundingIDList[i], true);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "fundAll",
        "visibility": "external",
        "args": [],
        "func": "function fundAll() external nonReentrant {\n        // Calculate current deficit\n        (bool isNegative, uint256 deficit) = surplus();\n        require(isNegative, \"DInterest: No deficit available\");\n        require(\n            !depositIsFunded(deposits.length),\n            \"DInterest: All deposits funded\"\n        );\n\n        // Create funding struct\n        uint256 incomeIndex = moneyMarket.incomeIndex();\n        require(incomeIndex > 0, \"DInterest: incomeIndex == 0\");\n        fundingList.push(\n            Funding({\n                fromDepositID: latestFundedDepositID,\n                toDepositID: deposits.length,\n                recordedFundedDepositAmount: unfundedUserDepositAmount,\n                recordedMoneyMarketIncomeIndex: incomeIndex\n            })\n        );\n\n        // Update relevant values\n        latestFundedDepositID = deposits.length;\n        unfundedUserDepositAmount = 0;\n\n        _fund(deficit);\n    }",
        "comments": [
            "/**",
            "        Deficit funding",
            "     */",
            ""
        ],
        "comt": "/**\n        Deficit funding\n     */\n",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "fundMultiple",
        "visibility": "external",
        "args": [
            {
                "name": "toDepositID",
                "type": "uint256"
            }
        ],
        "func": "function fundMultiple(uint256 toDepositID) external nonReentrant {\n        require(\n            toDepositID > latestFundedDepositID,\n            \"DInterest: Deposits already funded\"\n        );\n        require(\n            toDepositID <= deposits.length,\n            \"DInterest: Invalid toDepositID\"\n        );\n\n        (bool isNegative, uint256 surplus) = surplus();\n        require(isNegative, \"DInterest: No deficit available\");\n\n        uint256 totalDeficit = 0;\n        uint256 totalSurplus = 0;\n        uint256 totalDepositToFund = 0;\n        // Deposits with ID [latestFundedDepositID+1, toDepositID] will be funded\n        for (\n            uint256 id = latestFundedDepositID.add(1);\n            id <= toDepositID;\n            id = id.add(1)\n        ) {\n            Deposit storage depositEntry = _getDeposit(id);\n            if (depositEntry.active) {\n                // Deposit still active, use current surplus\n                (isNegative, surplus) = surplusOfDeposit(id);\n            } else {\n                // Deposit has been withdrawn, use recorded final surplus\n                (isNegative, surplus) = (\n                    depositEntry.finalSurplusIsNegative,\n                    depositEntry.finalSurplusAmount\n                );\n            }\n\n            if (isNegative) {\n                // Add on deficit to total\n                totalDeficit = totalDeficit.add(surplus);\n            } else {\n                // Has surplus\n                totalSurplus = totalSurplus.add(surplus);\n            }\n\n            if (depositEntry.active) {\n                totalDepositToFund = totalDepositToFund.add(\n                    depositEntry.amount\n                );\n            }\n        }\n        if (totalSurplus >= totalDeficit) {\n            // Deposits selected have a surplus as a whole, revert\n            revert(\"DInterest: Selected deposits in surplus\");\n        } else {\n            // Deduct surplus from totalDeficit\n            totalDeficit = totalDeficit.sub(totalSurplus);\n        }\n\n        // Create funding struct\n        uint256 incomeIndex = moneyMarket.incomeIndex();\n        require(incomeIndex > 0, \"DInterest: incomeIndex == 0\");\n        fundingList.push(\n            Funding({\n                fromDepositID: latestFundedDepositID,\n                toDepositID: toDepositID,\n                recordedFundedDepositAmount: totalDepositToFund,\n                recordedMoneyMarketIncomeIndex: incomeIndex\n            })\n        );\n\n        // Update relevant values\n        latestFundedDepositID = toDepositID;\n        unfundedUserDepositAmount = unfundedUserDepositAmount.sub(\n            totalDepositToFund\n        );\n\n        _fund(totalDeficit);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "calculateInterestAmount",
        "visibility": "public",
        "args": [
            {
                "name": "depositAmount",
                "type": "uint256"
            },
            {
                "name": "depositPeriodInSeconds",
                "type": "uint256"
            }
        ],
        "func": "function calculateInterestAmount(\n        uint256 depositAmount,\n        uint256 depositPeriodInSeconds\n    ) public returns (uint256 interestAmount) {\n        (, uint256 moneyMarketInterestRatePerSecond) = interestOracle\n            .updateAndQuery();\n        (bool surplusIsNegative, uint256 surplusAmount) = surplus();\n\n        return\n            interestModel.calculateInterestAmount(\n                depositAmount,\n                depositPeriodInSeconds,\n                moneyMarketInterestRatePerSecond,\n                surplusIsNegative,\n                surplusAmount\n            );\n    }",
        "comments": [
            "/**",
            "        Public getters",
            "     */",
            ""
        ],
        "comt": "/**\n        Public getters\n     */\n",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "surplus",
        "visibility": "public",
        "args": [],
        "func": "function surplus() public returns (bool isNegative, uint256 surplusAmount) {\n        uint256 totalValue = moneyMarket.totalValue();\n        uint256 totalOwed = totalDeposit.add(totalInterestOwed);\n        if (totalValue >= totalOwed) {\n            // Locked value more than owed deposits, positive surplus\n            isNegative = false;\n            surplusAmount = totalValue.sub(totalOwed);\n        } else {\n            // Locked value less than owed deposits, negative surplus\n            isNegative = true;\n            surplusAmount = totalOwed.sub(totalValue);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "surplusOfDeposit",
        "visibility": "public",
        "args": [
            {
                "name": "depositID",
                "type": "uint256"
            }
        ],
        "func": "function surplusOfDeposit(uint256 depositID)\n        public\n        returns (bool isNegative, uint256 surplusAmount)\n    {\n        Deposit storage depositEntry = _getDeposit(depositID);\n        uint256 currentMoneyMarketIncomeIndex = moneyMarket.incomeIndex();\n        uint256 currentDepositValue = depositEntry\n            .amount\n            .mul(currentMoneyMarketIncomeIndex)\n            .div(depositEntry.initialMoneyMarketIncomeIndex);\n        uint256 owed = depositEntry.amount.add(depositEntry.interestOwed);\n        if (currentDepositValue >= owed) {\n            // Locked value more than owed deposits, positive surplus\n            isNegative = false;\n            surplusAmount = currentDepositValue.sub(owed);\n        } else {\n            // Locked value less than owed deposits, negative surplus\n            isNegative = true;\n            surplusAmount = owed.sub(currentDepositValue);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "depositIsFunded",
        "visibility": "public",
        "args": [
            {
                "name": "id",
                "type": "uint256"
            }
        ],
        "func": "function depositIsFunded(uint256 id) public view returns (bool) {\n        return (id <= latestFundedDepositID);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "depositsLength",
        "visibility": "external",
        "args": [],
        "func": "function depositsLength() external view returns (uint256) {\n        return deposits.length;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "fundingListLength",
        "visibility": "external",
        "args": [],
        "func": "function fundingListLength() external view returns (uint256) {\n        return fundingList.length;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getDeposit",
        "visibility": "external",
        "args": [
            {
                "name": "depositID",
                "type": "uint256"
            }
        ],
        "func": "function getDeposit(uint256 depositID)\n        external\n        view\n        returns (Deposit memory)\n    {\n        return deposits[depositID.sub(1)];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getFunding",
        "visibility": "external",
        "args": [
            {
                "name": "fundingID",
                "type": "uint256"
            }
        ],
        "func": "function getFunding(uint256 fundingID)\n        external\n        view\n        returns (Funding memory)\n    {\n        return fundingList[fundingID.sub(1)];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "moneyMarketIncomeIndex",
        "visibility": "external",
        "args": [],
        "func": "function moneyMarketIncomeIndex() external returns (uint256) {\n        return moneyMarket.incomeIndex();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFeeModel",
        "visibility": "external",
        "args": [
            {
                "name": "newValue",
                "type": "address"
            }
        ],
        "func": "function setFeeModel(address newValue) external onlyOwner {\n        require(newValue.isContract(), \"DInterest: not contract\");\n        feeModel = IFeeModel(newValue);\n        emit ESetParamAddress(msg.sender, \"feeModel\", newValue);\n    }",
        "comments": [
            "/**",
            "        Param setters",
            "     */",
            ""
        ],
        "comt": "/**\n        Param setters\n     */\n",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setInterestModel",
        "visibility": "external",
        "args": [
            {
                "name": "newValue",
                "type": "address"
            }
        ],
        "func": "function setInterestModel(address newValue) external onlyOwner {\n        require(newValue.isContract(), \"DInterest: not contract\");\n        interestModel = IInterestModel(newValue);\n        emit ESetParamAddress(msg.sender, \"interestModel\", newValue);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setInterestOracle",
        "visibility": "external",
        "args": [
            {
                "name": "newValue",
                "type": "address"
            }
        ],
        "func": "function setInterestOracle(address newValue) external onlyOwner {\n        require(newValue.isContract(), \"DInterest: not contract\");\n        interestOracle = IInterestOracle(newValue);\n        emit ESetParamAddress(msg.sender, \"interestOracle\", newValue);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setRewards",
        "visibility": "external",
        "args": [
            {
                "name": "newValue",
                "type": "address"
            }
        ],
        "func": "function setRewards(address newValue) external onlyOwner {\n        require(newValue.isContract(), \"DInterest: not contract\");\n        moneyMarket.setRewards(newValue);\n        emit ESetParamAddress(msg.sender, \"moneyMarket.rewards\", newValue);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMPHMinter",
        "visibility": "external",
        "args": [
            {
                "name": "newValue",
                "type": "address"
            }
        ],
        "func": "function setMPHMinter(address newValue) external onlyOwner {\n        require(newValue.isContract(), \"DInterest: not contract\");\n        mphMinter = MPHMinter(newValue);\n        emit ESetParamAddress(msg.sender, \"mphMinter\", newValue);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMinDepositPeriod",
        "visibility": "external",
        "args": [
            {
                "name": "newValue",
                "type": "uint256"
            }
        ],
        "func": "function setMinDepositPeriod(uint256 newValue) external onlyOwner {\n        require(newValue <= MaxDepositPeriod, \"DInterest: invalid value\");\n        MinDepositPeriod = newValue;\n        emit ESetParamUint(msg.sender, \"MinDepositPeriod\", newValue);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMaxDepositPeriod",
        "visibility": "external",
        "args": [
            {
                "name": "newValue",
                "type": "uint256"
            }
        ],
        "func": "function setMaxDepositPeriod(uint256 newValue) external onlyOwner {\n        require(\n            newValue >= MinDepositPeriod && newValue > 0,\n            \"DInterest: invalid value\"\n        );\n        MaxDepositPeriod = newValue;\n        emit ESetParamUint(msg.sender, \"MaxDepositPeriod\", newValue);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMinDepositAmount",
        "visibility": "external",
        "args": [
            {
                "name": "newValue",
                "type": "uint256"
            }
        ],
        "func": "function setMinDepositAmount(uint256 newValue) external onlyOwner {\n        require(newValue <= MaxDepositAmount, \"DInterest: invalid value\");\n        MinDepositAmount = newValue;\n        emit ESetParamUint(msg.sender, \"MinDepositAmount\", newValue);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMaxDepositAmount",
        "visibility": "external",
        "args": [
            {
                "name": "newValue",
                "type": "uint256"
            }
        ],
        "func": "function setMaxDepositAmount(uint256 newValue) external onlyOwner {\n        require(\n            newValue >= MinDepositAmount && newValue > 0,\n            \"DInterest: invalid value\"\n        );\n        MaxDepositAmount = newValue;\n        emit ESetParamUint(msg.sender, \"MaxDepositAmount\", newValue);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setDepositNFTTokenURI",
        "visibility": "external",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            },
            {
                "name": "newURI",
                "type": "string calldata"
            }
        ],
        "func": "function setDepositNFTTokenURI(uint256 tokenId, string calldata newURI)\n        external\n        onlyOwner\n    {\n        depositNFT.setTokenURI(tokenId, newURI);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setDepositNFTBaseURI",
        "visibility": "external",
        "args": [
            {
                "name": "newURI",
                "type": "string calldata"
            }
        ],
        "func": "function setDepositNFTBaseURI(string calldata newURI) external onlyOwner {\n        depositNFT.setBaseURI(newURI);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setDepositNFTContractURI",
        "visibility": "external",
        "args": [
            {
                "name": "newURI",
                "type": "string calldata"
            }
        ],
        "func": "function setDepositNFTContractURI(string calldata newURI)\n        external\n        onlyOwner\n    {\n        depositNFT.setContractURI(newURI);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFundingNFTTokenURI",
        "visibility": "external",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            },
            {
                "name": "newURI",
                "type": "string calldata"
            }
        ],
        "func": "function setFundingNFTTokenURI(uint256 tokenId, string calldata newURI)\n        external\n        onlyOwner\n    {\n        fundingNFT.setTokenURI(tokenId, newURI);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFundingNFTBaseURI",
        "visibility": "external",
        "args": [
            {
                "name": "newURI",
                "type": "string calldata"
            }
        ],
        "func": "function setFundingNFTBaseURI(string calldata newURI) external onlyOwner {\n        fundingNFT.setBaseURI(newURI);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFundingNFTContractURI",
        "visibility": "external",
        "args": [
            {
                "name": "newURI",
                "type": "string calldata"
            }
        ],
        "func": "function setFundingNFTContractURI(string calldata newURI)\n        external\n        onlyOwner\n    {\n        fundingNFT.setContractURI(newURI);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-totalSupply}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-totalSupply}.\n     */\n",
        "@dev": "See {IERC20-totalSupply}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-balanceOf}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-balanceOf}.\n     */\n",
        "@dev": "See {IERC20-balanceOf}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-transfer}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `recipient` cannot be the zero address.",
            "     * - the caller must have a balance of at least `amount`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n",
        "@dev": "See {IERC20-transfer}. * * Requirements: * * - `recipient` cannot be the zero address. * - the caller must have a balance of at least `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-allowance}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-allowance}.\n     */\n",
        "@dev": "See {IERC20-allowance}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-approve}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n",
        "@dev": "See {IERC20-approve}. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-transferFrom}.",
            "     *",
            "     * Emits an {Approval} event indicating the updated allowance. This is not",
            "     * required by the EIP. See the note at the beginning of {ERC20};",
            "     *",
            "     * Requirements:",
            "     * - `sender` and `recipient` cannot be the zero address.",
            "     * - `sender` must have a balance of at least `amount`.",
            "     * - the caller must have allowance for `sender`'s tokens of at least",
            "     * `amount`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n",
        "@dev": "See {IERC20-transferFrom}. * * Emits an {Approval} event indicating the updated allowance. This is not * required by the EIP. See the note at the beginning of {ERC20}; * * Requirements: * - `sender` and `recipient` cannot be the zero address. * - `sender` must have a balance of at least `amount`. * - the caller must have allowance for `sender`'s tokens of at least * `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Atomically increases the allowance granted to `spender` by the caller.",
            "     *",
            "     * This is an alternative to {approve} that can be used as a mitigation for",
            "     * problems described in {IERC20-approve}.",
            "     *",
            "     * Emits an {Approval} event indicating the updated allowance.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n",
        "@dev": "Atomically increases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Atomically decreases the allowance granted to `spender` by the caller.",
            "     *",
            "     * This is an alternative to {approve} that can be used as a mitigation for",
            "     * problems described in {IERC20-approve}.",
            "     *",
            "     * Emits an {Approval} event indicating the updated allowance.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     * - `spender` must have allowance for the caller of at least",
            "     * `subtractedValue`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n",
        "@dev": "Atomically decreases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address. * - `spender` must have allowance for the caller of at least * `subtractedValue`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "owner",
        "visibility": "public",
        "args": [],
        "func": "function owner() public view returns (address) {\n        return _owner;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the address of the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the address of the current owner.\n     */\n",
        "@dev": "Returns the address of the current owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isOwner",
        "visibility": "public",
        "args": [],
        "func": "function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns true if the caller is the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns true if the caller is the current owner.\n     */\n",
        "@dev": "Returns true if the caller is the current owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceOwnership",
        "visibility": "public",
        "args": [],
        "func": "function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }",
        "comments": [
            "/**",
            "     * @dev Leaves the contract without owner. It will not be possible to call",
            "     * `onlyOwner` functions anymore. Can only be called by the current owner.",
            "     *",
            "     * NOTE: Renouncing ownership will leave the contract without an owner,",
            "     * thereby removing any functionality that is only available to the owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n",
        "@dev": "Leaves the contract without owner. It will not be possible to call * `onlyOwner` functions anymore. Can only be called by the current owner. * * NOTE: Renouncing ownership will leave the contract without an owner, * thereby removing any functionality that is only available to the owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferOwnership",
        "visibility": "public",
        "args": [
            {
                "name": "newOwner",
                "type": "address"
            }
        ],
        "func": "function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }",
        "comments": [
            "/**",
            "     * @dev Transfers ownership of the contract to a new account (`newOwner`).",
            "     * Can only be called by the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n",
        "@dev": "Transfers ownership of the contract to a new account (`newOwner`). * Can only be called by the current owner.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "contractURI",
        "visibility": "external",
        "args": [],
        "func": "function contractURI() external view returns (string memory) {\n        return _contractURI;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "external",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function mint(address to, uint256 tokenId) external onlyOwner {\n        _safeMint(to, tokenId);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "external",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function burn(uint256 tokenId) external onlyOwner {\n        _burn(tokenId);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setContractURI",
        "visibility": "external",
        "args": [
            {
                "name": "newURI",
                "type": "string calldata"
            }
        ],
        "func": "function setContractURI(string calldata newURI) external onlyOwner {\n        _contractURI = newURI;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setTokenURI",
        "visibility": "external",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            },
            {
                "name": "newURI",
                "type": "string calldata"
            }
        ],
        "func": "function setTokenURI(uint256 tokenId, string calldata newURI)\n        external\n        onlyOwner\n    {\n        _setTokenURI(tokenId, newURI);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setBaseURI",
        "visibility": "external",
        "args": [
            {
                "name": "newURI",
                "type": "string calldata"
            }
        ],
        "func": "function setBaseURI(string calldata newURI) external onlyOwner {\n        _setBaseURI(newURI);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "name",
        "visibility": "external",
        "args": [],
        "func": "function name() external view returns (string memory) {\n        return _name;\n    }",
        "comments": [
            "/**",
            "     * @dev Gets the token name.",
            "     * @return string representing the token name",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Gets the token name.\n     * @return string representing the token name\n     */\n",
        "@dev": "Gets the token name.",
        "@return1": "string representing the token name",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "external",
        "args": [],
        "func": "function symbol() external view returns (string memory) {\n        return _symbol;\n    }",
        "comments": [
            "/**",
            "     * @dev Gets the token symbol.",
            "     * @return string representing the token symbol",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Gets the token symbol.\n     * @return string representing the token symbol\n     */\n",
        "@dev": "Gets the token symbol.",
        "@return1": "string representing the token symbol",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "tokenURI",
        "visibility": "external",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function tokenURI(uint256 tokenId) external view returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n\n        // Even if there is a base URI, it is only appended to non-empty token-specific URIs\n        if (bytes(_tokenURI).length == 0) {\n            return \"\";\n        } else {\n            // abi.encodePacked is being used to concatenate strings\n            return string(abi.encodePacked(_baseURI, _tokenURI));\n        }\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the URI for a given token ID. May return an empty string.",
            "     *",
            "     * If the token's URI is non-empty and a base URI was set (via",
            "     * {_setBaseURI}), it will be added to the token ID's URI as a prefix.",
            "     *",
            "     * Reverts if the token ID does not exist.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the URI for a given token ID. May return an empty string.\n     *\n     * If the token's URI is non-empty and a base URI was set (via\n     * {_setBaseURI}), it will be added to the token ID's URI as a prefix.\n     *\n     * Reverts if the token ID does not exist.\n     */\n",
        "@dev": "Returns the URI for a given token ID. May return an empty string. * * If the token's URI is non-empty and a base URI was set (via * {_setBaseURI}), it will be added to the token ID's URI as a prefix. * * Reverts if the token ID does not exist.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "baseURI",
        "visibility": "external",
        "args": [],
        "func": "function baseURI() external view returns (string memory) {\n        return _baseURI;\n    }",
        "comments": [
            "/**",
            "    * @dev Returns the base URI set via {_setBaseURI}. This will be",
            "    * automatically added as a preffix in {tokenURI} to each token's URI, when",
            "    * they are non-empty.",
            "    *",
            "    * _Available since v2.5.0._",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a preffix in {tokenURI} to each token's URI, when\n    * they are non-empty.\n    *\n    * _Available since v2.5.0._\n    */\n",
        "@dev": "Returns the base URI set via {_setBaseURI}. This will be * automatically added as a preffix in {tokenURI} to each token's URI, when * they are non-empty. * * _Available since v2.5.0._",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _ownedTokensCount[owner].current();\n    }",
        "comments": [
            "/**",
            "     * @dev Gets the balance of the specified address.",
            "     * @param owner address to query the balance of",
            "     * @return uint256 representing the amount owned by the passed address",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Gets the balance of the specified address.\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n",
        "@dev": "Gets the balance of the specified address.",
        "@param1": "owner address to query the balance of",
        "@return1": "uint256 representing the amount owned by the passed address",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "ownerOf",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n\n        return owner;\n    }",
        "comments": [
            "/**",
            "     * @dev Gets the owner of the specified token ID.",
            "     * @param tokenId uint256 ID of the token to query the owner of",
            "     * @return address currently marked as the owner of the given token ID",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Gets the owner of the specified token ID.\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n",
        "@dev": "Gets the owner of the specified token ID.",
        "@param1": "tokenId uint256 ID of the token to query the owner of",
        "@return1": "address currently marked as the owner of the given token ID",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }",
        "comments": [
            "/**",
            "     * @dev Approves another address to transfer the given token ID",
            "     * The zero address indicates there is no approved address.",
            "     * There can only be one approved address per token at a given time.",
            "     * Can only be called by the token owner or an approved operator.",
            "     * @param to address to be approved for the given token ID",
            "     * @param tokenId uint256 ID of the token to be approved",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n",
        "@dev": "Approves another address to transfer the given token ID * The zero address indicates there is no approved address. * There can only be one approved address per token at a given time. * Can only be called by the token owner or an approved operator.",
        "@param1": "to address to be approved for the given token ID",
        "@param2": "tokenId uint256 ID of the token to be approved",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getApproved",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }",
        "comments": [
            "/**",
            "     * @dev Gets the approved address for a token ID, or zero if no address set",
            "     * Reverts if the token ID does not exist.",
            "     * @param tokenId uint256 ID of the token to query the approval of",
            "     * @return address currently approved for the given token ID",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n",
        "@dev": "Gets the approved address for a token ID, or zero if no address set * Reverts if the token ID does not exist.",
        "@param1": "tokenId uint256 ID of the token to query the approval of",
        "@return1": "address currently approved for the given token ID",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setApprovalForAll",
        "visibility": "public",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "approved",
                "type": "bool"
            }
        ],
        "func": "function setApprovalForAll(address to, bool approved) public {\n        require(to != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][to] = approved;\n        emit ApprovalForAll(_msgSender(), to, approved);\n    }",
        "comments": [
            "/**",
            "     * @dev Sets or unsets the approval of a given operator",
            "     * An operator is allowed to transfer all tokens of the sender on their behalf.",
            "     * @param to operator address to set the approval",
            "     * @param approved representing the status of the approval to be set",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n",
        "@dev": "Sets or unsets the approval of a given operator * An operator is allowed to transfer all tokens of the sender on their behalf.",
        "@param1": "to operator address to set the approval",
        "@param2": "approved representing the status of the approval to be set",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isApprovedForAll",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "operator",
                "type": "address"
            }
        ],
        "func": "function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }",
        "comments": [
            "/**",
            "     * @dev Tells whether an operator is approved by a given owner.",
            "     * @param owner owner address which you want to query the approval of",
            "     * @param operator operator address which you want to query the approval of",
            "     * @return bool whether the given operator is approved by the given owner",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Tells whether an operator is approved by a given owner.\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n",
        "@dev": "Tells whether an operator is approved by a given owner.",
        "@param1": "owner owner address which you want to query the approval of",
        "@param2": "operator operator address which you want to query the approval of",
        "@return1": "bool whether the given operator is approved by the given owner",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address from, address to, uint256 tokenId) public {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transferFrom(from, to, tokenId);\n    }",
        "comments": [
            "/**",
            "     * @dev Transfers the ownership of a given token ID to another address.",
            "     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.",
            "     * Requires the msg.sender to be the owner, approved, or operator.",
            "     * @param from current owner of the token",
            "     * @param to address to receive the ownership of the given token ID",
            "     * @param tokenId uint256 ID of the token to be transferred",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Transfers the ownership of a given token ID to another address.\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     * Requires the msg.sender to be the owner, approved, or operator.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n",
        "@dev": "Transfers the ownership of a given token ID to another address. * Usage of this method is discouraged, use {safeTransferFrom} whenever possible. * Requires the msg.sender to be the owner, approved, or operator.",
        "@param1": "from current owner of the token",
        "@param2": "to address to receive the ownership of the given token ID",
        "@param3": "tokenId uint256 ID of the token to be transferred",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "safeTransferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }",
        "comments": [
            "/**",
            "     * @dev Safely transfers the ownership of a given token ID to another address",
            "     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},",
            "     * which is called upon a safe transfer, and return the magic value",
            "     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,",
            "     * the transfer is reverted.",
            "     * Requires the msg.sender to be the owner, approved, or operator",
            "     * @param from current owner of the token",
            "     * @param to address to receive the ownership of the given token ID",
            "     * @param tokenId uint256 ID of the token to be transferred",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n",
        "@dev": "Safely transfers the ownership of a given token ID to another address * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, * which is called upon a safe transfer, and return the magic value * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, * the transfer is reverted. * Requires the msg.sender to be the owner, approved, or operator",
        "@param1": "from current owner of the token",
        "@param2": "to address to receive the ownership of the given token ID",
        "@param3": "tokenId uint256 ID of the token to be transferred",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "safeTransferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            },
            {
                "name": "_data",
                "type": "bytes memory"
            }
        ],
        "func": "function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransferFrom(from, to, tokenId, _data);\n    }",
        "comments": [
            "/**",
            "     * @dev Safely transfers the ownership of a given token ID to another address",
            "     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},",
            "     * which is called upon a safe transfer, and return the magic value",
            "     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,",
            "     * the transfer is reverted.",
            "     * Requires the _msgSender() to be the owner, approved, or operator",
            "     * @param from current owner of the token",
            "     * @param to address to receive the ownership of the given token ID",
            "     * @param tokenId uint256 ID of the token to be transferred",
            "     * @param _data bytes data to send along with a safe transfer check",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the _msgSender() to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n",
        "@dev": "Safely transfers the ownership of a given token ID to another address * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received}, * which is called upon a safe transfer, and return the magic value * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, * the transfer is reverted. * Requires the _msgSender() to be the owner, approved, or operator",
        "@param1": "from current owner of the token",
        "@param2": "to address to receive the ownership of the given token ID",
        "@param3": "tokenId uint256 ID of the token to be transferred",
        "@param4": "_data bytes data to send along with a safe transfer check",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supportsInterface",
        "visibility": "external",
        "args": [
            {
                "name": "interfaceId",
                "type": "bytes4"
            }
        ],
        "func": "function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC165-supportsInterface}.",
            "     *",
            "     * Time complexity O(1), guaranteed to always use less than 30 000 gas.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n",
        "@dev": "See {IERC165-supportsInterface}. * * Time complexity O(1), guaranteed to always use less than 30 000 gas.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mintDepositorReward",
        "visibility": "external",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "interestAmount",
                "type": "uint256"
            }
        ],
        "func": "function mintDepositorReward(address to, uint256 interestAmount)\n        external\n        returns (uint256)\n    {\n        uint256 multiplier = poolMintingMultiplier[msg.sender];\n        uint256 mintAmount = interestAmount.decmul(multiplier);\n        if (mintAmount == 0) {\n            // sender is not a pool/has been deactivated\n            return 0;\n        }\n\n        mph.ownerMint(to, mintAmount);\n        mph.ownerMint(devWallet, mintAmount.decmul(devRewardMultiplier));\n        return mintAmount;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "takeBackDepositorReward",
        "visibility": "external",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "mintMPHAmount",
                "type": "uint256"
            },
            {
                "name": "early",
                "type": "bool"
            }
        ],
        "func": "function takeBackDepositorReward(\n        address from,\n        uint256 mintMPHAmount,\n        bool early\n    ) external returns (uint256) {\n        if (poolMintingMultiplier[msg.sender] == 0) {\n            return 0;\n        }\n        uint256 takeBackAmount = early\n            ? mintMPHAmount\n            : mintMPHAmount.decmul(\n                PRECISION.sub(poolDepositorRewardMultiplier[msg.sender])\n            );\n\n        if (early) {\n            // burn all MPH\n            mph.burnFrom(from, takeBackAmount);\n        } else {\n            // transfer to gov treasury\n            mph.transferFrom(from, address(this), takeBackAmount);\n            mph.transfer(govTreasury, takeBackAmount);\n        }\n        return takeBackAmount;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setGovTreasury",
        "visibility": "external",
        "args": [
            {
                "name": "newValue",
                "type": "address"
            }
        ],
        "func": "function setGovTreasury(address newValue) external onlyOwner {\n        require(newValue != address(0), \"MPHMinter: 0 address\");\n        govTreasury = newValue;\n        emit ESetParamAddress(msg.sender, \"govTreasury\", newValue);\n    }",
        "comments": [
            "/**",
            "        Param setters",
            "     */",
            ""
        ],
        "comt": "/**\n        Param setters\n     */\n",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setDevWallet",
        "visibility": "external",
        "args": [
            {
                "name": "newValue",
                "type": "address"
            }
        ],
        "func": "function setDevWallet(address newValue) external onlyOwner {\n        require(newValue != address(0), \"MPHMinter: 0 address\");\n        devWallet = newValue;\n        emit ESetParamAddress(msg.sender, \"devWallet\", newValue);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMPHTokenOwner",
        "visibility": "external",
        "args": [
            {
                "name": "newValue",
                "type": "address"
            }
        ],
        "func": "function setMPHTokenOwner(address newValue) external onlyOwner {\n        require(newValue != address(0), \"MPHMinter: 0 address\");\n        mph.transferOwnership(newValue);\n        emit ESetParamAddress(msg.sender, \"mphTokenOwner\", newValue);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMPHTokenOwnerToZero",
        "visibility": "external",
        "args": [],
        "func": "function setMPHTokenOwnerToZero() external onlyOwner {\n        mph.renounceOwnership();\n        emit ESetParamAddress(msg.sender, \"mphTokenOwner\", address(0));\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPoolMintingMultiplier",
        "visibility": "external",
        "args": [
            {
                "name": "pool",
                "type": "address"
            },
            {
                "name": "newMultiplier",
                "type": "uint256"
            }
        ],
        "func": "function setPoolMintingMultiplier(address pool, uint256 newMultiplier)\n        external\n        onlyOwner\n    {\n        require(pool.isContract(), \"MPHMinter: pool not contract\");\n        poolMintingMultiplier[pool] = newMultiplier;\n        emit ESetParamUint(\n            msg.sender,\n            \"poolMintingMultiplier\",\n            pool,\n            newMultiplier\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPoolDepositorRewardMultiplier",
        "visibility": "external",
        "args": [
            {
                "name": "pool",
                "type": "address"
            },
            {
                "name": "newMultiplier",
                "type": "uint256"
            }
        ],
        "func": "function setPoolDepositorRewardMultiplier(\n        address pool,\n        uint256 newMultiplier\n    ) external onlyOwner {\n        require(pool.isContract(), \"MPHMinter: pool not contract\");\n        require(newMultiplier <= PRECISION, \"MPHMinter: invalid multiplier\");\n        poolDepositorRewardMultiplier[pool] = newMultiplier;\n        emit ESetParamUint(\n            msg.sender,\n            \"poolDepositorRewardMultiplier\",\n            pool,\n            newMultiplier\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "init",
        "visibility": "public",
        "args": [],
        "func": "function init() public {\n        require(!initialized, \"MPHToken: initialized\");\n        initialized = true;\n\n        _transferOwnership(msg.sender);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "ownerMint",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function ownerMint(address account, uint256 amount)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        _mint(account, amount);\n        return true;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "public",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function burn(uint256 amount) public {\n        _burn(_msgSender(), amount);\n    }",
        "comments": [
            "/**",
            "     * @dev Destroys `amount` tokens from the caller.",
            "     *",
            "     * See {ERC20-_burn}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n",
        "@dev": "Destroys `amount` tokens from the caller. * * See {ERC20-_burn}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burnFrom",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function burnFrom(address account, uint256 amount) public {\n        _burnFrom(account, amount);\n    }",
        "comments": [
            "/**",
            "     * @dev See {ERC20-_burnFrom}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {ERC20-_burnFrom}.\n     */\n",
        "@dev": "See {ERC20-_burnFrom}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "redeem",
        "visibility": "external",
        "args": [
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function redeem(uint256 _amount) external {\n        _burn(msg.sender, _amount);\n        dai.transfer(msg.sender, _amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "external",
        "args": [
            {
                "name": "_user",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function mint(address _user, uint256 _amount) external {\n        _mint(_user, _amount);\n        if (!isUser[_user]) {\n            users.push(_user);\n            isUser[_user] = true;\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mintInterest",
        "visibility": "external",
        "args": [
            {
                "name": "_seconds",
                "type": "uint256"
            }
        ],
        "func": "function mintInterest(uint256 _seconds) external {\n        uint256 interest;\n        address user;\n        for (uint256 i = 0; i < users.length; i++) {\n            user = users[i];\n            interest = balanceOf(user).mul(_seconds).mul(liquidityRate).div(YEAR.mul(10**27));\n            _mint(user, interest);\n        }\n        normalizedIncome = normalizedIncome.mul(_seconds).mul(liquidityRate).div(YEAR.mul(10**27)).add(normalizedIncome);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setLiquidityRate",
        "visibility": "external",
        "args": [
            {
                "name": "_liquidityRate",
                "type": "uint256"
            }
        ],
        "func": "function setLiquidityRate(uint256 _liquidityRate) external {\n        liquidityRate = _liquidityRate;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "name",
        "visibility": "public",
        "args": [],
        "func": "function name() public view returns (string memory) {\n        return _name;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the name of the token.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the name of the token.\n     */\n",
        "@dev": "Returns the name of the token.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "public",
        "args": [],
        "func": "function symbol() public view returns (string memory) {\n        return _symbol;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the symbol of the token, usually a shorter version of the",
            "     * name.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n",
        "@dev": "Returns the symbol of the token, usually a shorter version of the * name.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decimals",
        "visibility": "public",
        "args": [],
        "func": "function decimals() public view returns (uint8) {\n        return _decimals;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the number of decimals used to get its user representation.",
            "     * For example, if `decimals` equals `2`, a balance of `505` tokens should",
            "     * be displayed to a user as `5,05` (`505 / 10 ** 2`).",
            "     *",
            "     * Tokens usually opt for a value of 18, imitating the relationship between",
            "     * Ether and Wei.",
            "     *",
            "     * NOTE: This information is only used for _display_ purposes: it in",
            "     * no way affects any of the arithmetic of the contract, including",
            "     * {IERC20-balanceOf} and {IERC20-transfer}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n",
        "@dev": "Returns the number of decimals used to get its user representation. * For example, if `decimals` equals `2`, a balance of `505` tokens should * be displayed to a user as `5,05` (`505 / 10 ** 2`). * * Tokens usually opt for a value of 18, imitating the relationship between * Ether and Wei. * * NOTE: This information is only used for _display_ purposes: it in * no way affects any of the arithmetic of the contract, including * {IERC20-balanceOf} and {IERC20-transfer}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "external",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function mint(uint256 amount) external returns (uint256) {\n        require(\n            ERC20(dai).transferFrom(msg.sender, address(this), amount),\n            \"Error during transferFrom\"\n        ); // 1 DAI\n        _mint(msg.sender, (amount * 10**18) / _exchangeRate);\n        return 0;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "redeemUnderlying",
        "visibility": "external",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function redeemUnderlying(uint256 amount) external returns (uint256) {\n        _burn(msg.sender, (amount * 10**18) / _exchangeRate);\n        require(\n            ERC20(dai).transfer(msg.sender, amount),\n            \"Error during transfer\"\n        ); // 1 DAI\n        return 0;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "exchangeRateStored",
        "visibility": "external",
        "args": [],
        "func": "function exchangeRateStored() external view returns (uint256) {\n        return _exchangeRate;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "exchangeRateCurrent",
        "visibility": "external",
        "args": [],
        "func": "function exchangeRateCurrent() external view returns (uint256) {\n        return _exchangeRate;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "_setExchangeRateStored",
        "visibility": "external",
        "args": [
            {
                "name": "_rate",
                "type": "uint256"
            }
        ],
        "func": "function _setExchangeRateStored(uint256 _rate) external returns (uint256) {\n        _exchangeRate = _rate;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supplyRatePerBlock",
        "visibility": "external",
        "args": [],
        "func": "function supplyRatePerBlock() external view returns (uint256) {\n        return _supplyRate;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "_setSupplyRatePerBlock",
        "visibility": "external",
        "args": [
            {
                "name": "_rate",
                "type": "uint256"
            }
        ],
        "func": "function _setSupplyRatePerBlock(uint256 _rate) external {\n        _supplyRate = _rate;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "claimComp",
        "visibility": "external",
        "args": [
            {
                "name": "holder",
                "type": "address"
            }
        ],
        "func": "function claimComp(address holder) external {\n        comp.mint(holder, CLAIM_AMOUNT);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getCompAddress",
        "visibility": "external",
        "args": [],
        "func": "function getCompAddress() external view returns (address) {\n        return address(comp);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "public",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function mint(address to, uint256 amount) public {\n        _mint(to, amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getLendingPool",
        "visibility": "external",
        "args": [],
        "func": "function getLendingPool() external view returns (address) {\n        return pool;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setLendingPoolImpl",
        "visibility": "external",
        "args": [
            {
                "name": "_pool",
                "type": "address"
            }
        ],
        "func": "function setLendingPoolImpl(address _pool) external {\n        pool = _pool;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getLendingPoolCore",
        "visibility": "external",
        "args": [],
        "func": "function getLendingPoolCore() external view returns (address) {\n        return core;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setLendingPoolCoreImpl",
        "visibility": "external",
        "args": [
            {
                "name": "_pool",
                "type": "address"
            }
        ],
        "func": "function setLendingPoolCoreImpl(address _pool) external {\n        core = _pool;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setLendingPool",
        "visibility": "public",
        "args": [
            {
                "name": "lendingPoolAddress",
                "type": "address"
            }
        ],
        "func": "function setLendingPool(address lendingPoolAddress) public {\n        lendingPool = LendingPoolMock(lendingPoolAddress);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "bounceTransfer",
        "visibility": "external",
        "args": [
            {
                "name": "_reserve",
                "type": "address"
            },
            {
                "name": "_sender",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function bounceTransfer(address _reserve, address _sender, uint256 _amount)\n        external\n    {\n        ERC20 token = ERC20(_reserve);\n        token.transferFrom(_sender, address(this), _amount);\n\n        token.transfer(msg.sender, _amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReserveNormalizedIncome",
        "visibility": "external",
        "args": [
            {
                "name": "_reserve",
                "type": "address"
            }
        ],
        "func": "function getReserveNormalizedIncome(address _reserve) external view returns (uint256) {\n        (, , , , , , , , , , , address aTokenAddress, ) = lendingPool\n            .getReserveData(_reserve);\n        ATokenMock aToken = ATokenMock(aTokenAddress);\n        return aToken.normalizedIncome();\n    }",
        "comments": [
            "",
            "    // The equivalent of exchangeRateStored() for Compound cTokens",
            "    "
        ],
        "comt": "\n    // The equivalent of exchangeRateStored() for Compound cTokens\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setReserveAToken",
        "visibility": "external",
        "args": [
            {
                "name": "_reserve",
                "type": "address"
            },
            {
                "name": "_aTokenAddress",
                "type": "address"
            }
        ],
        "func": "function setReserveAToken(address _reserve, address _aTokenAddress) external {\n        reserveAToken[_reserve] = _aTokenAddress;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "external",
        "args": [
            {
                "name": "_reserve",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            },
            {
                "name": "uint16",
                "type": "uint16"
            }
        ],
        "func": "function deposit(address _reserve, uint256 _amount, uint16)\n        external\n    {\n        ERC20 token = ERC20(_reserve);\n        core.bounceTransfer(_reserve, msg.sender, _amount);\n\n        // Mint aTokens\n        address aTokenAddress = reserveAToken[_reserve];\n        ATokenMock aToken = ATokenMock(aTokenAddress);\n        aToken.mint(msg.sender, _amount);\n        token.transfer(aTokenAddress, _amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReserveData",
        "visibility": "external",
        "args": [
            {
                "name": "_reserve",
                "type": "address"
            }
        ],
        "func": "function getReserveData(address _reserve)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256 liquidityRate,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            address aTokenAddress,\n            uint40\n        )\n    {\n        aTokenAddress = reserveAToken[_reserve];\n        ATokenMock aToken = ATokenMock(aTokenAddress);\n        liquidityRate = aToken.liquidityRate();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "public",
        "args": [
            {
                "name": "tokenAmount",
                "type": "uint256"
            }
        ],
        "func": "function deposit(uint256 tokenAmount) public {\n        uint256 sharePrice = getPricePerFullShare();\n        _mint(msg.sender, tokenAmount.decdiv(sharePrice));\n\n        underlying.transferFrom(msg.sender, address(this), tokenAmount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "public",
        "args": [
            {
                "name": "sharesAmount",
                "type": "uint256"
            }
        ],
        "func": "function withdraw(uint256 sharesAmount) public {\n        uint256 sharePrice = getPricePerFullShare();\n        uint256 underlyingAmount = sharesAmount.decmul(sharePrice);\n        _burn(msg.sender, sharesAmount);\n\n        underlying.transfer(msg.sender, underlyingAmount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPricePerFullShare",
        "visibility": "public",
        "args": [],
        "func": "function getPricePerFullShare() public view returns (uint256) {\n        uint256 _totalSupply = totalSupply();\n        if (_totalSupply == 0) {\n            return 10**18;\n        }\n        return underlying.balanceOf(address(this)).decdiv(_totalSupply);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getFee",
        "visibility": "external",
        "args": [
            {
                "name": "_txAmount",
                "type": "uint256"
            }
        ],
        "func": "function getFee(uint256 _txAmount)\n        external\n        pure\n        returns (uint256 _feeAmount)\n    {\n        _feeAmount = _txAmount.div(10); // Precision is decreased by 1 decimal place\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateAndQuery",
        "visibility": "public",
        "args": [],
        "func": "function updateAndQuery() public returns (bool updated, uint256 value) {\n        uint256 timeElapsed = now - lastUpdateTimestamp;\n        if (timeElapsed < UPDATE_INTERVAL) {\n            return (false, emaStored);\n        }\n\n        // save gas by loading storage variables to memory\n        uint256 _lastIncomeIndex = lastIncomeIndex;\n        uint256 _emaStored = emaStored;\n\n        uint256 newIncomeIndex = moneyMarket.incomeIndex();\n        uint256 incomingValue = newIncomeIndex.sub(_lastIncomeIndex).decdiv(_lastIncomeIndex).div(timeElapsed);\n\n        updated = true;\n        value = incomingValue.mul(UPDATE_MULTIPLIER).add(_emaStored.mul(ONE_MINUS_UPDATE_MULTIPLIER)).div(PRECISION);\n        emaStored = value;\n        lastIncomeIndex = newIncomeIndex;\n        lastUpdateTimestamp = now;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "query",
        "visibility": "public",
        "args": [],
        "func": "function query() public view returns (uint256 value) {\n        return emaStored;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "calculateInterestAmount",
        "visibility": "external",
        "args": [
            {
                "name": "depositAmount",
                "type": "uint256"
            },
            {
                "name": "depositPeriodInSeconds",
                "type": "uint256"
            },
            {
                "name": "moneyMarketInterestRatePerSecond",
                "type": "uint256"
            },
            {
                "name": "bool",
                "type": "bool"
            },
            {
                "name": "/*surplusAmount*/",
                "type": "/*surplusIsNegative*/\n        uint256"
            }
        ],
        "func": "function calculateInterestAmount(\n        uint256 depositAmount,\n        uint256 depositPeriodInSeconds,\n        uint256 moneyMarketInterestRatePerSecond,\n        bool, /*surplusIsNegative*/\n        uint256 /*surplusAmount*/\n    ) external view returns (uint256 interestAmount) {\n        // interestAmount = depositAmount * moneyMarketInterestRatePerSecond * IRMultiplier * depositPeriodInSeconds\n        interestAmount = depositAmount\n            .mul(PRECISION)\n            .decmul(moneyMarketInterestRatePerSecond)\n            .decmul(IRMultiplier)\n            .mul(depositPeriodInSeconds)\n            .div(PRECISION);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "external",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function deposit(uint256 amount) external onlyOwner {\n        require(amount > 0, \"AaveMarket: amount is 0\");\n\n        ILendingPool lendingPool = ILendingPool(provider.getLendingPool());\n        address lendingPoolCore = provider.getLendingPoolCore();\n\n        // Transfer `amount` stablecoin from `msg.sender`\n        stablecoin.safeTransferFrom(msg.sender, address(this), amount);\n\n        // Approve `amount` stablecoin to lendingPool\n        stablecoin.safeIncreaseAllowance(lendingPoolCore, amount);\n\n        // Deposit `amount` stablecoin to lendingPool\n        lendingPool.deposit(address(stablecoin), amount, REFERRALCODE);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "amountInUnderlying",
                "type": "uint256"
            }
        ],
        "func": "function withdraw(uint256 amountInUnderlying)\n        external\n        onlyOwner\n        returns (uint256 actualAmountWithdrawn)\n    {\n        require(amountInUnderlying > 0, \"AaveMarket: amountInUnderlying is 0\");\n\n        ILendingPool lendingPool = ILendingPool(provider.getLendingPool());\n\n        // Initialize aToken\n        (, , , , , , , , , , , address aTokenAddress, ) = lendingPool\n            .getReserveData(address(stablecoin));\n        IAToken aToken = IAToken(aTokenAddress);\n\n        // Redeem `amountInUnderlying` aToken, since 1 aToken = 1 stablecoin\n        aToken.redeem(amountInUnderlying);\n\n        // Transfer `amountInUnderlying` stablecoin to `msg.sender`\n        stablecoin.safeTransfer(msg.sender, amountInUnderlying);\n\n        return amountInUnderlying;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "claimRewards",
        "visibility": "external",
        "args": [],
        "func": "function claimRewards() external {}",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalValue",
        "visibility": "external",
        "args": [],
        "func": "function totalValue() external returns (uint256) {\n        ILendingPool lendingPool = ILendingPool(provider.getLendingPool());\n\n        // Initialize aToken\n        (, , , , , , , , , , , address aTokenAddress, ) = lendingPool\n            .getReserveData(address(stablecoin));\n        IAToken aToken = IAToken(aTokenAddress);\n\n        return aToken.balanceOf(address(this));\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "incomeIndex",
        "visibility": "external",
        "args": [],
        "func": "function incomeIndex() external returns (uint256) {\n        ILendingPoolCore lendingPoolCore = ILendingPoolCore(\n            provider.getLendingPoolCore()\n        );\n        return lendingPoolCore.getReserveNormalizedIncome(address(stablecoin));\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setRewards",
        "visibility": "external",
        "args": [
            {
                "name": "newValue",
                "type": "address"
            }
        ],
        "func": "function setRewards(address newValue) external {}",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "external",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function deposit(uint256 amount) external onlyOwner {\n        require(amount > 0, \"CompoundERC20Market: amount is 0\");\n\n        // Transfer `amount` stablecoin from `msg.sender`\n        stablecoin.safeTransferFrom(msg.sender, address(this), amount);\n\n        // Deposit `amount` stablecoin into cToken\n        stablecoin.safeIncreaseAllowance(address(cToken), amount);\n        require(\n            cToken.mint(amount) == ERRCODE_OK,\n            \"CompoundERC20Market: Failed to mint cTokens\"\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "amountInUnderlying",
                "type": "uint256"
            }
        ],
        "func": "function withdraw(uint256 amountInUnderlying)\n        external\n        onlyOwner\n        returns (uint256 actualAmountWithdrawn)\n    {\n        require(\n            amountInUnderlying > 0,\n            \"CompoundERC20Market: amountInUnderlying is 0\"\n        );\n\n        // Withdraw `amountInUnderlying` stablecoin from cToken\n        require(\n            cToken.redeemUnderlying(amountInUnderlying) == ERRCODE_OK,\n            \"CompoundERC20Market: Failed to redeem\"\n        );\n\n        // Transfer `amountInUnderlying` stablecoin to `msg.sender`\n        stablecoin.safeTransfer(msg.sender, amountInUnderlying);\n\n        return amountInUnderlying;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "claimRewards",
        "visibility": "external",
        "args": [],
        "func": "function claimRewards() external {\n        comptroller.claimComp(address(this));\n        ERC20 comp = ERC20(comptroller.getCompAddress());\n        comp.safeTransfer(rewards, comp.balanceOf(address(this)));\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalValue",
        "visibility": "external",
        "args": [],
        "func": "function totalValue() external returns (uint256) {\n        uint256 cTokenBalance = cToken.balanceOf(address(this));\n        // Amount of stablecoin units that 1 unit of cToken can be exchanged for, scaled by 10^18\n        uint256 cTokenPrice = cToken.exchangeRateCurrent();\n        return cTokenBalance.decmul(cTokenPrice);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "incomeIndex",
        "visibility": "external",
        "args": [],
        "func": "function incomeIndex() external returns (uint256) {\n        return cToken.exchangeRateCurrent();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setRewards",
        "visibility": "external",
        "args": [
            {
                "name": "newValue",
                "type": "address"
            }
        ],
        "func": "function setRewards(address newValue) external onlyOwner {\n        require(newValue.isContract(), \"CompoundERC20Market: not contract\");\n        rewards = newValue;\n        emit ESetParamAddress(msg.sender, \"rewards\", newValue);\n    }",
        "comments": [
            "/**",
            "        Param setters",
            "     */",
            ""
        ],
        "comt": "/**\n        Param setters\n     */\n",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "external",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function deposit(uint256 amount) external onlyOwner {\n        require(amount > 0, \"YVaultMarket: amount is 0\");\n\n        // Transfer `amount` stablecoin from `msg.sender`\n        stablecoin.safeTransferFrom(msg.sender, address(this), amount);\n\n        // Approve `amount` stablecoin to vault\n        stablecoin.safeIncreaseAllowance(address(vault), amount);\n\n        // Deposit `amount` stablecoin to vault\n        vault.deposit(amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "amountInUnderlying",
                "type": "uint256"
            }
        ],
        "func": "function withdraw(uint256 amountInUnderlying)\n        external\n        onlyOwner\n        returns (uint256 actualAmountWithdrawn)\n    {\n        require(\n            amountInUnderlying > 0,\n            \"YVaultMarket: amountInUnderlying is 0\"\n        );\n\n        // Withdraw `amountInShares` shares from vault\n        uint256 sharePrice = vault.getPricePerFullShare();\n        uint256 amountInShares = amountInUnderlying.decdiv(sharePrice);\n        vault.withdraw(amountInShares);\n\n        // Transfer stablecoin to `msg.sender`\n        actualAmountWithdrawn = stablecoin.balanceOf(address(this));\n        stablecoin.safeTransfer(msg.sender, actualAmountWithdrawn);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "claimRewards",
        "visibility": "external",
        "args": [],
        "func": "function claimRewards() external {}",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalValue",
        "visibility": "external",
        "args": [],
        "func": "function totalValue() external returns (uint256) {\n        uint256 sharePrice = vault.getPricePerFullShare();\n        uint256 shareBalance = vault.balanceOf(address(this));\n        return shareBalance.decmul(sharePrice);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "incomeIndex",
        "visibility": "external",
        "args": [],
        "func": "function incomeIndex() external returns (uint256) {\n        return vault.getPricePerFullShare();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setRewards",
        "visibility": "external",
        "args": [
            {
                "name": "newValue",
                "type": "address"
            }
        ],
        "func": "function setRewards(address newValue) external {}",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getDumpParams",
        "visibility": "external",
        "args": [
            {
                "name": "tokenAddress",
                "type": "address"
            },
            {
                "name": "parts",
                "type": "uint256"
            }
        ],
        "func": "function getDumpParams(address tokenAddress, uint256 parts)\n        external\n        view\n        returns (uint256 returnAmount, uint256[] memory distribution)\n    {\n        IERC20 token = IERC20(tokenAddress);\n        uint256 tokenBalance = token.balanceOf(address(this));\n        (returnAmount, distribution) = oneSplit.getExpectedReturn(\n            tokenAddress,\n            address(rewardToken),\n            tokenBalance,\n            parts,\n            0\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "dump",
        "visibility": "external",
        "args": [
            {
                "name": "tokenAddress",
                "type": "address"
            },
            {
                "name": "returnAmount",
                "type": "uint256"
            },
            {
                "name": "distribution",
                "type": "uint256[] calldata"
            }
        ],
        "func": "function dump(\n        address tokenAddress,\n        uint256 returnAmount,\n        uint256[] calldata distribution\n    ) external onlySigner {\n        // dump token for rewardToken\n        IERC20 token = IERC20(tokenAddress);\n        uint256 tokenBalance = token.balanceOf(address(this));\n        token.safeIncreaseAllowance(address(oneSplit), tokenBalance);\n\n        uint256 rewardTokenBalanceBefore = rewardToken.balanceOf(address(this));\n        oneSplit.swap(\n            tokenAddress,\n            address(rewardToken),\n            tokenBalance,\n            returnAmount,\n            distribution,\n            0\n        );\n        uint256 rewardTokenBalanceAfter = rewardToken.balanceOf(address(this));\n        require(\n            rewardTokenBalanceAfter > rewardTokenBalanceBefore,\n            \"OneSplitDumper: receivedRewardTokenAmount == 0\"\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "notify",
        "visibility": "external",
        "args": [],
        "func": "function notify() external onlySigner {\n        uint256 balance = rewardToken.balanceOf(address(this));\n        rewardToken.safeTransfer(address(rewards), balance);\n        rewards.notifyRewardAmount(balance);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isSigner",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function isSigner(address account) public view returns (bool) {\n        return _signers.has(account);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addSigner",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function addSigner(address account) public onlySigner {\n        _addSigner(account);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceSigner",
        "visibility": "public",
        "args": [],
        "func": "function renounceSigner() public {\n        _removeSigner(_msgSender());\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "curveWithdraw2",
        "visibility": "external",
        "args": [
            {
                "name": "lpTokenAddress",
                "type": "address"
            },
            {
                "name": "curvePoolAddress",
                "type": "address"
            },
            {
                "name": "minAmounts",
                "type": "uint256[2] calldata"
            }
        ],
        "func": "function curveWithdraw2(\n        address lpTokenAddress,\n        address curvePoolAddress,\n        uint256[2] calldata minAmounts\n    ) external onlySigner {\n        IERC20 lpToken = IERC20(lpTokenAddress);\n        uint256 lpTokenBalance = lpToken.balanceOf(address(this));\n        ICurveFi curvePool = ICurveFi(curvePoolAddress);\n        curvePool.remove_liquidity(lpTokenBalance, minAmounts);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "curveWithdraw3",
        "visibility": "external",
        "args": [
            {
                "name": "lpTokenAddress",
                "type": "address"
            },
            {
                "name": "curvePoolAddress",
                "type": "address"
            },
            {
                "name": "minAmounts",
                "type": "uint256[3] calldata"
            }
        ],
        "func": "function curveWithdraw3(\n        address lpTokenAddress,\n        address curvePoolAddress,\n        uint256[3] calldata minAmounts\n    ) external onlySigner {\n        IERC20 lpToken = IERC20(lpTokenAddress);\n        uint256 lpTokenBalance = lpToken.balanceOf(address(this));\n        ICurveFi curvePool = ICurveFi(curvePoolAddress);\n        curvePool.remove_liquidity(lpTokenBalance, minAmounts);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "curveWithdraw4",
        "visibility": "external",
        "args": [
            {
                "name": "lpTokenAddress",
                "type": "address"
            },
            {
                "name": "curvePoolAddress",
                "type": "address"
            },
            {
                "name": "minAmounts",
                "type": "uint256[4] calldata"
            }
        ],
        "func": "function curveWithdraw4(\n        address lpTokenAddress,\n        address curvePoolAddress,\n        uint256[4] calldata minAmounts\n    ) external onlySigner {\n        IERC20 lpToken = IERC20(lpTokenAddress);\n        uint256 lpTokenBalance = lpToken.balanceOf(address(this));\n        ICurveFi curvePool = ICurveFi(curvePoolAddress);\n        curvePool.remove_liquidity(lpTokenBalance, minAmounts);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "curveWithdraw5",
        "visibility": "external",
        "args": [
            {
                "name": "lpTokenAddress",
                "type": "address"
            },
            {
                "name": "curvePoolAddress",
                "type": "address"
            },
            {
                "name": "minAmounts",
                "type": "uint256[5] calldata"
            }
        ],
        "func": "function curveWithdraw5(\n        address lpTokenAddress,\n        address curvePoolAddress,\n        uint256[5] calldata minAmounts\n    ) external onlySigner {\n        IERC20 lpToken = IERC20(lpTokenAddress);\n        uint256 lpTokenBalance = lpToken.balanceOf(address(this));\n        ICurveFi curvePool = ICurveFi(curvePoolAddress);\n        curvePool.remove_liquidity(lpTokenBalance, minAmounts);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "curveWithdrawOneCoin",
        "visibility": "external",
        "args": [
            {
                "name": "lpTokenAddress",
                "type": "address"
            },
            {
                "name": "curvePoolAddress",
                "type": "address"
            },
            {
                "name": "coinIndex",
                "type": "int128"
            },
            {
                "name": "minAmount",
                "type": "uint256"
            }
        ],
        "func": "function curveWithdrawOneCoin(\n        address lpTokenAddress,\n        address curvePoolAddress,\n        int128 coinIndex,\n        uint256 minAmount\n    ) external onlySigner {\n        IERC20 lpToken = IERC20(lpTokenAddress);\n        uint256 lpTokenBalance = lpToken.balanceOf(address(this));\n        Zap curvePool = Zap(curvePoolAddress);\n        curvePool.remove_liquidity_one_coin(\n            lpTokenBalance,\n            coinIndex,\n            minAmount\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "yearnWithdraw",
        "visibility": "external",
        "args": [
            {
                "name": "yTokenAddress",
                "type": "address"
            }
        ],
        "func": "function yearnWithdraw(address yTokenAddress) external onlySigner {\n        yERC20 yToken = yERC20(yTokenAddress);\n        uint256 balance = yToken.balanceOf(address(this));\n        yToken.withdraw(balance);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setRewardDistribution",
        "visibility": "external",
        "args": [
            {
                "name": "_rewardDistribution",
                "type": "address"
            },
            {
                "name": "_isRewardDistribution",
                "type": "bool"
            }
        ],
        "func": "function setRewardDistribution(\n        address _rewardDistribution,\n        bool _isRewardDistribution\n    ) external onlyOwner {\n        isRewardDistribution[_rewardDistribution] = _isRewardDistribution;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "stake",
        "visibility": "public",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function stake(uint256 amount) public {\n        _totalSupply = _totalSupply.add(amount);\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\n        stakeToken.safeTransferFrom(msg.sender, address(this), amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "public",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function withdraw(uint256 amount) public {\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n        stakeToken.safeTransfer(msg.sender, amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "lastTimeRewardApplicable",
        "visibility": "public",
        "args": [],
        "func": "function lastTimeRewardApplicable() public view returns (uint256) {\n        return Math.min(block.timestamp, periodFinish);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "rewardPerToken",
        "visibility": "public",
        "args": [],
        "func": "function rewardPerToken() public view returns (uint256) {\n        if (totalSupply() == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored.add(\n                lastTimeRewardApplicable()\n                    .sub(lastUpdateTime)\n                    .mul(rewardRate)\n                    .mul(1e18)\n                    .div(totalSupply())\n            );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "earned",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function earned(address account) public view returns (uint256) {\n        return\n            balanceOf(account)\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\n                .div(1e18)\n                .add(rewards[account]);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "stake",
        "visibility": "public",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function stake(uint256 amount) public updateReward(msg.sender) checkStart {\n        require(amount > 0, \"Rewards: cannot stake 0\");\n        super.stake(amount);\n        emit Staked(msg.sender, amount);\n    }",
        "comments": [
            "",
            "    // stake visibility is public as overriding LPTokenWrapper's stake() function",
            "    "
        ],
        "comt": "\n    // stake visibility is public as overriding LPTokenWrapper's stake() function\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "public",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function withdraw(uint256 amount)\n        public\n        updateReward(msg.sender)\n        checkStart\n    {\n        require(amount > 0, \"Rewards: cannot withdraw 0\");\n        super.withdraw(amount);\n        emit Withdrawn(msg.sender, amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "exit",
        "visibility": "external",
        "args": [],
        "func": "function exit() external {\n        withdraw(balanceOf(msg.sender));\n        getReward();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getReward",
        "visibility": "public",
        "args": [],
        "func": "function getReward() public updateReward(msg.sender) checkStart {\n        uint256 reward = earned(msg.sender);\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            rewardToken.safeTransfer(msg.sender, reward);\n            emit RewardPaid(msg.sender, reward);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "notifyRewardAmount",
        "visibility": "external",
        "args": [
            {
                "name": "reward",
                "type": "uint256"
            }
        ],
        "func": "function notifyRewardAmount(uint256 reward)\n        external\n        onlyRewardDistribution\n        updateReward(address(0))\n    {\n        // https://sips.synthetix.io/sips/sip-77\n        require(reward > 0, \"Rewards: reward == 0\");\n        require(\n            reward < uint256(-1) / 10**18,\n            \"Rewards: rewards too large, would lock\"\n        );\n        if (block.timestamp > starttime) {\n            if (block.timestamp >= periodFinish) {\n                rewardRate = reward.div(DURATION);\n            } else {\n                uint256 remaining = periodFinish.sub(block.timestamp);\n                uint256 leftover = remaining.mul(rewardRate);\n                rewardRate = reward.add(leftover).div(DURATION);\n            }\n            lastUpdateTime = block.timestamp;\n            periodFinish = block.timestamp.add(DURATION);\n            emit RewardAdded(reward);\n        } else {\n            rewardRate = reward.div(DURATION);\n            lastUpdateTime = starttime;\n            periodFinish = starttime.add(DURATION);\n            emit RewardAdded(reward);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]