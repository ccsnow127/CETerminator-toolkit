[
    {
        "transactions": 40703,
        "function_num": 8
    },
    {
        "name": "Owned",
        "visibility": "public",
        "args": [],
        "func": "function Owned() public {\n        owner = msg.sender;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "changeOwner",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "func": "function changeOwner(address _owner) public onlyOwner {\n        require(_owner != address(0));\n        owner = _owner;\n        ChangeOwner(owner, _owner);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "UNetworkToken",
        "visibility": "public",
        "args": [],
        "func": "function UNetworkToken(\n    ) public {\n        totalSupply = 10 ** 10 * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"UNetworkToken\";                                   // Set the name for display purposes\n        symbol = \"UUU\";                               // Set the symbol for display purposes\n    }",
        "comments": [
            "/**",
            "     * Constrctor function",
            "     *",
            "     * Initializes contract with initial supply tokens to the creator of the contract",
            "     */",
            ""
        ],
        "comt": "/**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }",
        "comments": [
            "/**",
            "     * Transfer tokens",
            "     *",
            "     * Send `_value` tokens to `_to` from your account",
            "     *",
            "     * @param _to The address of the recipient",
            "     * @param _value the amount to send",
            "     */",
            ""
        ],
        "comt": "/**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n",
        "@param1": "_to The address of the recipient",
        "@param2": "_value the amount to send",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * Transfer tokens from other address",
            "     *",
            "     * Send `_value` tokens to `_to` on behalf of `_from`",
            "     *",
            "     * @param _from The address of the sender",
            "     * @param _to The address of the recipient",
            "     * @param _value the amount to send",
            "     */",
            ""
        ],
        "comt": "/**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` on behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n",
        "@param1": "_from The address of the sender",
        "@param2": "_to The address of the recipient",
        "@param3": "_value the amount to send",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }",
        "comments": [
            "/**",
            "     * Set allowance for other address",
            "     *",
            "     * Allows `_spender` to spend no more than `_value` tokens on your behalf",
            "     *",
            "     * @param _spender The address authorized to spend",
            "     * @param _value the max amount they can spend",
            "     */",
            ""
        ],
        "comt": "/**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n",
        "@param1": "_spender The address authorized to spend",
        "@param2": "_value the max amount they can spend",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "public",
        "args": [
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * Destroy tokens",
            "     *",
            "     * Remove `_value` tokens from the system irreversibly",
            "     *",
            "     * @param _value the amount of money to burn",
            "     */",
            ""
        ],
        "comt": "/**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n",
        "@param1": "_value the amount of money to burn",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burnFrom",
        "visibility": "public",
        "args": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * Destroy tokens from other account",
            "     *",
            "     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.",
            "     *",
            "     * @param _from the address of the sender",
            "     * @param _value the amount of money to burn",
            "     */",
            ""
        ],
        "comt": "/**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n",
        "@param1": "_from the address of the sender",
        "@param2": "_value the amount of money to burn",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]