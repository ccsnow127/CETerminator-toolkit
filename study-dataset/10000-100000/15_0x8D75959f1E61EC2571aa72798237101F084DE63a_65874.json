[
    {
        "transactions": 65874,
        "function_num": 15
    },
    {
        "name": "owner",
        "visibility": "public",
        "args": [],
        "func": "function owner() public view returns(address) {\n    return _owner;\n  }",
        "comments": [
            "/**",
            "   * @return the address of the owner.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @return the address of the owner.\n   */\n",
        "@return1": "the address of the owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isOwner",
        "visibility": "public",
        "args": [],
        "func": "function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }",
        "comments": [
            "/**",
            "   * @return true if `msg.sender` is the owner of the contract.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n",
        "@return1": "true if `msg.sender` is the owner of the contract.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceOwnership",
        "visibility": "public",
        "args": [],
        "func": "function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }",
        "comments": [
            "/**",
            "   * @dev Allows the current owner to relinquish control of the contract.",
            "   * @notice Renouncing to ownership will leave the contract without an owner.",
            "   * It will not be possible to call the functions with the `onlyOwner`",
            "   * modifier anymore.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n",
        "@dev": "Allows the current owner to relinquish control of the contract.",
        "@notice": "Renouncing to ownership will leave the contract without an owner. * It will not be possible to call the functions with the `onlyOwner` * modifier anymore.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferOwnership",
        "visibility": "public",
        "args": [
            {
                "name": "newOwner",
                "type": "address"
            }
        ],
        "func": "function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }",
        "comments": [
            "/**",
            "   * @dev Allows the current owner to transfer control of the contract to a newOwner.",
            "   * @param newOwner The address to transfer ownership to.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n",
        "@dev": "Allows the current owner to transfer control of the contract to a newOwner.",
        "@param1": "newOwner The address to transfer ownership to.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }",
        "comments": [
            "/**",
            "  * @dev Total number of tokens in existence",
            "  */",
            ""
        ],
        "comt": "/**\n  * @dev Total number of tokens in existence\n  */\n",
        "@dev": "Total number of tokens in existence",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }",
        "comments": [
            "/**",
            "  * @dev Gets the balance of the specified address.",
            "  * @param owner The address to query the balance of.",
            "  * @return An uint256 representing the amount owned by the passed address.",
            "  */",
            ""
        ],
        "comt": "/**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n",
        "@dev": "Gets the balance of the specified address.",
        "@param1": "owner The address to query the balance of.",
        "@return1": "An uint256 representing the amount owned by the passed address.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "func": "function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }",
        "comments": [
            "/**",
            "   * @dev Function to check the amount of tokens that an owner allowed to a spender.",
            "   * @param owner address The address which owns the funds.",
            "   * @param spender address The address which will spend the funds.",
            "   * @return A uint256 specifying the amount of tokens still available for the spender.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n",
        "@dev": "Function to check the amount of tokens that an owner allowed to a spender.",
        "@param1": "owner address The address which owns the funds.",
        "@param2": "spender address The address which will spend the funds.",
        "@return1": "A uint256 specifying the amount of tokens still available for the spender.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }",
        "comments": [
            "/**",
            "  * @dev Transfer token for a specified address",
            "  * @param to The address to transfer to.",
            "  * @param value The amount to be transferred.",
            "  */",
            ""
        ],
        "comt": "/**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n",
        "@dev": "Transfer token for a specified address",
        "@param1": "to The address to transfer to.",
        "@param2": "value The amount to be transferred.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.",
            "   * Beware that changing an allowance with this method brings the risk that someone may use both the old",
            "   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this",
            "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:",
            "   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
            "   * @param spender The address which will spend the funds.",
            "   * @param value The amount of tokens to be spent.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n",
        "@dev": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. * Beware that changing an allowance with this method brings the risk that someone may use both the old * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "@param1": "spender The address which will spend the funds.",
        "@param2": "value The amount of tokens to be spent.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Transfer tokens from one address to another",
            "   * @param from address The address which you want to send tokens from",
            "   * @param to address The address which you want to transfer to",
            "   * @param value uint256 the amount of tokens to be transferred",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n",
        "@dev": "Transfer tokens from one address to another",
        "@param1": "from address The address which you want to send tokens from",
        "@param2": "to address The address which you want to transfer to",
        "@param3": "value uint256 the amount of tokens to be transferred",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Increase the amount of tokens that an owner allowed to a spender.",
            "   * approve should be called when allowed_[_spender] == 0. To increment",
            "   * allowed value is better to use this function to avoid 2 calls (and wait until",
            "   * the first transaction is mined)",
            "   * From MonolithDAO Token.sol",
            "   * @param spender The address which will spend the funds.",
            "   * @param addedValue The amount of tokens to increase the allowance by.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n",
        "@dev": "Increase the amount of tokens that an owner allowed to a spender. * approve should be called when allowed_[_spender] == 0. To increment * allowed value is better to use this function to avoid 2 calls (and wait until * the first transaction is mined) * From MonolithDAO Token.sol",
        "@param1": "spender The address which will spend the funds.",
        "@param2": "addedValue The amount of tokens to increase the allowance by.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Decrease the amount of tokens that an owner allowed to a spender.",
            "   * approve should be called when allowed_[_spender] == 0. To decrement",
            "   * allowed value is better to use this function to avoid 2 calls (and wait until",
            "   * the first transaction is mined)",
            "   * From MonolithDAO Token.sol",
            "   * @param spender The address which will spend the funds.",
            "   * @param subtractedValue The amount of tokens to decrease the allowance by.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n",
        "@dev": "Decrease the amount of tokens that an owner allowed to a spender. * approve should be called when allowed_[_spender] == 0. To decrement * allowed value is better to use this function to avoid 2 calls (and wait until * the first transaction is mined) * From MonolithDAO Token.sol",
        "@param1": "spender The address which will spend the funds.",
        "@param2": "subtractedValue The amount of tokens to decrease the allowance by.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "public",
        "args": [
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function burn(uint256 value) public {\n    _burn(msg.sender, value);\n  }",
        "comments": [
            "/**",
            "   * @dev Burns a specific amount of tokens.",
            "   * @param value The amount of token to be burned.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Burns a specific amount of tokens.\n   * @param value The amount of token to be burned.\n   */\n",
        "@dev": "Burns a specific amount of tokens.",
        "@param1": "value The amount of token to be burned.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burnFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function burnFrom(address from, uint256 value) public {\n    _burnFrom(from, value);\n  }",
        "comments": [
            "/**",
            "   * @dev Burns a specific amount of tokens from the target address and decrements allowance",
            "   * @param from address The address which you want to send tokens from",
            "   * @param value uint256 The amount of token to be burned",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param from address The address which you want to send tokens from\n   * @param value uint256 The amount of token to be burned\n   */\n",
        "@dev": "Burns a specific amount of tokens from the target address and decrements allowance",
        "@param1": "from address The address which you want to send tokens from",
        "@param2": "value uint256 The amount of token to be burned",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function approve(address _spender, uint256 _value) public returns (bool) {\n    require(_value == 0 || allowance(msg.sender, _spender) == 0, \"Use increaseApproval or decreaseApproval to prevent double-spend.\");\n\n    return ERC20.approve(_spender, _value);\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]