[
    {
        "transactions": 45738,
        "function_num": 22
    },
    {
        "name": "name",
        "visibility": "public",
        "args": [],
        "func": "function name() public view virtual returns (string memory) {\n        return _name;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the name of the token.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the name of the token.\n     */\n",
        "@dev": "Returns the name of the token.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "public",
        "args": [],
        "func": "function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the symbol of the token, usually a shorter version of the",
            "     * name.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n",
        "@dev": "Returns the symbol of the token, usually a shorter version of the * name.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decimals",
        "visibility": "public",
        "args": [],
        "func": "function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the number of decimals used to get its user representation.",
            "     * For example, if `decimals` equals `2`, a balance of `505` tokens should",
            "     * be displayed to a user as `5,05` (`505 / 10 ** 2`).",
            "     *",
            "     * Tokens usually opt for a value of 18, imitating the relationship between",
            "     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is",
            "     * called.",
            "     *",
            "     * NOTE: This information is only used for _display_ purposes: it in",
            "     * no way affects any of the arithmetic of the contract, including",
            "     * {IERC20-balanceOf} and {IERC20-transfer}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n",
        "@dev": "Returns the number of decimals used to get its user representation. * For example, if `decimals` equals `2`, a balance of `505` tokens should * be displayed to a user as `5,05` (`505 / 10 ** 2`). * * Tokens usually opt for a value of 18, imitating the relationship between * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is * called. * * NOTE: This information is only used for _display_ purposes: it in * no way affects any of the arithmetic of the contract, including * {IERC20-balanceOf} and {IERC20-transfer}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-totalSupply}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-totalSupply}.\n     */\n",
        "@dev": "See {IERC20-totalSupply}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-balanceOf}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-balanceOf}.\n     */\n",
        "@dev": "See {IERC20-balanceOf}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-transfer}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `recipient` cannot be the zero address.",
            "     * - the caller must have a balance of at least `amount`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n",
        "@dev": "See {IERC20-transfer}. * * Requirements: * * - `recipient` cannot be the zero address. * - the caller must have a balance of at least `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-allowance}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-allowance}.\n     */\n",
        "@dev": "See {IERC20-allowance}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-approve}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n",
        "@dev": "See {IERC20-approve}. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-transferFrom}.",
            "     *",
            "     * Emits an {Approval} event indicating the updated allowance. This is not",
            "     * required by the EIP. See the note at the beginning of {ERC20}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `sender` and `recipient` cannot be the zero address.",
            "     * - `sender` must have a balance of at least `amount`.",
            "     * - the caller must have allowance for ``sender``'s tokens of at least",
            "     * `amount`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n",
        "@dev": "See {IERC20-transferFrom}. * * Emits an {Approval} event indicating the updated allowance. This is not * required by the EIP. See the note at the beginning of {ERC20}. * * Requirements: * * - `sender` and `recipient` cannot be the zero address. * - `sender` must have a balance of at least `amount`. * - the caller must have allowance for ``sender``'s tokens of at least * `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Atomically increases the allowance granted to `spender` by the caller.",
            "     *",
            "     * This is an alternative to {approve} that can be used as a mitigation for",
            "     * problems described in {IERC20-approve}.",
            "     *",
            "     * Emits an {Approval} event indicating the updated allowance.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n",
        "@dev": "Atomically increases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Atomically decreases the allowance granted to `spender` by the caller.",
            "     *",
            "     * This is an alternative to {approve} that can be used as a mitigation for",
            "     * problems described in {IERC20-approve}.",
            "     *",
            "     * Emits an {Approval} event indicating the updated allowance.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     * - `spender` must have allowance for the caller of at least",
            "     * `subtractedValue`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n",
        "@dev": "Atomically decreases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address. * - `spender` must have allowance for the caller of at least * `subtractedValue`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "public",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }",
        "comments": [
            "/**",
            "     * @dev Destroys `amount` tokens from the caller.",
            "     *",
            "     * See {ERC20-_burn}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n",
        "@dev": "Destroys `amount` tokens from the caller. * * See {ERC20-_burn}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burnFrom",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }",
        "comments": [
            "/**",
            "     * @dev Destroys `amount` tokens from `account`, deducting from the caller's",
            "     * allowance.",
            "     *",
            "     * See {ERC20-_burn} and {ERC20-allowance}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - the caller must have allowance for ``accounts``'s tokens of at least",
            "     * `amount`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n",
        "@dev": "Destroys `amount` tokens from `account`, deducting from the caller's * allowance. * * See {ERC20-_burn} and {ERC20-allowance}. * * Requirements: * * - the caller must have allowance for ``accounts``'s tokens of at least * `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getInflationCalcTime",
        "visibility": "public",
        "args": [],
        "func": "function getInflationCalcTime() override public view returns(uint256) {\n        // Get the last time inflation was calculated if it has even started\n        uint256 inflationStartTime = getInflationIntervalStartTime();\n        // If inflation has just begun but not been calculated previously, use the start block as the last calculated point if it has passed\n        return inflationCalcTime == 0 && inflationStartTime < block.timestamp ? inflationStartTime : inflationCalcTime;\n    }",
        "comments": [
            "/**",
            "    * Get the last time that inflation was calculated at",
            "    * @return uint256 Last timestamp since inflation was calculated",
            "    */",
            ""
        ],
        "comt": "/**\n    * Get the last time that inflation was calculated at\n    * @return uint256 Last timestamp since inflation was calculated\n    */\n",
        "@return1": "uint256 Last timestamp since inflation was calculated",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getInflationIntervalTime",
        "visibility": "external",
        "args": [],
        "func": "function getInflationIntervalTime() override external pure returns(uint256) {\n        return inflationInterval;\n    }",
        "comments": [
            "/**",
            "    * How many seconds to calculate inflation at",
            "    * @return uint256 how many seconds to calculate inflation at",
            "    */",
            ""
        ],
        "comt": "/**\n    * How many seconds to calculate inflation at\n    * @return uint256 how many seconds to calculate inflation at\n    */\n",
        "@return1": "uint256 how many seconds to calculate inflation at",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getInflationIntervalRate",
        "visibility": "public",
        "args": [],
        "func": "function getInflationIntervalRate() override public view returns(uint256) {\n        // Inflation rate controlled by the DAO\n        RocketDAOProtocolSettingsInflationInterface daoSettingsInflation = RocketDAOProtocolSettingsInflationInterface(getContractAddress(\"rocketDAOProtocolSettingsInflation\"));\n        return daoSettingsInflation.getInflationIntervalRate();\n    }",
        "comments": [
            "/**",
            "    * The current inflation rate per interval (eg 1000133680617113500 = 5% annual)",
            "    * @return uint256 The current inflation rate per interval",
            "    */",
            ""
        ],
        "comt": "/**\n    * The current inflation rate per interval (eg 1000133680617113500 = 5% annual)\n    * @return uint256 The current inflation rate per interval\n    */\n",
        "@return1": "uint256 The current inflation rate per interval",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getInflationIntervalStartTime",
        "visibility": "public",
        "args": [],
        "func": "function getInflationIntervalStartTime() override public view returns(uint256) {\n        // Inflation rate start time controlled by the DAO\n        RocketDAOProtocolSettingsInflationInterface daoSettingsInflation = RocketDAOProtocolSettingsInflationInterface(getContractAddress(\"rocketDAOProtocolSettingsInflation\"));\n        return daoSettingsInflation.getInflationIntervalStartTime();\n    }",
        "comments": [
            "/**",
            "    * The current block to begin inflation at",
            "    * @return uint256 The current block to begin inflation at",
            "    */",
            ""
        ],
        "comt": "/**\n    * The current block to begin inflation at\n    * @return uint256 The current block to begin inflation at\n    */\n",
        "@return1": "uint256 The current block to begin inflation at",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getInflationRewardsContractAddress",
        "visibility": "external",
        "args": [],
        "func": "function getInflationRewardsContractAddress() override external view returns(address) {\n        // Inflation rate start block controlled by the DAO\n        return getContractAddress(\"rocketRewardsPool\");\n    }",
        "comments": [
            "/**",
            "    * The current rewards pool address that receives the inflation",
            "    * @return address The rewards pool contract address",
            "    */",
            ""
        ],
        "comt": "/**\n    * The current rewards pool address that receives the inflation\n    * @return address The rewards pool contract address\n    */\n",
        "@return1": "address The rewards pool contract address",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getInflationIntervalsPassed",
        "visibility": "public",
        "args": [],
        "func": "function getInflationIntervalsPassed() override public view returns(uint256) {\n        // The time that inflation was last calculated at\n        uint256 inflationLastCalculatedTime = getInflationCalcTime();\n        return _getInflationIntervalsPassed(inflationLastCalculatedTime);\n    }",
        "comments": [
            "/**",
            "    * Compute interval since last inflation update (on call)",
            "    * @return uint256 Time intervals since last update",
            "    */",
            ""
        ],
        "comt": "/**\n    * Compute interval since last inflation update (on call)\n    * @return uint256 Time intervals since last update\n    */\n",
        "@return1": "uint256 Time intervals since last update",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inflationCalculate",
        "visibility": "external",
        "args": [],
        "func": "function inflationCalculate() override external view returns (uint256) {\n        uint256 intervalsSinceLastMint = getInflationIntervalsPassed();\n        return _inflationCalculate(intervalsSinceLastMint);\n    }",
        "comments": [
            "/**",
            "    * @dev Function to compute how many tokens should be minted",
            "    * @return A uint256 specifying number of new tokens to mint",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Function to compute how many tokens should be minted\n    * @return A uint256 specifying number of new tokens to mint\n    */\n",
        "@dev": "Function to compute how many tokens should be minted",
        "@return1": "A uint256 specifying number of new tokens to mint",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "inflationMintTokens",
        "visibility": "external",
        "args": [],
        "func": "function inflationMintTokens() override external returns (uint256) {\n        // Only run inflation process if at least 1 interval has passed (function returns 0 otherwise)\n        uint256 inflationLastCalcTime = getInflationCalcTime();\n        uint256 intervalsSinceLastMint = _getInflationIntervalsPassed(inflationLastCalcTime);\n        if (intervalsSinceLastMint == 0) {\n            return 0;\n        }\n        // Address of the vault where to send tokens\n        address rocketVaultAddress = getContractAddress(\"rocketVault\");\n        require(rocketVaultAddress != address(0x0), \"rocketVault address not set\");\n        // Only mint if we have new tokens to mint since last interval and an address is set to receive them\n        RocketVaultInterface rocketVaultContract = RocketVaultInterface(rocketVaultAddress);\n        // Calculate the amount of tokens now based on inflation rate\n        uint256 newTokens = _inflationCalculate(intervalsSinceLastMint);\n        // Update last inflation calculation timestamp even if inflation rate is 0\n        inflationCalcTime = inflationLastCalcTime.add(inflationInterval.mul(intervalsSinceLastMint));\n        // Check if actually need to mint tokens (e.g. inflation rate > 0)\n        if (newTokens > 0) {\n            // Mint to itself, then allocate tokens for transfer to rewards contract, this will update balance & supply\n            _mint(address(this), newTokens);\n            // Initialise itself and allow from it's own balance (cant just do an allow as it could be any user calling this so they are msg.sender)\n            IERC20 rplInflationContract = IERC20(address(this));\n            // Get the current allowance for Rocket Vault\n            uint256 vaultAllowance = rplFixedSupplyContract.allowance(rocketVaultAddress, address(this));\n            // Now allow Rocket Vault to move those tokens, we also need to account of any other allowances for this token from other contracts in the same block\n            require(rplInflationContract.approve(rocketVaultAddress, vaultAllowance.add(newTokens)), \"Allowance for Rocket Vault could not be approved\");\n            // Let vault know it can move these tokens to itself now and credit the balance to the RPL rewards pool contract\n            rocketVaultContract.depositToken(\"rocketRewardsPool\", IERC20(address(this)), newTokens);\n        }\n        // Log it\n        emit RPLInflationLog(msg.sender, newTokens, inflationCalcTime);\n        // return number minted\n        return newTokens;\n    }",
        "comments": [
            "/**",
            "    * @dev Mint new tokens if enough time has elapsed since last mint",
            "    * @return A uint256 specifying number of new tokens that were minted",
            "    */",
            ""
        ],
        "comt": "/**\n    * @dev Mint new tokens if enough time has elapsed since last mint\n    * @return A uint256 specifying number of new tokens that were minted\n    */\n",
        "@dev": "Mint new tokens if enough time has elapsed since last mint",
        "@return1": "A uint256 specifying number of new tokens that were minted",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "swapTokens",
        "visibility": "external",
        "args": [
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function swapTokens(uint256 _amount) override external {\n        // Valid amount?\n        require(_amount > 0, \"Please enter valid amount of RPL to swap\");\n        // Send the tokens to this contract now and mint new ones for them\n        require(rplFixedSupplyContract.transferFrom(msg.sender, address(this), _amount), \"Token transfer from existing RPL contract was not successful\");\n        // Transfer from the contracts RPL balance to the user\n        require(this.transfer(msg.sender, _amount), \"Token transfer from RPL inflation contract was not successful\");\n        // Update the total swapped\n        totalSwappedRPL = totalSwappedRPL.add(_amount);\n        // Log it\n        emit RPLFixedSupplyBurn(msg.sender, _amount, block.timestamp);\n    }",
        "comments": [
            "/**",
            "   * @dev Swap current RPL fixed supply tokens for new RPL 1:1 to the same address from the user calling it",
            "   * @param _amount The amount of RPL fixed supply tokens to swap",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Swap current RPL fixed supply tokens for new RPL 1:1 to the same address from the user calling it\n   * @param _amount The amount of RPL fixed supply tokens to swap\n   */\n",
        "@dev": "Swap current RPL fixed supply tokens for new RPL 1:1 to the same address from the user calling it",
        "@param1": "_amount The amount of RPL fixed supply tokens to swap",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]