[
    {
        "transactions": 71810,
        "function_num": 184
    },
    {
        "name": "distribute",
        "visibility": "external",
        "args": [
            {
                "name": "token",
                "type": "IERC20"
            },
            {
                "name": "accounts",
                "type": "address[] calldata"
            },
            {
                "name": "amounts",
                "type": "uint256[] calldata"
            }
        ],
        "func": "function distribute(\n        IERC20 token,\n        address[] calldata accounts,\n        uint256[] calldata amounts\n    ) external {\n        require(accounts.length == amounts.length, \"LENGTH_MISMATCH\");\n        for (uint256 i = 0; i < accounts.length; i++) {\n            token.safeTransferFrom(msg.sender, accounts[i], amounts[i]);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getTokens",
        "visibility": "external",
        "args": [],
        "func": "function getTokens() external view returns (address[] memory) {\n        address[] memory returnData = new address[](tokens.length());\n        for (uint256 i = 0; i < tokens.length(); i++) {\n            returnData[i] = tokens.at(i);\n        }\n        return returnData;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registerAllowedOrderSigner",
        "visibility": "external",
        "args": [
            {
                "name": "signer",
                "type": "address"
            },
            {
                "name": "allowed",
                "type": "bool"
            }
        ],
        "func": "function registerAllowedOrderSigner(address signer, bool allowed) external override onlyOwner {\n        require(signer != address(0), \"INVALID_SIGNER\");\n        zeroExRouter.registerAllowedOrderSigner(signer, allowed);\n    }",
        "comments": [
            "",
            "    // solhint-disable-next-line no-empty-blocks",
            "    "
        ],
        "comt": "\n    // solhint-disable-next-line no-empty-blocks\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "external",
        "args": [
            {
                "name": "tokensToAdd",
                "type": "address[] calldata"
            },
            {
                "name": "amounts",
                "type": "uint256[] calldata"
            }
        ],
        "func": "function deposit(address[] calldata tokensToAdd, uint256[] calldata amounts)\n        external\n        override\n        onlyManager\n    {\n        uint256 tokensLength = tokensToAdd.length;\n        uint256 amountsLength = amounts.length;\n\n        require(tokensLength > 0, \"EMPTY_TOKEN_LIST\");\n        require(tokensLength == amountsLength, \"LENGTH_MISMATCH\");\n\n        for (uint256 i = 0; i < tokensLength; i++) {\n            IERC20(tokensToAdd[i]).safeTransferFrom(msg.sender, address(this), amounts[i]);\n            // NOTE: approval must be done after transferFrom; balance is checked in the approval\n            _approve(IERC20(tokensToAdd[i]));\n            tokens.add(address(tokensToAdd[i]));\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "tokensToWithdraw",
                "type": "address[] calldata"
            },
            {
                "name": "amounts",
                "type": "uint256[] calldata"
            }
        ],
        "func": "function withdraw(address[] calldata tokensToWithdraw, uint256[] calldata amounts)\n        external\n        override\n        onlyManager\n    {\n        uint256 tokensLength = tokensToWithdraw.length;\n        uint256 amountsLength = amounts.length;\n\n        require(tokensLength > 0, \"EMPTY_TOKEN_LIST\");\n        require(tokensLength == amountsLength, \"LENGTH_MISMATCH\");\n\n        for (uint256 i = 0; i < tokensLength; i++) {\n            IERC20(tokensToWithdraw[i]).safeTransfer(msg.sender, amounts[i]);\n            if (IERC20(tokensToWithdraw[i]).balanceOf(address(this)) == 0) {\n                tokens.remove(address(tokensToWithdraw[i]));\n            }\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "owner",
        "visibility": "public",
        "args": [],
        "func": "function owner() public view virtual returns (address) {\n        return _owner;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the address of the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the address of the current owner.\n     */\n",
        "@dev": "Returns the address of the current owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceOwnership",
        "visibility": "public",
        "args": [],
        "func": "function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }",
        "comments": [
            "/**",
            "     * @dev Leaves the contract without owner. It will not be possible to call",
            "     * `onlyOwner` functions anymore. Can only be called by the current owner.",
            "     *",
            "     * NOTE: Renouncing ownership will leave the contract without an owner,",
            "     * thereby removing any functionality that is only available to the owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n",
        "@dev": "Leaves the contract without owner. It will not be possible to call * `onlyOwner` functions anymore. Can only be called by the current owner. * * NOTE: Renouncing ownership will leave the contract without an owner, * thereby removing any functionality that is only available to the owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferOwnership",
        "visibility": "public",
        "args": [
            {
                "name": "newOwner",
                "type": "address"
            }
        ],
        "func": "function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }",
        "comments": [
            "/**",
            "     * @dev Transfers ownership of the contract to a new account (`newOwner`).",
            "     * Can only be called by the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n",
        "@dev": "Transfers ownership of the contract to a new account (`newOwner`). * Can only be called by the current owner.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deploy",
        "visibility": "external",
        "args": [
            {
                "name": "data",
                "type": "bytes calldata"
            }
        ],
        "func": "function deploy(bytes calldata data) external {\n        (address[] memory tokens, uint256[] memory amounts) = abi.decode(\n            data,\n            (address[], uint256[])\n        );\n        uint256 tokensLength = tokens.length;\n        for (uint256 i = 0; i < tokensLength; i++) {\n            _approve(IERC20(tokens[i]), amounts[i]);\n        }\n        WALLET.deposit(tokens, amounts);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "data",
                "type": "bytes calldata"
            }
        ],
        "func": "function withdraw(bytes calldata data) external {\n        (address[] memory tokens, uint256[] memory amounts) = abi.decode(\n            data,\n            (address[], uint256[])\n        );\n        WALLET.withdraw(tokens, amounts);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "_cycleDuration",
                "type": "uint256"
            }
        ],
        "func": "function initialize(uint256 _cycleDuration) public initializer {\n        __Context_init_unchained();\n        __AccessControl_init_unchained();\n\n        cycleDuration = _cycleDuration;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(ADMIN_ROLE, _msgSender());\n        _setupRole(ROLLOVER_ROLE, _msgSender());\n        _setupRole(MID_CYCLE_ROLE, _msgSender());\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registerController",
        "visibility": "external",
        "args": [
            {
                "name": "id",
                "type": "bytes32"
            },
            {
                "name": "controller",
                "type": "address"
            }
        ],
        "func": "function registerController(bytes32 id, address controller) external override onlyAdmin {\n        require(!controllerIds.contains(id), \"CONTROLLER_EXISTS\");\n        registeredControllers[id] = controller;\n        controllerIds.add(id);\n        emit ControllerRegistered(id, controller);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "unRegisterController",
        "visibility": "external",
        "args": [
            {
                "name": "id",
                "type": "bytes32"
            }
        ],
        "func": "function unRegisterController(bytes32 id) external override onlyAdmin {\n        require(controllerIds.contains(id), \"INVALID_CONTROLLER\");\n        emit ControllerUnregistered(id, registeredControllers[id]);\n        delete registeredControllers[id];\n        controllerIds.remove(id);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "registerPool",
        "visibility": "external",
        "args": [
            {
                "name": "pool",
                "type": "address"
            }
        ],
        "func": "function registerPool(address pool) external override onlyAdmin {\n        require(!pools.contains(pool), \"POOL_EXISTS\");\n        pools.add(pool);\n        emit PoolRegistered(pool);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "unRegisterPool",
        "visibility": "external",
        "args": [
            {
                "name": "pool",
                "type": "address"
            }
        ],
        "func": "function unRegisterPool(address pool) external override onlyAdmin {\n        require(pools.contains(pool), \"INVALID_POOL\");\n        pools.remove(pool);\n        emit PoolUnregistered(pool);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setCycleDuration",
        "visibility": "external",
        "args": [
            {
                "name": "duration",
                "type": "uint256"
            }
        ],
        "func": "function setCycleDuration(uint256 duration) external override onlyAdmin {\n        cycleDuration = duration;\n        emit CycleDurationSet(duration);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPools",
        "visibility": "external",
        "args": [],
        "func": "function getPools() external view override returns (address[] memory) {\n        address[] memory returnData = new address[](pools.length());\n        for (uint256 i = 0; i < pools.length(); i++) {\n            returnData[i] = pools.at(i);\n        }\n        return returnData;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getControllers",
        "visibility": "external",
        "args": [],
        "func": "function getControllers() external view override returns (bytes32[] memory) {\n        bytes32[] memory returnData = new bytes32[](controllerIds.length());\n        for (uint256 i = 0; i < controllerIds.length(); i++) {\n            returnData[i] = controllerIds.at(i);\n        }\n        return returnData;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "completeRollover",
        "visibility": "external",
        "args": [
            {
                "name": "rewardsIpfsHash",
                "type": "string calldata"
            }
        ],
        "func": "function completeRollover(string calldata rewardsIpfsHash) external override onlyRollover {\n        require(block.number > (currentCycle.add(cycleDuration)), \"PREMATURE_EXECUTION\");\n        _completeRollover(rewardsIpfsHash);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeMaintenance",
        "visibility": "external",
        "args": [
            {
                "name": "params",
                "type": "MaintenanceExecution calldata"
            }
        ],
        "func": "function executeMaintenance(MaintenanceExecution calldata params)\n        external\n        override\n        onlyMidCycle\n    {\n        for (uint256 x = 0; x < params.cycleSteps.length; x++) {\n            _executeControllerCommand(params.cycleSteps[x]);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "executeRollover",
        "visibility": "external",
        "args": [
            {
                "name": "params",
                "type": "RolloverExecution calldata"
            }
        ],
        "func": "function executeRollover(RolloverExecution calldata params) external override onlyRollover {\n        require(block.number > (currentCycle.add(cycleDuration)), \"PREMATURE_EXECUTION\");\n\n        // Transfer deployable liquidity out of the pools and into the manager\n        for (uint256 i = 0; i < params.poolData.length; i++) {\n            require(pools.contains(params.poolData[i].pool), \"INVALID_POOL\");\n            ILiquidityPool pool = ILiquidityPool(params.poolData[i].pool);\n            IERC20 underlyingToken = pool.underlyer();\n            underlyingToken.safeTransferFrom(\n                address(pool),\n                address(this),\n                params.poolData[i].amount\n            );\n            emit LiquidityMovedToManager(params.poolData[i].pool, params.poolData[i].amount);\n        }\n\n        // Deploy or withdraw liquidity\n        for (uint256 x = 0; x < params.cycleSteps.length; x++) {\n            _executeControllerCommand(params.cycleSteps[x]);\n        }\n\n        // Transfer recovered liquidity back into the pools; leave no funds in the manager\n        for (uint256 y = 0; y < params.poolsForWithdraw.length; y++) {\n            require(pools.contains(params.poolsForWithdraw[y]), \"INVALID_POOL\");\n            ILiquidityPool pool = ILiquidityPool(params.poolsForWithdraw[y]);\n            IERC20 underlyingToken = pool.underlyer();\n\n            uint256 managerBalance = underlyingToken.balanceOf(address(this));\n\n            // transfer funds back to the pool if there are funds\n            if (managerBalance > 0) {\n                underlyingToken.safeTransfer(address(pool), managerBalance);\n            }\n            emit LiquidityMovedToPool(params.poolsForWithdraw[y], managerBalance);\n        }\n\n        if (params.complete) {\n            _completeRollover(params.rewardsIpfsHash);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "startCycleRollover",
        "visibility": "external",
        "args": [],
        "func": "function startCycleRollover() external override onlyRollover {\n        rolloverStarted = true;\n        emit CycleRolloverStarted(block.number);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getCurrentCycle",
        "visibility": "external",
        "args": [],
        "func": "function getCurrentCycle() external view override returns (uint256) {\n        return currentCycle;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getCycleDuration",
        "visibility": "external",
        "args": [],
        "func": "function getCycleDuration() external view override returns (uint256) {\n        return cycleDuration;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getCurrentCycleIndex",
        "visibility": "external",
        "args": [],
        "func": "function getCurrentCycleIndex() external view override returns (uint256) {\n        return currentCycleIndex;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRolloverStatus",
        "visibility": "external",
        "args": [],
        "func": "function getRolloverStatus() external view override returns (bool) {\n        return rolloverStarted;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "foo",
        "visibility": "public",
        "args": [],
        "func": "function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }",
        "comments": [
            "/**",
            "     * @dev Returns `true` if `account` has been granted `role`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n",
        "@dev": "Returns `true` if `account` has been granted `role`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRoleMemberCount",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            }
        ],
        "func": "function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the number of accounts that have `role`. Can be used",
            "     * together with {getRoleMember} to enumerate all bearers of a role.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n",
        "@dev": "Returns the number of accounts that have `role`. Can be used * together with {getRoleMember} to enumerate all bearers of a role.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRoleMember",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "index",
                "type": "uint256"
            }
        ],
        "func": "function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }",
        "comments": [
            "/**",
            "     * @dev Returns one of the accounts that have `role`. `index` must be a",
            "     * value between 0 and {getRoleMemberCount}, non-inclusive.",
            "     *",
            "     * Role bearers are not sorted in any particular way, and their ordering may",
            "     * change at any point.",
            "     *",
            "     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure",
            "     * you perform all queries on the same block. See the following",
            "     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]",
            "     * for more information.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n",
        "@dev": "Returns one of the accounts that have `role`. `index` must be a * value between 0 and {getRoleMemberCount}, non-inclusive. * * Role bearers are not sorted in any particular way, and their ordering may * change at any point. * * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure * you perform all queries on the same block. See the following * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] * for more information.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRoleAdmin",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            }
        ],
        "func": "function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the admin role that controls `role`. See {grantRole} and",
            "     * {revokeRole}.",
            "     *",
            "     * To change a role's admin, use {_setRoleAdmin}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n",
        "@dev": "Returns the admin role that controls `role`. See {grantRole} and * {revokeRole}. * * To change a role's admin, use {_setRoleAdmin}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "grantRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }",
        "comments": [
            "/**",
            "     * @dev Grants `role` to `account`.",
            "     *",
            "     * If `account` had not been already granted `role`, emits a {RoleGranted}",
            "     * event.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - the caller must have ``role``'s admin role.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n",
        "@dev": "Grants `role` to `account`. * * If `account` had not been already granted `role`, emits a {RoleGranted} * event. * * Requirements: * * - the caller must have ``role``'s admin role.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "revokeRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }",
        "comments": [
            "/**",
            "     * @dev Revokes `role` from `account`.",
            "     *",
            "     * If `account` had been granted `role`, emits a {RoleRevoked} event.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - the caller must have ``role``'s admin role.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n",
        "@dev": "Revokes `role` from `account`. * * If `account` had been granted `role`, emits a {RoleRevoked} event. * * Requirements: * * - the caller must have ``role``'s admin role.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }",
        "comments": [
            "/**",
            "     * @dev Revokes `role` from the calling account.",
            "     *",
            "     * Roles are often managed via {grantRole} and {revokeRole}: this function's",
            "     * purpose is to provide a mechanism for accounts to lose their privileges",
            "     * if they are compromised (such as when a trusted device is misplaced).",
            "     *",
            "     * If the calling account had been granted `role`, emits a {RoleRevoked}",
            "     * event.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - the caller must be `account`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n",
        "@dev": "Revokes `role` from the calling account. * * Roles are often managed via {grantRole} and {revokeRole}: this function's * purpose is to provide a mechanism for accounts to lose their privileges * if they are compromised (such as when a trusted device is misplaced). * * If the calling account had been granted `role`, emits a {RoleRevoked} * event. * * Requirements: * * - the caller must be `account`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "name",
        "visibility": "public",
        "args": [],
        "func": "function name() public view virtual returns (string memory) {\n        return _name;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the name of the token.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the name of the token.\n     */\n",
        "@dev": "Returns the name of the token.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "public",
        "args": [],
        "func": "function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the symbol of the token, usually a shorter version of the",
            "     * name.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n",
        "@dev": "Returns the symbol of the token, usually a shorter version of the * name.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decimals",
        "visibility": "public",
        "args": [],
        "func": "function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the number of decimals used to get its user representation.",
            "     * For example, if `decimals` equals `2`, a balance of `505` tokens should",
            "     * be displayed to a user as `5,05` (`505 / 10 ** 2`).",
            "     *",
            "     * Tokens usually opt for a value of 18, imitating the relationship between",
            "     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is",
            "     * called.",
            "     *",
            "     * NOTE: This information is only used for _display_ purposes: it in",
            "     * no way affects any of the arithmetic of the contract, including",
            "     * {IERC20-balanceOf} and {IERC20-transfer}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n",
        "@dev": "Returns the number of decimals used to get its user representation. * For example, if `decimals` equals `2`, a balance of `505` tokens should * be displayed to a user as `5,05` (`505 / 10 ** 2`). * * Tokens usually opt for a value of 18, imitating the relationship between * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is * called. * * NOTE: This information is only used for _display_ purposes: it in * no way affects any of the arithmetic of the contract, including * {IERC20-balanceOf} and {IERC20-transfer}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-totalSupply}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-totalSupply}.\n     */\n",
        "@dev": "See {IERC20-totalSupply}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-balanceOf}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-balanceOf}.\n     */\n",
        "@dev": "See {IERC20-balanceOf}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-transfer}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `recipient` cannot be the zero address.",
            "     * - the caller must have a balance of at least `amount`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n",
        "@dev": "See {IERC20-transfer}. * * Requirements: * * - `recipient` cannot be the zero address. * - the caller must have a balance of at least `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-allowance}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-allowance}.\n     */\n",
        "@dev": "See {IERC20-allowance}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-approve}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n",
        "@dev": "See {IERC20-approve}. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-transferFrom}.",
            "     *",
            "     * Emits an {Approval} event indicating the updated allowance. This is not",
            "     * required by the EIP. See the note at the beginning of {ERC20}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `sender` and `recipient` cannot be the zero address.",
            "     * - `sender` must have a balance of at least `amount`.",
            "     * - the caller must have allowance for ``sender``'s tokens of at least",
            "     * `amount`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n",
        "@dev": "See {IERC20-transferFrom}. * * Emits an {Approval} event indicating the updated allowance. This is not * required by the EIP. See the note at the beginning of {ERC20}. * * Requirements: * * - `sender` and `recipient` cannot be the zero address. * - `sender` must have a balance of at least `amount`. * - the caller must have allowance for ``sender``'s tokens of at least * `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Atomically increases the allowance granted to `spender` by the caller.",
            "     *",
            "     * This is an alternative to {approve} that can be used as a mitigation for",
            "     * problems described in {IERC20-approve}.",
            "     *",
            "     * Emits an {Approval} event indicating the updated allowance.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n",
        "@dev": "Atomically increases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Atomically decreases the allowance granted to `spender` by the caller.",
            "     *",
            "     * This is an alternative to {approve} that can be used as a mitigation for",
            "     * problems described in {IERC20-approve}.",
            "     *",
            "     * Emits an {Approval} event indicating the updated allowance.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     * - `spender` must have allowance for the caller of at least",
            "     * `subtractedValue`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n",
        "@dev": "Atomically decreases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address. * - `spender` must have allowance for the caller of at least * `subtractedValue`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "_tokeToken",
                "type": "IERC20"
            },
            {
                "name": "_manager",
                "type": "IManager"
            },
            {
                "name": "_treasury",
                "type": "address"
            }
        ],
        "func": "function initialize(\n        IERC20 _tokeToken,\n        IManager _manager,\n        address _treasury\n    ) public initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n\n        require(address(_tokeToken) != address(0), \"INVALID_TOKETOKEN\");\n        require(address(_manager) != address(0), \"INVALID_MANAGER\");\n        require(_treasury != address(0), \"INVALID_TREASURY\");\n\n        tokeToken = _tokeToken;\n        manager = _manager;\n        treasury = _treasury;\n\n        //We want to be sure the schedule used for LP staking is first\n        //because the order in which withdraws happen need to start with LP stakes\n        _addSchedule(\n            StakingSchedule({\n                cliff: 0,\n                duration: 1,\n                interval: 1,\n                setup: true,\n                isActive: true,\n                hardStart: 0,\n                isPublic: true\n            })\n        );\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addSchedule",
        "visibility": "external",
        "args": [
            {
                "name": "schedule",
                "type": "StakingSchedule memory"
            }
        ],
        "func": "function addSchedule(StakingSchedule memory schedule) external override onlyOwner {\n        _addSchedule(schedule);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setPermissionedDepositor",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "canDeposit",
                "type": "bool"
            }
        ],
        "func": "function setPermissionedDepositor(address account, bool canDeposit)\n        external\n        override\n        onlyOwner\n    {\n        permissionedDepositors[account] = canDeposit;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setUserSchedules",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "userSchedulesIdxs",
                "type": "uint256[] calldata"
            }
        ],
        "func": "function setUserSchedules(address account, uint256[] calldata userSchedulesIdxs)\n        external\n        override\n        onlyOwner\n    {\n        userStakingSchedules[account] = userSchedulesIdxs;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSchedules",
        "visibility": "external",
        "args": [],
        "func": "function getSchedules()\n        external\n        view\n        override\n        returns (StakingScheduleInfo[] memory retSchedules)\n    {\n        uint256 length = scheduleIdxs.length();\n        retSchedules = new StakingScheduleInfo[](length);\n        for (uint256 i = 0; i < length; i++) {\n            retSchedules[i] = StakingScheduleInfo(\n                schedules[scheduleIdxs.at(i)],\n                scheduleIdxs.at(i)\n            );\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "removeSchedule",
        "visibility": "external",
        "args": [
            {
                "name": "scheduleIndex",
                "type": "uint256"
            }
        ],
        "func": "function removeSchedule(uint256 scheduleIndex) external override onlyOwner {\n        require(scheduleIdxs.contains(scheduleIndex), \"INVALID_SCHEDULE\");\n\n        scheduleIdxs.remove(scheduleIndex);\n        delete schedules[scheduleIndex];\n\n        emit ScheduleRemoved(scheduleIndex);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getStakes",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function getStakes(address account)\n        external\n        view\n        override\n        returns (StakingDetails[] memory stakes)\n    {\n        stakes = _getStakes(account);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address account) external view override returns (uint256 value) {\n        value = 0;\n        uint256 scheduleCount = userStakingSchedules[account].length;\n        for (uint256 i = 0; i < scheduleCount; i++) {\n            uint256 remaining = userStakings[account][userStakingSchedules[account][i]].initial.sub(\n                userStakings[account][userStakingSchedules[account][i]].withdrawn\n            );\n            uint256 slashed = userStakings[account][userStakingSchedules[account][i]].slashed;\n            if (remaining > slashed) {\n                value = value.add(remaining.sub(slashed));\n            }\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "availableForWithdrawal",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "scheduleIndex",
                "type": "uint256"
            }
        ],
        "func": "function availableForWithdrawal(address account, uint256 scheduleIndex)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return _availableForWithdrawal(account, scheduleIndex);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "unvested",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "scheduleIndex",
                "type": "uint256"
            }
        ],
        "func": "function unvested(address account, uint256 scheduleIndex)\n        external\n        view\n        override\n        returns (uint256 value)\n    {\n        value = 0;\n        StakingDetails memory stake = userStakings[account][scheduleIndex];\n\n        value = stake.initial.sub(_vested(account, scheduleIndex));\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "vested",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "scheduleIndex",
                "type": "uint256"
            }
        ],
        "func": "function vested(address account, uint256 scheduleIndex)\n        external\n        view\n        override\n        returns (uint256 value)\n    {\n        return _vested(account, scheduleIndex);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "external",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "scheduleIndex",
                "type": "uint256"
            }
        ],
        "func": "function deposit(uint256 amount, uint256 scheduleIndex) external override {\n        _depositFor(msg.sender, amount, scheduleIndex);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "depositFor",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "scheduleIndex",
                "type": "uint256"
            }
        ],
        "func": "function depositFor(\n        address account,\n        uint256 amount,\n        uint256 scheduleIndex\n    ) external override {\n        _depositFor(account, amount, scheduleIndex);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "depositWithSchedule",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "schedule",
                "type": "StakingSchedule calldata"
            }
        ],
        "func": "function depositWithSchedule(\n        address account,\n        uint256 amount,\n        StakingSchedule calldata schedule\n    ) external override onlyPermissionedDepositors {\n        uint256 scheduleIx = nextScheduleIndex;\n        _addSchedule(schedule);\n        _depositFor(account, amount, scheduleIx);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "requestWithdrawal",
        "visibility": "external",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function requestWithdrawal(uint256 amount) external override {\n        require(amount > 0, \"INVALID_AMOUNT\");\n        StakingDetails[] memory stakes = _getStakes(msg.sender);\n        uint256 length = stakes.length;\n        uint256 stakedAvailable = 0;\n        for (uint256 i = 0; i < length; i++) {\n            stakedAvailable = stakedAvailable.add(\n                _availableForWithdrawal(msg.sender, stakes[i].scheduleIx)\n            );\n        }\n\n        require(stakedAvailable >= amount, \"INSUFFICIENT_AVAILABLE\");\n\n        withheldLiquidity = withheldLiquidity.sub(requestedWithdrawals[msg.sender].amount).add(\n            amount\n        );\n        requestedWithdrawals[msg.sender].amount = amount;\n        if (manager.getRolloverStatus()) {\n            requestedWithdrawals[msg.sender].minCycleIndex = manager.getCurrentCycleIndex().add(2);\n        } else {\n            requestedWithdrawals[msg.sender].minCycleIndex = manager.getCurrentCycleIndex().add(1);\n        }\n\n        emit WithdrawalRequested(msg.sender, amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function withdraw(uint256 amount) external override {\n        require(amount <= requestedWithdrawals[msg.sender].amount, \"WITHDRAW_INSUFFICIENT_BALANCE\");\n\n        require(amount > 0, \"NO_WITHDRAWAL\");\n\n        require(\n            requestedWithdrawals[msg.sender].minCycleIndex <= manager.getCurrentCycleIndex(),\n            \"INVALID_CYCLE\"\n        );\n\n        StakingDetails[] memory stakes = _getStakes(msg.sender);\n        uint256 available = 0;\n        uint256 length = stakes.length;\n        uint256 remainingAmount = amount;\n        uint256 stakedAvailable = 0;\n        for (uint256 i = 0; i < length && remainingAmount > 0; i++) {\n            stakedAvailable = _availableForWithdrawal(msg.sender, stakes[i].scheduleIx);\n            available = available.add(stakedAvailable);\n            if (stakedAvailable < remainingAmount) {\n                remainingAmount = remainingAmount.sub(stakedAvailable);\n                stakes[i].withdrawn = stakes[i].withdrawn.add(stakedAvailable);\n            } else {\n                stakes[i].withdrawn = stakes[i].withdrawn.add(remainingAmount);\n                remainingAmount = 0;\n            }\n            userStakings[msg.sender][stakes[i].scheduleIx] = stakes[i];\n        }\n\n        require(remainingAmount == 0, \"INSUFFICIENT_AVAILABLE\"); //May not need to check this again\n\n        requestedWithdrawals[msg.sender].amount = requestedWithdrawals[msg.sender].amount.sub(\n            amount\n        );\n\n        if (requestedWithdrawals[msg.sender].amount == 0) {\n            delete requestedWithdrawals[msg.sender];\n        }\n\n        withheldLiquidity = withheldLiquidity.sub(amount);\n        tokeToken.safeTransfer(msg.sender, amount);\n\n        emit WithdrawCompleted(msg.sender, amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "slash",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            },
            {
                "name": "scheduleIndex",
                "type": "uint256"
            }
        ],
        "func": "function slash(\n        address account,\n        uint256 amount,\n        uint256 scheduleIndex\n    ) external onlyOwner {\n        StakingSchedule storage schedule = schedules[scheduleIndex];\n        require(amount > 0, \"INVALID_AMOUNT\");\n        require(schedule.setup, \"INVALID_SCHEDULE\");\n\n        StakingDetails memory userStake = userStakings[account][scheduleIndex];\n        require(userStake.initial > 0, \"NO_VESTING\");\n\n        uint256 availableToSlash = 0;\n        uint256 remaining = userStake.initial.sub(userStake.withdrawn);\n        if (remaining > userStake.slashed) {\n            availableToSlash = remaining.sub(userStake.slashed);\n        }\n\n        require(availableToSlash >= amount, \"INSUFFICIENT_AVAILABLE\");\n\n        userStake.slashed = userStake.slashed.add(amount);\n        userStakings[account][scheduleIndex] = userStake;\n\n        tokeToken.safeTransfer(treasury, amount);\n\n        emit Slashed(account, amount, scheduleIndex);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "pause",
        "visibility": "external",
        "args": [],
        "func": "function pause() external override onlyOwner {\n        _pause();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "unpause",
        "visibility": "external",
        "args": [],
        "func": "function unpause() external override onlyOwner {\n        _unpause();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "owner",
        "visibility": "public",
        "args": [],
        "func": "function owner() public view virtual returns (address) {\n        return _owner;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the address of the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the address of the current owner.\n     */\n",
        "@dev": "Returns the address of the current owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceOwnership",
        "visibility": "public",
        "args": [],
        "func": "function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }",
        "comments": [
            "/**",
            "     * @dev Leaves the contract without owner. It will not be possible to call",
            "     * `onlyOwner` functions anymore. Can only be called by the current owner.",
            "     *",
            "     * NOTE: Renouncing ownership will leave the contract without an owner,",
            "     * thereby removing any functionality that is only available to the owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n",
        "@dev": "Leaves the contract without owner. It will not be possible to call * `onlyOwner` functions anymore. Can only be called by the current owner. * * NOTE: Renouncing ownership will leave the contract without an owner, * thereby removing any functionality that is only available to the owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferOwnership",
        "visibility": "public",
        "args": [
            {
                "name": "newOwner",
                "type": "address"
            }
        ],
        "func": "function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }",
        "comments": [
            "/**",
            "     * @dev Transfers ownership of the contract to a new account (`newOwner`).",
            "     * Can only be called by the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n",
        "@dev": "Transfers ownership of the contract to a new account (`newOwner`). * Can only be called by the current owner.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "paused",
        "visibility": "public",
        "args": [],
        "func": "function paused() public view virtual returns (bool) {\n        return _paused;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns true if the contract is paused, and false otherwise.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n",
        "@dev": "Returns true if the contract is paused, and false otherwise.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "_underlyer",
                "type": "ERC20"
            },
            {
                "name": "_manager",
                "type": "IManager"
            },
            {
                "name": "_name",
                "type": "string memory"
            },
            {
                "name": "_symbol",
                "type": "string memory"
            }
        ],
        "func": "function initialize(\n        ERC20 _underlyer,\n        IManager _manager,\n        string memory _name,\n        string memory _symbol\n    ) public initializer {\n        require(address(_underlyer) != address(0), \"ZERO_ADDRESS\");\n        require(address(_manager) != address(0), \"ZERO_ADDRESS\");\n\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        __ERC20_init_unchained(_name, _symbol);\n\n        underlyer = _underlyer;\n        manager = _manager;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decimals",
        "visibility": "public",
        "args": [],
        "func": "function decimals() public view override returns (uint8) {\n        return underlyer.decimals();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "external",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function deposit(uint256 amount) external override whenNotPaused {\n        _deposit(msg.sender, msg.sender, amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "depositFor",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function depositFor(address account, uint256 amount) external override whenNotPaused {\n        _deposit(msg.sender, account, amount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "requestedAmount",
                "type": "uint256"
            }
        ],
        "func": "function withdraw(uint256 requestedAmount) external override whenNotPaused {\n        require(\n            requestedAmount <= requestedWithdrawals[msg.sender].amount,\n            \"WITHDRAW_INSUFFICIENT_BALANCE\"\n        );\n        require(requestedAmount > 0, \"NO_WITHDRAWAL\");\n        require(underlyer.balanceOf(address(this)) >= requestedAmount, \"INSUFFICIENT_POOL_BALANCE\");\n\n        require(\n            requestedWithdrawals[msg.sender].minCycle <= manager.getCurrentCycleIndex(),\n            \"INVALID_CYCLE\"\n        );\n\n        requestedWithdrawals[msg.sender].amount = requestedWithdrawals[msg.sender].amount.sub(\n            requestedAmount\n        );\n\n        if (requestedWithdrawals[msg.sender].amount == 0) {\n            delete requestedWithdrawals[msg.sender];\n        }\n\n        withheldLiquidity = withheldLiquidity.sub(requestedAmount);\n\n        _burn(msg.sender, requestedAmount);\n\n        underlyer.safeTransfer(msg.sender, requestedAmount);\n    }",
        "comments": [
            "",
            "    /// @dev References the WithdrawalInfo for how much the user is permitted to withdraw",
            "    /// @dev No withdrawal permitted unless currentCycle >= minCycle",
            "    /// @dev Decrements withheldLiquidity by the withdrawn amount",
            "    /// @dev TODO Update rewardsContract with proper accounting",
            "    "
        ],
        "comt": "\n    /// @dev References the WithdrawalInfo for how much the user is permitted to withdraw\n    /// @dev No withdrawal permitted unless currentCycle >= minCycle\n    /// @dev Decrements withheldLiquidity by the withdrawn amount\n    /// @dev TODO Update rewardsContract with proper accounting\n    ",
        "@dev": "References the WithdrawalInfo for how much the user is permitted to withdraw * No withdrawal permitted unless currentCycle >= minCycle * Decrements withheldLiquidity by the withdrawn amount * TODO Update rewardsContract with proper accounting",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "requestWithdrawal",
        "visibility": "external",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function requestWithdrawal(uint256 amount) external override {\n        require(amount > 0, \"INVALID_AMOUNT\");\n        require(amount <= balanceOf(msg.sender), \"INSUFFICIENT_BALANCE\");\n\n        //adjust withheld liquidity by removing the original withheld amount and adding the new amount\n        withheldLiquidity = withheldLiquidity.sub(requestedWithdrawals[msg.sender].amount).add(\n            amount\n        );\n        requestedWithdrawals[msg.sender].amount = amount;\n        if (manager.getRolloverStatus()) {\n            requestedWithdrawals[msg.sender].minCycle = manager.getCurrentCycleIndex().add(2);\n        } else {\n            requestedWithdrawals[msg.sender].minCycle = manager.getCurrentCycleIndex().add(1);\n        }\n    }",
        "comments": [
            "",
            "    /// @dev Adjusts the withheldLiquidity as necessary",
            "    /// @dev Updates the WithdrawalInfo for when a user can withdraw and for what requested amount",
            "    "
        ],
        "comt": "\n    /// @dev Adjusts the withheldLiquidity as necessary\n    /// @dev Updates the WithdrawalInfo for when a user can withdraw and for what requested amount\n    ",
        "@dev": "Adjusts the withheldLiquidity as necessary * Updates the WithdrawalInfo for when a user can withdraw and for what requested amount",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approveManager",
        "visibility": "public",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function approveManager(uint256 amount) public override onlyOwner {\n        uint256 currentAllowance = underlyer.allowance(address(this), address(manager));\n        if (currentAllowance < amount) {\n            uint256 delta = amount.sub(currentAllowance);\n            underlyer.safeIncreaseAllowance(address(manager), delta);\n        } else {\n            uint256 delta = currentAllowance.sub(amount);\n            underlyer.safeDecreaseAllowance(address(manager), delta);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address recipient, uint256 amount)\n        public\n        override\n        whenNotPaused\n        returns (bool)\n    {\n        preTransferAdjustWithheldLiquidity(msg.sender, amount);\n        return super.transfer(recipient, amount);\n    }",
        "comments": [
            "",
            "    /// @dev Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer",
            "    "
        ],
        "comt": "\n    /// @dev Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer\n    ",
        "@dev": "Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override whenNotPaused returns (bool) {\n        preTransferAdjustWithheldLiquidity(sender, amount);\n        return super.transferFrom(sender, recipient, amount);\n    }",
        "comments": [
            "",
            "    /// @dev Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer",
            "    "
        ],
        "comt": "\n    /// @dev Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer\n    ",
        "@dev": "Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "pause",
        "visibility": "external",
        "args": [],
        "func": "function pause() external override onlyOwner {\n        _pause();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "unpause",
        "visibility": "external",
        "args": [],
        "func": "function unpause() external override onlyOwner {\n        _unpause();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "_weth",
                "type": "IWETH"
            },
            {
                "name": "_manager",
                "type": "IManager"
            },
            {
                "name": "_name",
                "type": "string memory"
            },
            {
                "name": "_symbol",
                "type": "string memory"
            }
        ],
        "func": "function initialize(\n        IWETH _weth,\n        IManager _manager,\n        string memory _name,\n        string memory _symbol\n    ) public initializer {\n        require(address(_weth) != address(0), \"ZERO_ADDRESS\");\n        require(address(_manager) != address(0), \"ZERO_ADDRESS\");\n\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        __ERC20_init_unchained(_name, _symbol);\n        weth = _weth;\n        manager = _manager;\n        withheldLiquidity = 0;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "external",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function deposit(uint256 amount) external payable override whenNotPaused {\n        _deposit(msg.sender, msg.sender, amount, msg.value);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "depositFor",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function depositFor(address account, uint256 amount) external payable override whenNotPaused {\n        _deposit(msg.sender, account, amount, msg.value);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "underlyer",
        "visibility": "external",
        "args": [],
        "func": "function underlyer() external view override returns (address) {\n        return address(weth);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "requestedAmount",
                "type": "uint256"
            },
            {
                "name": "asEth",
                "type": "bool"
            }
        ],
        "func": "function withdraw(uint256 requestedAmount, bool asEth) external override whenNotPaused {\n        require(\n            requestedAmount <= requestedWithdrawals[msg.sender].amount,\n            \"WITHDRAW_INSUFFICIENT_BALANCE\"\n        );\n        require(requestedAmount > 0, \"NO_WITHDRAWAL\");\n        require(weth.balanceOf(address(this)) >= requestedAmount, \"INSUFFICIENT_POOL_BALANCE\");\n\n        require(\n            requestedWithdrawals[msg.sender].minCycle <= manager.getCurrentCycleIndex(),\n            \"INVALID_CYCLE\"\n        );\n\n        requestedWithdrawals[msg.sender].amount = requestedWithdrawals[msg.sender].amount.sub(\n            requestedAmount\n        );\n\n        if (requestedWithdrawals[msg.sender].amount == 0) {\n            delete requestedWithdrawals[msg.sender];\n        }\n\n        withheldLiquidity = withheldLiquidity.sub(requestedAmount);\n\n        _burn(msg.sender, requestedAmount);\n\n        if (asEth) {\n            weth.withdraw(requestedAmount);\n            msg.sender.sendValue(requestedAmount);\n        } else {\n            IERC20(weth).safeTransfer(msg.sender, requestedAmount);\n        }\n    }",
        "comments": [
            "",
            "    /// @dev References the WithdrawalInfo for how much the user is permitted to withdraw",
            "    /// @dev No withdrawal permitted unless currentCycle >= minCycle",
            "    /// @dev Decrements withheldLiquidity by the withdrawn amount",
            "    "
        ],
        "comt": "\n    /// @dev References the WithdrawalInfo for how much the user is permitted to withdraw\n    /// @dev No withdrawal permitted unless currentCycle >= minCycle\n    /// @dev Decrements withheldLiquidity by the withdrawn amount\n    ",
        "@dev": "References the WithdrawalInfo for how much the user is permitted to withdraw * No withdrawal permitted unless currentCycle >= minCycle * Decrements withheldLiquidity by the withdrawn amount",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "requestWithdrawal",
        "visibility": "external",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function requestWithdrawal(uint256 amount) external override {\n        require(amount > 0, \"INVALID_AMOUNT\");\n        require(amount <= balanceOf(msg.sender), \"INSUFFICIENT_BALANCE\");\n\n        //adjust withheld liquidity by removing the original withheld amount and adding the new amount\n        withheldLiquidity = withheldLiquidity.sub(requestedWithdrawals[msg.sender].amount).add(\n            amount\n        );\n        requestedWithdrawals[msg.sender].amount = amount;\n        if (manager.getRolloverStatus()) {\n            requestedWithdrawals[msg.sender].minCycle = manager.getCurrentCycleIndex().add(2);\n        } else {\n            requestedWithdrawals[msg.sender].minCycle = manager.getCurrentCycleIndex().add(1);\n        }\n    }",
        "comments": [
            "",
            "    /// @dev Adjusts the withheldLiquidity as necessary",
            "    /// @dev Updates the WithdrawalInfo for when a user can withdraw and for what requested amount",
            "    "
        ],
        "comt": "\n    /// @dev Adjusts the withheldLiquidity as necessary\n    /// @dev Updates the WithdrawalInfo for when a user can withdraw and for what requested amount\n    ",
        "@dev": "Adjusts the withheldLiquidity as necessary * Updates the WithdrawalInfo for when a user can withdraw and for what requested amount",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approveManager",
        "visibility": "public",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function approveManager(uint256 amount) public override onlyOwner {\n        uint256 currentAllowance = IERC20(weth).allowance(address(this), address(manager));\n        if (currentAllowance < amount) {\n            uint256 delta = amount.sub(currentAllowance);\n            IERC20(weth).safeIncreaseAllowance(address(manager), delta);\n        } else {\n            uint256 delta = currentAllowance.sub(amount);\n            IERC20(weth).safeDecreaseAllowance(address(manager), delta);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address recipient, uint256 amount) public override returns (bool) {\n        preTransferAdjustWithheldLiquidity(msg.sender, amount);\n        return super.transfer(recipient, amount);\n    }",
        "comments": [
            "",
            "    /// @dev Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer",
            "    "
        ],
        "comt": "\n    /// @dev Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer\n    ",
        "@dev": "Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        preTransferAdjustWithheldLiquidity(sender, amount);\n        return super.transferFrom(sender, recipient, amount);\n    }",
        "comments": [
            "",
            "    /// @dev Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer",
            "    "
        ],
        "comt": "\n    /// @dev Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer\n    ",
        "@dev": "Adjust withheldLiquidity and requestedWithdrawal if sender does not have sufficient unlocked balance for the transfer",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "pause",
        "visibility": "external",
        "args": [],
        "func": "function pause() external override onlyOwner {\n        _pause();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "unpause",
        "visibility": "external",
        "args": [],
        "func": "function unpause() external override onlyOwner {\n        _unpause();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "external",
        "args": [
            {
                "name": "tokenInfo",
                "type": "TokenData calldata"
            },
            {
                "name": "proof",
                "type": "bytes32[] memory"
            }
        ],
        "func": "function deposit(TokenData calldata tokenInfo, bytes32[] memory proof) external payable override {\n        require(currentStage == STAGES.STAGE_1, \"DEPOSITS_NOT_ACCEPTED\");\n        require(!stage1Locked, \"DEPOSITS_LOCKED\");\n\n        if (whitelistSettings.enabled) {            \n            require(verifyDepositor(msg.sender, whitelistSettings.root, proof), \"PROOF_INVALID\");\n        }\n\n        TokenData memory data = tokenInfo;\n        address token = data.token;\n        uint256 tokenAmount = data.amount;\n        require(supportedTokens.contains(token), \"UNSUPPORTED_TOKEN\");\n        require(tokenAmount > 0, \"INVALID_AMOUNT\");\n\n        // Convert ETH to WETH if ETH is passed in, otherwise treat WETH as a regular ERC20\n        if (token == WETH && msg.value > 0) {\n            require(tokenAmount == msg.value, \"INVALID_MSG_VALUE\"); \n            IWETH(WETH).deposit{value: tokenAmount}();\n        } else {\n            require(msg.value == 0, \"NO_ETH\");\n        }\n\n        AccountData storage tokenAccountData = accountData[msg.sender];\n    \n        if (tokenAccountData.token == address(0)) {\n            tokenAccountData.token = token;\n        }\n        \n        require(tokenAccountData.token == token, \"SINGLE_ASSET_DEPOSITS\");\n\n        tokenAccountData.initialDeposit = tokenAccountData.initialDeposit.add(tokenAmount);\n        tokenAccountData.currentBalance = tokenAccountData.currentBalance.add(tokenAmount);\n        \n        require(tokenAccountData.currentBalance <= tokenSettings[token].maxLimit, \"MAX_LIMIT_EXCEEDED\");       \n\n        // No need to transfer from msg.sender since is ETH was converted to WETH\n        if (!(token == WETH && msg.value > 0)) {\n            IERC20(token).safeTransferFrom(msg.sender, address(this), tokenAmount);    \n        }\n        \n        if(_totalValue() > maxTotalValue) {\n            stage1Locked = true;\n        }\n\n        emit Deposited(msg.sender, tokenInfo);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "tokenInfo",
                "type": "TokenData calldata"
            },
            {
                "name": "asETH",
                "type": "bool"
            }
        ],
        "func": "function withdraw(TokenData calldata tokenInfo, bool asETH) external override {\n        require(currentStage == STAGES.STAGE_2, \"WITHDRAWS_NOT_ACCEPTED\");\n        require(!_isLastLookComplete(), \"WITHDRAWS_EXPIRED\");\n\n        TokenData memory data = tokenInfo;\n        address token = data.token;\n        uint256 tokenAmount = data.amount;\n        require(supportedTokens.contains(token), \"UNSUPPORTED_TOKEN\");\n        require(tokenAmount > 0, \"INVALID_AMOUNT\");        \n        AccountData storage tokenAccountData = accountData[msg.sender];\n        require(token == tokenAccountData.token, \"INVALID_TOKEN\");\n        tokenAccountData.currentBalance = tokenAccountData.currentBalance.sub(tokenAmount);\n        // set the data back in the mapping, otherwise updates are not saved\n        accountData[msg.sender] = tokenAccountData;\n\n        // Don't transfer WETH, WETH is converted to ETH and sent to the recipient\n        if (token == WETH && asETH) {\n            IWETH(WETH).withdraw(tokenAmount);\n            msg.sender.sendValue(tokenAmount);            \n        }  else {\n            IERC20(token).safeTransfer(msg.sender, tokenAmount);\n        }\n        \n        emit Withdrawn(msg.sender, tokenInfo, asETH);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "configureWhitelist",
        "visibility": "external",
        "args": [
            {
                "name": "settings",
                "type": "WhitelistSettings memory"
            }
        ],
        "func": "function configureWhitelist(WhitelistSettings memory settings) external override onlyOwner {\n        whitelistSettings = settings;\n        emit WhitelistConfigured(settings);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addSupportedTokens",
        "visibility": "external",
        "args": [
            {
                "name": "tokensToSupport",
                "type": "SupportedTokenData[] calldata"
            }
        ],
        "func": "function addSupportedTokens(SupportedTokenData[] calldata tokensToSupport)\n        external\n        override\n        onlyOwner\n    {\n        uint256 tokensLength = tokensToSupport.length;\n        for (uint256 i = 0; i < tokensLength; i++) {\n            SupportedTokenData memory data = tokensToSupport[i];\n            require(supportedTokens.add(data.token), \"TOKEN_EXISTS\");\n            \n            tokenSettings[data.token] = data;\n        }\n        emit SupportedTokensAdded(tokensToSupport);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSupportedTokens",
        "visibility": "external",
        "args": [],
        "func": "function getSupportedTokens() external view override returns (address[] memory tokens) {\n        uint256 tokensLength = supportedTokens.length();\n        tokens = new address[](tokensLength);\n        for (uint256 i = 0; i < tokensLength; i++) {\n            tokens[i] = supportedTokens.at(i);\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "publishRates",
        "visibility": "external",
        "args": [
            {
                "name": "ratesData",
                "type": "RateData[] calldata"
            },
            {
                "name": "oversubRate",
                "type": "OversubscriptionRate memory"
            },
            {
                "name": "lastLookDuration",
                "type": "uint256"
            }
        ],
        "func": "function publishRates(RateData[] calldata ratesData, OversubscriptionRate memory oversubRate, uint256 lastLookDuration) external override onlyOwner {\n        // check rates havent been published before\n        require(currentStage == STAGES.STAGE_1, \"RATES_ALREADY_SET\");\n        require(lastLookDuration > 0, \"INVALID_DURATION\");\n        require(oversubRate.overDenominator > 0, \"INVALID_DENOMINATOR\");\n        require(oversubRate.overNumerator > 0, \"INVALID_NUMERATOR\");        \n        \n        uint256 ratesLength = ratesData.length;\n        for (uint256 i = 0; i < ratesLength; i++) {\n            RateData memory data = ratesData[i];\n            require(data.numerator > 0, \"INVALID_NUMERATOR\");\n            require(data.denominator > 0, \"INVALID_DENOMINATOR\");\n            require(tokenRates[data.token].token == address(0), \"RATE_ALREADY_SET\");\n            require(configuredTokenRates.add(data.token), \"ALREADY_CONFIGURED\");\n            tokenRates[data.token] = data;            \n        }\n\n        require(configuredTokenRates.length() == supportedTokens.length(), \"MISSING_RATE\");\n\n        // Stage only moves forward when prices are published\n        currentStage = STAGES.STAGE_2;\n        lastLookExpiration = block.number + lastLookDuration;\n        overSubscriptionRate = oversubRate;\n\n        emit RatesPublished(ratesData);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRates",
        "visibility": "external",
        "args": [
            {
                "name": "tokens",
                "type": "address[] calldata"
            }
        ],
        "func": "function getRates(address[] calldata tokens) external view override returns (RateData[] memory rates) {\n        uint256 tokensLength = tokens.length;\n        rates = new RateData[](tokensLength);\n        for (uint256 i = 0; i < tokensLength; i++) {\n            rates[i] = tokenRates[tokens[i]];\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalValue",
        "visibility": "external",
        "args": [],
        "func": "function totalValue() external view override returns (uint256) {\n        return _totalValue();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "accountBalance",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function accountBalance(address account) external view override returns (uint256 value) {\n        uint256 tokenBalance = accountData[account].currentBalance;\n        value = value.add(getTokenValue(accountData[account].token, tokenBalance));   \n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "finalizeAssets",
        "visibility": "external",
        "args": [
            {
                "name": "depositToGenesis",
                "type": "bool"
            }
        ],
        "func": "function finalizeAssets(bool depositToGenesis) external override {\n        require(currentStage == STAGES.STAGE_3, \"NOT_SYSTEM_FINAL\");\n         \n        AccountData storage data = accountData[msg.sender];\n        address token = data.token;\n\n        require(token != address(0), \"NO_DATA\");\n\n        ( , uint256 ineffective, ) = _getRateAdjustedAmounts(data.currentBalance, token);\n        \n        require(ineffective > 0, \"NOTHING_TO_MOVE\");\n\n        // zero out balance\n        data.currentBalance = 0;\n        accountData[msg.sender] = data;\n\n        if (depositToGenesis) {  \n            address pool = tokenSettings[token].genesis;         \n            uint256 currentAllowance = IERC20(token).allowance(address(this), pool);\n            if (currentAllowance < ineffective) {\n                IERC20(token).safeIncreaseAllowance(pool, ineffective.sub(currentAllowance));    \n            }            \n            ILiquidityPool(pool).depositFor(msg.sender, ineffective);\n            emit GenesisTransfer(msg.sender, ineffective);\n        } else {\n            // transfer ineffectiveTokenBalance back to user\n            IERC20(token).safeTransfer(msg.sender, ineffective);\n        }    \n\n        emit AssetsFinalized(msg.sender, token, ineffective);        \n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getGenesisPools",
        "visibility": "external",
        "args": [
            {
                "name": "tokens",
                "type": "address[] calldata"
            }
        ],
        "func": "function getGenesisPools(address[] calldata tokens)\n        external\n        view\n        override\n        returns (address[] memory genesisAddresses)\n    {\n        uint256 tokensLength = tokens.length;\n        genesisAddresses = new address[](tokensLength);\n        for (uint256 i = 0; i < tokensLength; i++) {\n            require(supportedTokens.contains(tokens[i]), \"TOKEN_UNSUPPORTED\");\n            genesisAddresses[i] = tokenSettings[supportedTokens.at(i)].genesis;            \n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getTokenOracles",
        "visibility": "external",
        "args": [
            {
                "name": "tokens",
                "type": "address[] calldata"
            }
        ],
        "func": "function getTokenOracles(address[] calldata tokens)\n        external\n        view\n        override\n        returns (address[] memory oracleAddresses)\n    {\n        uint256 tokensLength = tokens.length;\n        oracleAddresses = new address[](tokensLength);\n        for (uint256 i = 0; i < tokensLength; i++) {\n            require(supportedTokens.contains(tokens[i]), \"TOKEN_UNSUPPORTED\");\n            oracleAddresses[i] = tokenSettings[tokens[i]].oracle;\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAccountData",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function getAccountData(address account) external view override returns (AccountDataDetails[] memory data) {\n        uint256 supportedTokensLength = supportedTokens.length();\n        data = new AccountDataDetails[](supportedTokensLength);\n        for (uint256 i = 0; i < supportedTokensLength; i++) {\n            address token = supportedTokens.at(i);\n            AccountData memory accountTokenInfo = accountData[account];\n            if (currentStage >= STAGES.STAGE_2 && accountTokenInfo.token != address(0)) {\n                (uint256 effective, uint256 ineffective, uint256 actual) = _getRateAdjustedAmounts(accountTokenInfo.currentBalance, token);\n                AccountDataDetails memory details = AccountDataDetails(\n                    token, \n                    accountTokenInfo.initialDeposit, \n                    accountTokenInfo.currentBalance, \n                    effective, \n                    ineffective, \n                    actual\n                );\n                data[i] = details;\n            } else {\n                data[i] = AccountDataDetails(token, accountTokenInfo.initialDeposit, accountTokenInfo.currentBalance, 0, 0, 0);\n            }          \n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferToTreasury",
        "visibility": "external",
        "args": [],
        "func": "function transferToTreasury() external override onlyOwner {\n        require(_isLastLookComplete(), \"CURRENT_STAGE_INVALID\");\n        require(currentStage == STAGES.STAGE_2, \"ONLY_TRANSFER_ONCE\");\n\n        uint256 supportedTokensLength = supportedTokens.length();\n        TokenData[] memory tokens = new TokenData[](supportedTokensLength);\n        for (uint256 i = 0; i < supportedTokensLength; i++) {       \n            address token = supportedTokens.at(i);  \n            uint256 balance = IERC20(token).balanceOf(address(this));\n            (uint256 effective, , ) = _getRateAdjustedAmounts(balance, token);\n            tokens[i].token = token;\n            tokens[i].amount = effective;\n            IERC20(token).safeTransfer(treasury, effective);\n        }\n\n        currentStage = STAGES.STAGE_3;\n\n        emit TreasuryTransfer(tokens);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRateAdjustedAmounts",
        "visibility": "external",
        "args": [
            {
                "name": "balance",
                "type": "uint256"
            },
            {
                "name": "token",
                "type": "address"
            }
        ],
        "func": "function getRateAdjustedAmounts(uint256 balance, address token) external override view returns (uint256,uint256,uint256) {\n        return _getRateAdjustedAmounts(balance, token);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getMaxTotalValue",
        "visibility": "external",
        "args": [],
        "func": "function getMaxTotalValue() external view override returns (uint256) {\n        return maxTotalValue;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "name",
        "visibility": "public",
        "args": [],
        "func": "function name() public view virtual returns (string memory) {\n        return _name;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the name of the token.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the name of the token.\n     */\n",
        "@dev": "Returns the name of the token.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "public",
        "args": [],
        "func": "function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the symbol of the token, usually a shorter version of the",
            "     * name.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n",
        "@dev": "Returns the symbol of the token, usually a shorter version of the * name.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decimals",
        "visibility": "public",
        "args": [],
        "func": "function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the number of decimals used to get its user representation.",
            "     * For example, if `decimals` equals `2`, a balance of `505` tokens should",
            "     * be displayed to a user as `5,05` (`505 / 10 ** 2`).",
            "     *",
            "     * Tokens usually opt for a value of 18, imitating the relationship between",
            "     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is",
            "     * called.",
            "     *",
            "     * NOTE: This information is only used for _display_ purposes: it in",
            "     * no way affects any of the arithmetic of the contract, including",
            "     * {IERC20-balanceOf} and {IERC20-transfer}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n",
        "@dev": "Returns the number of decimals used to get its user representation. * For example, if `decimals` equals `2`, a balance of `505` tokens should * be displayed to a user as `5,05` (`505 / 10 ** 2`). * * Tokens usually opt for a value of 18, imitating the relationship between * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is * called. * * NOTE: This information is only used for _display_ purposes: it in * no way affects any of the arithmetic of the contract, including * {IERC20-balanceOf} and {IERC20-transfer}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-totalSupply}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-totalSupply}.\n     */\n",
        "@dev": "See {IERC20-totalSupply}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-balanceOf}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-balanceOf}.\n     */\n",
        "@dev": "See {IERC20-balanceOf}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-transfer}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `recipient` cannot be the zero address.",
            "     * - the caller must have a balance of at least `amount`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n",
        "@dev": "See {IERC20-transfer}. * * Requirements: * * - `recipient` cannot be the zero address. * - the caller must have a balance of at least `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-allowance}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-allowance}.\n     */\n",
        "@dev": "See {IERC20-allowance}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-approve}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n",
        "@dev": "See {IERC20-approve}. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC20-transferFrom}.",
            "     *",
            "     * Emits an {Approval} event indicating the updated allowance. This is not",
            "     * required by the EIP. See the note at the beginning of {ERC20}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `sender` and `recipient` cannot be the zero address.",
            "     * - `sender` must have a balance of at least `amount`.",
            "     * - the caller must have allowance for ``sender``'s tokens of at least",
            "     * `amount`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n",
        "@dev": "See {IERC20-transferFrom}. * * Emits an {Approval} event indicating the updated allowance. This is not * required by the EIP. See the note at the beginning of {ERC20}. * * Requirements: * * - `sender` and `recipient` cannot be the zero address. * - `sender` must have a balance of at least `amount`. * - the caller must have allowance for ``sender``'s tokens of at least * `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Atomically increases the allowance granted to `spender` by the caller.",
            "     *",
            "     * This is an alternative to {approve} that can be used as a mitigation for",
            "     * problems described in {IERC20-approve}.",
            "     *",
            "     * Emits an {Approval} event indicating the updated allowance.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n",
        "@dev": "Atomically increases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Atomically decreases the allowance granted to `spender` by the caller.",
            "     *",
            "     * This is an alternative to {approve} that can be used as a mitigation for",
            "     * problems described in {IERC20-approve}.",
            "     *",
            "     * Emits an {Approval} event indicating the updated allowance.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - `spender` cannot be the zero address.",
            "     * - `spender` must have allowance for the caller of at least",
            "     * `subtractedValue`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n",
        "@dev": "Atomically decreases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address. * - `spender` must have allowance for the caller of at least * `subtractedValue`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "configureWhitelist",
        "visibility": "external",
        "args": [
            {
                "name": "settings",
                "type": "WhitelistSettings memory"
            }
        ],
        "func": "function configureWhitelist(WhitelistSettings memory settings) external override onlyOwner {\n        whitelistSettings = settings;\n        emit WhitelistConfigured(settings);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setDuration",
        "visibility": "external",
        "args": [
            {
                "name": "_blockDuration",
                "type": "uint256"
            }
        ],
        "func": "function setDuration(uint256 _blockDuration) external override onlyOwner {\n        require(durationInfo.startingBlock == 0, \"ALREADY_STARTED\");\n\n        durationInfo.startingBlock = block.number;\n        durationInfo.blockDuration = _blockDuration;\n\n        emit DurationSet(durationInfo);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addSupportedTokens",
        "visibility": "public",
        "args": [
            {
                "name": "tokensToSupport",
                "type": "SupportedTokenData[] memory"
            }
        ],
        "func": "function addSupportedTokens(SupportedTokenData[] memory tokensToSupport) public override onlyOwner {\n        require (tokensToSupport.length > 0, \"NO_TOKENS\");\n\n        for (uint256 i = 0; i < tokensToSupport.length; i++) {\n            require(\n                !supportedTokenAddresses.contains(tokensToSupport[i].token),\n                \"DUPLICATE_TOKEN\"\n            );\n            require(tokensToSupport[i].token != address(0), \"ZERO_ADDRESS\");\n            require(!tokensToSupport[i].systemFinalized, \"FINALIZED_MUST_BE_FALSE\");\n\n            supportedTokenAddresses.add(tokensToSupport[i].token);\n            supportedTokens[tokensToSupport[i].token] = tokensToSupport[i];\n        }\n        emit SupportedTokensAdded(tokensToSupport);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "external",
        "args": [
            {
                "name": "tokenData",
                "type": "TokenData[] calldata"
            },
            {
                "name": "proof",
                "type": "bytes32[] calldata"
            }
        ],
        "func": "function deposit(TokenData[] calldata tokenData, bytes32[] calldata proof) external override {\n        require(durationInfo.startingBlock > 0, \"NOT_STARTED\");\n        require(!_hasEnded(), \"RATES_LOCKED\");\n        require(tokenData.length > 0, \"NO_TOKENS\");\n        \n        if (whitelistSettings.enabled) {            \n            require(verifyDepositor(msg.sender, whitelistSettings.root, proof), \"PROOF_INVALID\");\n        }\n\n        for (uint256 i = 0; i < tokenData.length; i++) {\n\n            uint256 amount = tokenData[i].amount;\n            require(amount > 0, \"0_BALANCE\");  \n            address token = tokenData[i].token;\n            require(supportedTokenAddresses.contains(token), \"NOT_SUPPORTED\");\n            IERC20 erc20Token = IERC20(token);\n\n            AccountData storage data = accountData[msg.sender][token];        \n\n            require(\n                data.depositedBalance.add(amount) <= supportedTokens[token].maxUserLimit,\n                \"OVER_LIMIT\"\n            );\n\n            data.depositedBalance = data.depositedBalance.add(amount);\n\n            data.token = token;\n\n            erc20Token.safeTransferFrom(msg.sender, address(this), amount);\n        }\n\n        emit Deposited(msg.sender, tokenData);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "tokenData",
                "type": "TokenData[] calldata"
            }
        ],
        "func": "function withdraw(TokenData[] calldata tokenData) external override {\n        require(!_hasEnded(), \"RATES_LOCKED\");\n        require(tokenData.length > 0, \"NO_TOKENS\");\n        \n        for (uint256 i = 0; i < tokenData.length; i++) {  \n\n            uint256 amount = tokenData[i].amount;\n            require(amount > 0, \"ZERO_BALANCE\");\n            address token = tokenData[i].token;\n            IERC20 erc20Token = IERC20(token);\n\n            AccountData storage data = accountData[msg.sender][token];\n            \n            require(data.token != address(0), \"ZERO_ADDRESS\");\n            require(amount <= data.depositedBalance, \"INSUFFICIENT_FUNDS\");\n\n            data.depositedBalance = data.depositedBalance.sub(amount);\n\n            if (data.depositedBalance == 0) {\n                delete accountData[msg.sender][token];\n            }\n            erc20Token.safeTransfer(msg.sender, amount);\n        }\n\n        emit Withdrawn(msg.sender, tokenData);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseDuration",
        "visibility": "external",
        "args": [
            {
                "name": "_blockDuration",
                "type": "uint256"
            }
        ],
        "func": "function increaseDuration(uint256 _blockDuration) external override onlyOwner {\n        require(durationInfo.startingBlock > 0, \"NOT_STARTED\");\n        require(_blockDuration > durationInfo.blockDuration, \"INCREASE_ONLY\");\n        require(!stage1Locked, \"STAGE1_LOCKED\");\n\n        durationInfo.blockDuration = _blockDuration;\n\n        emit DurationIncreased(durationInfo);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setRates",
        "visibility": "external",
        "args": [
            {
                "name": "rates",
                "type": "RateData[] calldata"
            }
        ],
        "func": "function setRates(RateData[] calldata rates) external override onlyOwner hasEnded {\n        \n        //Rates are settable multiple times, but only until they are finalized.\n        //They are set to finalized by either performing the transferToTreasury\n        //Or, by marking them as no-swap tokens\n        //Users cannot begin their next set of actions before a token finalized.\n        \n        uint256 length = rates.length;\n        for (uint256 i = 0; i < length; i++) {   \n            RateData memory data = rates[i];\n            require(supportedTokenAddresses.contains(data.token), \"UNSUPPORTED_ADDRESS\");\n            require(!supportedTokens[data.token].systemFinalized, \"ALREADY_FINALIZED\");\n\n            if (data.tokeNumerator > 0) {\n                //We are allowing an address(0) pool, it means it was a winning reactor\n                //but there wasn't enough to enable private farming                \n                require(data.tokeDenominator > 0, \"INVALID_TOKE_DENOMINATOR\");            \n                require(data.overNumerator > 0, \"INVALID_OVER_NUMERATOR\");\n                require(data.overDenominator > 0, \"INVALID_OVER_DENOMINATOR\");            \n\n                tokenRates[data.token] = data;\n            } else {\n                delete tokenRates[data.token];\n            }\n        }\n\n        stage1Locked = true;\n\n        emit RatesPublished(rates);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferToTreasury",
        "visibility": "external",
        "args": [
            {
                "name": "tokens",
                "type": "address[] calldata"
            }
        ],
        "func": "function transferToTreasury(address[] calldata tokens) external override onlyOwner hasEnded {\n        \n        uint256 length = tokens.length;\n        TokenData[] memory transfers = new TokenData[](length);\n        for (uint256 i = 0; i < length; i++) {                   \n            address token = tokens[i];            \n            require(tokenRates[token].tokeNumerator > 0, \"NO_SWAP_TOKEN\");\n            require(!supportedTokens[token].systemFinalized, \"ALREADY_FINALIZED\");\n            uint256 balance = IERC20(token).balanceOf(address(this));\n            (uint256 effective, , ) = getRateAdjustedAmounts(balance, token);            \n            transfers[i].token = token;\n            transfers[i].amount = effective;\n            supportedTokens[token].systemFinalized = true;\n\n            IERC20(token).safeTransfer(treasuryAddress, effective);\n        }\n\n        emit TreasuryTransfer(transfers);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setNoSwap",
        "visibility": "external",
        "args": [
            {
                "name": "tokens",
                "type": "address[] calldata"
            }
        ],
        "func": "function setNoSwap(address[] calldata tokens) external override onlyOwner hasEnded {\n        \n        uint256 length = tokens.length;\n\n        for (uint256 i = 0; i < length; i++) { \n            address token = tokens[i];\n            require(supportedTokenAddresses.contains(token), \"UNSUPPORTED_ADDRESS\");\n            require(tokenRates[token].tokeNumerator == 0, \"ALREADY_SET_TO_SWAP\");\n            require(!supportedTokens[token].systemFinalized, \"ALREADY_FINALIZED\");\n\n            supportedTokens[token].systemFinalized = true;\n        }\n\n        stage1Locked = true;\n\n        emit SetNoSwap(tokens);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "finalize",
        "visibility": "external",
        "args": [
            {
                "name": "tokens",
                "type": "TokenFarming[] calldata"
            }
        ],
        "func": "function finalize(TokenFarming[] calldata tokens) external override hasEnded {        \n        require(tokens.length > 0, \"NO_TOKENS\");        \n        \n        uint256 length = tokens.length;\n        FinalizedAccountData[] memory results = new FinalizedAccountData[](length);\n        for(uint256 i = 0; i < length; i++) {\n            TokenFarming calldata farm = tokens[i];\n            AccountData storage account = accountData[msg.sender][farm.token];\n                        \n            require(!account.finalized, \"ALREADY_FINALIZED\");\n            require(farm.token != address(0), \"ZERO_ADDRESS\");\n            require(supportedTokens[farm.token].systemFinalized, \"NOT_SYSTEM_FINALIZED\");    \n            require(account.depositedBalance > 0, \"INSUFFICIENT_FUNDS\");            \n\n            RateData storage rate = tokenRates[farm.token];\n            \n            uint256 amtToTransfer = 0;\n            if (rate.tokeNumerator > 0) {\n                //We have set a rate, which means its a winning reactor\n                //which means only the ineffective amount, the amount\n                //not spent on TOKE, can leave the contract.\n                //Leaving to either the farm or back to the user\n\n                //In the event there is no farming, an oversubscription rate of 1/1 \n                //will be provided for the token. That will ensure the ineffective\n                //amount is 0 and caught by the below require() as only assets with \n                //an oversubscription can be moved\n                (, uint256 ineffectiveAmt, ) = getRateAdjustedAmounts(account.depositedBalance, farm.token);     \n                amtToTransfer = ineffectiveAmt;\n            } else {\n                amtToTransfer = account.depositedBalance;                \n            }   \n            require(amtToTransfer > 0, \"NOTHING_TO_MOVE\");      \n            account.finalized = true;\n\n            if (farm.sendToFarming) {\n                require(rate.pool != address(0), \"NO_FARMING\");    \n                uint256 currentAllowance = IERC20(farm.token).allowance(address(this), rate.pool);\n                if (currentAllowance < amtToTransfer) {                    \n                    IERC20(farm.token).safeIncreaseAllowance(rate.pool, amtToTransfer.sub(currentAllowance));                        \n                }                \n                ILiquidityPool(rate.pool).depositFor(msg.sender, amtToTransfer);                \n                results[i] = FinalizedAccountData({\n                    token: farm.token,\n                    transferredToFarm: amtToTransfer,\n                    refunded: 0\n                });\n            } else {                \n\n                IERC20(farm.token).safeTransfer(msg.sender, amtToTransfer);\n                results[i] = FinalizedAccountData({\n                    token: farm.token,\n                    transferredToFarm: 0,\n                    refunded: amtToTransfer\n                });\n            }\n        }\n\n        emit AssetsFinalized(msg.sender, results);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRateAdjustedAmounts",
        "visibility": "public",
        "args": [
            {
                "name": "balance",
                "type": "uint256"
            },
            {
                "name": "token",
                "type": "address"
            }
        ],
        "func": "function getRateAdjustedAmounts(uint256 balance, address token) public override view returns (uint256 effectiveAmt, uint256 ineffectiveAmt, uint256 actualReceived) {\n        \n        RateData memory rateInfo = tokenRates[token];\n        uint256 effectiveTokenBalance = \n            balance.mul(rateInfo.overNumerator).div(rateInfo.overDenominator);\n        uint256 ineffectiveTokenBalance =\n            balance.mul(rateInfo.overDenominator.sub(rateInfo.overNumerator))\n            .div(rateInfo.overDenominator);\n        \n        uint256 actual =\n            effectiveTokenBalance.mul(rateInfo.tokeDenominator).div(rateInfo.tokeNumerator);\n\n        return (effectiveTokenBalance, ineffectiveTokenBalance, actual);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRates",
        "visibility": "external",
        "args": [],
        "func": "function getRates() external override view returns (RateData[] memory rates) {\n        uint256 length = supportedTokenAddresses.length();\n        rates = new RateData[](length);\n        for (uint256 i = 0; i < length; i++) {   \n            address token = supportedTokenAddresses.at(i);\n            rates[i] = tokenRates[token];\n        }        \n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getAccountData",
        "visibility": "external",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function getAccountData(address account) external view override returns (AccountData[] memory data) {\n        uint256 length = supportedTokenAddresses.length();        \n        data = new AccountData[](length);\n        for(uint256 i = 0; i < length; i++) {\n            address token = supportedTokenAddresses.at(i);\n            data[i] = accountData[account][token];\n            data[i].token = token;\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getSupportedTokens",
        "visibility": "external",
        "args": [],
        "func": "function getSupportedTokens() external view override returns (SupportedTokenData[] memory supportedTokensArray) {\n        uint256 supportedTokensLength = supportedTokenAddresses.length();\n        supportedTokensArray = new SupportedTokenData[](supportedTokensLength);\n\n        for (uint256 i = 0; i < supportedTokensLength; i++) {\n            supportedTokensArray[i] = supportedTokens[supportedTokenAddresses.at(i)];\n        }\n        return supportedTokensArray;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "foo",
        "visibility": "public",
        "args": [],
        "func": "function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }",
        "comments": [
            "/**",
            "     * @dev Returns `true` if `account` has been granted `role`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n",
        "@dev": "Returns `true` if `account` has been granted `role`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRoleMemberCount",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            }
        ],
        "func": "function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the number of accounts that have `role`. Can be used",
            "     * together with {getRoleMember} to enumerate all bearers of a role.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n",
        "@dev": "Returns the number of accounts that have `role`. Can be used * together with {getRoleMember} to enumerate all bearers of a role.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRoleMember",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "index",
                "type": "uint256"
            }
        ],
        "func": "function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }",
        "comments": [
            "/**",
            "     * @dev Returns one of the accounts that have `role`. `index` must be a",
            "     * value between 0 and {getRoleMemberCount}, non-inclusive.",
            "     *",
            "     * Role bearers are not sorted in any particular way, and their ordering may",
            "     * change at any point.",
            "     *",
            "     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure",
            "     * you perform all queries on the same block. See the following",
            "     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]",
            "     * for more information.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n",
        "@dev": "Returns one of the accounts that have `role`. `index` must be a * value between 0 and {getRoleMemberCount}, non-inclusive. * * Role bearers are not sorted in any particular way, and their ordering may * change at any point. * * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure * you perform all queries on the same block. See the following * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] * for more information.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRoleAdmin",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            }
        ],
        "func": "function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the admin role that controls `role`. See {grantRole} and",
            "     * {revokeRole}.",
            "     *",
            "     * To change a role's admin, use {_setRoleAdmin}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n",
        "@dev": "Returns the admin role that controls `role`. See {grantRole} and * {revokeRole}. * * To change a role's admin, use {_setRoleAdmin}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "grantRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }",
        "comments": [
            "/**",
            "     * @dev Grants `role` to `account`.",
            "     *",
            "     * If `account` had not been already granted `role`, emits a {RoleGranted}",
            "     * event.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - the caller must have ``role``'s admin role.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n",
        "@dev": "Grants `role` to `account`. * * If `account` had not been already granted `role`, emits a {RoleGranted} * event. * * Requirements: * * - the caller must have ``role``'s admin role.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "revokeRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }",
        "comments": [
            "/**",
            "     * @dev Revokes `role` from `account`.",
            "     *",
            "     * If `account` had been granted `role`, emits a {RoleRevoked} event.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - the caller must have ``role``'s admin role.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n",
        "@dev": "Revokes `role` from `account`. * * If `account` had been granted `role`, emits a {RoleRevoked} event. * * Requirements: * * - the caller must have ``role``'s admin role.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }",
        "comments": [
            "/**",
            "     * @dev Revokes `role` from the calling account.",
            "     *",
            "     * Roles are often managed via {grantRole} and {revokeRole}: this function's",
            "     * purpose is to provide a mechanism for accounts to lose their privileges",
            "     * if they are compromised (such as when a trusted device is misplaced).",
            "     *",
            "     * If the calling account had been granted `role`, emits a {RoleRevoked}",
            "     * event.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - the caller must be `account`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n",
        "@dev": "Revokes `role` from the calling account. * * Roles are often managed via {grantRole} and {revokeRole}: this function's * purpose is to provide a mechanism for accounts to lose their privileges * if they are compromised (such as when a trusted device is misplaced). * * If the calling account had been granted `role`, emits a {RoleRevoked} * event. * * Requirements: * * - the caller must be `account`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "paused",
        "visibility": "public",
        "args": [],
        "func": "function paused() public view virtual returns (bool) {\n        return _paused;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns true if the contract is paused, and false otherwise.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n",
        "@dev": "Returns true if the contract is paused, and false otherwise.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "pause",
        "visibility": "external",
        "args": [],
        "func": "function pause() external onlyOwner {        \n        _pause();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "unpause",
        "visibility": "external",
        "args": [],
        "func": "function unpause() external onlyOwner {        \n        _unpause();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setSigner",
        "visibility": "external",
        "args": [
            {
                "name": "newSigner",
                "type": "address"
            }
        ],
        "func": "function setSigner(address newSigner) external onlyOwner {\n        require(newSigner != address(0), \"Invalid Signer Address\");\n        rewardsSigner = newSigner;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getClaimableAmount",
        "visibility": "external",
        "args": [
            {
                "name": "recipient",
                "type": "Recipient calldata"
            }
        ],
        "func": "function getClaimableAmount(\n        Recipient calldata recipient\n    ) external view returns (uint256) {\n        return recipient.amount.sub(claimedAmounts[recipient.wallet]);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "claim",
        "visibility": "external",
        "args": [
            {
                "name": "recipient",
                "type": "Recipient calldata"
            },
            {
                "name": "v",
                "type": "uint8"
            },
            {
                "name": "r",
                "type": "bytes32"
            },
            {
                "name": "signature",
                "type": "bytes32 s // bytes calldata"
            }
        ],
        "func": "function claim(\n        Recipient calldata recipient,\n        uint8 v,\n        bytes32 r,\n        bytes32 s // bytes calldata signature\n    ) external {        \n        address signatureSigner = _hash(recipient).recover(v, r, s);\n        require(signatureSigner == rewardsSigner, \"Invalid Signature\");\n        require(recipient.chainId == _getChainID(), \"Invalid chainId\");        \n        require(recipient.wallet == msg.sender, \"Sender wallet Mismatch\");\n\n        uint256 claimableAmount = recipient.amount.sub(claimedAmounts[recipient.wallet]);\n\n        require(claimableAmount > 0, \"Invalid claimable amount\");\n        require(tokeToken.balanceOf(address(this)) >= claimableAmount, \"Insufficient Funds\");\n\n        claimedAmounts[recipient.wallet] = claimedAmounts[recipient.wallet].add(claimableAmount);\n\n        tokeToken.safeTransfer(recipient.wallet, claimableAmount);\n\n        emit Claimed(recipient.cycle, recipient.wallet, claimableAmount);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "convert",
        "visibility": "external",
        "args": [],
        "func": "function convert() external {\n        uint256 fromBal = IERC20(fromToken).balanceOf(msg.sender);\n        require(fromBal > 0, \"INSUFFICIENT_BALANCE\");\n        ERC20Burnable(fromToken).burnFrom(msg.sender, fromBal);\n        IStaking(stakingContract).depositFor(msg.sender, fromBal, stakingSchedule);\n    }",
        "comments": [
            "",
            "    /// @notice Allows a holder of fromToken to convert into toToken and simultaneously stake within the stakingContract",
            "    /// @dev a user must approve this contract in order for it to burnFrom()",
            "    "
        ],
        "comt": "\n    /// @notice Allows a holder of fromToken to convert into toToken and simultaneously stake within the stakingContract\n    /// @dev a user must approve this contract in order for it to burnFrom()\n    ",
        "@notice": "Allows a holder of fromToken to convert into toToken and simultaneously stake within the stakingContract",
        "@dev": "a user must approve this contract in order for it to burnFrom()",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "recoupRemaining",
        "visibility": "external",
        "args": [],
        "func": "function recoupRemaining() external onlyOwner {\n        require(block.number >= expirationBlock, \"EXPIRATION_NOT_PASSED\");\n        uint256 bal = IERC20(toToken).balanceOf(address(this));\n        IERC20(toToken).safeTransfer(msg.sender, bal);\n    }",
        "comments": [
            "",
            "    /// @notice Allows the claim on the toToken balance after the expiration has passed",
            "    /// @dev callable only by owner",
            "    "
        ],
        "comt": "\n    /// @notice Allows the claim on the toToken balance after the expiration has passed\n    /// @dev callable only by owner\n    ",
        "@notice": "Allows the claim on the toToken balance after the expiration has passed",
        "@dev": "callable only by owner",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "public",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }",
        "comments": [
            "/**",
            "     * @dev Destroys `amount` tokens from the caller.",
            "     *",
            "     * See {ERC20-_burn}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n",
        "@dev": "Destroys `amount` tokens from the caller. * * See {ERC20-_burn}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burnFrom",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }",
        "comments": [
            "/**",
            "     * @dev Destroys `amount` tokens from `account`, deducting from the caller's",
            "     * allowance.",
            "     *",
            "     * See {ERC20-_burn} and {ERC20-allowance}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - the caller must have allowance for ``accounts``'s tokens of at least",
            "     * `amount`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n",
        "@dev": "Destroys `amount` tokens from `account`, deducting from the caller's * allowance. * * See {ERC20-_burn} and {ERC20-allowance}. * * Requirements: * * - the caller must have allowance for ``accounts``'s tokens of at least * `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "public",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }",
        "comments": [
            "/**",
            "     * @dev Creates `amount` new tokens for `to`.",
            "     *",
            "     * See {ERC20-_mint}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - the caller must have the `MINTER_ROLE`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n",
        "@dev": "Creates `amount` new tokens for `to`. * * See {ERC20-_mint}. * * Requirements: * * - the caller must have the `MINTER_ROLE`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "pause",
        "visibility": "public",
        "args": [],
        "func": "function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }",
        "comments": [
            "/**",
            "     * @dev Pauses all token transfers.",
            "     *",
            "     * See {ERC20Pausable} and {Pausable-_pause}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - the caller must have the `PAUSER_ROLE`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n",
        "@dev": "Pauses all token transfers. * * See {ERC20Pausable} and {Pausable-_pause}. * * Requirements: * * - the caller must have the `PAUSER_ROLE`.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "unpause",
        "visibility": "public",
        "args": [],
        "func": "function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }",
        "comments": [
            "/**",
            "     * @dev Unpauses all token transfers.",
            "     *",
            "     * See {ERC20Pausable} and {Pausable-_unpause}.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - the caller must have the `PAUSER_ROLE`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n",
        "@dev": "Unpauses all token transfers. * * See {ERC20Pausable} and {Pausable-_unpause}. * * Requirements: * * - the caller must have the `PAUSER_ROLE`.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenAnyReturn",
        "visibility": "external",
        "args": [
            {
                "name": "response",
                "type": "bytes calldata"
            }
        ],
        "func": "function givenAnyReturn(bytes calldata response) override external {\n  _givenAnyReturn(response);\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenAnyReturnBool",
        "visibility": "external",
        "args": [
            {
                "name": "response",
                "type": "bool"
            }
        ],
        "func": "function givenAnyReturnBool(bool response) override external {\n  uint flag = response ? 1 : 0;\n  _givenAnyReturn(uintToBytes(flag));\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenAnyReturnUint",
        "visibility": "external",
        "args": [
            {
                "name": "response",
                "type": "uint"
            }
        ],
        "func": "function givenAnyReturnUint(uint response) override external {\n  _givenAnyReturn(uintToBytes(response)); \n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenAnyReturnAddress",
        "visibility": "external",
        "args": [
            {
                "name": "response",
                "type": "address"
            }
        ],
        "func": "function givenAnyReturnAddress(address response) override external {\n  _givenAnyReturn(uintToBytes(uint(response)));\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenAnyRevert",
        "visibility": "external",
        "args": [],
        "func": "function givenAnyRevert() override external {\n  fallbackMockType = MockType.Revert;\n  fallbackRevertMessage = \"\";\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenAnyRevertWithMessage",
        "visibility": "external",
        "args": [
            {
                "name": "message",
                "type": "string calldata"
            }
        ],
        "func": "function givenAnyRevertWithMessage(string calldata message) override external {\n  fallbackMockType = MockType.Revert;\n  fallbackRevertMessage = message;\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenAnyRunOutOfGas",
        "visibility": "external",
        "args": [],
        "func": "function givenAnyRunOutOfGas() override external {\n  fallbackMockType = MockType.OutOfGas;\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenCalldataReturn",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            },
            {
                "name": "response",
                "type": "bytes calldata"
            }
        ],
        "func": "function givenCalldataReturn(bytes calldata call, bytes calldata response) override external  {\n  _givenCalldataReturn(call, response);\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenCalldataReturnBool",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            },
            {
                "name": "response",
                "type": "bool"
            }
        ],
        "func": "function givenCalldataReturnBool(bytes calldata call, bool response) override external {\n  uint flag = response ? 1 : 0;\n  _givenCalldataReturn(call, uintToBytes(flag));\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenCalldataReturnUint",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            },
            {
                "name": "response",
                "type": "uint"
            }
        ],
        "func": "function givenCalldataReturnUint(bytes calldata call, uint response) override external {\n  _givenCalldataReturn(call, uintToBytes(response));\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenCalldataReturnAddress",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            },
            {
                "name": "response",
                "type": "address"
            }
        ],
        "func": "function givenCalldataReturnAddress(bytes calldata call, address response) override external {\n  _givenCalldataReturn(call, uintToBytes(uint(response)));\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenMethodReturn",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            },
            {
                "name": "response",
                "type": "bytes calldata"
            }
        ],
        "func": "function givenMethodReturn(bytes calldata call, bytes calldata response) override external {\n  _givenMethodReturn(call, response);\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenMethodReturnBool",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            },
            {
                "name": "response",
                "type": "bool"
            }
        ],
        "func": "function givenMethodReturnBool(bytes calldata call, bool response) override external {\n  uint flag = response ? 1 : 0;\n  _givenMethodReturn(call, uintToBytes(flag));\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenMethodReturnUint",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            },
            {
                "name": "response",
                "type": "uint"
            }
        ],
        "func": "function givenMethodReturnUint(bytes calldata call, uint response) override external {\n  _givenMethodReturn(call, uintToBytes(response));\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenMethodReturnAddress",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            },
            {
                "name": "response",
                "type": "address"
            }
        ],
        "func": "function givenMethodReturnAddress(bytes calldata call, address response) override external {\n  _givenMethodReturn(call, uintToBytes(uint(response)));\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenCalldataRevert",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            }
        ],
        "func": "function givenCalldataRevert(bytes calldata call) override external {\n  calldataMockTypes[call] = MockType.Revert;\n  calldataRevertMessage[call] = \"\";\n  trackCalldataMock(call);\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenMethodRevert",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            }
        ],
        "func": "function givenMethodRevert(bytes calldata call) override external {\n  bytes4 method = bytesToBytes4(call);\n  methodIdMockTypes[method] = MockType.Revert;\n  trackMethodIdMock(method);  \n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenCalldataRevertWithMessage",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            },
            {
                "name": "message",
                "type": "string calldata"
            }
        ],
        "func": "function givenCalldataRevertWithMessage(bytes calldata call, string calldata message) override external {\n  calldataMockTypes[call] = MockType.Revert;\n  calldataRevertMessage[call] = message;\n  trackCalldataMock(call);\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenMethodRevertWithMessage",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            },
            {
                "name": "message",
                "type": "string calldata"
            }
        ],
        "func": "function givenMethodRevertWithMessage(bytes calldata call, string calldata message) override external {\n  bytes4 method = bytesToBytes4(call);\n  methodIdMockTypes[method] = MockType.Revert;\n  methodIdRevertMessages[method] = message;\n  trackMethodIdMock(method);  \n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenCalldataRunOutOfGas",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            }
        ],
        "func": "function givenCalldataRunOutOfGas(bytes calldata call) override external {\n  calldataMockTypes[call] = MockType.OutOfGas;\n  trackCalldataMock(call);\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "givenMethodRunOutOfGas",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            }
        ],
        "func": "function givenMethodRunOutOfGas(bytes calldata call) override external {\n  bytes4 method = bytesToBytes4(call);\n  methodIdMockTypes[method] = MockType.OutOfGas;\n  trackMethodIdMock(method); \n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "invocationCount",
        "visibility": "external",
        "args": [],
        "func": "function invocationCount() override external returns (uint) {\n  return invocations;\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "invocationCountForMethod",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            }
        ],
        "func": "function invocationCountForMethod(bytes calldata call) override external returns (uint) {\n  bytes4 method = bytesToBytes4(call);\n  return methodIdInvocations[keccak256(abi.encodePacked(resetCount, method))];\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "invocationCountForCalldata",
        "visibility": "external",
        "args": [
            {
                "name": "call",
                "type": "bytes calldata"
            }
        ],
        "func": "function invocationCountForCalldata(bytes calldata call) override external returns (uint) {\n  return calldataInvocations[keccak256(abi.encodePacked(resetCount, call))];\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "reset",
        "visibility": "external",
        "args": [],
        "func": "function reset() override external {\n  // Reset all exact calldataMocks\n  bytes memory nextMock = calldataMocks[MOCKS_LIST_START];\n  bytes32 mockHash = keccak256(nextMock);\n  // We cannot compary bytes\n  while(mockHash != MOCKS_LIST_END_HASH) {\n   // Reset all mock maps\n   calldataMockTypes[nextMock] = MockType.Return;\n   calldataExpectations[nextMock] = hex\"\";\n   calldataRevertMessage[nextMock] = \"\";\n   // Set next mock to remove\n   nextMock = calldataMocks[mockHash];\n   // Remove from linked list\n   calldataMocks[mockHash] = \"\";\n   // Update mock hash\n   mockHash = keccak256(nextMock);\n  }\n  // Clear list\n  calldataMocks[MOCKS_LIST_START] = MOCKS_LIST_END;\n\n  // Reset all any calldataMocks\n  bytes4 nextAnyMock = methodIdMocks[SENTINEL_ANY_MOCKS];\n  while(nextAnyMock != SENTINEL_ANY_MOCKS) {\n   bytes4 currentAnyMock = nextAnyMock;\n   methodIdMockTypes[currentAnyMock] = MockType.Return;\n   methodIdExpectations[currentAnyMock] = hex\"\";\n   methodIdRevertMessages[currentAnyMock] = \"\";\n   nextAnyMock = methodIdMocks[currentAnyMock];\n   // Remove from linked list\n   methodIdMocks[currentAnyMock] = 0x0;\n  }\n  // Clear list\n  methodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;\n\n  fallbackExpectation = DEFAULT_FALLBACK_VALUE;\n  fallbackMockType = MockType.Return;\n  invocations = 0;\n  resetCount += 1;\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateInvocationCount",
        "visibility": "public",
        "args": [
            {
                "name": "methodId",
                "type": "bytes4"
            },
            {
                "name": "originalMsgData",
                "type": "bytes memory"
            }
        ],
        "func": "function updateInvocationCount(bytes4 methodId, bytes memory originalMsgData) public {\n  require(msg.sender == address(this), \"Can only be called from the contract itself\");\n  invocations += 1;\n  methodIdInvocations[keccak256(abi.encodePacked(resetCount, methodId))] += 1;\n  calldataInvocations[keccak256(abi.encodePacked(resetCount, originalMsgData))] += 1;\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deploy",
        "visibility": "external",
        "args": [
            {
                "name": "data",
                "type": "bytes calldata"
            }
        ],
        "func": "function deploy(bytes calldata data) external {\n        (\n            address tokenA,\n            address tokenB,\n            uint256 amountADesired,\n            uint256 amountBDesired,\n            uint256 amountAMin,\n            uint256 amountBMin,\n            address to,\n            uint256 deadline\n        ) = abi.decode(\n                data,\n                (address, address, uint256, uint256, uint256, uint256, address, uint256)\n            );\n\n        _approve(IERC20(tokenA), amountADesired);\n        _approve(IERC20(tokenB), amountBDesired);\n\n        //(uint256 amountA, uint256 amountB, uint256 liquidity) =\n        SUSHISWAP_ROUTER.addLiquidity(\n            tokenA,\n            tokenB,\n            amountADesired,\n            amountBDesired,\n            amountAMin,\n            amountBMin,\n            to,\n            deadline\n        );\n        // TODO: perform checks on amountA, amountB, liquidity\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "data",
                "type": "bytes calldata"
            }
        ],
        "func": "function withdraw(bytes calldata data) external {\n        (\n            address tokenA,\n            address tokenB,\n            uint256 liquidity,\n            uint256 amountAMin,\n            uint256 amountBMin,\n            address to,\n            uint256 deadline\n        ) = abi.decode(data, (address, address, uint256, uint256, uint256, address, uint256));\n\n        address pair = SUSHISWAP_FACTORY.getPair(tokenA, tokenB);\n        require(pair != address(0), \"pair doesn't exist\");\n        _approve(IERC20(pair), liquidity);\n\n        //(uint256 amountA, uint256 amountB) =\n        SUSHISWAP_ROUTER.removeLiquidity(\n            tokenA,\n            tokenB,\n            liquidity,\n            amountAMin,\n            amountBMin,\n            to,\n            deadline\n        );\n        //TODO: perform checks on amountA and amountB\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deploy",
        "visibility": "external",
        "args": [
            {
                "name": "data",
                "type": "bytes calldata"
            }
        ],
        "func": "function deploy(bytes calldata data) external {\n        (\n            address tokenA,\n            address tokenB,\n            uint256 amountADesired,\n            uint256 amountBDesired,\n            uint256 amountAMin,\n            uint256 amountBMin,\n            address to,\n            uint256 deadline\n        ) = abi.decode(\n                data,\n                (address, address, uint256, uint256, uint256, uint256, address, uint256)\n            );\n\n        _approve(IERC20(tokenA), amountADesired);\n        _approve(IERC20(tokenB), amountBDesired);\n\n        //(uint256 amountA, uint256 amountB, uint256 liquidity) =\n        UNISWAP_ROUTER.addLiquidity(\n            tokenA,\n            tokenB,\n            amountADesired,\n            amountBDesired,\n            amountAMin,\n            amountBMin,\n            to,\n            deadline\n        );\n\n        // TODO: perform checks on amountA, amountB, liquidity\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "data",
                "type": "bytes calldata"
            }
        ],
        "func": "function withdraw(bytes calldata data) external {\n        (\n            address tokenA,\n            address tokenB,\n            uint256 liquidity,\n            uint256 amountAMin,\n            uint256 amountBMin,\n            address to,\n            uint256 deadline\n        ) = abi.decode(data, (address, address, uint256, uint256, uint256, address, uint256));\n\n        address pair = UNISWAP_FACTORY.getPair(tokenA, tokenB);\n        require(pair != address(0), \"pair doesn't exist\");\n        _approve(IERC20(pair), liquidity);\n\n        //(uint256 amountA, uint256 amountB) =\n        UNISWAP_ROUTER.removeLiquidity(\n            tokenA,\n            tokenB,\n            liquidity,\n            amountAMin,\n            amountBMin,\n            to,\n            deadline\n        );\n        //TODO: perform checks on amountA and amountB\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deploy",
        "visibility": "external",
        "args": [
            {
                "name": "poolAddress",
                "type": "address"
            },
            {
                "name": "tokens",
                "type": "IERC20[] calldata"
            },
            {
                "name": "amounts",
                "type": "uint256[] calldata"
            },
            {
                "name": "data",
                "type": "bytes calldata"
            }
        ],
        "func": "function deploy(\n        address poolAddress,\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external {\n        require(tokens.length == amounts.length, \"TOKEN_AMOUNTS_COUNT_MISMATCH\");\n        require(tokens.length > 0, \"TOKENS_AMOUNTS_NOT_PROVIDED\");\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            _approve(tokens[i], poolAddress, amounts[i]);\n        }\n\n        //Notes:\n        // - If your pool is eligible for weekly BAL rewards, they will be distributed to your LPs automatically\n        // - If you contribute significant long-term liquidity to the platform, you can apply to have smart contract deployment gas costs reimbursed from the Balancer Ecosystem fund\n        // - The pool is the LP token, All pools in Balancer are also ERC20 tokens known as BPTs \\(Balancer Pool Tokens\\)\n        (uint256 poolAmountOut, uint256[] memory maxAmountsIn) =\n            abi.decode(data, (uint256, uint256[]));\n        IBalancerPool(poolAddress).joinPool(poolAmountOut, maxAmountsIn);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "poolAddress",
                "type": "address"
            },
            {
                "name": "data",
                "type": "bytes calldata"
            }
        ],
        "func": "function withdraw(address poolAddress, bytes calldata data) external {\n        (uint256 poolAmountIn, uint256[] memory minAmountsOut) =\n            abi.decode(data, (uint256, uint256[]));\n        _approve(IERC20(poolAddress), poolAddress, poolAmountIn);\n        IBalancerPool(poolAddress).exitPool(poolAmountIn, minAmountsOut);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]