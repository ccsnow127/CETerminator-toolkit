[
    {
        "transactions": 162341,
        "function_num": 13
    },
    {
        "name": "name",
        "visibility": "public",
        "args": [],
        "func": "function name() public view virtual returns (string memory) {\n return _name;\n }",
        "comments": [
            "/**",
            " * @dev Returns the name of the token.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Returns the name of the token.\n */\n",
        "@dev": "Returns the name of the token.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "public",
        "args": [],
        "func": "function symbol() public view virtual returns (string memory) {\n return _symbol;\n }",
        "comments": [
            "/**",
            " * @dev Returns the symbol of the token, usually a shorter version of the",
            " * name.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Returns the symbol of the token, usually a shorter version of the\n * name.\n */\n",
        "@dev": "Returns the symbol of the token, usually a shorter version of the * name.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decimals",
        "visibility": "public",
        "args": [],
        "func": "function decimals() public view virtual returns (uint8) {\n return _decimals;\n }",
        "comments": [
            "/**",
            " * @dev Returns the number of decimals used to get its user representation.",
            " * For example, if `decimals` equals `2`, a balance of `505` tokens should",
            " * be displayed to a user as `5,05` (`505 / 10 ** 2`).",
            " *",
            " * Tokens usually opt for a value of 18, imitating the relationship between",
            " * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is",
            " * called.",
            " *",
            " * NOTE: This information is only used for _display_ purposes: it in",
            " * no way affects any of the arithmetic of the contract, including",
            " * {IERC20-balanceOf} and {IERC20-transfer}.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Returns the number of decimals used to get its user representation.\n * For example, if `decimals` equals `2`, a balance of `505` tokens should\n * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n *\n * Tokens usually opt for a value of 18, imitating the relationship between\n * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n * called.\n *\n * NOTE: This information is only used for _display_ purposes: it in\n * no way affects any of the arithmetic of the contract, including\n * {IERC20-balanceOf} and {IERC20-transfer}.\n */\n",
        "@dev": "Returns the number of decimals used to get its user representation. * For example, if `decimals` equals `2`, a balance of `505` tokens should * be displayed to a user as `5,05` (`505 / 10 ** 2`). * * Tokens usually opt for a value of 18, imitating the relationship between * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is * called. * * NOTE: This information is only used for _display_ purposes: it in * no way affects any of the arithmetic of the contract, including * {IERC20-balanceOf} and {IERC20-transfer}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view virtual override returns (uint256) {\n return _totalSupply;\n }",
        "comments": [
            "/**",
            " * @dev See {IERC20-totalSupply}.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See {IERC20-totalSupply}.\n */\n",
        "@dev": "See {IERC20-totalSupply}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address account) public view virtual override returns (uint256) {\n return _balances[account];\n }",
        "comments": [
            "/**",
            " * @dev See {IERC20-balanceOf}.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See {IERC20-balanceOf}.\n */\n",
        "@dev": "See {IERC20-balanceOf}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n _transfer(_msgSender(), recipient, amount);\n return true;\n }",
        "comments": [
            "/**",
            " * @dev See {IERC20-transfer}.",
            " *",
            " * Requirements:",
            " *",
            " * - `recipient` cannot be the zero address.",
            " * - the caller must have a balance of at least `amount`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See {IERC20-transfer}.\n *\n * Requirements:\n *\n * - `recipient` cannot be the zero address.\n * - the caller must have a balance of at least `amount`.\n */\n",
        "@dev": "See {IERC20-transfer}. * * Requirements: * * - `recipient` cannot be the zero address. * - the caller must have a balance of at least `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address owner, address spender) public view virtual override returns (uint256) {\n return _allowances[owner][spender];\n }",
        "comments": [
            "/**",
            " * @dev See {IERC20-allowance}.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See {IERC20-allowance}.\n */\n",
        "@dev": "See {IERC20-allowance}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function approve(address spender, uint256 amount) public virtual override returns (bool) {\n _approve(_msgSender(), spender, amount);\n return true;\n }",
        "comments": [
            "/**",
            " * @dev See {IERC20-approve}.",
            " *",
            " * Requirements:",
            " *",
            " * - `spender` cannot be the zero address.",
            "  */",
            ""
        ],
        "comt": "/**\n * @dev See {IERC20-approve}.\n *\n * Requirements:\n *\n * - `spender` cannot be the zero address.\n  */\n",
        "@dev": "See {IERC20-approve}. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n _transfer(sender, recipient, amount);\n _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n return true;\n }",
        "comments": [
            "/**",
            " * @dev See {IERC20-transferFrom}.",
            " *",
            " * Emits an {Approval} event indicating the updated allowance. This is not",
            " * required by the EIP. See the note at the beginning of {ERC20}.",
            " *",
            " * Requirements:",
            " *",
            " * - `sender` and `recipient` cannot be the zero address.",
            " * - `sender` must have a balance of at least `amount`.",
            " * - the caller must have allowance for ``sender``'s tokens of at least",
            " * `amount`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See {IERC20-transferFrom}.\n *\n * Emits an {Approval} event indicating the updated allowance. This is not\n * required by the EIP. See the note at the beginning of {ERC20}.\n *\n * Requirements:\n *\n * - `sender` and `recipient` cannot be the zero address.\n * - `sender` must have a balance of at least `amount`.\n * - the caller must have allowance for ``sender``'s tokens of at least\n * `amount`.\n */\n",
        "@dev": "See {IERC20-transferFrom}. * * Emits an {Approval} event indicating the updated allowance. This is not * required by the EIP. See the note at the beginning of {ERC20}. * * Requirements: * * - `sender` and `recipient` cannot be the zero address. * - `sender` must have a balance of at least `amount`. * - the caller must have allowance for ``sender``'s tokens of at least * `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n return true;\n }",
        "comments": [
            "/**",
            " * @dev Atomically increases the allowance granted to `spender` by the caller.",
            " *",
            " * This is an alternative to {approve} that can be used as a mitigation for",
            " * problems described in {IERC20-approve}.",
            " *",
            " * Emits an {Approval} event indicating the updated allowance.",
            " *",
            " * Requirements:",
            " *",
            " * - `spender` cannot be the zero address.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Atomically increases the allowance granted to `spender` by the caller.\n *\n * This is an alternative to {approve} that can be used as a mitigation for\n * problems described in {IERC20-approve}.\n *\n * Emits an {Approval} event indicating the updated allowance.\n *\n * Requirements:\n *\n * - `spender` cannot be the zero address.\n */\n",
        "@dev": "Atomically increases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n return true;\n }",
        "comments": [
            "/**",
            " * @dev Atomically decreases the allowance granted to `spender` by the caller.",
            " *",
            " * This is an alternative to {approve} that can be used as a mitigation for",
            " * problems described in {IERC20-approve}.",
            " *",
            " * Emits an {Approval} event indicating the updated allowance.",
            " *",
            " * Requirements:",
            " *",
            " * - `spender` cannot be the zero address.",
            " * - `spender` must have allowance for the caller of at least",
            " * `subtractedValue`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Atomically decreases the allowance granted to `spender` by the caller.\n *\n * This is an alternative to {approve} that can be used as a mitigation for\n * problems described in {IERC20-approve}.\n *\n * Emits an {Approval} event indicating the updated allowance.\n *\n * Requirements:\n *\n * - `spender` cannot be the zero address.\n * - `spender` must have allowance for the caller of at least\n * `subtractedValue`.\n */\n",
        "@dev": "Atomically decreases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address. * - `spender` must have allowance for the caller of at least * `subtractedValue`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "updateOperator",
        "visibility": "public",
        "args": [],
        "func": "function updateOperator() public {\n operator = IStaker(vecrvProxy).operator();\n }",
        "comments": [
            "",
            " //get current operator off proxy incase there was a change",
            " "
        ],
        "comt": "\n //get current operator off proxy incase there was a change\n ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "external",
        "args": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function mint(address _to, uint256 _amount) external {\n if(msg.sender != operator){\n //dont error just return. if a shutdown happens, rewards on old system\n //can still be claimed, just wont mint cvx\n return;\n }\n\n uint256 supply = totalSupply();\n if(supply == 0){\n //premine, one time only\n _mint(_to,_amount);\n //automatically switch operators\n updateOperator();\n return;\n }\n \n //use current supply to gauge cliff\n //this will cause a bit of overflow into the next cliff range\n //but should be within reasonable levels.\n //requires a max supply check though\n uint256 cliff = supply.div(reductionPerCliff);\n //mint if below total cliffs\n if(cliff < totalCliffs){\n //for reduction% take inverse of current cliff\n uint256 reduction = totalCliffs.sub(cliff);\n //reduce\n _amount = _amount.mul(reduction).div(totalCliffs);\n\n //supply cap check\n uint256 amtTillMax = maxSupply.sub(supply);\n if(_amount > amtTillMax){\n _amount = amtTillMax;\n }\n\n //mint\n _mint(_to, _amount);\n }\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]