[
    {
        "transactions": 174130,
        "function_num": 25
    },
    {
        "name": "foo",
        "visibility": "public",
        "args": [],
        "func": "function foo() public {\n * require(hasRole(MY_ROLE, msg.sender));\n * ...\n * }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function hasRole(bytes32 role, address account) public view returns (bool) {\n return _roles[role].members.contains(account);\n }",
        "comments": [
            "/**",
            " * @dev Returns `true` if `account` has been granted `role`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Returns `true` if `account` has been granted `role`.\n */\n",
        "@dev": "Returns `true` if `account` has been granted `role`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRoleMemberCount",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            }
        ],
        "func": "function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n return _roles[role].members.length();\n }",
        "comments": [
            "/**",
            " * @dev Returns the number of accounts that have `role`. Can be used",
            " * together with {getRoleMember} to enumerate all bearers of a role.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Returns the number of accounts that have `role`. Can be used\n * together with {getRoleMember} to enumerate all bearers of a role.\n */\n",
        "@dev": "Returns the number of accounts that have `role`. Can be used * together with {getRoleMember} to enumerate all bearers of a role.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRoleMember",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "index",
                "type": "uint256"
            }
        ],
        "func": "function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n return _roles[role].members.at(index);\n }",
        "comments": [
            "/**",
            " * @dev Returns one of the accounts that have `role`. `index` must be a",
            " * value between 0 and {getRoleMemberCount}, non-inclusive.",
            " *",
            " * Role bearers are not sorted in any particular way, and their ordering may",
            " * change at any point.",
            " *",
            " * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure",
            " * you perform all queries on the same block. See the following",
            " * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]",
            " * for more information.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Returns one of the accounts that have `role`. `index` must be a\n * value between 0 and {getRoleMemberCount}, non-inclusive.\n *\n * Role bearers are not sorted in any particular way, and their ordering may\n * change at any point.\n *\n * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n * you perform all queries on the same block. See the following\n * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n * for more information.\n */\n",
        "@dev": "Returns one of the accounts that have `role`. `index` must be a * value between 0 and {getRoleMemberCount}, non-inclusive. * * Role bearers are not sorted in any particular way, and their ordering may * change at any point. * * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure * you perform all queries on the same block. See the following * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] * for more information.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRoleAdmin",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            }
        ],
        "func": "function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n return _roles[role].adminRole;\n }",
        "comments": [
            "/**",
            " * @dev Returns the admin role that controls `role`. See {grantRole} and",
            " * {revokeRole}.",
            " *",
            " * To change a role's admin, use {_setRoleAdmin}.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Returns the admin role that controls `role`. See {grantRole} and\n * {revokeRole}.\n *\n * To change a role's admin, use {_setRoleAdmin}.\n */\n",
        "@dev": "Returns the admin role that controls `role`. See {grantRole} and * {revokeRole}. * * To change a role's admin, use {_setRoleAdmin}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "grantRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function grantRole(bytes32 role, address account) public virtual {\n require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n _grantRole(role, account);\n }",
        "comments": [
            "/**",
            " * @dev Grants `role` to `account`.",
            " *",
            " * If `account` had not been already granted `role`, emits a {RoleGranted}",
            "  * event.",
            " *",
            " * Requirements:",
            " *",
            " * - the caller must have ``role``'s admin role.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Grants `role` to `account`.\n *\n * If `account` had not been already granted `role`, emits a {RoleGranted}\n  * event.\n *\n * Requirements:\n *\n * - the caller must have ``role``'s admin role.\n */\n",
        "@dev": "Grants `role` to `account`. * * If `account` had not been already granted `role`, emits a {RoleGranted} * event. * * Requirements: * * - the caller must have ``role``'s admin role.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "revokeRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function revokeRole(bytes32 role, address account) public virtual {\n require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n _revokeRole(role, account);\n }",
        "comments": [
            "/**",
            " * @dev Revokes `role` from `account`.",
            " *",
            " * If `account` had been granted `role`, emits a {RoleRevoked} event.",
            " *",
            " * Requirements:",
            " *",
            " * - the caller must have ``role``'s admin role.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Revokes `role` from `account`.\n *\n * If `account` had been granted `role`, emits a {RoleRevoked} event.\n *\n * Requirements:\n *\n * - the caller must have ``role``'s admin role.\n */\n",
        "@dev": "Revokes `role` from `account`. * * If `account` had been granted `role`, emits a {RoleRevoked} event. * * Requirements: * * - the caller must have ``role``'s admin role.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function renounceRole(bytes32 role, address account) public virtual {\n require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n _revokeRole(role, account);\n }",
        "comments": [
            "/**",
            " * @dev Revokes `role` from the calling account.",
            " *",
            " * Roles are often managed via {grantRole} and {revokeRole}: this function's",
            " * purpose is to provide a mechanism for accounts to lose their privileges",
            " * if they are compromised (such as when a trusted device is misplaced).",
            " *",
            " * If the calling account had been granted `role`, emits a {RoleRevoked}",
            " * event.",
            " *",
            " * Requirements:",
            " *",
            " * - the caller must be `account`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Revokes `role` from the calling account.\n *\n * Roles are often managed via {grantRole} and {revokeRole}: this function's\n * purpose is to provide a mechanism for accounts to lose their privileges\n * if they are compromised (such as when a trusted device is misplaced).\n *\n * If the calling account had been granted `role`, emits a {RoleRevoked}\n * event.\n *\n * Requirements:\n *\n * - the caller must be `account`.\n */\n",
        "@dev": "Revokes `role` from the calling account. * * Roles are often managed via {grantRole} and {revokeRole}: this function's * purpose is to provide a mechanism for accounts to lose their privileges * if they are compromised (such as when a trusted device is misplaced). * * If the calling account had been granted `role`, emits a {RoleRevoked} * event. * * Requirements: * * - the caller must be `account`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "name",
        "visibility": "public",
        "args": [],
        "func": "function name() public view returns (string memory) {\n return _name;\n }",
        "comments": [
            "/**",
            " * @dev Returns the name of the token.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Returns the name of the token.\n */\n",
        "@dev": "Returns the name of the token.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "public",
        "args": [],
        "func": "function symbol() public view returns (string memory) {\n return _symbol;\n }",
        "comments": [
            "/**",
            " * @dev Returns the symbol of the token, usually a shorter version of the",
            " * name.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Returns the symbol of the token, usually a shorter version of the\n * name.\n */\n",
        "@dev": "Returns the symbol of the token, usually a shorter version of the * name.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decimals",
        "visibility": "public",
        "args": [],
        "func": "function decimals() public view returns (uint8) {\n return _decimals;\n }",
        "comments": [
            "/**",
            " * @dev Returns the number of decimals used to get its user representation.",
            " * For example, if `decimals` equals `2`, a balance of `505` tokens should",
            " * be displayed to a user as `5,05` (`505 / 10 ** 2`).",
            " *",
            " * Tokens usually opt for a value of 18, imitating the relationship between",
            " * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is",
            " * called.",
            " *",
            " * NOTE: This information is only used for _display_ purposes: it in",
            " * no way affects any of the arithmetic of the contract, including",
            " * {IERC20-balanceOf} and {IERC20-transfer}.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Returns the number of decimals used to get its user representation.\n * For example, if `decimals` equals `2`, a balance of `505` tokens should\n * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n *\n * Tokens usually opt for a value of 18, imitating the relationship between\n * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n * called.\n *\n * NOTE: This information is only used for _display_ purposes: it in\n * no way affects any of the arithmetic of the contract, including\n * {IERC20-balanceOf} and {IERC20-transfer}.\n */\n",
        "@dev": "Returns the number of decimals used to get its user representation. * For example, if `decimals` equals `2`, a balance of `505` tokens should * be displayed to a user as `5,05` (`505 / 10 ** 2`). * * Tokens usually opt for a value of 18, imitating the relationship between * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is * called. * * NOTE: This information is only used for _display_ purposes: it in * no way affects any of the arithmetic of the contract, including * {IERC20-balanceOf} and {IERC20-transfer}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view override returns (uint256) {\n return _totalSupply;\n }",
        "comments": [
            "/**",
            " * @dev See {IERC20-totalSupply}.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See {IERC20-totalSupply}.\n */\n",
        "@dev": "See {IERC20-totalSupply}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address account) public view override returns (uint256) {\n return _balances[account];\n }",
        "comments": [
            "/**",
            " * @dev See {IERC20-balanceOf}.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See {IERC20-balanceOf}.\n */\n",
        "@dev": "See {IERC20-balanceOf}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n _transfer(_msgSender(), recipient, amount);\n return true;\n }",
        "comments": [
            "/**",
            " * @dev See {IERC20-transfer}.",
            " *",
            " * Requirements:",
            " *",
            " * - `recipient` cannot be the zero address.",
            " * - the caller must have a balance of at least `amount`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See {IERC20-transfer}.\n *\n * Requirements:\n *\n * - `recipient` cannot be the zero address.\n * - the caller must have a balance of at least `amount`.\n */\n",
        "@dev": "See {IERC20-transfer}. * * Requirements: * * - `recipient` cannot be the zero address. * - the caller must have a balance of at least `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address owner, address spender) public view virtual override returns (uint256) {\n return _allowances[owner][spender];\n }",
        "comments": [
            "/**",
            " * @dev See {IERC20-allowance}.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See {IERC20-allowance}.\n */\n",
        "@dev": "See {IERC20-allowance}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function approve(address spender, uint256 amount) public virtual override returns (bool) {\n _approve(_msgSender(), spender, amount);\n return true;\n }",
        "comments": [
            "/**",
            " * @dev See {IERC20-approve}.",
            " *",
            " * Requirements:",
            " *",
            " * - `spender` cannot be the zero address.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See {IERC20-approve}.\n *\n * Requirements:\n *\n * - `spender` cannot be the zero address.\n */\n",
        "@dev": "See {IERC20-approve}. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n _transfer(sender, recipient, amount);\n _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n return true;\n }",
        "comments": [
            "/**",
            " * @dev See {IERC20-transferFrom}.",
            " *",
            " * Emits an {Approval} event indicating the updated allowance. This is not",
            " * required by the EIP. See the note at the beginning of {ERC20};",
            " *",
            " * Requirements:",
            " * - `sender` and `recipient` cannot be the zero address.",
            " * - `sender` must have a balance of at least `amount`.",
            " * - the caller must have allowance for ``sender``'s tokens of at least",
            " * `amount`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See {IERC20-transferFrom}.\n *\n * Emits an {Approval} event indicating the updated allowance. This is not\n * required by the EIP. See the note at the beginning of {ERC20};\n *\n * Requirements:\n * - `sender` and `recipient` cannot be the zero address.\n * - `sender` must have a balance of at least `amount`.\n * - the caller must have allowance for ``sender``'s tokens of at least\n * `amount`.\n */\n",
        "@dev": "See {IERC20-transferFrom}. * * Emits an {Approval} event indicating the updated allowance. This is not * required by the EIP. See the note at the beginning of {ERC20}; * * Requirements: * - `sender` and `recipient` cannot be the zero address. * - `sender` must have a balance of at least `amount`. * - the caller must have allowance for ``sender``'s tokens of at least * `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n return true;\n }",
        "comments": [
            "/**",
            " * @dev Atomically increases the allowance granted to `spender` by the caller.",
            " *",
            " * This is an alternative to {approve} that can be used as a mitigation for",
            " * problems described in {IERC20-approve}.",
            " *",
            " * Emits an {Approval} event indicating the updated allowance.",
            " *",
            " * Requirements:",
            " *",
            " * - `spender` cannot be the zero address.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Atomically increases the allowance granted to `spender` by the caller.\n *\n * This is an alternative to {approve} that can be used as a mitigation for\n * problems described in {IERC20-approve}.\n *\n * Emits an {Approval} event indicating the updated allowance.\n *\n * Requirements:\n *\n * - `spender` cannot be the zero address.\n */\n",
        "@dev": "Atomically increases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n return true;\n }",
        "comments": [
            "/**",
            " * @dev Atomically decreases the allowance granted to `spender` by the caller.",
            " *",
            " * This is an alternative to {approve} that can be used as a mitigation for",
            " * problems described in {IERC20-approve}.",
            " *",
            " * Emits an {Approval} event indicating the updated allowance.",
            " *",
            " * Requirements:",
            " *",
            " * - `spender` cannot be the zero address.",
            " * - `spender` must have allowance for the caller of at least",
            " * `subtractedValue`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Atomically decreases the allowance granted to `spender` by the caller.\n *\n * This is an alternative to {approve} that can be used as a mitigation for\n * problems described in {IERC20-approve}.\n *\n * Emits an {Approval} event indicating the updated allowance.\n *\n * Requirements:\n *\n * - `spender` cannot be the zero address.\n * - `spender` must have allowance for the caller of at least\n * `subtractedValue`.\n */\n",
        "@dev": "Atomically decreases the allowance granted to `spender` by the caller. * * This is an alternative to {approve} that can be used as a mitigation for * problems described in {IERC20-approve}. * * Emits an {Approval} event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address. * - `spender` must have allowance for the caller of at least * `subtractedValue`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "public",
        "args": [
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function burn(uint256 amount) public virtual {\n _burn(_msgSender(), amount);\n }",
        "comments": [
            "/**",
            " * @dev Destroys `amount` tokens from the caller.",
            " *",
            " * See {ERC20-_burn}.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Destroys `amount` tokens from the caller.\n *\n * See {ERC20-_burn}.\n */\n",
        "@dev": "Destroys `amount` tokens from the caller. * * See {ERC20-_burn}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burnFrom",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function burnFrom(address account, uint256 amount) public virtual {\n uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n _approve(account, _msgSender(), decreasedAllowance);\n _burn(account, amount);\n }",
        "comments": [
            "/**",
            " * @dev Destroys `amount` tokens from `account`, deducting from the caller's",
            " * allowance.",
            " *",
            " * See {ERC20-_burn} and {ERC20-allowance}.",
            " *",
            " * Requirements:",
            " *",
            " * - the caller must have allowance for ``accounts``'s tokens of at least",
            " * `amount`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n * allowance.\n *\n * See {ERC20-_burn} and {ERC20-allowance}.\n *\n * Requirements:\n *\n * - the caller must have allowance for ``accounts``'s tokens of at least\n * `amount`.\n */\n",
        "@dev": "Destroys `amount` tokens from `account`, deducting from the caller's * allowance. * * See {ERC20-_burn} and {ERC20-allowance}. * * Requirements: * * - the caller must have allowance for ``accounts``'s tokens of at least * `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "paused",
        "visibility": "public",
        "args": [],
        "func": "function paused() public view returns (bool) {\n return _paused;\n }",
        "comments": [
            "/**",
            " * @dev Returns true if the contract is paused, and false otherwise.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Returns true if the contract is paused, and false otherwise.\n */\n",
        "@dev": "Returns true if the contract is paused, and false otherwise.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "public",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function mint(address to, uint256 amount) public virtual {\n require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n _mint(to, amount);\n }",
        "comments": [
            "/**",
            " * @dev Creates `amount` new tokens for `to`.",
            " *",
            " * See {ERC20-_mint}.",
            " *",
            " * Requirements:",
            " *",
            " * - the caller must have the `MINTER_ROLE`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Creates `amount` new tokens for `to`.\n *\n * See {ERC20-_mint}.\n *\n * Requirements:\n *\n * - the caller must have the `MINTER_ROLE`.\n */\n",
        "@dev": "Creates `amount` new tokens for `to`. * * See {ERC20-_mint}. * * Requirements: * * - the caller must have the `MINTER_ROLE`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "pause",
        "visibility": "public",
        "args": [],
        "func": "function pause() public virtual {\n require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n _pause();\n }",
        "comments": [
            "/**",
            " * @dev Pauses all token transfers.",
            " *",
            " * See {ERC20Pausable} and {Pausable-_pause}.",
            " *",
            " * Requirements:",
            " *",
            " * - the caller must have the `PAUSER_ROLE`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Pauses all token transfers.\n *\n * See {ERC20Pausable} and {Pausable-_pause}.\n *\n * Requirements:\n *\n * - the caller must have the `PAUSER_ROLE`.\n */\n",
        "@dev": "Pauses all token transfers. * * See {ERC20Pausable} and {Pausable-_pause}. * * Requirements: * * - the caller must have the `PAUSER_ROLE`.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "unpause",
        "visibility": "public",
        "args": [],
        "func": "function unpause() public virtual {\n require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n _unpause();\n }",
        "comments": [
            "/**",
            " * @dev Unpauses all token transfers.",
            " *",
            " * See {ERC20Pausable} and {Pausable-_unpause}.",
            " *",
            " * Requirements:",
            " *",
            " * - the caller must have the `PAUSER_ROLE`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Unpauses all token transfers.\n *\n * See {ERC20Pausable} and {Pausable-_unpause}.\n *\n * Requirements:\n *\n * - the caller must have the `PAUSER_ROLE`.\n */\n",
        "@dev": "Unpauses all token transfers. * * See {ERC20Pausable} and {Pausable-_unpause}. * * Requirements: * * - the caller must have the `PAUSER_ROLE`.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]