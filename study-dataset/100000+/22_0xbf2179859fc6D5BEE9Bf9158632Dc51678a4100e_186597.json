[
    {
        "transactions": 186597,
        "function_num": 22
    },
    {
        "name": "Ownable",
        "visibility": "public",
        "args": [],
        "func": "function Ownable() public {\n    owner = msg.sender;\n  }",
        "comments": [
            "/**",
            "   * @dev The Ownable constructor sets the original `owner` of the contract to the sender",
            "   * account.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n",
        "@dev": "The Ownable constructor sets the original `owner` of the contract to the sender * account.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferOwnership",
        "visibility": "public",
        "args": [
            {
                "name": "newOwner",
                "type": "address"
            }
        ],
        "func": "function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }",
        "comments": [
            "/**",
            "   * @dev Allows the current owner to transfer control of the contract to a newOwner.",
            "   * @param newOwner The address to transfer ownership to.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n",
        "@dev": "Allows the current owner to transfer control of the contract to a newOwner.",
        "@param1": "newOwner The address to transfer ownership to.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address _to, uint256 _value) canTransfer public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev transfer token for a specified address",
            "   * @param _to The address to transfer to.",
            "   * @param _value The amount to be transferred.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev transfer token for a specified address\n   * @param _to The address to transfer to.\n   * @param _value The amount to be transferred.\n   */\n",
        "@dev": "transfer token for a specified address",
        "@param1": "_to The address to transfer to.",
        "@param2": "_value The amount to be transferred.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }",
        "comments": [
            "/**",
            "   * @dev Gets the balance of the specified address.",
            "   * @param _owner The address to query the the balance of.",
            "   * @return An uint256 representing the amount owned by the passed address.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Gets the balance of the specified address.\n   * @param _owner The address to query the the balance of.\n   * @return An uint256 representing the amount owned by the passed address.\n   */\n",
        "@dev": "Gets the balance of the specified address.",
        "@param1": "_owner The address to query the the balance of.",
        "@return1": "An uint256 representing the amount owned by the passed address.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address _from, address _to, uint256 _value) canTransfer public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Transfer tokens from one address to another",
            "   * @param _from address The address which you want to send tokens from",
            "   * @param _to address The address which you want to transfer to",
            "   * @param _value uint256 the amount of tokens to be transferred",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n",
        "@dev": "Transfer tokens from one address to another",
        "@param1": "_from address The address which you want to send tokens from",
        "@param2": "_to address The address which you want to transfer to",
        "@param3": "_value uint256 the amount of tokens to be transferred",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function approve(address _spender, uint256 _value) canTransfer public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.",
            "   *",
            "   * Beware that changing an allowance with this method brings the risk that someone may use both the old",
            "   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this",
            "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:",
            "   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
            "   * @param _spender The address which will spend the funds.",
            "   * @param _value The amount of tokens to be spent.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n",
        "@dev": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. * * Beware that changing an allowance with this method brings the risk that someone may use both the old * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "@param1": "_spender The address which will spend the funds.",
        "@param2": "_value The amount of tokens to be spent.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            },
            {
                "name": "_spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }",
        "comments": [
            "/**",
            "   * @dev Function to check the amount of tokens that an owner allowed to a spender.",
            "   * @param _owner address The address which owns the funds.",
            "   * @param _spender address The address which will spend the funds.",
            "   * @return A uint256 specifying the amount of tokens still available for the spender.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n",
        "@dev": "Function to check the amount of tokens that an owner allowed to a spender.",
        "@param1": "_owner address The address which owns the funds.",
        "@param2": "_spender address The address which will spend the funds.",
        "@return1": "A uint256 specifying the amount of tokens still available for the spender.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseApproval",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseApproval(address _spender, uint256 _addedValue) canTransfer public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * approve should be called when allowed[_spender] == 0. To increment",
            "   * allowed value is better to use this function to avoid 2 calls (and wait until",
            "   * the first transaction is mined)",
            "   * From MonolithDAO Token.sol",
            "   */",
            ""
        ],
        "comt": "/**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseApproval",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseApproval(address _spender, uint256 _subtractedValue) canTransfer public returns (bool) {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setTransferable",
        "visibility": "public",
        "args": [
            {
                "name": "_transferable",
                "type": "bool"
            }
        ],
        "func": "function setTransferable(bool _transferable) only(aelfDevMultisig) public {\n    require(canSetTransferable == true);\n    transferable = _transferable;\n    SetTransferable(msg.sender, _transferable);\n  }",
        "comments": [
            "/**",
            "   * @dev Enables token holders to transfer their tokens freely if true",
            "   * @param _transferable True if transfers are allowed",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Enables token holders to transfer their tokens freely if true\n   * @param _transferable True if transfers are allowed\n   */\n",
        "@dev": "Enables token holders to transfer their tokens freely if true",
        "@param1": "_transferable True if transfers are allowed",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "disableSetTransferable",
        "visibility": "public",
        "args": [],
        "func": "function disableSetTransferable() only(aelfDevMultisig) public {\n    transferable = true;\n    canSetTransferable = false;\n    DisableSetTransferable(msg.sender, false);\n  }",
        "comments": [
            "/**",
            "   * @dev disable the canSetTransferable",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev disable the canSetTransferable\n   */\n",
        "@dev": "disable the canSetTransferable",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAElfDevMultisig",
        "visibility": "public",
        "args": [
            {
                "name": "_aelfDevMultisig",
                "type": "address"
            }
        ],
        "func": "function setAElfDevMultisig(address _aelfDevMultisig) only(aelfDevMultisig) nonZeroAddress(_aelfDevMultisig) public {\n    aelfDevMultisig = _aelfDevMultisig;\n    SetAElfDevMultisig(msg.sender, _aelfDevMultisig);\n  }",
        "comments": [
            "/**",
            "   * @dev Set the aelfMultisig",
            "   * @param _aelfDevMultisig The new aelfMultisig",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Set the aelfMultisig\n   * @param _aelfDevMultisig The new aelfMultisig\n   */\n",
        "@dev": "Set the aelfMultisig",
        "@param1": "_aelfDevMultisig The new aelfMultisig",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setAElfCommunityMultisig",
        "visibility": "public",
        "args": [
            {
                "name": "_aelfCommunityMultisig",
                "type": "address"
            }
        ],
        "func": "function setAElfCommunityMultisig(address _aelfCommunityMultisig) only(aelfCommunityMultisig) nonZeroAddress(_aelfCommunityMultisig) public {\n    aelfCommunityMultisig = _aelfCommunityMultisig;\n    SetAElfCommunityMultisig(msg.sender, _aelfCommunityMultisig);\n  }",
        "comments": [
            "/**",
            "   * @dev Set the aelfCommunityMultisig",
            "   * @param _aelfCommunityMultisig The new aelfCommunityMultisig",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Set the aelfCommunityMultisig\n   * @param _aelfCommunityMultisig The new aelfCommunityMultisig\n   */\n",
        "@dev": "Set the aelfCommunityMultisig",
        "@param1": "_aelfCommunityMultisig The new aelfCommunityMultisig",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setDurationOfLock",
        "visibility": "public",
        "args": [
            {
                "name": "_durationOfLock",
                "type": "uint256"
            }
        ],
        "func": "function setDurationOfLock(uint256 _durationOfLock) canMint only(aelfCommunityMultisig) public {\n    require(_durationOfLock >= TIMETHRESHOLD);\n    durationOfLock = _durationOfLock;\n    SetDurationOfLock(msg.sender);\n  }",
        "comments": [
            "/**",
            "   * @dev Set the duration of lock of tokens approved of minting",
            "   * @param _durationOfLock the new duration of lock",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Set the duration of lock of tokens approved of minting\n   * @param _durationOfLock the new duration of lock\n   */\n",
        "@dev": "Set the duration of lock of tokens approved of minting",
        "@param1": "_durationOfLock the new duration of lock",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getLockTokens",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "func": "function getLockTokens(address _owner) nonZeroAddress(_owner) view public returns (uint256 value, uint256 blockNumber) {\n     return (lockTokens[_owner].value, lockTokens[_owner].blockNumber);\n   }",
        "comments": [
            "/**",
            "   * @dev Get the quantity of locked tokens",
            "   * @param _owner The address of locked tokens",
            "   * @return the quantity and the lock time of locked tokens",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Get the quantity of locked tokens\n   * @param _owner The address of locked tokens\n   * @return the quantity and the lock time of locked tokens\n   */\n",
        "@dev": "Get the quantity of locked tokens",
        "@param1": "_owner The address of locked tokens",
        "@return1": "the quantity and the lock time of locked tokens",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approveMintTokens",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function approveMintTokens(address _owner, uint256 _amount) nonZeroAddress(_owner) canMint only(aelfCommunityMultisig) public returns (bool) {\n    require(_amount > 0);\n    uint256 previousLockTokens = lockTokens[_owner].value;\n    require(previousLockTokens + _amount >= previousLockTokens);\n    uint256 curTotalSupply = totalSupply;\n    require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n    require(curTotalSupply + _amount <= totalSupplyCap);  // Check for overflow of total supply cap\n    uint256 previousBalanceTo = balanceOf(_owner);\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n    lockTokens[_owner].value = previousLockTokens.add(_amount);\n    uint256 curBlockNumber = getCurrentBlockNumber();\n    lockTokens[_owner].blockNumber = curBlockNumber.add(durationOfLock);\n    ApproveMintTokens(_owner, _amount);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Approve of minting `_amount` tokens that are assigned to `_owner`",
            "   * @param _owner The address that will be assigned the new tokens",
            "   * @param _amount The quantity of tokens approved of mintting",
            "   * @return True if the tokens are approved of mintting correctly",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Approve of minting `_amount` tokens that are assigned to `_owner`\n   * @param _owner The address that will be assigned the new tokens\n   * @param _amount The quantity of tokens approved of mintting\n   * @return True if the tokens are approved of mintting correctly\n   */\n",
        "@dev": "Approve of minting `_amount` tokens that are assigned to `_owner`",
        "@param1": "_owner The address that will be assigned the new tokens",
        "@param2": "_amount The quantity of tokens approved of mintting",
        "@return1": "True if the tokens are approved of mintting correctly",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdrawMintTokens",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function withdrawMintTokens(address _owner, uint256 _amount) nonZeroAddress(_owner) canMint only(aelfCommunityMultisig) public returns (bool) {\n    require(_amount > 0);\n    uint256 previousLockTokens = lockTokens[_owner].value;\n    require(previousLockTokens - _amount >= 0);\n    lockTokens[_owner].value = previousLockTokens.sub(_amount);\n    if (previousLockTokens - _amount == 0) {\n      lockTokens[_owner].blockNumber = 0;\n    }\n    WithdrawMintTokens(_owner, _amount);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Withdraw approval of minting `_amount` tokens that are assigned to `_owner`",
            "   * @param _owner The address that will be withdrawn the tokens",
            "   * @param _amount The quantity of tokens withdrawn approval of mintting",
            "   * @return True if the tokens are withdrawn correctly",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Withdraw approval of minting `_amount` tokens that are assigned to `_owner`\n   * @param _owner The address that will be withdrawn the tokens\n   * @param _amount The quantity of tokens withdrawn approval of mintting\n   * @return True if the tokens are withdrawn correctly\n   */\n",
        "@dev": "Withdraw approval of minting `_amount` tokens that are assigned to `_owner`",
        "@param1": "_owner The address that will be withdrawn the tokens",
        "@param2": "_amount The quantity of tokens withdrawn approval of mintting",
        "@return1": "True if the tokens are withdrawn correctly",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mintTokens",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "func": "function mintTokens(address _owner) canMint only(aelfDevMultisig) nonZeroAddress(_owner) public returns (bool) {\n    require(lockTokens[_owner].blockNumber <= getCurrentBlockNumber());\n    uint256 _amount = lockTokens[_owner].value;\n    uint256 curTotalSupply = totalSupply;\n    require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n    require(curTotalSupply + _amount <= totalSupplyCap);  // Check for overflow of total supply cap\n    uint256 previousBalanceTo = balanceOf(_owner);\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n    \n    totalSupply = curTotalSupply.add(_amount);\n    balances[_owner] = previousBalanceTo.add(_amount);\n    lockTokens[_owner].value = 0;\n    lockTokens[_owner].blockNumber = 0;\n    MintTokens(_owner, _amount);\n    Transfer(0, _owner, _amount);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Mints `_amount` tokens that are assigned to `_owner`",
            "   * @param _owner The address that will be assigned the new tokens",
            "   * @return True if the tokens are minted correctly",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Mints `_amount` tokens that are assigned to `_owner`\n   * @param _owner The address that will be assigned the new tokens\n   * @return True if the tokens are minted correctly\n   */\n",
        "@dev": "Mints `_amount` tokens that are assigned to `_owner`",
        "@param1": "_owner The address that will be assigned the new tokens",
        "@return1": "True if the tokens are minted correctly",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mintTokensWithinTime",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function mintTokensWithinTime(address _owner, uint256 _amount) nonZeroAddress(_owner) canMint only(aelfDevMultisig) public returns (bool) {\n    require(_amount > 0);\n    require(getCurrentBlockNumber() < (deployBlockNumber + MINTTIME));\n    uint256 curTotalSupply = totalSupply;\n    require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n    require(curTotalSupply + _amount <= totalSupplyCap);  // Check for overflow of total supply cap\n    uint256 previousBalanceTo = balanceOf(_owner);\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n    \n    totalSupply = curTotalSupply.add(_amount);\n    balances[_owner] = previousBalanceTo.add(_amount);\n    MintTokens(_owner, _amount);\n    Transfer(0, _owner, _amount);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Mints `_amount` tokens that are assigned to `_owner` within one day after deployment",
            "   * the tokens minted will be added to balance immediately",
            "   * @param _owner The address that will be assigned the new tokens",
            "   * @param _amount The quantity of tokens withdrawn minted",
            "   * @return True if the tokens are minted correctly",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Mints `_amount` tokens that are assigned to `_owner` within one day after deployment\n   * the tokens minted will be added to balance immediately\n   * @param _owner The address that will be assigned the new tokens\n   * @param _amount The quantity of tokens withdrawn minted\n   * @return True if the tokens are minted correctly\n   */\n",
        "@dev": "Mints `_amount` tokens that are assigned to `_owner` within one day after deployment * the tokens minted will be added to balance immediately",
        "@param1": "_owner The address that will be assigned the new tokens",
        "@param2": "_amount The quantity of tokens withdrawn minted",
        "@return1": "True if the tokens are minted correctly",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferForMultiAddresses",
        "visibility": "public",
        "args": [
            {
                "name": "_addresses",
                "type": "address[]"
            },
            {
                "name": "_amounts",
                "type": "uint256[]"
            }
        ],
        "func": "function transferForMultiAddresses(address[] _addresses, uint256[] _amounts) canTransfer public returns (bool) {\n    for (uint256 i = 0; i < _addresses.length; i++) {\n      require(_addresses[i] != address(0));\n      require(_amounts[i] <= balances[msg.sender]);\n      require(_amounts[i] > 0);\n\n      // SafeMath.sub will throw if there is not enough balance.\n      balances[msg.sender] = balances[msg.sender].sub(_amounts[i]);\n      balances[_addresses[i]] = balances[_addresses[i]].add(_amounts[i]);\n      Transfer(msg.sender, _addresses[i], _amounts[i]);\n    }\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Transfer tokens to multiple addresses",
            "   * @param _addresses The addresses that will receieve tokens",
            "   * @param _amounts The quantity of tokens that will be transferred",
            "   * @return True if the tokens are transferred correctly",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Transfer tokens to multiple addresses\n   * @param _addresses The addresses that will receieve tokens\n   * @param _amounts The quantity of tokens that will be transferred\n   * @return True if the tokens are transferred correctly\n   */\n",
        "@dev": "Transfer tokens to multiple addresses",
        "@param1": "_addresses The addresses that will receieve tokens",
        "@param2": "_amounts The quantity of tokens that will be transferred",
        "@return1": "True if the tokens are transferred correctly",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burnTokens",
        "visibility": "public",
        "args": [
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function burnTokens(uint256 _amount) public returns (bool) {\n    require(_amount > 0);\n    uint256 curTotalSupply = totalSupply;\n    require(curTotalSupply >= _amount);\n    uint256 previousBalanceTo = balanceOf(msg.sender);\n    require(previousBalanceTo >= _amount);\n    totalSupply = curTotalSupply.sub(_amount);\n    balances[msg.sender] = previousBalanceTo.sub(_amount);\n    BurnTokens(msg.sender, _amount);\n    Transfer(msg.sender, 0, _amount);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Burns `_amount` tokens from `_owner`",
            "   * @param _amount The quantity of tokens being burned",
            "   * @return True if the tokens are burned correctly",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Burns `_amount` tokens from `_owner`\n   * @param _amount The quantity of tokens being burned\n   * @return True if the tokens are burned correctly\n   */\n",
        "@dev": "Burns `_amount` tokens from `_owner`",
        "@param1": "_amount The quantity of tokens being burned",
        "@return1": "True if the tokens are burned correctly",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "finishMinting",
        "visibility": "public",
        "args": [],
        "func": "function finishMinting() only(aelfDevMultisig) canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished(msg.sender);\n    return true;\n  }",
        "comments": [
            "/**",
            "   * @dev Function to stop minting new tokens.",
            "   * @return True if the operation was successful.",
            "   */",
            ""
        ],
        "comt": "/**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n",
        "@dev": "Function to stop minting new tokens.",
        "@return1": "True if the operation was successful.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]