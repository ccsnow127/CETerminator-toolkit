[
    {
        "transactions": 142425,
        "function_num": 32
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }",
        "comments": [
            "/**",
            "     * @dev Total number of tokens in existence",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Total number of tokens in existence\n     */\n",
        "@dev": "Total number of tokens in existence",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }",
        "comments": [
            "/**",
            "     * @dev Gets the balance of the specified address.",
            "     * @param owner The address to query the balance of.",
            "     * @return A uint256 representing the amount owned by the passed address.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n",
        "@dev": "Gets the balance of the specified address.",
        "@param1": "owner The address to query the balance of.",
        "@return1": "A uint256 representing the amount owned by the passed address.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }",
        "comments": [
            "/**",
            "     * @dev Function to check the amount of tokens that an owner allowed to a spender.",
            "     * @param owner address The address which owns the funds.",
            "     * @param spender address The address which will spend the funds.",
            "     * @return A uint256 specifying the amount of tokens still available for the spender.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n",
        "@dev": "Function to check the amount of tokens that an owner allowed to a spender.",
        "@param1": "owner address The address which owns the funds.",
        "@param2": "spender address The address which will spend the funds.",
        "@return1": "A uint256 specifying the amount of tokens still available for the spender.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Transfer token to a specified address",
            "     * @param to The address to transfer to.",
            "     * @param value The amount to be transferred.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n",
        "@dev": "Transfer token to a specified address",
        "@param1": "to The address to transfer to.",
        "@param2": "value The amount to be transferred.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.",
            "     * Beware that changing an allowance with this method brings the risk that someone may use both the old",
            "     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this",
            "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:",
            "     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
            "     * @param spender The address which will spend the funds.",
            "     * @param value The amount of tokens to be spent.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n",
        "@dev": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. * Beware that changing an allowance with this method brings the risk that someone may use both the old * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "@param1": "spender The address which will spend the funds.",
        "@param2": "value The amount of tokens to be spent.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Transfer tokens from one address to another.",
            "     * Note that while this function emits an Approval event, this is not required as per the specification,",
            "     * and other compliant implementations may not emit the event.",
            "     * @param from address The address which you want to send tokens from",
            "     * @param to address The address which you want to transfer to",
            "     * @param value uint256 the amount of tokens to be transferred",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n",
        "@dev": "Transfer tokens from one address to another. * Note that while this function emits an Approval event, this is not required as per the specification, * and other compliant implementations may not emit the event.",
        "@param1": "from address The address which you want to send tokens from",
        "@param2": "to address The address which you want to transfer to",
        "@param3": "value uint256 the amount of tokens to be transferred",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Increase the amount of tokens that an owner allowed to a spender.",
            "     * approve should be called when _allowed[msg.sender][spender] == 0. To increment",
            "     * allowed value is better to use this function to avoid 2 calls (and wait until",
            "     * the first transaction is mined)",
            "     * From MonolithDAO Token.sol",
            "     * Emits an Approval event.",
            "     * @param spender The address which will spend the funds.",
            "     * @param addedValue The amount of tokens to increase the allowance by.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n",
        "@dev": "Increase the amount of tokens that an owner allowed to a spender. * approve should be called when _allowed[msg.sender][spender] == 0. To increment * allowed value is better to use this function to avoid 2 calls (and wait until * the first transaction is mined) * From MonolithDAO Token.sol * Emits an Approval event.",
        "@param1": "spender The address which will spend the funds.",
        "@param2": "addedValue The amount of tokens to increase the allowance by.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Decrease the amount of tokens that an owner allowed to a spender.",
            "     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement",
            "     * allowed value is better to use this function to avoid 2 calls (and wait until",
            "     * the first transaction is mined)",
            "     * From MonolithDAO Token.sol",
            "     * Emits an Approval event.",
            "     * @param spender The address which will spend the funds.",
            "     * @param subtractedValue The amount of tokens to decrease the allowance by.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n",
        "@dev": "Decrease the amount of tokens that an owner allowed to a spender. * approve should be called when _allowed[msg.sender][spender] == 0. To decrement * allowed value is better to use this function to avoid 2 calls (and wait until * the first transaction is mined) * From MonolithDAO Token.sol * Emits an Approval event.",
        "@param1": "spender The address which will spend the funds.",
        "@param2": "subtractedValue The amount of tokens to decrease the allowance by.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "name",
        "visibility": "public",
        "args": [],
        "func": "function name() public view returns (string memory) {\n        return _name;\n    }",
        "comments": [
            "/**",
            "     * @return the name of the token.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @return the name of the token.\n     */\n",
        "@return1": "the name of the token.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "public",
        "args": [],
        "func": "function symbol() public view returns (string memory) {\n        return _symbol;\n    }",
        "comments": [
            "/**",
            "     * @return the symbol of the token.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @return the symbol of the token.\n     */\n",
        "@return1": "the symbol of the token.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decimals",
        "visibility": "public",
        "args": [],
        "func": "function decimals() public view returns (uint8) {\n        return _decimals;\n    }",
        "comments": [
            "/**",
            "     * @return the number of decimals of the token.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @return the number of decimals of the token.\n     */\n",
        "@return1": "the number of decimals of the token.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "token",
        "visibility": "public",
        "args": [],
        "func": "function token() public view returns (IERC20) {\n        return _token;\n    }",
        "comments": [
            "/**",
            "     * @return the token being held.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @return the token being held.\n     */\n",
        "@return1": "the token being held.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "beneficiary",
        "visibility": "public",
        "args": [],
        "func": "function beneficiary() public view returns (address) {\n        return _beneficiary;\n    }",
        "comments": [
            "/**",
            "     * @return the beneficiary of the tokens.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @return the beneficiary of the tokens.\n     */\n",
        "@return1": "the beneficiary of the tokens.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "releaseTime",
        "visibility": "public",
        "args": [],
        "func": "function releaseTime() public view returns (uint256) {\n        return _releaseTime;\n    }",
        "comments": [
            "/**",
            "     * @return the time when the tokens are released.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @return the time when the tokens are released.\n     */\n",
        "@return1": "the time when the tokens are released.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "release",
        "visibility": "public",
        "args": [],
        "func": "function release() public {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp >= _releaseTime);\n\n        uint256 amount = _token.balanceOf(address(this));\n        require(amount > 0);\n\n        _token.safeTransfer(_beneficiary, amount);\n    }",
        "comments": [
            "/**",
            "     * @notice Transfers tokens held by timelock to beneficiary.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Transfers tokens held by timelock to beneficiary.\n     */\n",
        "@notice": "Transfers tokens held by timelock to beneficiary.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isMinter",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addMinter",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceMinter",
        "visibility": "public",
        "args": [],
        "func": "function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "public",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }",
        "comments": [
            "/**",
            "     * @dev Function to mint tokens",
            "     * @param to The address that will receive the minted tokens.",
            "     * @param value The amount of tokens to mint.",
            "     * @return A boolean that indicates if the operation was successful.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n",
        "@dev": "Function to mint tokens",
        "@param1": "to The address that will receive the minted tokens.",
        "@param2": "value The amount of tokens to mint.",
        "@return1": "A boolean that indicates if the operation was successful.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "public",
        "args": [
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }",
        "comments": [
            "/**",
            "     * @dev Burns a specific amount of tokens.",
            "     * @param value The amount of token to be burned.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n",
        "@dev": "Burns a specific amount of tokens.",
        "@param1": "value The amount of token to be burned.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burnFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }",
        "comments": [
            "/**",
            "     * @dev Burns a specific amount of tokens from the target address and decrements allowance",
            "     * @param from address The account whose tokens will be burned.",
            "     * @param value uint256 The amount of token to be burned.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The account whose tokens will be burned.\n     * @param value uint256 The amount of token to be burned.\n     */\n",
        "@dev": "Burns a specific amount of tokens from the target address and decrements allowance",
        "@param1": "from address The account whose tokens will be burned.",
        "@param2": "value uint256 The amount of token to be burned.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isPauser",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addPauser",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renouncePauser",
        "visibility": "public",
        "args": [],
        "func": "function renouncePauser() public {\n        _removePauser(msg.sender);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "paused",
        "visibility": "public",
        "args": [],
        "func": "function paused() public view returns (bool) {\n        return _paused;\n    }",
        "comments": [
            "/**",
            "     * @return true if the contract is paused, false otherwise.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @return true if the contract is paused, false otherwise.\n     */\n",
        "@return1": "true if the contract is paused, false otherwise.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "pause",
        "visibility": "public",
        "args": [],
        "func": "function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }",
        "comments": [
            "/**",
            "     * @dev called by the owner to pause, triggers stopped state",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n",
        "@dev": "called by the owner to pause, triggers stopped state",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "unpause",
        "visibility": "public",
        "args": [],
        "func": "function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }",
        "comments": [
            "/**",
            "     * @dev called by the owner to unpause, returns to normal state",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n",
        "@dev": "called by the owner to unpause, returns to normal state",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "addedValue",
                "type": "uint"
            }
        ],
        "func": "function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\n        return super.increaseAllowance(spender, addedValue);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "subtractedValue",
                "type": "uint"
            }
        ],
        "func": "function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]