[
    {
        "transactions": 829749,
        "function_num": 14
    },
    {
        "name": "Ownable",
        "visibility": "public",
        "args": [],
        "func": "function Ownable() public {\n owner = msg.sender;\n }",
        "comments": [
            "/**",
            " * @dev The Ownable constructor sets the original `owner` of the contract to the sender",
            " * account.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n * account.\n */\n",
        "@dev": "The Ownable constructor sets the original `owner` of the contract to the sender * account.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferOwnership",
        "visibility": "public",
        "args": [
            {
                "name": "newOwner",
                "type": "address"
            }
        ],
        "func": "function transferOwnership(address newOwner) public onlyOwner {\n require(newOwner != address(0));\n OwnershipTransferred(owner, newOwner);\n owner = newOwner;\n }",
        "comments": [
            "/**",
            " * @dev Allows the current owner to transfer control of the contract to a newOwner.",
            " * @param newOwner The address to transfer ownership to.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Allows the current owner to transfer control of the contract to a newOwner.\n * @param newOwner The address to transfer ownership to.\n */\n",
        "@dev": "Allows the current owner to transfer control of the contract to a newOwner.",
        "@param1": "newOwner The address to transfer ownership to.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address _to, uint256 _value) public whenMintingFinished returns (bool) {\n require(_to != address(0));\n require(_value <= balances[msg.sender]);\n\n // SafeMath.sub will throw if there is not enough balance.\n balances[msg.sender] = balances[msg.sender].sub(_value);\n balances[_to] = balances[_to].add(_value);\n Transfer(msg.sender, _to, _value);\n return true;\n }",
        "comments": [
            "/**",
            " * @dev transfer token for a specified address",
            " * @param _to The address to transfer to.",
            " * @param _value The amount to be transferred.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev transfer token for a specified address\n * @param _to The address to transfer to.\n * @param _value The amount to be transferred.\n */\n",
        "@dev": "transfer token for a specified address",
        "@param1": "_to The address to transfer to.",
        "@param2": "_value The amount to be transferred.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address _owner) public view returns (uint256 balance) {\n return balances[_owner];\n }",
        "comments": [
            "/**",
            " * @dev Gets the balance of the specified address.",
            " * @param _owner The address to query the the balance of.",
            " * @return An uint256 representing the amount owned by the passed address.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Gets the balance of the specified address.\n * @param _owner The address to query the the balance of.\n * @return An uint256 representing the amount owned by the passed address.\n */\n",
        "@dev": "Gets the balance of the specified address.",
        "@param1": "_owner The address to query the the balance of.",
        "@return1": "An uint256 representing the amount owned by the passed address.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address _from, address _to, uint256 _value) public whenMintingFinished returns (bool) {\n require(_to != address(0));\n require(_value <= balances[_from]);\n require(_value <= allowed[_from][msg.sender]);\n\n balances[_from] = balances[_from].sub(_value);\n balances[_to] = balances[_to].add(_value);\n allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n Transfer(_from, _to, _value);\n return true;\n }",
        "comments": [
            "/**",
            " * @dev Transfer tokens from one address to another",
            " * @param _from address The address which you want to send tokens from",
            " * @param _to address The address which you want to transfer to",
            " * @param _value uint256 the amout of tokens to be transfered",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Transfer tokens from one address to another\n * @param _from address The address which you want to send tokens from\n * @param _to address The address which you want to transfer to\n * @param _value uint256 the amout of tokens to be transfered\n */\n",
        "@dev": "Transfer tokens from one address to another",
        "@param1": "_from address The address which you want to send tokens from",
        "@param2": "_to address The address which you want to transfer to",
        "@param3": "_value uint256 the amout of tokens to be transfered",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function approve(address _spender, uint256 _value) public whenMintingFinished returns (bool) {\n allowed[msg.sender][_spender] = _value;\n Approval(msg.sender, _spender, _value);\n return true;\n }",
        "comments": [
            "/**",
            " * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.",
            " *",
            " * Beware that changing an allowance with this method brings the risk that someone may use both the old",
            " * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this",
            " * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:",
            " * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
            " * @param _spender The address which will spend the funds.",
            " * @param _value The amount of tokens to be spent.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n *\n * Beware that changing an allowance with this method brings the risk that someone may use both the old\n * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n * @param _spender The address which will spend the funds.\n * @param _value The amount of tokens to be spent.\n */\n",
        "@dev": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. * * Beware that changing an allowance with this method brings the risk that someone may use both the old * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "@param1": "_spender The address which will spend the funds.",
        "@param2": "_value The amount of tokens to be spent.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            },
            {
                "name": "_spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address _owner, address _spender) public view returns (uint256) {\n return allowed[_owner][_spender];\n }",
        "comments": [
            "/**",
            " * @dev Function to check the amount of tokens that an owner allowed to a spender.",
            " * @param _owner address The address which owns the funds.",
            " * @param _spender address The address which will spend the funds.",
            " * @return A uint256 specifying the amount of tokens still available for the spender.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Function to check the amount of tokens that an owner allowed to a spender.\n * @param _owner address The address which owns the funds.\n * @param _spender address The address which will spend the funds.\n * @return A uint256 specifying the amount of tokens still available for the spender.\n */\n",
        "@dev": "Function to check the amount of tokens that an owner allowed to a spender.",
        "@param1": "_owner address The address which owns the funds.",
        "@param2": "_spender address The address which will spend the funds.",
        "@return1": "A uint256 specifying the amount of tokens still available for the spender.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseApproval",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_addedValue",
                "type": "uint"
            }
        ],
        "func": "function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n return true;\n }",
        "comments": [
            "/**",
            " * approve should be called when allowed[_spender] == 0. To increment",
            " * allowed value is better to use this function to avoid 2 calls (and wait until",
            " * the first transaction is mined)",
            " * From MonolithDAO Token.sol",
            " */",
            ""
        ],
        "comt": "/**\n * approve should be called when allowed[_spender] == 0. To increment\n * allowed value is better to use this function to avoid 2 calls (and wait until\n * the first transaction is mined)\n * From MonolithDAO Token.sol\n */\n",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseApproval",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_subtractedValue",
                "type": "uint"
            }
        ],
        "func": "function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n uint oldValue = allowed[msg.sender][_spender];\n if (_subtractedValue > oldValue) {\n allowed[msg.sender][_spender] = 0;\n } else {\n allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n }\n Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n return true;\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setMinter",
        "visibility": "external",
        "args": [
            {
                "name": "_minter",
                "type": "address"
            }
        ],
        "func": "function setMinter(address _minter) external onlyOwner {\n minter = _minter;\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "external",
        "args": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function mint(address _to, uint256 _amount) external onlyMinter canMint returns (bool) {\n require(balances[_to] + _amount > balances[_to]); // Guard against overflow\n require(totalSupply + _amount > totalSupply); // Guard against overflow (this should never happen)\n totalSupply = totalSupply.add(_amount);\n balances[_to] = balances[_to].add(_amount);\n Mint(_to, _amount);\n return true;\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "finishMinting",
        "visibility": "external",
        "args": [],
        "func": "function finishMinting() external onlyMinter returns (bool) {\n mintingFinished = true;\n MintingFinished();\n return true;\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setDestroyer",
        "visibility": "external",
        "args": [
            {
                "name": "_destroyer",
                "type": "address"
            }
        ],
        "func": "function setDestroyer(address _destroyer) external onlyOwner {\n destroyer = _destroyer;\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "external",
        "args": [
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function burn(uint256 _amount) external onlyDestroyer {\n require(balances[destroyer] >= _amount && _amount > 0);\n balances[destroyer] = balances[destroyer].sub(_amount);\n totalSupply = totalSupply.sub(_amount);\n Burn(_amount);\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]