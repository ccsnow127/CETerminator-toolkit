[
    {
        "transactions": 827530,
        "function_num": 26
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view returns (uint256) {\n return totalSupply_;\n }",
        "comments": [
            "/**",
            " * @dev Total number of tokens in existence",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Total number of tokens in existence\n */\n",
        "@dev": "Total number of tokens in existence",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address _to, uint256 _value) public returns (bool) {\n require(_value <= balances[msg.sender]);\n require(_to != address(0));\n\n balances[msg.sender] = balances[msg.sender].sub(_value);\n balances[_to] = balances[_to].add(_value);\n emit Transfer(msg.sender, _to, _value);\n return true;\n }",
        "comments": [
            "/**",
            " * @dev Transfer token for a specified address",
            " * @param _to The address to transfer to.",
            " * @param _value The amount to be transferred.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Transfer token for a specified address\n * @param _to The address to transfer to.\n * @param _value The amount to be transferred.\n */\n",
        "@dev": "Transfer token for a specified address",
        "@param1": "_to The address to transfer to.",
        "@param2": "_value The amount to be transferred.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address _owner) public view returns (uint256) {\n return balances[_owner];\n }",
        "comments": [
            "/**",
            " * @dev Gets the balance of the specified address.",
            " * @param _owner The address to query the the balance of.",
            " * @return An uint256 representing the amount owned by the passed address.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Gets the balance of the specified address.\n * @param _owner The address to query the the balance of.\n * @return An uint256 representing the amount owned by the passed address.\n */\n",
        "@dev": "Gets the balance of the specified address.",
        "@param1": "_owner The address to query the the balance of.",
        "@return1": "An uint256 representing the amount owned by the passed address.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n address _from,\n address _to,\n uint256 _value\n )\n public\n returns (bool)\n {\n require(_value <= balances[_from]);\n require(_value <= allowed[_from][msg.sender]);\n require(_to != address(0));\n\n balances[_from] = balances[_from].sub(_value);\n balances[_to] = balances[_to].add(_value);\n allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n emit Transfer(_from, _to, _value);\n return true;\n }",
        "comments": [
            "/**",
            " * @dev Transfer tokens from one address to another",
            " * @param _from address The address which you want to send tokens from",
            " * @param _to address The address which you want to transfer to",
            " * @param _value uint256 the amount of tokens to be transferred",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Transfer tokens from one address to another\n * @param _from address The address which you want to send tokens from\n * @param _to address The address which you want to transfer to\n * @param _value uint256 the amount of tokens to be transferred\n */\n",
        "@dev": "Transfer tokens from one address to another",
        "@param1": "_from address The address which you want to send tokens from",
        "@param2": "_to address The address which you want to transfer to",
        "@param3": "_value uint256 the amount of tokens to be transferred",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function approve(address _spender, uint256 _value) public returns (bool) {\n allowed[msg.sender][_spender] = _value;\n emit Approval(msg.sender, _spender, _value);\n return true;\n }",
        "comments": [
            "/**",
            " * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.",
            " * Beware that changing an allowance with this method brings the risk that someone may use both the old",
            " * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this",
            " * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:",
            " * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
            " * @param _spender The address which will spend the funds.",
            " * @param _value The amount of tokens to be spent.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n * Beware that changing an allowance with this method brings the risk that someone may use both the old\n * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n * @param _spender The address which will spend the funds.\n * @param _value The amount of tokens to be spent.\n */\n",
        "@dev": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. * Beware that changing an allowance with this method brings the risk that someone may use both the old * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "@param1": "_spender The address which will spend the funds.",
        "@param2": "_value The amount of tokens to be spent.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            },
            {
                "name": "_spender",
                "type": "address"
            }
        ],
        "func": "function allowance(\n address _owner,\n address _spender\n )\n public\n view\n returns (uint256)\n {\n return allowed[_owner][_spender];\n }",
        "comments": [
            "/**",
            " * @dev Function to check the amount of tokens that an owner allowed to a spender.",
            " * @param _owner address The address which owns the funds.",
            " * @param _spender address The address which will spend the funds.",
            " * @return A uint256 specifying the amount of tokens still available for the spender.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Function to check the amount of tokens that an owner allowed to a spender.\n * @param _owner address The address which owns the funds.\n * @param _spender address The address which will spend the funds.\n * @return A uint256 specifying the amount of tokens still available for the spender.\n */\n",
        "@dev": "Function to check the amount of tokens that an owner allowed to a spender.",
        "@param1": "_owner address The address which owns the funds.",
        "@param2": "_spender address The address which will spend the funds.",
        "@return1": "A uint256 specifying the amount of tokens still available for the spender.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseApproval",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseApproval(\n address _spender,\n uint256 _addedValue\n )\n public\n returns (bool)\n {\n allowed[msg.sender][_spender] = (\n allowed[msg.sender][_spender].add(_addedValue));\n emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n return true;\n }",
        "comments": [
            "/**",
            " * @dev Increase the amount of tokens that an owner allowed to a spender.",
            " * approve should be called when allowed[_spender] == 0. To increment",
            " * allowed value is better to use this function to avoid 2 calls (and wait until",
            " * the first transaction is mined)",
            " * From MonolithDAO Token.sol",
            " * @param _spender The address which will spend the funds.",
            " * @param _addedValue The amount of tokens to increase the allowance by.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Increase the amount of tokens that an owner allowed to a spender.\n * approve should be called when allowed[_spender] == 0. To increment\n * allowed value is better to use this function to avoid 2 calls (and wait until\n * the first transaction is mined)\n * From MonolithDAO Token.sol\n * @param _spender The address which will spend the funds.\n * @param _addedValue The amount of tokens to increase the allowance by.\n */\n",
        "@dev": "Increase the amount of tokens that an owner allowed to a spender. * approve should be called when allowed[_spender] == 0. To increment * allowed value is better to use this function to avoid 2 calls (and wait until * the first transaction is mined) * From MonolithDAO Token.sol",
        "@param1": "_spender The address which will spend the funds.",
        "@param2": "_addedValue The amount of tokens to increase the allowance by.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseApproval",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseApproval(\n address _spender,\n uint256 _subtractedValue\n )\n public\n returns (bool)\n {\n uint256 oldValue = allowed[msg.sender][_spender];\n if (_subtractedValue >= oldValue) {\n allowed[msg.sender][_spender] = 0;\n } else {\n allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n }\n emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n return true;\n }",
        "comments": [
            "/**",
            " * @dev Decrease the amount of tokens that an owner allowed to a spender.",
            " * approve should be called when allowed[_spender] == 0. To decrement",
            " * allowed value is better to use this function to avoid 2 calls (and wait until",
            " * the first transaction is mined)",
            " * From MonolithDAO Token.sol",
            " * @param _spender The address which will spend the funds.",
            " * @param _subtractedValue The amount of tokens to decrease the allowance by.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Decrease the amount of tokens that an owner allowed to a spender.\n * approve should be called when allowed[_spender] == 0. To decrement\n * allowed value is better to use this function to avoid 2 calls (and wait until\n * the first transaction is mined)\n * From MonolithDAO Token.sol\n * @param _spender The address which will spend the funds.\n * @param _subtractedValue The amount of tokens to decrease the allowance by.\n */\n",
        "@dev": "Decrease the amount of tokens that an owner allowed to a spender. * approve should be called when allowed[_spender] == 0. To decrement * allowed value is better to use this function to avoid 2 calls (and wait until * the first transaction is mined) * From MonolithDAO Token.sol",
        "@param1": "_spender The address which will spend the funds.",
        "@param2": "_subtractedValue The amount of tokens to decrease the allowance by.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceOwnership",
        "visibility": "public",
        "args": [],
        "func": "function renounceOwnership() public onlyOwner {\n emit OwnershipRenounced(owner);\n owner = address(0);\n }",
        "comments": [
            "/**",
            " * @dev Allows the current owner to relinquish control of the contract.",
            " * @notice Renouncing to ownership will leave the contract without an owner.",
            " * It will not be possible to call the functions with the `onlyOwner`",
            " * modifier anymore.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Allows the current owner to relinquish control of the contract.\n * @notice Renouncing to ownership will leave the contract without an owner.\n * It will not be possible to call the functions with the `onlyOwner`\n * modifier anymore.\n */\n",
        "@dev": "Allows the current owner to relinquish control of the contract.",
        "@notice": "Renouncing to ownership will leave the contract without an owner. * It will not be possible to call the functions with the `onlyOwner` * modifier anymore.",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferOwnership",
        "visibility": "public",
        "args": [
            {
                "name": "_newOwner",
                "type": "address"
            }
        ],
        "func": "function transferOwnership(address _newOwner) public onlyOwner {\n _transferOwnership(_newOwner);\n }",
        "comments": [
            "/**",
            " * @dev Allows the current owner to transfer control of the contract to a newOwner.",
            " * @param _newOwner The address to transfer ownership to.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Allows the current owner to transfer control of the contract to a newOwner.\n * @param _newOwner The address to transfer ownership to.\n */\n",
        "@dev": "Allows the current owner to transfer control of the contract to a newOwner.",
        "@param1": "_newOwner The address to transfer ownership to.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "public",
        "args": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function mint(\n address _to,\n uint256 _amount\n )\n public\n hasMintPermission\n canMint\n returns (bool)\n {\n totalSupply_ = totalSupply_.add(_amount);\n balances[_to] = balances[_to].add(_amount);\n emit Mint(_to, _amount);\n emit Transfer(address(0), _to, _amount);\n return true;\n }",
        "comments": [
            "/**",
            " * @dev Function to mint tokens",
            " * @param _to The address that will receive the minted tokens.",
            " * @param _amount The amount of tokens to mint.",
            " * @return A boolean that indicates if the operation was successful.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Function to mint tokens\n * @param _to The address that will receive the minted tokens.\n * @param _amount The amount of tokens to mint.\n * @return A boolean that indicates if the operation was successful.\n */\n",
        "@dev": "Function to mint tokens",
        "@param1": "_to The address that will receive the minted tokens.",
        "@param2": "_amount The amount of tokens to mint.",
        "@return1": "A boolean that indicates if the operation was successful.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "finishMinting",
        "visibility": "public",
        "args": [],
        "func": "function finishMinting() public onlyOwner canMint returns (bool) {\n mintingFinished = true;\n emit MintFinished();\n return true;\n }",
        "comments": [
            "/**",
            " * @dev Function to stop minting new tokens.",
            " * @return True if the operation was successful.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Function to stop minting new tokens.\n * @return True if the operation was successful.\n */\n",
        "@dev": "Function to stop minting new tokens.",
        "@return1": "True if the operation was successful.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "public",
        "args": [
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function burn(uint256 _value) public {\n _burn(msg.sender, _value);\n }",
        "comments": [
            "/**",
            " * @dev Burns a specific amount of tokens.",
            " * @param _value The amount of token to be burned.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Burns a specific amount of tokens.\n * @param _value The amount of token to be burned.\n */\n",
        "@dev": "Burns a specific amount of tokens.",
        "@param1": "_value The amount of token to be burned.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "pause",
        "visibility": "public",
        "args": [],
        "func": "function pause() public onlyOwner whenNotPaused {\n paused = true;\n emit Pause();\n }",
        "comments": [
            "/**",
            " * @dev called by the owner to pause, triggers stopped state",
            " */",
            ""
        ],
        "comt": "/**\n * @dev called by the owner to pause, triggers stopped state\n */\n",
        "@dev": "called by the owner to pause, triggers stopped state",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "unpause",
        "visibility": "public",
        "args": [],
        "func": "function unpause() public onlyOwner whenPaused {\n paused = false;\n emit Unpause();\n }",
        "comments": [
            "/**",
            " * @dev called by the owner to unpause, returns to normal state",
            " */",
            ""
        ],
        "comt": "/**\n * @dev called by the owner to unpause, returns to normal state\n */\n",
        "@dev": "called by the owner to unpause, returns to normal state",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transfer(\n address _to,\n uint256 _value\n )\n public\n whenNotPaused\n returns (bool)\n {\n return super.transfer(_to, _value);\n }",
        "comments": [
            "",
            "// File: openzeppelin-solidity/contracts/token/ERC20/PausableToken.sol",
            "",
            "/**",
            " * @title Pausable token",
            " * @dev StandardToken modified with pausable transfers.",
            " **/",
            "contract PausableToken is StandardToken, Pausable {",
            "",
            " "
        ],
        "comt": "\n// File: openzeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n ",
        "@title": "Pausable token",
        "@dev": "StandardToken modified with pausable transfers. **/contract PausableToken is StandardToken, Pausable {",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "_from",
                "type": "address"
            },
            {
                "name": "_to",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n address _from,\n address _to,\n uint256 _value\n )\n public\n whenNotPaused\n returns (bool)\n {\n return super.transferFrom(_from, _to, _value);\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_value",
                "type": "uint256"
            }
        ],
        "func": "function approve(\n address _spender,\n uint256 _value\n )\n public\n whenNotPaused\n returns (bool)\n {\n return super.approve(_spender, _value);\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseApproval",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_addedValue",
                "type": "uint"
            }
        ],
        "func": "function increaseApproval(\n address _spender,\n uint _addedValue\n )\n public\n whenNotPaused\n returns (bool success)\n {\n return super.increaseApproval(_spender, _addedValue);\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseApproval",
        "visibility": "public",
        "args": [
            {
                "name": "_spender",
                "type": "address"
            },
            {
                "name": "_subtractedValue",
                "type": "uint"
            }
        ],
        "func": "function decreaseApproval(\n address _spender,\n uint _subtractedValue\n )\n public\n whenNotPaused\n returns (bool success)\n {\n return super.decreaseApproval(_spender, _subtractedValue);\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferOwnership",
        "visibility": "public",
        "args": [
            {
                "name": "newOwner",
                "type": "address"
            }
        ],
        "func": "function transferOwnership(address newOwner) public onlyOwner {\n pendingOwner = newOwner;\n }",
        "comments": [
            "/**",
            " * @dev Allows the current owner to set the pendingOwner address.",
            " * @param newOwner The address to transfer ownership to.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Allows the current owner to set the pendingOwner address.\n * @param newOwner The address to transfer ownership to.\n */\n",
        "@dev": "Allows the current owner to set the pendingOwner address.",
        "@param1": "newOwner The address to transfer ownership to.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "claimOwnership",
        "visibility": "public",
        "args": [],
        "func": "function claimOwnership() public onlyPendingOwner {\n emit OwnershipTransferred(owner, pendingOwner);\n owner = pendingOwner;\n pendingOwner = address(0);\n }",
        "comments": [
            "/**",
            " * @dev Allows the pendingOwner address to finalize the transfer.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Allows the pendingOwner address to finalize the transfer.\n */\n",
        "@dev": "Allows the pendingOwner address to finalize the transfer.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "reclaimToken",
        "visibility": "external",
        "args": [
            {
                "name": "_token",
                "type": "ERC20Basic"
            }
        ],
        "func": "function reclaimToken(ERC20Basic _token) external onlyOwner {\n uint256 balance = _token.balanceOf(this);\n _token.safeTransfer(owner, balance);\n }",
        "comments": [
            "/**",
            " * @dev Reclaim all ERC20Basic compatible tokens",
            " * @param _token ERC20Basic The address of the token contract",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Reclaim all ERC20Basic compatible tokens\n * @param _token ERC20Basic The address of the token contract\n */\n",
        "@dev": "Reclaim all ERC20Basic compatible tokens",
        "@param1": "_token ERC20Basic The address of the token contract",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "public",
        "args": [
            {
                "name": "value",
                "type": "uint"
            }
        ],
        "func": "function burn(uint value) public onlyOwner {\n super.burn(value);\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "finishMinting",
        "visibility": "public",
        "args": [],
        "func": "function finishMinting() public onlyOwner returns (bool) {\n return false;\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceOwnership",
        "visibility": "public",
        "args": [],
        "func": "function renounceOwnership() public onlyOwner {\n revert(\"renouncing ownership is blocked\");\n }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]