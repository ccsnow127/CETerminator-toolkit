[
    {
        "transactions": 6944680,
        "function_num": 12
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view returns (uint256) {\n return _totalSupply;\n }",
        "comments": [
            "/**",
            " * @dev See `IERC20.totalSupply`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See `IERC20.totalSupply`.\n */\n",
        "@dev": "See `IERC20.totalSupply`.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address account) public view returns (uint256) {\n return _balances[account];\n }",
        "comments": [
            "/**",
            " * @dev See `IERC20.balanceOf`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See `IERC20.balanceOf`.\n */\n",
        "@dev": "See `IERC20.balanceOf`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transfer",
        "visibility": "public",
        "args": [
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transfer(address recipient, uint256 amount) public returns (bool) {\n _transfer(msg.sender, recipient, amount);\n return true;\n }",
        "comments": [
            "/**",
            " * @dev See `IERC20.transfer`.",
            " *",
            " * Requirements:",
            " *",
            " * - `recipient` cannot be the zero address.",
            " * - the caller must have a balance of at least `amount`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See `IERC20.transfer`.\n *\n * Requirements:\n *\n * - `recipient` cannot be the zero address.\n * - the caller must have a balance of at least `amount`.\n */\n",
        "@dev": "See `IERC20.transfer`. * * Requirements: * * - `recipient` cannot be the zero address. * - the caller must have a balance of at least `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "allowance",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "spender",
                "type": "address"
            }
        ],
        "func": "function allowance(address owner, address spender) public view returns (uint256) {\n return _allowances[owner][spender];\n }",
        "comments": [
            "/**",
            " * @dev See `IERC20.allowance`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See `IERC20.allowance`.\n */\n",
        "@dev": "See `IERC20.allowance`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function approve(address spender, uint256 value) public returns (bool) {\n _approve(msg.sender, spender, value);\n return true;\n }",
        "comments": [
            "/**",
            " * @dev See `IERC20.approve`.",
            " *",
            " * Requirements:",
            " *",
            " * - `spender` cannot be the zero address.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See `IERC20.approve`.\n *\n * Requirements:\n *\n * - `spender` cannot be the zero address.\n */\n",
        "@dev": "See `IERC20.approve`. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "sender",
                "type": "address"
            },
            {
                "name": "recipient",
                "type": "address"
            },
            {
                "name": "amount",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n _transfer(sender, recipient, amount);\n _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n return true;\n }",
        "comments": [
            "/**",
            " * @dev See `IERC20.transferFrom`.",
            " *",
            " * Emits an `Approval` event indicating the updated allowance. This is not",
            " * required by the EIP. See the note at the beginning of `ERC20`;",
            " *",
            " * Requirements:",
            " * - `sender` and `recipient` cannot be the zero address.",
            " * - `sender` must have a balance of at least `value`.",
            " * - the caller must have allowance for `sender`'s tokens of at least",
            " * `amount`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev See `IERC20.transferFrom`.\n *\n * Emits an `Approval` event indicating the updated allowance. This is not\n * required by the EIP. See the note at the beginning of `ERC20`;\n *\n * Requirements:\n * - `sender` and `recipient` cannot be the zero address.\n * - `sender` must have a balance of at least `value`.\n * - the caller must have allowance for `sender`'s tokens of at least\n * `amount`.\n */\n",
        "@dev": "See `IERC20.transferFrom`. * * Emits an `Approval` event indicating the updated allowance. This is not * required by the EIP. See the note at the beginning of `ERC20`; * * Requirements: * - `sender` and `recipient` cannot be the zero address. * - `sender` must have a balance of at least `value`. * - the caller must have allowance for `sender`'s tokens of at least * `amount`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "increaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "addedValue",
                "type": "uint256"
            }
        ],
        "func": "function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n return true;\n }",
        "comments": [
            "/**",
            " * @dev Atomically increases the allowance granted to `spender` by the caller.",
            " *",
            " * This is an alternative to `approve` that can be used as a mitigation for",
            " * problems described in `IERC20.approve`.",
            " *",
            " * Emits an `Approval` event indicating the updated allowance.",
            " *",
            " * Requirements:",
            " *",
            " * - `spender` cannot be the zero address.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Atomically increases the allowance granted to `spender` by the caller.\n *\n * This is an alternative to `approve` that can be used as a mitigation for\n * problems described in `IERC20.approve`.\n *\n * Emits an `Approval` event indicating the updated allowance.\n *\n * Requirements:\n *\n * - `spender` cannot be the zero address.\n */\n",
        "@dev": "Atomically increases the allowance granted to `spender` by the caller. * * This is an alternative to `approve` that can be used as a mitigation for * problems described in `IERC20.approve`. * * Emits an `Approval` event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decreaseAllowance",
        "visibility": "public",
        "args": [
            {
                "name": "spender",
                "type": "address"
            },
            {
                "name": "subtractedValue",
                "type": "uint256"
            }
        ],
        "func": "function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n return true;\n }",
        "comments": [
            "/**",
            " * @dev Atomically decreases the allowance granted to `spender` by the caller.",
            " *",
            " * This is an alternative to `approve` that can be used as a mitigation for",
            " * problems described in `IERC20.approve`.",
            " *",
            " * Emits an `Approval` event indicating the updated allowance.",
            " *",
            " * Requirements:",
            " *",
            " * - `spender` cannot be the zero address.",
            " * - `spender` must have allowance for the caller of at least",
            " * `subtractedValue`.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Atomically decreases the allowance granted to `spender` by the caller.\n *\n * This is an alternative to `approve` that can be used as a mitigation for\n * problems described in `IERC20.approve`.\n *\n * Emits an `Approval` event indicating the updated allowance.\n *\n * Requirements:\n *\n * - `spender` cannot be the zero address.\n * - `spender` must have allowance for the caller of at least\n * `subtractedValue`.\n */\n",
        "@dev": "Atomically decreases the allowance granted to `spender` by the caller. * * This is an alternative to `approve` that can be used as a mitigation for * problems described in `IERC20.approve`. * * Emits an `Approval` event indicating the updated allowance. * * Requirements: * * - `spender` cannot be the zero address. * - `spender` must have allowance for the caller of at least * `subtractedValue`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "burn",
        "visibility": "public",
        "args": [
            {
                "name": "value",
                "type": "uint256"
            }
        ],
        "func": "function burn(uint256 value) public {\n _burn(msg.sender, value);\n }",
        "comments": [
            "/**",
            " * @dev Burns a specific amount of tokens.",
            " * @param value The amount of lowest token units to be burned.",
            " */",
            ""
        ],
        "comt": "/**\n * @dev Burns a specific amount of tokens.\n * @param value The amount of lowest token units to be burned.\n */\n",
        "@dev": "Burns a specific amount of tokens.",
        "@param1": "value The amount of lowest token units to be burned.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "name",
        "visibility": "public",
        "args": [],
        "func": "function name() public view returns (string memory) {\n return _name;\n }",
        "comments": [
            "",
            " // optional functions from ERC20 stardard",
            "",
            " /**",
            " * @return the name of the token.",
            " */",
            " "
        ],
        "comt": "\n // optional functions from ERC20 stardard\n\n /**\n * @return the name of the token.\n */\n ",
        "@return1": "the name of the token.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "public",
        "args": [],
        "func": "function symbol() public view returns (string memory) {\n return _symbol;\n }",
        "comments": [
            "/**",
            " * @return the symbol of the token.",
            " */",
            ""
        ],
        "comt": "/**\n * @return the symbol of the token.\n */\n",
        "@return1": "the symbol of the token.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "decimals",
        "visibility": "public",
        "args": [],
        "func": "function decimals() public view returns (uint8) {\n return _decimals;\n }",
        "comments": [
            "/**",
            " * @return the number of decimals of the token.",
            " */",
            ""
        ],
        "comt": "/**\n * @return the number of decimals of the token.\n */\n",
        "@return1": "the number of decimals of the token.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]