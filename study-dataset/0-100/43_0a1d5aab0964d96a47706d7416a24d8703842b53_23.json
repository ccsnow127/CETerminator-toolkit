[
    {
        "transactions": 23,
        "function_num": 43
    },
    {
        "name": "owner",
        "visibility": "public",
        "args": [],
        "func": "function owner() public view virtual returns (address) {\n        return _owner;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the address of the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the address of the current owner.\n     */\n",
        "@dev": "Returns the address of the current owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceOwnership",
        "visibility": "public",
        "args": [],
        "func": "function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }",
        "comments": [
            "/**",
            "     * @dev Leaves the contract without owner. It will not be possible to call",
            "     * `onlyOwner` functions anymore. Can only be called by the current owner.",
            "     *",
            "     * NOTE: Renouncing ownership will leave the contract without an owner,",
            "     * thereby removing any functionality that is only available to the owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n",
        "@dev": "Leaves the contract without owner. It will not be possible to call * `onlyOwner` functions anymore. Can only be called by the current owner. * * NOTE: Renouncing ownership will leave the contract without an owner, * thereby removing any functionality that is only available to the owner.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferOwnership",
        "visibility": "public",
        "args": [
            {
                "name": "newOwner",
                "type": "address"
            }
        ],
        "func": "function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }",
        "comments": [
            "/**",
            "     * @dev Transfers ownership of the contract to a new account (`newOwner`).",
            "     * Can only be called by the current owner.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n",
        "@dev": "Transfers ownership of the contract to a new account (`newOwner`). * Can only be called by the current owner.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalShares",
        "visibility": "public",
        "args": [],
        "func": "function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }",
        "comments": [
            "/**",
            "     * @dev Getter for the total shares held by payees.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Getter for the total shares held by payees.\n     */\n",
        "@dev": "Getter for the total shares held by payees.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalReleased",
        "visibility": "public",
        "args": [],
        "func": "function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }",
        "comments": [
            "/**",
            "     * @dev Getter for the total amount of Ether already released.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Getter for the total amount of Ether already released.\n     */\n",
        "@dev": "Getter for the total amount of Ether already released.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalReleased",
        "visibility": "public",
        "args": [
            {
                "name": "token",
                "type": "IERC20"
            }
        ],
        "func": "function totalReleased(IERC20 token) public view returns (uint256) {\n        return _erc20TotalReleased[token];\n    }",
        "comments": [
            "/**",
            "     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20",
            "     * contract.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n     * contract.\n     */\n",
        "@dev": "Getter for the total amount of `token` already released. `token` should be the address of an IERC20 * contract.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "shares",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }",
        "comments": [
            "/**",
            "     * @dev Getter for the amount of shares held by an account.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Getter for the amount of shares held by an account.\n     */\n",
        "@dev": "Getter for the amount of shares held by an account.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "released",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function released(address account) public view returns (uint256) {\n        return _released[account];\n    }",
        "comments": [
            "/**",
            "     * @dev Getter for the amount of Ether already released to a payee.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n",
        "@dev": "Getter for the amount of Ether already released to a payee.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "released",
        "visibility": "public",
        "args": [
            {
                "name": "token",
                "type": "IERC20"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function released(IERC20 token, address account) public view returns (uint256) {\n        return _erc20Released[token][account];\n    }",
        "comments": [
            "/**",
            "     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an",
            "     * IERC20 contract.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n     * IERC20 contract.\n     */\n",
        "@dev": "Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an * IERC20 contract.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "payee",
        "visibility": "public",
        "args": [
            {
                "name": "index",
                "type": "uint256"
            }
        ],
        "func": "function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }",
        "comments": [
            "/**",
            "     * @dev Getter for the address of the payee number `index`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Getter for the address of the payee number `index`.\n     */\n",
        "@dev": "Getter for the address of the payee number `index`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "release",
        "visibility": "public",
        "args": [
            {
                "name": "account",
                "type": "address payable"
            }
        ],
        "func": "function release(address payable account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 totalReceived = address(this).balance + totalReleased();\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _released[account] += payment;\n        _totalReleased += payment;\n\n        Address.sendValue(account, payment);\n        emit PaymentReleased(account, payment);\n    }",
        "comments": [
            "/**",
            "     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the",
            "     * total shares and their previous withdrawals.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n",
        "@dev": "Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the * total shares and their previous withdrawals.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "release",
        "visibility": "public",
        "args": [
            {
                "name": "token",
                "type": "IERC20"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function release(IERC20 token, address account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _erc20Released[token][account] += payment;\n        _erc20TotalReleased[token] += payment;\n\n        SafeERC20.safeTransfer(token, account, payment);\n        emit ERC20PaymentReleased(token, account, payment);\n    }",
        "comments": [
            "/**",
            "     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their",
            "     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20",
            "     * contract.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n",
        "@dev": "Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20 * contract.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supportsInterface",
        "visibility": "public",
        "args": [
            {
                "name": "interfaceId",
                "type": "bytes4"
            }
        ],
        "func": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supportsInterface",
        "visibility": "public",
        "args": [
            {
                "name": "interfaceId",
                "type": "bytes4"
            }
        ],
        "func": "function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC165-supportsInterface}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
        "@dev": "See {IERC165-supportsInterface}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "supportsInterface",
        "visibility": "public",
        "args": [
            {
                "name": "interfaceId",
                "type": "bytes4"
            }
        ],
        "func": "function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC165-supportsInterface}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC165-supportsInterface}.\n     */\n",
        "@dev": "See {IERC165-supportsInterface}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "balanceOf",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            }
        ],
        "func": "function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC721-balanceOf}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC721-balanceOf}.\n     */\n",
        "@dev": "See {IERC721-balanceOf}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "ownerOf",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC721-ownerOf}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC721-ownerOf}.\n     */\n",
        "@dev": "See {IERC721-ownerOf}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "name",
        "visibility": "public",
        "args": [],
        "func": "function name() public view virtual override returns (string memory) {\n        return _name;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC721Metadata-name}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC721Metadata-name}.\n     */\n",
        "@dev": "See {IERC721Metadata-name}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "symbol",
        "visibility": "public",
        "args": [],
        "func": "function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC721Metadata-symbol}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n",
        "@dev": "See {IERC721Metadata-symbol}.",
        "notice_missing": 1,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "tokenURI",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC721Metadata-tokenURI}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n",
        "@dev": "See {IERC721Metadata-tokenURI}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "approve",
        "visibility": "public",
        "args": [
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC721-approve}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC721-approve}.\n     */\n",
        "@dev": "See {IERC721-approve}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getApproved",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC721-getApproved}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC721-getApproved}.\n     */\n",
        "@dev": "See {IERC721-getApproved}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setApprovalForAll",
        "visibility": "public",
        "args": [
            {
                "name": "operator",
                "type": "address"
            },
            {
                "name": "approved",
                "type": "bool"
            }
        ],
        "func": "function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC721-setApprovalForAll}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n",
        "@dev": "See {IERC721-setApprovalForAll}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isApprovedForAll",
        "visibility": "public",
        "args": [
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "operator",
                "type": "address"
            }
        ],
        "func": "function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC721-isApprovedForAll}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n",
        "@dev": "See {IERC721-isApprovedForAll}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "transferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC721-transferFrom}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC721-transferFrom}.\n     */\n",
        "@dev": "See {IERC721-transferFrom}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "safeTransferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC721-safeTransferFrom}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n",
        "@dev": "See {IERC721-safeTransferFrom}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "safeTransferFrom",
        "visibility": "public",
        "args": [
            {
                "name": "from",
                "type": "address"
            },
            {
                "name": "to",
                "type": "address"
            },
            {
                "name": "tokenId",
                "type": "uint256"
            },
            {
                "name": "_data",
                "type": "bytes memory"
            }
        ],
        "func": "function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }",
        "comments": [
            "/**",
            "     * @dev See {IERC721-safeTransferFrom}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n",
        "@dev": "See {IERC721-safeTransferFrom}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "totalSupply",
        "visibility": "public",
        "args": [],
        "func": "function totalSupply() public view returns(uint256) {\n        return supply.current();\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "publicsaleValidations",
        "visibility": "public",
        "args": [
            {
                "name": "_ownerMintedCount",
                "type": "uint256"
            },
            {
                "name": "_mintAmount",
                "type": "uint256"
            }
        ],
        "func": "function publicsaleValidations(uint256 _ownerMintedCount, uint256 _mintAmount) internal {\n        require(_ownerMintedCount + _mintAmount <= nftPerAddressLimit,\"max NFT per address exceeded\");\n        require(msg.value >= cost * _mintAmount, \"insufficient funds\");\n        require(_mintAmount <= maxMintAmount,\"max mint amount per transaction exceeded\");\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "mint",
        "visibility": "public",
        "args": [
            {
                "name": "_mintAmount",
                "type": "uint256"
            }
        ],
        "func": "function mint(uint256 _mintAmount) public payable minimumMintAmount(_mintAmount) {\n        require(supply.current() + _mintAmount <= maxSupply, \"max NFT limit exceeded\");\n        require(preSaleState == true || publicSaleState == true, \"sale not started\");\n        uint ownerMintedCount = balanceOf(msg.sender);\n\n        if (preSaleState) {\n            if (isWhitelisted(msg.sender)) {\n                presaleValidations(ownerMintedCount, _mintAmount);\n            }\n            else {\n                freemintValidations(ownerMintedCount, _mintAmount);\n            }\n        }\n        else {\n            publicsaleValidations(ownerMintedCount, _mintAmount);\n        }\n\n        for (uint256 i = 0; i < _mintAmount; i++) {\n            _safeMint(msg.sender, supply.current());\n            supply.increment();\n        }\n    }",
        "comments": [
            "",
            "    //MINT",
            "    "
        ],
        "comt": "\n    //MINT\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getCurrentCost",
        "visibility": "public",
        "args": [],
        "func": "function getCurrentCost() public view returns (uint256) {\n        if (publicSaleState == true) {\n            return cost;\n        }\n        else if (preSaleState == true) {\n            if (isWhitelisted(msg.sender)) {\n                return preSaleCost;\n            }\n            else {\n                return 0;\n            }\n        }\n        else {\n            return 0;\n        }\n    }",
        "comments": [
            "",
            "    //PUBLIC VIEWS",
            "    "
        ],
        "comt": "\n    //PUBLIC VIEWS\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "walletOfOwner",
        "visibility": "public",
        "args": [
            {
                "name": "_owner",
                "type": "address"
            }
        ],
        "func": "function walletOfOwner(address _owner) public view returns (uint256[] memory) {\n        uint256 ownerTokenCount = balanceOf(_owner);\n        uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);\n        uint256 currentTokenId = 0;\n        uint256 ownedTokenIndex = 0;\n\n        while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {\n            address currentTokenOwner = ownerOf(currentTokenId);\n\n            if (currentTokenOwner == _owner) {\n                ownedTokenIds[ownedTokenIndex] = currentTokenId;\n\n                ownedTokenIndex++;\n            }\n\n            currentTokenId++;\n        }\n\n        return ownedTokenIds;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isWhitelisted",
        "visibility": "public",
        "args": [
            {
                "name": "_user",
                "type": "address"
            }
        ],
        "func": "function isWhitelisted(address _user) public view returns (bool) {\n        return whitelistedAddresses[_user];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isFreemint",
        "visibility": "public",
        "args": [
            {
                "name": "_user",
                "type": "address"
            }
        ],
        "func": "function isFreemint(address _user) public view returns (bool) {\n        return freemintAddresses[_user];\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "tokenURI",
        "visibility": "public",
        "args": [
            {
                "name": "tokenId",
                "type": "uint256"
            }
        ],
        "func": "function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory currentBaseURI = _baseURI();\n        return bytes(currentBaseURI).length > 0 ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension)) : \"\";\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getMintState",
        "visibility": "public",
        "args": [],
        "func": "function getMintState() public view returns (string memory) {\n        if (preSaleState) {\n            return \"preSale\";\n        }\n        else if (publicSaleState) {\n            return \"publicSale\";\n        }\n        else {\n            return \"\";\n        }\n    }",
        "comments": [
            "",
            "    //ONLY OWNER VIEWS",
            "    "
        ],
        "comt": "\n    //ONLY OWNER VIEWS\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setBaseURI",
        "visibility": "public",
        "args": [
            {
                "name": "_newBaseURI",
                "type": "string memory"
            }
        ],
        "func": "function setBaseURI(string memory _newBaseURI) public onlyOwner {\n        baseURI = _newBaseURI;\n    }",
        "comments": [
            "",
            "    //ONLY OWNER SETTERS",
            "    "
        ],
        "comt": "\n    //ONLY OWNER SETTERS\n    ",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setBaseExtension",
        "visibility": "public",
        "args": [
            {
                "name": "_newBaseExtension",
                "type": "string memory"
            }
        ],
        "func": "function setBaseExtension(string memory _newBaseExtension) public onlyOwner {\n        baseExtension = _newBaseExtension;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "_activatePreSale",
        "visibility": "public",
        "args": [],
        "func": "function _activatePreSale() public onlyOwner {\n        preSaleState = true;\n        publicSaleState = false;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "_activatePublicSale",
        "visibility": "public",
        "args": [],
        "func": "function _activatePublicSale() public onlyOwner {\n        preSaleState = false;\n        publicSaleState = true;\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "_addwhitelistUsers",
        "visibility": "public",
        "args": [
            {
                "name": "addresses",
                "type": "address[] memory"
            }
        ],
        "func": "function _addwhitelistUsers(address[] memory addresses) public onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            whitelistedAddresses[addresses[i]] = true;\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "_addFreemintUsers",
        "visibility": "public",
        "args": [
            {
                "name": "addresses",
                "type": "address[] memory"
            }
        ],
        "func": "function _addFreemintUsers(address[] memory addresses) public onlyOwner {\n        for (uint i = 0; i < addresses.length; i++) {\n            freemintAddresses[addresses[i]] = true;\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "_withdrawForAll",
        "visibility": "public",
        "args": [],
        "func": "function _withdrawForAll() public onlyOwner {\n        for (uint i = 0; i < _team.length; i++) {\n            release(payable(_team[i]));\n        }\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]