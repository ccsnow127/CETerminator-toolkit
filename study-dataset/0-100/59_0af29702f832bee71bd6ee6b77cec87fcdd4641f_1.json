[
    {
        "transactions": 1,
        "function_num": 59
    },
    {
        "name": "getIBTRate",
        "visibility": "public",
        "args": [],
        "func": "function getIBTRate() public view virtual override returns (uint256) {\n        return IDLECDO_CVXFRAX3CRV.virtualPrice(address(ibt));\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the rate of the IBT",
            "     * @return the uint256 rate, IBT x rate must be equal to the quantity of underlying tokens",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the rate of the IBT\n     * @return the uint256 rate, IBT x rate must be equal to the quantity of underlying tokens\n     */\n",
        "@notice": "Getter for the rate of the IBT",
        "@return1": "the uint256 rate, IBT x rate must be equal to the quantity of underlying tokens",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "external",
        "args": [
            {
                "name": "_user",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function deposit(address _user, uint256 _amount) external virtual override periodsActive depositsEnabled onlyController {\n        require((_amount > 0) && (_amount <= ibt.balanceOf(_user)), \"HybridFutureVault: ERR_AMOUNT\");\n        _deposit(_user, _amount);\n        emit FundsDeposited(_user, _amount);\n    }",
        "comments": [
            "// scaled IBT amount",
            "",
            "    /**",
            "     * @notice Deposit funds into ongoing period",
            "     * @param _user user adress",
            "     * @param _amount amount of ibt to deposit",
            "     * @dev part of the amount deposited will be used to buy back the yield already generated proportionally to the amount deposited",
            "     */",
            "    "
        ],
        "comt": "// scaled IBT amount\n\n    /**\n     * @notice Deposit funds into ongoing period\n     * @param _user user adress\n     * @param _amount amount of ibt to deposit\n     * @dev part of the amount deposited will be used to buy back the yield already generated proportionally to the amount deposited\n     */\n    ",
        "@notice": "Deposit funds into ongoing period",
        "@param1": "_user user adress",
        "@param2": "_amount amount of ibt to deposit",
        "@dev": "part of the amount deposited will be used to buy back the yield already generated proportionally to the amount deposited",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "startNewPeriod",
        "visibility": "public",
        "args": [],
        "func": "function startNewPeriod() public virtual override nextPeriodAvailable periodsActive nonReentrant {\n        require(hasRole(CONTROLLER_ROLE, msg.sender), \"ERR_CALLER\");\n        _switchPeriod();\n        IBTRates[getCurrentPeriodIndex()] = getIBTRate();\n    }",
        "comments": [
            "/**",
            "     * @notice Start a new period",
            "     * @dev needs corresponding permissions for sender",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Start a new period\n     * @dev needs corresponding permissions for sender\n     */\n",
        "@notice": "Start a new period",
        "@dev": "needs corresponding permissions for sender",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUnrealisedYieldPerPT",
        "visibility": "public",
        "args": [],
        "func": "function getUnrealisedYieldPerPT() public view override returns (uint256) {\n        uint256 totalUnderlyingAtStart = totalUnderlyingDeposited;\n        if (totalUnderlyingAtStart == 0) return 0;\n        uint256 totalUnderlyingNow = convertIBTToUnderlying(ibt.balanceOf(address(this)));\n        uint256 yieldForAllPT = convertUnderlyingtoIBT(totalUnderlyingNow.sub(totalUnderlyingAtStart));\n        return yieldForAllPT.mul(IBT_UNIT).div(totalUnderlyingAtStart);\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the yield currently generated by one pt for the current period",
            "     * @return the amount of yield (in IBT) generated during the current period",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the yield currently generated by one pt for the current period\n     * @return the amount of yield (in IBT) generated during the current period\n     */\n",
        "@notice": "Getter for the yield currently generated by one pt for the current period",
        "@return1": "the amount of yield (in IBT) generated during the current period",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPTPerAmountDeposited",
        "visibility": "public",
        "args": [
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function getPTPerAmountDeposited(uint256 _amount) public view override returns (uint256) {\n        uint256 underlyingAmountOfDeposit = convertIBTToUnderlying(_amount);\n        uint256 underlyingYieldPerPT = convertIBTToUnderlying(getUnrealisedYieldPerPT());\n        return underlyingAmountOfDeposit.mul(IBT_UNIT).div(IBT_UNIT.add(underlyingYieldPerPT));\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the number of pt that can be minted for an amoumt deposited now",
            "     * @param _amount the amount to of IBT to deposit",
            "     * @return the number of pt that can be minted for that amount",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the number of pt that can be minted for an amoumt deposited now\n     * @param _amount the amount to of IBT to deposit\n     * @return the number of pt that can be minted for that amount\n     */\n",
        "@notice": "Getter for the number of pt that can be minted for an amoumt deposited now",
        "@param1": "_amount the amount to of IBT to deposit",
        "@return1": "the number of pt that can be minted for that amount",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "_controller",
                "type": "IController"
            },
            {
                "name": "_ibt",
                "type": "IERC20"
            },
            {
                "name": "_periodDuration",
                "type": "uint256"
            },
            {
                "name": "_platformName",
                "type": "string memory"
            },
            {
                "name": "_admin",
                "type": "address"
            }
        ],
        "func": "function initialize(\n        IController _controller,\n        IERC20 _ibt,\n        uint256 _periodDuration,\n        string memory _platformName,\n        address _admin\n    ) public virtual override initializer {\n        super.initialize(_controller, _ibt, _periodDuration, _platformName, _admin);\n        IBTRates[getCurrentPeriodIndex()] = getIBTRate();\n    }",
        "comments": [
            "/**",
            "     * @notice Intializer",
            "     * @param _controller the address of the controller",
            "     * @param _ibt the address of the corresponding IBT",
            "     * @param _periodDuration the length of the period (in days)",
            "     * @param _platformName the name of the platform and tools",
            "     * @param _admin the address of the ACR admin",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Intializer\n     * @param _controller the address of the controller\n     * @param _ibt the address of the corresponding IBT\n     * @param _periodDuration the length of the period (in days)\n     * @param _platformName the name of the platform and tools\n     * @param _admin the address of the ACR admin\n     */\n",
        "@notice": "Intializer",
        "@param1": "_controller the address of the controller",
        "@param2": "_ibt the address of the corresponding IBT",
        "@param3": "_periodDuration the length of the period (in days)",
        "@param4": "_platformName the name of the platform and tools",
        "@param5": "_admin the address of the ACR admin",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "startNewPeriod",
        "visibility": "public",
        "args": [],
        "func": "function startNewPeriod() public virtual override nextPeriodAvailable periodsActive nonReentrant {\n        require(hasRole(CONTROLLER_ROLE, msg.sender), \"ERR_CALLER\");\n        _switchPeriod();\n        IBTRates[getCurrentPeriodIndex()] = getIBTRate();\n    }",
        "comments": [
            "/**",
            "     * @notice Start a new period",
            "     * @dev needs corresponding permissions for sender",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Start a new period\n     * @dev needs corresponding permissions for sender\n     */\n",
        "@notice": "Start a new period",
        "@dev": "needs corresponding permissions for sender",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "convertIBTToUnderlying",
        "visibility": "public",
        "args": [
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function convertIBTToUnderlying(uint256 _amount) public view virtual override returns (uint256) {\n        return _convertIBTToUnderlyingAtRate(_amount, getIBTRate());\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "convertUnderlyingtoIBT",
        "visibility": "public",
        "args": [
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function convertUnderlyingtoIBT(uint256 _amount) public view virtual override returns (uint256) {\n        return _convertUnderlyingtoIBTAtRate(_amount, getIBTRate());\n    }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUnlockableFunds",
        "visibility": "public",
        "args": [
            {
                "name": "_user",
                "type": "address"
            }
        ],
        "func": "function getUnlockableFunds(address _user) public view virtual override returns (uint256) {\n        return convertUnderlyingtoIBT(super.getUnlockableFunds(_user));\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for user IBT amount that is unlockable",
            "     * @param _user user to unlock the IBT from",
            "     * @return the amount of IBT the user can unlock",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for user IBT amount that is unlockable\n     * @param _user user to unlock the IBT from\n     * @return the amount of IBT the user can unlock\n     */\n",
        "@notice": "Getter for user IBT amount that is unlockable",
        "@param1": "_user user to unlock the IBT from",
        "@return1": "the amount of IBT the user can unlock",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUnrealisedYieldPerPT",
        "visibility": "public",
        "args": [],
        "func": "function getUnrealisedYieldPerPT() public view virtual override returns (uint256) {\n        uint256 currRate = getIBTRate();\n        uint256 currPeriodStartRate = IBTRates[getCurrentPeriodIndex()];\n        if (currRate == currPeriodStartRate) return 0;\n        uint256 amountOfIBTsAtStart = _convertUnderlyingtoIBTAtRate(IBT_UNIT, currPeriodStartRate);\n        uint256 amountOfIBTsNow = _convertUnderlyingtoIBTAtRate(IBT_UNIT, currRate);\n        return amountOfIBTsAtStart.sub(amountOfIBTsNow);\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the yield currently generated by one pt for the current period",
            "     * @return the amount of yield (in IBT) generated during the current period",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the yield currently generated by one pt for the current period\n     * @return the amount of yield (in IBT) generated during the current period\n     */\n",
        "@notice": "Getter for the yield currently generated by one pt for the current period",
        "@return1": "the amount of yield (in IBT) generated during the current period",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPTPerAmountDeposited",
        "visibility": "public",
        "args": [
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function getPTPerAmountDeposited(uint256 _amount) public view virtual override returns (uint256) {\n        return _convertIBTToUnderlyingAtRate(_amount, IBTRates[getCurrentPeriodIndex()]);\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the number of pt that can be minted for an amoumt deposited now",
            "     * @param _amount the amount to of IBT to deposit",
            "     * @return the number of pt that can be minted for that amount",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the number of pt that can be minted for an amoumt deposited now\n     * @param _amount the amount to of IBT to deposit\n     * @return the number of pt that can be minted for that amount\n     */\n",
        "@notice": "Getter for the number of pt that can be minted for an amoumt deposited now",
        "@param1": "_amount the amount to of IBT to deposit",
        "@return1": "the number of pt that can be minted for that amount",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "harvestRewards",
        "visibility": "public",
        "args": [],
        "func": "function harvestRewards() public virtual {\n        require(hasRole(CONTROLLER_ROLE, msg.sender), \"ERR_CALLER\");\n        _harvestRewards();\n        emit RewardsHarvested();\n    }",
        "comments": [
            "/**",
            "     * @notice Harvest all rewards from the vault",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Harvest all rewards from the vault\n     */\n",
        "@notice": "Harvest all rewards from the vault",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "redeemAllVaultRewards",
        "visibility": "external",
        "args": [],
        "func": "function redeemAllVaultRewards() external virtual onlyController {\n        require(rewardsRecipient != address(0), \"RewardsFutureVault: ERR_RECIPIENT\");\n        uint256 numberOfRewardTokens = rewardTokens.length();\n        for (uint256 i; i < numberOfRewardTokens; i++) {\n            IERC20 rewardToken = IERC20(rewardTokens.at(i));\n            uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));\n            rewardToken.safeTransfer(rewardsRecipient, rewardTokenBalance);\n            emit RewardTokenRedeemed(rewardToken, rewardTokenBalance);\n        }\n    }",
        "comments": [
            "/**",
            "     * @notice Transfer all the redeemable rewards to set defined recipient",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Transfer all the redeemable rewards to set defined recipient\n     */\n",
        "@notice": "Transfer all the redeemable rewards to set defined recipient",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "redeemVaultRewards",
        "visibility": "external",
        "args": [
            {
                "name": "_rewardToken",
                "type": "IERC20"
            }
        ],
        "func": "function redeemVaultRewards(IERC20 _rewardToken) external virtual onlyController {\n        require(rewardsRecipient != address(0), \"RewardsFutureVault: ERR_RECIPIENT\");\n        require(rewardTokens.contains(address(_rewardToken)), \"RewardsFutureVault: ERR_TOKEN_ADDRESS\");\n        uint256 rewardTokenBalance = _rewardToken.balanceOf(address(this));\n        _rewardToken.safeTransfer(rewardsRecipient, rewardTokenBalance);\n        emit RewardTokenRedeemed(_rewardToken, rewardTokenBalance);\n    }",
        "comments": [
            "/**",
            "     * @notice Transfer the specified token reward balance tot the defined recipient",
            "     * @param _rewardToken the reward token to redeem the balance of",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Transfer the specified token reward balance tot the defined recipient\n     * @param _rewardToken the reward token to redeem the balance of\n     */\n",
        "@notice": "Transfer the specified token reward balance tot the defined recipient",
        "@param1": "_rewardToken the reward token to redeem the balance of",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "addRewardsToken",
        "visibility": "external",
        "args": [
            {
                "name": "_token",
                "type": "address"
            }
        ],
        "func": "function addRewardsToken(address _token) external onlyAdmin {\n        require(_token != address(ibt), \"RewardsFutureVault: ERR_TOKEN_ADDRESS\");\n        rewardTokens.add(_token);\n        emit RewardTokenAdded(_token);\n    }",
        "comments": [
            "/**",
            "     * @notice Add a token to the list of reward tokens",
            "     * @param _token the reward token to add to the list",
            "     * @dev the token must be different than the ibt",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Add a token to the list of reward tokens\n     * @param _token the reward token to add to the list\n     * @dev the token must be different than the ibt\n     */\n",
        "@notice": "Add a token to the list of reward tokens",
        "@param1": "_token the reward token to add to the list",
        "@dev": "the token must be different than the ibt",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setRewardRecipient",
        "visibility": "external",
        "args": [
            {
                "name": "_recipient",
                "type": "address"
            }
        ],
        "func": "function setRewardRecipient(address _recipient) external {\n        require(hasRole(ADMIN_ROLE, msg.sender), \"ERR_CALLER\");\n        rewardsRecipient = _recipient;\n        emit RewardsRecipientUpdated(_recipient);\n    }",
        "comments": [
            "/**",
            "     * @notice Setter for the address of the rewards recipient",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Setter for the address of the rewards recipient\n     */\n",
        "@notice": "Setter for the address of the rewards recipient",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isRewardToken",
        "visibility": "external",
        "args": [
            {
                "name": "_token",
                "type": "IERC20"
            }
        ],
        "func": "function isRewardToken(IERC20 _token) external view returns (bool) {\n        return rewardTokens.contains(address(_token));\n    }",
        "comments": [
            "/**",
            "     * @notice Getter to check if a token is in the reward tokens list",
            "     * @param _token the token to check if it is in the list",
            "     * @return true if the token is a reward token",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter to check if a token is in the reward tokens list\n     * @param _token the token to check if it is in the list\n     * @return true if the token is a reward token\n     */\n",
        "@notice": "Getter to check if a token is in the reward tokens list",
        "@param1": "_token the token to check if it is in the list",
        "@return1": "true if the token is a reward token",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRewardTokenAt",
        "visibility": "external",
        "args": [
            {
                "name": "_index",
                "type": "uint256"
            }
        ],
        "func": "function getRewardTokenAt(uint256 _index) external view returns (address) {\n        return rewardTokens.at(_index);\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the reward token at an index",
            "     * @param _index the index of the reward token in the list",
            "     * @return the address of the token at this index",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the reward token at an index\n     * @param _index the index of the reward token in the list\n     * @return the address of the token at this index\n     */\n",
        "@notice": "Getter for the reward token at an index",
        "@param1": "_index the index of the reward token in the list",
        "@return1": "the address of the token at this index",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRewardTokensCount",
        "visibility": "external",
        "args": [],
        "func": "function getRewardTokensCount() external view returns (uint256) {\n        return rewardTokens.length();\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the size of the list of reward tokens",
            "     * @return the number of token in the list",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the size of the list of reward tokens\n     * @return the number of token in the list\n     */\n",
        "@notice": "Getter for the size of the list of reward tokens",
        "@return1": "the number of token in the list",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRewardsRecipient",
        "visibility": "external",
        "args": [],
        "func": "function getRewardsRecipient() external view returns (address) {\n        return rewardsRecipient;\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the address of the rewards recipient",
            "     * @return the address of the rewards recipient",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the address of the rewards recipient\n     * @return the address of the rewards recipient\n     */\n",
        "@notice": "Getter for the address of the rewards recipient",
        "@return1": "the address of the rewards recipient",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "initialize",
        "visibility": "public",
        "args": [
            {
                "name": "_controller",
                "type": "IController"
            },
            {
                "name": "_ibt",
                "type": "IERC20"
            },
            {
                "name": "_periodDuration",
                "type": "uint256"
            },
            {
                "name": "_platformName",
                "type": "string memory"
            },
            {
                "name": "_admin",
                "type": "address"
            }
        ],
        "func": "function initialize(\n        IController _controller,\n        IERC20 _ibt,\n        uint256 _periodDuration,\n        string memory _platformName,\n        address _admin\n    ) public virtual initializer {\n        controller = _controller;\n        ibt = _ibt;\n        IBT_UNIT = 10**ibt.decimals();\n        IBT_UNITS_MULTIPLIED_VALUE = UNIT * IBT_UNIT;\n        PERIOD_DURATION = _periodDuration;\n        PLATFORM_NAME = _platformName;\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\n        _setupRole(ADMIN_ROLE, _admin);\n        _setupRole(CONTROLLER_ROLE, address(_controller));\n\n        fyts.push();\n\n        registry = IRegistry(controller.getRegistryAddress());\n\n        pt = IPT(\n            ITokensFactory(IRegistry(controller.getRegistryAddress()).getTokensFactoryAddress()).deployPT(\n                ibt.symbol(),\n                ibt.decimals(),\n                PLATFORM_NAME,\n                PERIOD_DURATION\n            )\n        );\n\n        emit PTSet(pt);\n    }",
        "comments": [
            "/**",
            "     * @notice Intializer",
            "     * @param _controller the address of the controller",
            "     * @param _ibt the address of the corresponding IBT",
            "     * @param _periodDuration the length of the period (in seconds)",
            "     * @param _platformName the name of the platform and tools",
            "     * @param _admin the address of the ACR admin",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Intializer\n     * @param _controller the address of the controller\n     * @param _ibt the address of the corresponding IBT\n     * @param _periodDuration the length of the period (in seconds)\n     * @param _platformName the name of the platform and tools\n     * @param _admin the address of the ACR admin\n     */\n",
        "@notice": "Intializer",
        "@param1": "_controller the address of the controller",
        "@param2": "_ibt the address of the corresponding IBT",
        "@param3": "_periodDuration the length of the period (in seconds)",
        "@param4": "_platformName the name of the platform and tools",
        "@param5": "_admin the address of the ACR admin",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 1
    },
    {
        "name": "updateUserState",
        "visibility": "public",
        "args": [
            {
                "name": "_user",
                "type": "address"
            }
        ],
        "func": "function updateUserState(address _user) public {\n        uint256 currentPeriodIndex = getCurrentPeriodIndex();\n        uint256 lastPeriodClaimedOfUser = lastPeriodClaimed[_user];\n        if (lastPeriodClaimedOfUser < currentPeriodIndex && lastPeriodClaimedOfUser != 0) {\n            pt.mint(_user, _preparePTClaim(_user));\n        }\n        if (lastPeriodClaimedOfUser != currentPeriodIndex) lastPeriodClaimed[_user] = currentPeriodIndex;\n    }",
        "comments": [
            "/**",
            "     * @notice Update the state of the user and mint claimable pt",
            "     * @param _user user adress",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Update the state of the user and mint claimable pt\n     * @param _user user adress\n     */\n",
        "@notice": "Update the state of the user and mint claimable pt",
        "@param1": "_user user adress",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "deposit",
        "visibility": "external",
        "args": [
            {
                "name": "_user",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function deposit(address _user, uint256 _amount) external virtual periodsActive depositsEnabled onlyController {\n        require((_amount > 0) && (_amount <= ibt.balanceOf(_user)), \"FutureVault: ERR_AMOUNT\");\n        _deposit(_user, _amount);\n        emit FundsDeposited(_user, _amount);\n    }",
        "comments": [
            "/**",
            "     * @notice Deposit funds into ongoing period",
            "     * @param _user user adress",
            "     * @param _amount amount of funds to unlock",
            "     * @dev part of the amount deposited will be used to buy back the yield already generated proportionally to the amount deposited",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Deposit funds into ongoing period\n     * @param _user user adress\n     * @param _amount amount of funds to unlock\n     * @dev part of the amount deposited will be used to buy back the yield already generated proportionally to the amount deposited\n     */\n",
        "@notice": "Deposit funds into ongoing period",
        "@param1": "_user user adress",
        "@param2": "_amount amount of funds to unlock",
        "@dev": "part of the amount deposited will be used to buy back the yield already generated proportionally to the amount deposited",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdraw",
        "visibility": "external",
        "args": [
            {
                "name": "_user",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function withdraw(address _user, uint256 _amount) external virtual nonReentrant withdrawalsEnabled onlyController {\n        require((_amount > 0) && (_amount <= pt.balanceOf(_user)), \"FutureVault: ERR_AMOUNT\");\n        require(_amount <= fyts[getCurrentPeriodIndex()].balanceOf(_user), \"FutureVault: ERR_FYT_AMOUNT\");\n        _withdraw(_user, _amount);\n\n        uint256 FYTsToBurn;\n        uint256 currentPeriodIndex = getCurrentPeriodIndex();\n        uint256 FYTSMinted = fyts[currentPeriodIndex].recordedBalanceOf(_user);\n        if (_amount > FYTSMinted) {\n            FYTsToBurn = FYTSMinted;\n            uint256 ClaimableFYTsToBurn = _amount - FYTsToBurn;\n            claimableFYTByUser[_user] = claimableFYTByUser[_user].sub(ClaimableFYTsToBurn, \"FutureVault: ERR_AMOUNT\");\n            collectedFYTSByPeriod[currentPeriodIndex] = collectedFYTSByPeriod[currentPeriodIndex].add(ClaimableFYTsToBurn);\n        } else {\n            FYTsToBurn = _amount;\n        }\n\n        if (FYTsToBurn > 0) fyts[currentPeriodIndex].burnFrom(_user, FYTsToBurn);\n\n        emit FundsWithdrawn(_user, _amount);\n    }",
        "comments": [
            "/**",
            "     * @notice Sender unlocks the locked funds corresponding to their pt holding",
            "     * @param _user user adress",
            "     * @param _amount amount of funds to unlock",
            "     * @dev will require a transfer of FYT of the ongoing period corresponding to the funds unlocked",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Sender unlocks the locked funds corresponding to their pt holding\n     * @param _user user adress\n     * @param _amount amount of funds to unlock\n     * @dev will require a transfer of FYT of the ongoing period corresponding to the funds unlocked\n     */\n",
        "@notice": "Sender unlocks the locked funds corresponding to their pt holding",
        "@param1": "_user user adress",
        "@param2": "_amount amount of funds to unlock",
        "@dev": "will require a transfer of FYT of the ongoing period corresponding to the funds unlocked",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUserEarlyUnlockablePremium",
        "visibility": "public",
        "args": [
            {
                "name": "_user",
                "type": "address"
            }
        ],
        "func": "function getUserEarlyUnlockablePremium(address _user)\n        public\n        view\n        returns (uint256 premiumLocked, uint256 amountRequired)\n    {\n        premiumLocked = premiumToBeRedeemed[_user];\n        amountRequired = FYTsOfUserPremium[_user];\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the amount (in underlying) of premium redeemable with the corresponding amount of fyt/pt to be burned",
            "     * @param _user user adress",
            "     * @return premiumLocked the premium amount unlockage at this period (in underlying), amountRequired the amount of pt/fyt required for that operation",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the amount (in underlying) of premium redeemable with the corresponding amount of fyt/pt to be burned\n     * @param _user user adress\n     * @return premiumLocked the premium amount unlockage at this period (in underlying), amountRequired the amount of pt/fyt required for that operation\n     */\n",
        "@notice": "Getter for the amount (in underlying) of premium redeemable with the corresponding amount of fyt/pt to be burned",
        "@param1": "_user user adress",
        "@return1": "premiumLocked the premium amount unlockage at this period (in underlying), amountRequired the amount of pt/fyt required for that operation",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "createFYTDelegationTo",
        "visibility": "public",
        "args": [
            {
                "name": "_delegator",
                "type": "address"
            },
            {
                "name": "_receiver",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function createFYTDelegationTo(\n        address _delegator,\n        address _receiver,\n        uint256 _amount\n    ) public nonReentrant periodsActive {\n        require(hasRole(CONTROLLER_ROLE, msg.sender), \"ERR_CALLER\");\n        updateUserState(_delegator);\n        updateUserState(_receiver);\n        uint256 totalDelegated = getTotalDelegated(_delegator);\n        uint256 numberOfDelegations = delegationsByDelegator[_delegator].length;\n        require(_amount > 0 && _amount <= pt.balanceOf(_delegator).sub(totalDelegated), \"FutureVault: ERR_AMOUNT\");\n\n        bool delegated;\n        for (uint256 i = 0; i < numberOfDelegations; i++) {\n            if (delegationsByDelegator[_delegator][i].receiver == _receiver) {\n                delegationsByDelegator[_delegator][i].delegatedAmount = delegationsByDelegator[_delegator][i]\n                    .delegatedAmount\n                    .add(_amount);\n                delegated = true;\n                break;\n            }\n        }\n        if (!delegated) {\n            delegationsByDelegator[_delegator].push(Delegation({ receiver: _receiver, delegatedAmount: _amount }));\n        }\n        totalDelegationsReceived[_receiver] = totalDelegationsReceived[_receiver].add(_amount);\n        emit DelegationCreated(_delegator, _receiver, _amount);\n    }",
        "comments": [
            "/**",
            "     * @notice Create a delegation from one address to another",
            "     * @param _delegator the address delegating its future FYTs",
            "     * @param _receiver the address receiving the future FYTs",
            "     * @param _amount the of future FYTs to delegate",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Create a delegation from one address to another\n     * @param _delegator the address delegating its future FYTs\n     * @param _receiver the address receiving the future FYTs\n     * @param _amount the of future FYTs to delegate\n     */\n",
        "@notice": "Create a delegation from one address to another",
        "@param1": "_delegator the address delegating its future FYTs",
        "@param2": "_receiver the address receiving the future FYTs",
        "@param3": "_amount the of future FYTs to delegate",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "withdrawFYTDelegationFrom",
        "visibility": "public",
        "args": [
            {
                "name": "_delegator",
                "type": "address"
            },
            {
                "name": "_receiver",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function withdrawFYTDelegationFrom(\n        address _delegator,\n        address _receiver,\n        uint256 _amount\n    ) public {\n        require(hasRole(CONTROLLER_ROLE, msg.sender), \"ERR_CALLER\");\n        updateUserState(_delegator);\n        updateUserState(_receiver);\n\n        uint256 numberOfDelegations = delegationsByDelegator[_delegator].length;\n        bool removed;\n        for (uint256 i = 0; i < numberOfDelegations; i++) {\n            if (delegationsByDelegator[_delegator][i].receiver == _receiver) {\n                delegationsByDelegator[_delegator][i].delegatedAmount = delegationsByDelegator[_delegator][i]\n                    .delegatedAmount\n                    .sub(_amount, \"ERR_AMOUNT\");\n                removed = true;\n                break;\n            }\n        }\n        require(_amount > 0 && removed, \"FutureVault: ERR_AMOUNT\");\n        totalDelegationsReceived[_receiver] = totalDelegationsReceived[_receiver].sub(_amount);\n        emit DelegationRemoved(_delegator, _receiver, _amount);\n    }",
        "comments": [
            "/**",
            "     * @notice Remove a delegation from one address to another",
            "     * @param _delegator the address delegating its future FYTs",
            "     * @param _receiver the address receiving the future FYTs",
            "     * @param _amount the of future FYTs to remove from the delegation",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Remove a delegation from one address to another\n     * @param _delegator the address delegating its future FYTs\n     * @param _receiver the address receiving the future FYTs\n     * @param _amount the of future FYTs to remove from the delegation\n     */\n",
        "@notice": "Remove a delegation from one address to another",
        "@param1": "_delegator the address delegating its future FYTs",
        "@param2": "_receiver the address receiving the future FYTs",
        "@param3": "_amount the of future FYTs to remove from the delegation",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getTotalDelegated",
        "visibility": "public",
        "args": [
            {
                "name": "_delegator",
                "type": "address"
            }
        ],
        "func": "function getTotalDelegated(address _delegator) public view returns (uint256 totalDelegated) {\n        uint256 numberOfDelegations = delegationsByDelegator[_delegator].length;\n        for (uint256 i = 0; i < numberOfDelegations; i++) {\n            totalDelegated = totalDelegated.add(delegationsByDelegator[_delegator][i].delegatedAmount);\n        }\n    }",
        "comments": [
            "/**",
            "     * @notice Getter the total number of FYTs on address is delegating",
            "     * @param _delegator the delegating address",
            "     * @return totalDelegated the number of FYTs delegated",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter the total number of FYTs on address is delegating\n     * @param _delegator the delegating address\n     * @return totalDelegated the number of FYTs delegated\n     */\n",
        "@notice": "Getter the total number of FYTs on address is delegating",
        "@param1": "_delegator the delegating address",
        "@return1": "totalDelegated the number of FYTs delegated",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "claimFYT",
        "visibility": "external",
        "args": [
            {
                "name": "_user",
                "type": "address"
            },
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function claimFYT(address _user, uint256 _amount) external virtual nonReentrant {\n        require(msg.sender == address(fyts[getCurrentPeriodIndex()]), \"FutureVault: ERR_CALLER\");\n        updateUserState(_user);\n        _claimFYT(_user, _amount);\n    }",
        "comments": [
            "/**",
            "     * @notice Send the user their owed FYT (and pt if there are some claimable)",
            "     * @param _user address of the user to send the FYT to",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Send the user their owed FYT (and pt if there are some claimable)\n     * @param _user address of the user to send the FYT to\n     */\n",
        "@notice": "Send the user their owed FYT (and pt if there are some claimable)",
        "@param1": "_user address of the user to send the FYT to",
        "notice_missing": 0,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "exitTerminatedFuture",
        "visibility": "external",
        "args": [
            {
                "name": "_user",
                "type": "address"
            }
        ],
        "func": "function exitTerminatedFuture(address _user) external nonReentrant onlyController {\n        require(terminated, \"FutureVault: ERR_NOT_TERMINATED\");\n        uint256 amount = pt.balanceOf(_user);\n        require(amount > 0, \"FutureVault: ERR_PT_BALANCE\");\n        _withdraw(_user, amount);\n        emit FundsWithdrawn(_user, amount);\n    }",
        "comments": [
            "/**",
            "     * @notice Exit a terminated pool",
            "     * @param _user the user to exit from the pool",
            "     * @dev only pt are required as there  aren't any new FYTs",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Exit a terminated pool\n     * @param _user the user to exit from the pool\n     * @dev only pt are required as there  aren't any new FYTs\n     */\n",
        "@notice": "Exit a terminated pool",
        "@param1": "_user the user to exit from the pool",
        "@dev": "only pt are required as there aren't any new FYTs",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getClaimablePT",
        "visibility": "public",
        "args": [
            {
                "name": "_user",
                "type": "address"
            }
        ],
        "func": "function getClaimablePT(address _user) public view virtual returns (uint256) {\n        uint256 currentPeriodIndex = getCurrentPeriodIndex();\n\n        if (lastPeriodClaimed[_user] < currentPeriodIndex) {\n            uint256 recordedBalance = pt.recordedBalanceOf(_user);\n            uint256 mintablePT = (recordedBalance).add(premiumToBeRedeemed[_user]); // add premium\n            mintablePT = mintablePT.add(totalDelegationsReceived[_user]).sub(getTotalDelegated(_user)); // add delegated FYTs\n            uint256 userStackingGrowthFactor = yieldOfPeriod[lastPeriodClaimed[_user]];\n            if (userStackingGrowthFactor > 0) {\n                mintablePT = mintablePT.add(claimableFYTByUser[_user].mul(userStackingGrowthFactor) / IBT_UNIT); // add reinvested FYTs\n            }\n            for (uint256 i = lastPeriodClaimed[_user] + 1; i < currentPeriodIndex; i++) {\n                mintablePT = mintablePT.add(yieldOfPeriod[i].mul(mintablePT) / IBT_UNIT);\n            }\n            return mintablePT.add(getTotalDelegated(_user)).sub(recordedBalance).sub(totalDelegationsReceived[_user]);\n        } else {\n            return 0;\n        }\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the amount of pt that the user can claim",
            "     * @param _user user to check the check the claimable pt of",
            "     * @return the amount of pt claimable by the user",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the amount of pt that the user can claim\n     * @param _user user to check the check the claimable pt of\n     * @return the amount of pt claimable by the user\n     */\n",
        "@notice": "Getter for the amount of pt that the user can claim",
        "@param1": "_user user to check the check the claimable pt of",
        "@return1": "the amount of pt claimable by the user",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUnlockableFunds",
        "visibility": "public",
        "args": [
            {
                "name": "_user",
                "type": "address"
            }
        ],
        "func": "function getUnlockableFunds(address _user) public view virtual returns (uint256) {\n        return pt.balanceOf(_user);\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for user IBT amount that is unlockable",
            "     * @param _user the user to unlock the IBT from",
            "     * @return the amount of IBT the user can unlock",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for user IBT amount that is unlockable\n     * @param _user the user to unlock the IBT from\n     * @return the amount of IBT the user can unlock\n     */\n",
        "@notice": "Getter for user IBT amount that is unlockable",
        "@param1": "_user the user to unlock the IBT from",
        "@return1": "the amount of IBT the user can unlock",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getClaimableFYTForPeriod",
        "visibility": "external",
        "args": [
            {
                "name": "_user",
                "type": "address"
            },
            {
                "name": "_periodIndex",
                "type": "uint256"
            }
        ],
        "func": "function getClaimableFYTForPeriod(address _user, uint256 _periodIndex) external view virtual returns (uint256) {\n        uint256 currentPeriodIndex = getCurrentPeriodIndex();\n\n        if (_periodIndex != currentPeriodIndex || _user == address(this)) {\n            return 0;\n        } else if (_periodIndex == currentPeriodIndex && lastPeriodClaimed[_user] == currentPeriodIndex) {\n            return claimableFYTByUser[_user];\n        } else {\n            return pt.balanceOf(_user).add(totalDelegationsReceived[_user]).sub(getTotalDelegated(_user));\n        }\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the amount of FYT that the user can claim for a certain period",
            "     * @param _user the user to check the claimable FYT of",
            "     * @param _periodIndex period ID to check the claimable FYT of",
            "     * @return the amount of FYT claimable by the user for this period ID",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the amount of FYT that the user can claim for a certain period\n     * @param _user the user to check the claimable FYT of\n     * @param _periodIndex period ID to check the claimable FYT of\n     * @return the amount of FYT claimable by the user for this period ID\n     */\n",
        "@notice": "Getter for the amount of FYT that the user can claim for a certain period",
        "@param1": "_user the user to check the claimable FYT of",
        "@param2": "_periodIndex period ID to check the claimable FYT of",
        "@return1": "the amount of FYT claimable by the user for this period ID",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPremiumPerUnderlyingDeposited",
        "visibility": "public",
        "args": [
            {
                "name": "_amount",
                "type": "uint256"
            }
        ],
        "func": "function getPremiumPerUnderlyingDeposited(uint256 _amount) public view virtual returns (uint256) {\n        if (totalUnderlyingDeposited == 0) {\n            return 0;\n        }\n        uint256 yieldPerFYT = getUnrealisedYieldPerPT();\n        uint256 premiumToRefundInIBT = _amount.mul(yieldPerFYT).mul(performanceFeeFactor) / IBT_UNITS_MULTIPLIED_VALUE;\n        return convertIBTToUnderlying(premiumToRefundInIBT);\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for premium in underlying tokens that can be redeemed at the end of the period of the deposit",
            "     * @param _amount the amount to of underlying deposited",
            "     * @return the number of underlying of the ibt deposited that will be redeemable",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for premium in underlying tokens that can be redeemed at the end of the period of the deposit\n     * @param _amount the amount to of underlying deposited\n     * @return the number of underlying of the ibt deposited that will be redeemable\n     */\n",
        "@notice": "Getter for premium in underlying tokens that can be redeemed at the end of the period of the deposit",
        "@param1": "_amount the amount to of underlying deposited",
        "@return1": "the number of underlying of the ibt deposited that will be redeemable",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getUnlockablePremium",
        "visibility": "public",
        "args": [
            {
                "name": "_user",
                "type": "address"
            }
        ],
        "func": "function getUnlockablePremium(address _user) public view returns (uint256) {\n        if (lastPeriodClaimed[_user] != getCurrentPeriodIndex()) {\n            return 0;\n        } else {\n            return premiumToBeRedeemed[_user];\n        }\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the value (in underlying) of the unlockable premium",
            "     * @param _user user adress",
            "     * @return the unlockable premium",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the value (in underlying) of the unlockable premium\n     * @param _user user adress\n     * @return the unlockable premium\n     */\n",
        "@notice": "Getter for the value (in underlying) of the unlockable premium",
        "@param1": "_user user adress",
        "@return1": "the unlockable premium",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getYieldOfPeriod",
        "visibility": "external",
        "args": [
            {
                "name": "_periodID",
                "type": "uint256"
            }
        ],
        "func": "function getYieldOfPeriod(uint256 _periodID) external view returns (uint256) {\n        require(getCurrentPeriodIndex() > _periodID, \"FutureVault: Invalid period ID\");\n        return yieldOfPeriod[_periodID];\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the total yield generated during one period",
            "     * @param _periodID the period id",
            "     * @return the total yield in underlying value",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the total yield generated during one period\n     * @param _periodID the period id\n     * @return the total yield in underlying value\n     */\n",
        "@notice": "Getter for the total yield generated during one period",
        "@param1": "_periodID the period id",
        "@return1": "the total yield in underlying value",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getNextPeriodIndex",
        "visibility": "public",
        "args": [],
        "func": "function getNextPeriodIndex() public view virtual returns (uint256) {\n        return fyts.length;\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for next period index",
            "     * @return next period index",
            "     * @dev index starts at 1",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for next period index\n     * @return next period index\n     * @dev index starts at 1\n     */\n",
        "@notice": "Getter for next period index",
        "@return1": "next period index",
        "@dev": "index starts at 1",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getCurrentPeriodIndex",
        "visibility": "public",
        "args": [],
        "func": "function getCurrentPeriodIndex() public view virtual returns (uint256) {\n        return fyts.length - 1;\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for current period index",
            "     * @return current period index",
            "     * @dev index starts at 1",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for current period index\n     * @return current period index\n     * @dev index starts at 1\n     */\n",
        "@notice": "Getter for current period index",
        "@return1": "current period index",
        "@dev": "index starts at 1",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getTotalUnderlyingDeposited",
        "visibility": "external",
        "args": [],
        "func": "function getTotalUnderlyingDeposited() external view returns (uint256) {\n        return totalUnderlyingDeposited;\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for total underlying deposited in the vault",
            "     * @return the total amount of funds deposited in the vault (in underlying)",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for total underlying deposited in the vault\n     * @return the total amount of funds deposited in the vault (in underlying)\n     */\n",
        "@notice": "Getter for total underlying deposited in the vault",
        "@return1": "the total amount of funds deposited in the vault (in underlying)",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getControllerAddress",
        "visibility": "public",
        "args": [],
        "func": "function getControllerAddress() public view returns (address) {\n        return address(controller);\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for controller address",
            "     * @return the controller address",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for controller address\n     * @return the controller address\n     */\n",
        "@notice": "Getter for controller address",
        "@return1": "the controller address",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getFutureWalletAddress",
        "visibility": "public",
        "args": [],
        "func": "function getFutureWalletAddress() public view returns (address) {\n        return address(futureWallet);\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for futureWallet address",
            "     * @return futureWallet address",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for futureWallet address\n     * @return futureWallet address\n     */\n",
        "@notice": "Getter for futureWallet address",
        "@return1": "futureWallet address",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getIBTAddress",
        "visibility": "public",
        "args": [],
        "func": "function getIBTAddress() public view returns (address) {\n        return address(ibt);\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the IBT address",
            "     * @return IBT address",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the IBT address\n     * @return IBT address\n     */\n",
        "@notice": "Getter for the IBT address",
        "@return1": "IBT address",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPTAddress",
        "visibility": "public",
        "args": [],
        "func": "function getPTAddress() public view returns (address) {\n        return address(pt);\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for future pt address",
            "     * @return pt address",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for future pt address\n     * @return pt address\n     */\n",
        "@notice": "Getter for future pt address",
        "@return1": "pt address",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getFYTofPeriod",
        "visibility": "public",
        "args": [
            {
                "name": "_periodIndex",
                "type": "uint256"
            }
        ],
        "func": "function getFYTofPeriod(uint256 _periodIndex) public view returns (address) {\n        return address(fyts[_periodIndex]);\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for FYT address of a particular period",
            "     * @param _periodIndex period index",
            "     * @return FYT address",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for FYT address of a particular period\n     * @param _periodIndex period index\n     * @return FYT address\n     */\n",
        "@notice": "Getter for FYT address of a particular period",
        "@param1": "_periodIndex period index",
        "@return1": "FYT address",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "isTerminated",
        "visibility": "public",
        "args": [],
        "func": "function isTerminated() public view returns (bool) {\n        return terminated;\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the terminated state of the future",
            "     * @return true if this vault is terminated",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the terminated state of the future\n     * @return true if this vault is terminated\n     */\n",
        "@notice": "Getter for the terminated state of the future",
        "@return1": "true if this vault is terminated",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getPerformanceFeeFactor",
        "visibility": "external",
        "args": [],
        "func": "function getPerformanceFeeFactor() external view returns (uint256) {\n        return performanceFeeFactor;\n    }",
        "comments": [
            "/**",
            "     * @notice Getter for the performance fee factor of the current period",
            "     * @return the performance fee factor of the futureVault",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Getter for the performance fee factor of the current period\n     * @return the performance fee factor of the futureVault\n     */\n",
        "@notice": "Getter for the performance fee factor of the current period",
        "@return1": "the performance fee factor of the futureVault",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setFutureWallet",
        "visibility": "external",
        "args": [
            {
                "name": "_futureWallet",
                "type": "IFutureWallet"
            }
        ],
        "func": "function setFutureWallet(IFutureWallet _futureWallet) external onlyAdmin {\n        futureWallet = _futureWallet;\n        emit FutureWalletSet(_futureWallet);\n    }",
        "comments": [
            "/**",
            "     * @notice Set futureWallet address",
            "     * @param _futureWallet the address of the new futureWallet",
            "     * @dev needs corresponding permissions for sender",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Set futureWallet address\n     * @param _futureWallet the address of the new futureWallet\n     * @dev needs corresponding permissions for sender\n     */\n",
        "@notice": "Set futureWallet address",
        "@param1": "_futureWallet the address of the new futureWallet",
        "@dev": "needs corresponding permissions for sender",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "pauseLiquidityTransfers",
        "visibility": "public",
        "args": [],
        "func": "function pauseLiquidityTransfers() public {\n        require(hasRole(ADMIN_ROLE, msg.sender), \"ERR_CALLER\");\n        pt.pause();\n        emit LiquidityTransfersPaused();\n    }",
        "comments": [
            "/**",
            "     * @notice Pause liquidity transfers",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Pause liquidity transfers\n     */\n",
        "@notice": "Pause liquidity transfers",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "resumeLiquidityTransfers",
        "visibility": "public",
        "args": [],
        "func": "function resumeLiquidityTransfers() public {\n        require(hasRole(ADMIN_ROLE, msg.sender), \"ERR_CALLER\");\n        pt.unpause();\n        emit LiquidityTransfersResumed();\n    }",
        "comments": [
            "/**",
            "     * @notice Resume liquidity transfers",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Resume liquidity transfers\n     */\n",
        "@notice": "Resume liquidity transfers",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "foo",
        "visibility": "public",
        "args": [],
        "func": "function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }",
        "comments": [],
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 1,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "hasRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }",
        "comments": [
            "/**",
            "     * @dev Returns `true` if `account` has been granted `role`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n",
        "@dev": "Returns `true` if `account` has been granted `role`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRoleMemberCount",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            }
        ],
        "func": "function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the number of accounts that have `role`. Can be used",
            "     * together with {getRoleMember} to enumerate all bearers of a role.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n",
        "@dev": "Returns the number of accounts that have `role`. Can be used * together with {getRoleMember} to enumerate all bearers of a role.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRoleMember",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "index",
                "type": "uint256"
            }
        ],
        "func": "function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }",
        "comments": [
            "/**",
            "     * @dev Returns one of the accounts that have `role`. `index` must be a",
            "     * value between 0 and {getRoleMemberCount}, non-inclusive.",
            "     *",
            "     * Role bearers are not sorted in any particular way, and their ordering may",
            "     * change at any point.",
            "     *",
            "     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure",
            "     * you perform all queries on the same block. See the following",
            "     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]",
            "     * for more information.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n",
        "@dev": "Returns one of the accounts that have `role`. `index` must be a * value between 0 and {getRoleMemberCount}, non-inclusive. * * Role bearers are not sorted in any particular way, and their ordering may * change at any point. * * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure * you perform all queries on the same block. See the following * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] * for more information.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "getRoleAdmin",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            }
        ],
        "func": "function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }",
        "comments": [
            "/**",
            "     * @dev Returns the admin role that controls `role`. See {grantRole} and",
            "     * {revokeRole}.",
            "     *",
            "     * To change a role's admin, use {_setRoleAdmin}.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n",
        "@dev": "Returns the admin role that controls `role`. See {grantRole} and * {revokeRole}. * * To change a role's admin, use {_setRoleAdmin}.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 1,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "grantRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }",
        "comments": [
            "/**",
            "     * @dev Grants `role` to `account`.",
            "     *",
            "     * If `account` had not been already granted `role`, emits a {RoleGranted}",
            "     * event.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - the caller must have ``role``'s admin role.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n",
        "@dev": "Grants `role` to `account`. * * If `account` had not been already granted `role`, emits a {RoleGranted} * event. * * Requirements: * * - the caller must have ``role``'s admin role.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "revokeRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }",
        "comments": [
            "/**",
            "     * @dev Revokes `role` from `account`.",
            "     *",
            "     * If `account` had been granted `role`, emits a {RoleRevoked} event.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - the caller must have ``role``'s admin role.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n",
        "@dev": "Revokes `role` from `account`. * * If `account` had been granted `role`, emits a {RoleRevoked} event. * * Requirements: * * - the caller must have ``role``'s admin role.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "renounceRole",
        "visibility": "public",
        "args": [
            {
                "name": "role",
                "type": "bytes32"
            },
            {
                "name": "account",
                "type": "address"
            }
        ],
        "func": "function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }",
        "comments": [
            "/**",
            "     * @dev Revokes `role` from the calling account.",
            "     *",
            "     * Roles are often managed via {grantRole} and {revokeRole}: this function's",
            "     * purpose is to provide a mechanism for accounts to lose their privileges",
            "     * if they are compromised (such as when a trusted device is misplaced).",
            "     *",
            "     * If the calling account had been granted `role`, emits a {RoleRevoked}",
            "     * event.",
            "     *",
            "     * Requirements:",
            "     *",
            "     * - the caller must be `account`.",
            "     */",
            ""
        ],
        "comt": "/**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n",
        "@dev": "Revokes `role` from the calling account. * * Roles are often managed via {grantRole} and {revokeRole}: this function's * purpose is to provide a mechanism for accounts to lose their privileges * if they are compromised (such as when a trusted device is misplaced). * * If the calling account had been granted `role`, emits a {RoleRevoked} * event. * * Requirements: * * - the caller must be `account`.",
        "notice_missing": 1,
        "param_missing": 1,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 1,
        "inconsistent_others": 0,
        "low_quality": 0
    },
    {
        "name": "setRegistry",
        "visibility": "external",
        "args": [
            {
                "name": "_registry",
                "type": "IRegistry"
            }
        ],
        "func": "function setRegistry(IRegistry _registry) external onlyAdmin {\n        registry = _registry;\n        emit RegistryChanged(_registry);\n    }",
        "comments": [
            "/**",
            "     * @notice Setter for the registry address",
            "     * @param _registry the address of the new registry",
            "     */",
            ""
        ],
        "comt": "/**\n     * @notice Setter for the registry address\n     * @param _registry the address of the new registry\n     */\n",
        "@notice": "Setter for the registry address",
        "@param1": "_registry the address of the new registry",
        "notice_missing": 0,
        "param_missing": 0,
        "return_missing": 0,
        "no_comment": 0,
        "inconsistent_dxn": 0,
        "inconsistent_others": 0,
        "low_quality": 0
    }
]